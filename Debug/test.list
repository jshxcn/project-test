
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c808  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003708  0801c9b8  0801c9b8  0002c9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000003ae  080200c0  080200c0  000300c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 IntFlashSection 00013ec0  08020470  08020470  00030470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00009800  08034330  08034330  00044330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000005c  0803db30  0803db30  0004db30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0803db8c  0803db8c  00050150  2**0
                  CONTENTS
  8 .ARM          00000008  0803db8c  0803db8c  0004db8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0803db94  0803db94  00050150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0803db94  0803db94  0004db94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0803dba8  0803dba8  0004dba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000150  20000000  0803dbb0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00006310  20000150  0803dd00  00050150  2**2
                  ALLOC
 14 ._user_heap_stack 00002000  20006460  0803dd00  00056460  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00050150  2**0
                  CONTENTS, READONLY
 16 .debug_info   000760ea  00000000  00000000  00050180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000db1c  00000000  00000000  000c626a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00003318  00000000  00000000  000d3d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00002f28  00000000  00000000  000d70a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0000d88b  00000000  00000000  000d9fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0002d910  00000000  00000000  000e7853  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0010243a  00000000  00000000  00115163  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      000000fa  00000000  00000000  0021759d  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000e04c  00000000  00000000  00217698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801c9a0 	.word	0x0801c9a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0801c9a0 	.word	0x0801c9a0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 fe0a 	bl	80021ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f826 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
    // LCD_init(); must be inserted before MX_TouchGFX_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fa9c 	bl	8000ad8 <MX_GPIO_Init>
  MX_FMC_Init();
 80005a0:	f000 f9e8 	bl	8000974 <MX_FMC_Init>
  MX_CRC_Init();
 80005a4:	f000 f8ac 	bl	8000700 <MX_CRC_Init>
  MX_LTDC_Init();
 80005a8:	f000 f934 	bl	8000814 <MX_LTDC_Init>
  MX_DMA2D_Init();
 80005ac:	f000 f8bc 	bl	8000728 <MX_DMA2D_Init>
  MX_I2C1_Init();
 80005b0:	f000 f8ec 	bl	800078c <MX_I2C1_Init>
  MX_USART2_Init();
 80005b4:	f000 f9b0 	bl	8000918 <MX_USART2_Init>
  LCD_init();
 80005b8:	f000 fbb8 	bl	8000d2c <LCD_init>
  MX_TouchGFX_Init();
 80005bc:	f00a fa7e 	bl	800aabc <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f006 fef0 	bl	80073a4 <osKernelInitialize>
#endif
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <main+0x4c>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <main+0x50>)
 80005ca:	f006 ff53 	bl	8007474 <osThreadNew>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <main+0x54>)
 80005d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f006 ff1a 	bl	800740c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x48>
 80005da:	bf00      	nop
 80005dc:	0801cf28 	.word	0x0801cf28
 80005e0:	0800aac9 	.word	0x0800aac9
 80005e4:	200062c4 	.word	0x200062c4

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b0a0      	sub	sp, #128	; 0x80
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f01b fa55 	bl	801baa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2230      	movs	r2, #48	; 0x30
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f01b fa46 	bl	801baa6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <SystemClock_Config+0x110>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a35      	ldr	r2, [pc, #212]	; (80006f8 <SystemClock_Config+0x110>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40
 800062a:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <SystemClock_Config+0x110>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b30      	ldr	r3, [pc, #192]	; (80006fc <SystemClock_Config+0x114>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a2f      	ldr	r2, [pc, #188]	; (80006fc <SystemClock_Config+0x114>)
 8000640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <SystemClock_Config+0x114>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000664:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000666:	2319      	movs	r3, #25
 8000668:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 800066a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800066e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800067c:	4618      	mov	r0, r3
 800067e:	f004 fda3 	bl	80051c8 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000688:	f000 fd32 	bl	80010f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800068c:	f004 fd4c 	bl	8005128 <HAL_PWREx_EnableOverDrive>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000696:	f000 fd2b 	bl	80010f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006b6:	2105      	movs	r1, #5
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 fff5 	bl	80056a8 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80006c4:	f000 fd14 	bl	80010f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80006c8:	2308      	movs	r3, #8
 80006ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80006cc:	23c0      	movs	r3, #192	; 0xc0
 80006ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4; //5;  //12MHz
 80006d0:	2304      	movs	r3, #4
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80006d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 f9e0 	bl	8005aa4 <HAL_RCCEx_PeriphCLKConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x106>
  {
    Error_Handler();
 80006ea:	f000 fd01 	bl	80010f0 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3780      	adds	r7, #128	; 0x80
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_CRC_Init+0x20>)
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <MX_CRC_Init+0x24>)
 8000708:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_CRC_Init+0x20>)
 800070c:	f001 fec4 	bl	8002498 <HAL_CRC_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000716:	f000 fceb 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20006214 	.word	0x20006214
 8000724:	40023000 	.word	0x40023000

08000728 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_DMA2D_Init+0x5c>)
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <MX_DMA2D_Init+0x60>)
 8000730:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_DMA2D_Init+0x5c>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_DMA2D_Init+0x5c>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_DMA2D_Init+0x5c>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_DMA2D_Init+0x5c>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_DMA2D_Init+0x5c>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_DMA2D_Init+0x5c>)
 8000752:	2200      	movs	r2, #0
 8000754:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_DMA2D_Init+0x5c>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <MX_DMA2D_Init+0x5c>)
 800075e:	f001 fed9 	bl	8002514 <HAL_DMA2D_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000768:	f000 fcc2 	bl	80010f0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800076c:	2101      	movs	r1, #1
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_DMA2D_Init+0x5c>)
 8000770:	f002 f99a 	bl	8002aa8 <HAL_DMA2D_ConfigLayer>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800077a:	f000 fcb9 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20006358 	.word	0x20006358
 8000788:	4002b000 	.word	0x4002b000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
  HAL_I2C_DeInit(&hi2c1);
 8000790:	481d      	ldr	r0, [pc, #116]	; (8000808 <MX_I2C1_Init+0x7c>)
 8000792:	f002 febd 	bl	8003510 <HAL_I2C_DeInit>
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_I2C1_Init+0x7c>)
 8000798:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_I2C1_Init+0x80>)
 800079a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_I2C1_Init+0x7c>)
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <MX_I2C1_Init+0x84>)
 80007a0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_I2C1_Init+0x7c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_I2C1_Init+0x7c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_I2C1_Init+0x7c>)
 80007b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_I2C1_Init+0x7c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C1_Init+0x7c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2C1_Init+0x7c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C1_Init+0x7c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ce:	480e      	ldr	r0, [pc, #56]	; (8000808 <MX_I2C1_Init+0x7c>)
 80007d0:	f002 fd66 	bl	80032a0 <HAL_I2C_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 fc89 	bl	80010f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_I2C1_Init+0x7c>)
 80007e2:	f004 f83a 	bl	800485a <HAL_I2CEx_ConfigAnalogFilter>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x64>
  {
    Error_Handler();
 80007ec:	f000 fc80 	bl	80010f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_I2C1_Init+0x7c>)
 80007f4:	f004 f86d 	bl	80048d2 <HAL_I2CEx_ConfigDigitalFilter>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x76>
  {
    Error_Handler();
 80007fe:	f000 fc77 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200061c0 	.word	0x200061c0
 800080c:	40005400 	.word	0x40005400
 8000810:	000186a0 	.word	0x000186a0

08000814 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	; 0x38
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2234      	movs	r2, #52	; 0x34
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f01b f940 	bl	801baa6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <MX_LTDC_Init+0xfc>)
 8000828:	4a3a      	ldr	r2, [pc, #232]	; (8000914 <MX_LTDC_Init+0x100>)
 800082a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800082c:	4b38      	ldr	r3, [pc, #224]	; (8000910 <MX_LTDC_Init+0xfc>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_LTDC_Init+0xfc>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000838:	4b35      	ldr	r3, [pc, #212]	; (8000910 <MX_LTDC_Init+0xfc>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <MX_LTDC_Init+0xfc>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <MX_LTDC_Init+0xfc>)
 8000846:	2203      	movs	r2, #3
 8000848:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <MX_LTDC_Init+0xfc>)
 800084c:	2203      	movs	r2, #3
 800084e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 7;
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_LTDC_Init+0xfc>)
 8000852:	2207      	movs	r2, #7
 8000854:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 7;
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <MX_LTDC_Init+0xfc>)
 8000858:	2207      	movs	r2, #7
 800085a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 487;
 800085c:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <MX_LTDC_Init+0xfc>)
 800085e:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 327;
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <MX_LTDC_Init+0xfc>)
 8000866:	f240 1247 	movw	r2, #327	; 0x147
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 491;
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <MX_LTDC_Init+0xfc>)
 800086e:	f240 12eb 	movw	r2, #491	; 0x1eb
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 331;
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_LTDC_Init+0xfc>)
 8000876:	f240 124b 	movw	r2, #331	; 0x14b
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_LTDC_Init+0xfc>)
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <MX_LTDC_Init+0xfc>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_LTDC_Init+0xfc>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000894:	481e      	ldr	r0, [pc, #120]	; (8000910 <MX_LTDC_Init+0xfc>)
 8000896:	f004 f85b 	bl	8004950 <HAL_LTDC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008a0:	f000 fc26 	bl	80010f0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80008a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008ac:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008b6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80008b8:	2301      	movs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008bc:	23ff      	movs	r3, #255	; 0xff
 80008be:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008ca:	2305      	movs	r3, #5
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80008ce:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80008d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80008da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_LTDC_Init+0xfc>)
 80008fa:	f004 f9b1 	bl	8004c60 <HAL_LTDC_ConfigLayer>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000904:	f000 fbf4 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3738      	adds	r7, #56	; 0x38
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000621c 	.word	0x2000621c
 8000914:	40016800 	.word	0x40016800

08000918 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART2_Init+0x54>)
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <MX_USART2_Init+0x58>)
 8000920:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_USART2_Init+0x54>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_9B;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USART2_Init+0x54>)
 800092c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000930:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_Init+0x54>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART2_Init+0x54>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART2_Init+0x54>)
 8000940:	2208      	movs	r2, #8
 8000942:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART2_Init+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART2_Init+0x54>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART2_Init+0x54>)
 8000952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000956:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_USART2_Init+0x54>)
 800095a:	f005 fd1d 	bl	8006398 <HAL_USART_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART2_Init+0x50>
  {
    Error_Handler();
 8000964:	f000 fbc4 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20006314 	.word	0x20006314
 8000970:	40004400 	.word	0x40004400

08000974 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 80009a0:	4b49      	ldr	r3, [pc, #292]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80009a6:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009a8:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009aa:	4a48      	ldr	r2, [pc, #288]	; (8000acc <MX_FMC_Init+0x158>)
 80009ac:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009ae:	4b46      	ldr	r3, [pc, #280]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009b4:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 80009ba:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009bc:	2208      	movs	r2, #8
 80009be:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009c0:	4b41      	ldr	r3, [pc, #260]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009c2:	2210      	movs	r2, #16
 80009c4:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80009c6:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80009cc:	4b3e      	ldr	r3, [pc, #248]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 80009d2:	4b3d      	ldr	r3, [pc, #244]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80009d8:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80009de:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e4:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80009ec:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <MX_FMC_Init+0x154>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a00:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <MX_FMC_Init+0x154>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a06:	4b30      	ldr	r3, [pc, #192]	; (8000ac8 <MX_FMC_Init+0x154>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000a10:	230f      	movs	r3, #15
 8000a12:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 7;
 8000a14:	2307      	movs	r3, #7
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000a20:	2311      	movs	r3, #17
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a24:	2300      	movs	r3, #0
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4825      	ldr	r0, [pc, #148]	; (8000ac8 <MX_FMC_Init+0x154>)
 8000a32:	f004 fb23 	bl	800507c <HAL_NOR_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_FMC_Init+0xcc>
  {
    Error_Handler( );
 8000a3c:	f000 fb58 	bl	80010f0 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a42:	4a24      	ldr	r2, [pc, #144]	; (8000ad4 <MX_FMC_Init+0x160>)
 8000a44:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a5a:	2220      	movs	r2, #32
 8000a5c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a60:	2240      	movs	r2, #64	; 0x40
 8000a62:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a66:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a6a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a78:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 4;
 8000a90:	2304      	movs	r3, #4
 8000a92:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 3;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <MX_FMC_Init+0x15c>)
 8000aaa:	f005 f9b9 	bl	8005e20 <HAL_SDRAM_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_FMC_Init+0x144>
  {
    Error_Handler( );
 8000ab4:	f000 fb1c 	bl	80010f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000ab8:	f240 5069 	movw	r0, #1385	; 0x569
 8000abc:	f000 f8d8 	bl	8000c70 <BSP_SDRAM_Initialization_sequence>
  /* USER CODE END FMC_Init 2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3738      	adds	r7, #56	; 0x38
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200062c8 	.word	0x200062c8
 8000acc:	a0000104 	.word	0xa0000104
 8000ad0:	20006398 	.word	0x20006398
 8000ad4:	a0000140 	.word	0xa0000140

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b090      	sub	sp, #64	; 0x40
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000af2:	4b5c      	ldr	r3, [pc, #368]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a5b      	ldr	r2, [pc, #364]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000af8:	f043 0310 	orr.w	r3, r3, #16
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b59      	ldr	r3, [pc, #356]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0e:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b52      	ldr	r3, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
 8000b2a:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a4d      	ldr	r2, [pc, #308]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b4b      	ldr	r3, [pc, #300]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	623b      	str	r3, [r7, #32]
 8000b40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a46      	ldr	r2, [pc, #280]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a3f      	ldr	r2, [pc, #252]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b3d      	ldr	r3, [pc, #244]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	4b39      	ldr	r3, [pc, #228]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a38      	ldr	r2, [pc, #224]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a31      	ldr	r2, [pc, #196]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a2a      	ldr	r2, [pc, #168]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000bbc:	f043 0320 	orr.w	r3, r3, #32
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0320 	and.w	r3, r3, #32
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a23      	ldr	r2, [pc, #140]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_GPIO_Init+0x18c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, FRAME_RATE_Pin|MCU_Pin|VSYNC_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 51a6 	mov.w	r1, #5312	; 0x14c0
 8000c0c:	4816      	ldr	r0, [pc, #88]	; (8000c68 <MX_GPIO_Init+0x190>)
 8000c0e:	f002 fb2d 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c18:	4814      	ldr	r0, [pc, #80]	; (8000c6c <MX_GPIO_Init+0x194>)
 8000c1a:	f002 fb27 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRAME_RATE_Pin MCU_Pin VSYNC_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|MCU_Pin|VSYNC_Pin|RENDER_TIME_Pin;
 8000c1e:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c34:	4619      	mov	r1, r3
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <MX_GPIO_Init+0x190>)
 8000c38:	f002 f864 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c3c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_GPIO_Init+0x194>)
 8000c56:	f002 f855 	bl	8002d04 <HAL_GPIO_Init>

}
 8000c5a:	bf00      	nop
 8000c5c:	3740      	adds	r7, #64	; 0x40
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40021800 	.word	0x40021800
 8000c6c:	40020400 	.word	0x40020400

08000c70 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_CommandTypeDef Command = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  __IO uint32_t tmpmrd = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	613b      	str	r3, [r7, #16]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	617b      	str	r3, [r7, #20]
  Command.AutoRefreshNumber      = 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
  Command.ModeRegisterDefinition = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4820      	ldr	r0, [pc, #128]	; (8000d28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ca6:	f005 f8ef 	bl	8005e88 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f001 fac0 	bl	8002230 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	617b      	str	r3, [r7, #20]
  Command.AutoRefreshNumber      = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  Command.ModeRegisterDefinition = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4817      	ldr	r0, [pc, #92]	; (8000d28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ccc:	f005 f8dc 	bl	8005e88 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	613b      	str	r3, [r7, #16]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	617b      	str	r3, [r7, #20]
  Command.AutoRefreshNumber      = 8;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	61bb      	str	r3, [r7, #24]
  Command.ModeRegisterDefinition = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480f      	ldr	r0, [pc, #60]	; (8000d28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cec:	f005 f8cc 	bl	8005e88 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000cf0:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000cf4:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	613b      	str	r3, [r7, #16]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	617b      	str	r3, [r7, #20]
  Command.AutoRefreshNumber      = 1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
  Command.ModeRegisterDefinition = tmpmrd;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	61fb      	str	r3, [r7, #28]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000d12:	f005 f8b9 	bl	8005e88 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount); 
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000d1a:	f005 f8e0 	bl	8005ede <HAL_SDRAM_ProgramRefreshRate>
}
 8000d1e:	bf00      	nop
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20006398 	.word	0x20006398

08000d2c <LCD_init>:


static void LCD_init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	LCD_RST_HIGH;
 8000d30:	4b7d      	ldr	r3, [pc, #500]	; (8000f28 <LCD_init+0x1fc>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a7c      	ldr	r2, [pc, #496]	; (8000f28 <LCD_init+0x1fc>)
 8000d36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d3a:	6193      	str	r3, [r2, #24]
	HAL_Delay(1); // Delay 1ms
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f001 fa77 	bl	8002230 <HAL_Delay>
	LCD_RST_LOW;
 8000d42:	4b79      	ldr	r3, [pc, #484]	; (8000f28 <LCD_init+0x1fc>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	4a78      	ldr	r2, [pc, #480]	; (8000f28 <LCD_init+0x1fc>)
 8000d48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d4c:	6193      	str	r3, [r2, #24]
	HAL_Delay(10); // Delay 10ms // This delay time is necessary
 8000d4e:	200a      	movs	r0, #10
 8000d50:	f001 fa6e 	bl	8002230 <HAL_Delay>
	LCD_RST_HIGH;
 8000d54:	4b74      	ldr	r3, [pc, #464]	; (8000f28 <LCD_init+0x1fc>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a73      	ldr	r2, [pc, #460]	; (8000f28 <LCD_init+0x1fc>)
 8000d5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d5e:	6193      	str	r3, [r2, #24]
	HAL_Delay(120); // Delay 120 ms
 8000d60:	2078      	movs	r0, #120	; 0x78
 8000d62:	f001 fa65 	bl	8002230 <HAL_Delay>
	///************* Start Initial Sequence **********//

	SPI_WriteComm(0xE0);   //P-Gamma
 8000d66:	20e0      	movs	r0, #224	; 0xe0
 8000d68:	f000 f8e0 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x00);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 f915 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x03);
 8000d72:	2003      	movs	r0, #3
 8000d74:	f000 f912 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x0C);
 8000d78:	200c      	movs	r0, #12
 8000d7a:	f000 f90f 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x09);
 8000d7e:	2009      	movs	r0, #9
 8000d80:	f000 f90c 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x17);
 8000d84:	2017      	movs	r0, #23
 8000d86:	f000 f909 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x09);
 8000d8a:	2009      	movs	r0, #9
 8000d8c:	f000 f906 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x3E);
 8000d90:	203e      	movs	r0, #62	; 0x3e
 8000d92:	f000 f903 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x89);
 8000d96:	2089      	movs	r0, #137	; 0x89
 8000d98:	f000 f900 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x49);
 8000d9c:	2049      	movs	r0, #73	; 0x49
 8000d9e:	f000 f8fd 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x08);
 8000da2:	2008      	movs	r0, #8
 8000da4:	f000 f8fa 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x0D);
 8000da8:	200d      	movs	r0, #13
 8000daa:	f000 f8f7 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x0A);
 8000dae:	200a      	movs	r0, #10
 8000db0:	f000 f8f4 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x13);
 8000db4:	2013      	movs	r0, #19
 8000db6:	f000 f8f1 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x15);
 8000dba:	2015      	movs	r0, #21
 8000dbc:	f000 f8ee 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x0F);
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	f000 f8eb 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0XE1);   //N-Gamma
 8000dc6:	20e1      	movs	r0, #225	; 0xe1
 8000dc8:	f000 f8b0 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x00);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f000 f8e5 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x11);
 8000dd2:	2011      	movs	r0, #17
 8000dd4:	f000 f8e2 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x15);
 8000dd8:	2015      	movs	r0, #21
 8000dda:	f000 f8df 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x03);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f000 f8dc 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x0F);
 8000de4:	200f      	movs	r0, #15
 8000de6:	f000 f8d9 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x05);
 8000dea:	2005      	movs	r0, #5
 8000dec:	f000 f8d6 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x2D);
 8000df0:	202d      	movs	r0, #45	; 0x2d
 8000df2:	f000 f8d3 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x34);
 8000df6:	2034      	movs	r0, #52	; 0x34
 8000df8:	f000 f8d0 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x41);
 8000dfc:	2041      	movs	r0, #65	; 0x41
 8000dfe:	f000 f8cd 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x02);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f000 f8ca 	bl	8000f9c <SPI_WriteData>

	SPI_WriteData(0x0B);
 8000e08:	200b      	movs	r0, #11
 8000e0a:	f000 f8c7 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x0A);
 8000e0e:	200a      	movs	r0, #10
 8000e10:	f000 f8c4 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x33);
 8000e14:	2033      	movs	r0, #51	; 0x33
 8000e16:	f000 f8c1 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x37);
 8000e1a:	2037      	movs	r0, #55	; 0x37
 8000e1c:	f000 f8be 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x0F);
 8000e20:	200f      	movs	r0, #15
 8000e22:	f000 f8bb 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0XC0);  //Power Control 1
 8000e26:	20c0      	movs	r0, #192	; 0xc0
 8000e28:	f000 f880 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x17);  //Vreg1out
 8000e2c:	2017      	movs	r0, #23
 8000e2e:	f000 f8b5 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x15);  //Verg2out
 8000e32:	2015      	movs	r0, #21
 8000e34:	f000 f8b2 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0xC1);  //Power Control 2
 8000e38:	20c1      	movs	r0, #193	; 0xc1
 8000e3a:	f000 f877 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x41);  //VGH,VGL
 8000e3e:	2041      	movs	r0, #65	; 0x41
 8000e40:	f000 f8ac 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0xC5);  //Power Control 3
 8000e44:	20c5      	movs	r0, #197	; 0xc5
 8000e46:	f000 f871 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x00);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f8a6 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x12);  //Vcom
 8000e50:	2012      	movs	r0, #18
 8000e52:	f000 f8a3 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x80);
 8000e56:	2080      	movs	r0, #128	; 0x80
 8000e58:	f000 f8a0 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0x36);   //Memory Access
 8000e5c:	2036      	movs	r0, #54	; 0x36
 8000e5e:	f000 f865 	bl	8000f2c <SPI_WriteComm>
	//SPI_WriteData(0x08); 		// MY(D7),MX(D6),MV(D5)=000 : rb mirror
	//SPI_WriteData(0x48); 		// MY(D7),MX(D6),MV(D5)=010 : ru normal
	//SPI_WriteData(0xC8);   	// MY(D7),MX(D6),MV(D5)=110 : lu mirror
	//SPI_WriteData(0x28);   	// MY(D7),MX(D6),MV(D5)=001 : rb normal flickering, display weird
	SPI_WriteData(0xE8);   	// MY(D7),MX(D6),MV(D5)=111 : ok but flickering
 8000e62:	20e8      	movs	r0, #232	; 0xe8
 8000e64:	f000 f89a 	bl	8000f9c <SPI_WriteData>
	//SPI_WriteData(0xA8);   	// MY(D7),MX(D6),MV(D5)=101
	//SPI_WriteData(0x88);   		// MY(D7),MX(D6),MV(D5)=100

	SPI_WriteComm(0x2A);	// Column Address Set
 8000e68:	202a      	movs	r0, #42	; 0x2a
 8000e6a:	f000 f85f 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x00);	// SC[15:8]
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f894 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x00);	// SC[7:0]
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 f891 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x01);	// EC[15:8]
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 f88e 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0xDF);	// EC[7:0]   --> 479 = 0x1DF
 8000e80:	20df      	movs	r0, #223	; 0xdf
 8000e82:	f000 f88b 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0x2B);	// Page Address Set
 8000e86:	202b      	movs	r0, #43	; 0x2b
 8000e88:	f000 f850 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x00);	// SP[15:8]
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f000 f885 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x00);	// SP[7:0]
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 f882 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x01);	// EP[15:8]
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 f87f 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x3F);	// EP[7:0]	 --> 319 = 0x13F
 8000e9e:	203f      	movs	r0, #63	; 0x3f
 8000ea0:	f000 f87c 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0x3A);   // Interface Pixel Format
 8000ea4:	203a      	movs	r0, #58	; 0x3a
 8000ea6:	f000 f841 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x66);	// 18 bits / pixel
 8000eaa:	2066      	movs	r0, #102	; 0x66
 8000eac:	f000 f876 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0XB0);   // Interface Mode Control
 8000eb0:	20b0      	movs	r0, #176	; 0xb0
 8000eb2:	f000 f83b 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x00);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f870 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0xB1);   //Frame rate
 8000ebc:	20b1      	movs	r0, #177	; 0xb1
 8000ebe:	f000 f835 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0xA0);  	//60Hz
 8000ec2:	20a0      	movs	r0, #160	; 0xa0
 8000ec4:	f000 f86a 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0xB4);   //Display Inversion Control
 8000ec8:	20b4      	movs	r0, #180	; 0xb4
 8000eca:	f000 f82f 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x02);  //2-dot
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 f864 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0XB6);  //RGB/MCU Interface Control
 8000ed4:	20b6      	movs	r0, #182	; 0xb6
 8000ed6:	f000 f829 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x20);  //MCU 02
 8000eda:	2020      	movs	r0, #32
 8000edc:	f000 f85e 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x02);  //Source,Gate scan direction
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f000 f85b 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0XE9);   // Set Image Function
 8000ee6:	20e9      	movs	r0, #233	; 0xe9
 8000ee8:	f000 f820 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0x00);  // Disable 24 bit data input
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f855 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0xF7);    // Adjust Control
 8000ef2:	20f7      	movs	r0, #247	; 0xf7
 8000ef4:	f000 f81a 	bl	8000f2c <SPI_WriteComm>
	SPI_WriteData(0xA9);
 8000ef8:	20a9      	movs	r0, #169	; 0xa9
 8000efa:	f000 f84f 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x51);
 8000efe:	2051      	movs	r0, #81	; 0x51
 8000f00:	f000 f84c 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x2C);
 8000f04:	202c      	movs	r0, #44	; 0x2c
 8000f06:	f000 f849 	bl	8000f9c <SPI_WriteData>
	SPI_WriteData(0x82);   // D7 stream, loose
 8000f0a:	2082      	movs	r0, #130	; 0x82
 8000f0c:	f000 f846 	bl	8000f9c <SPI_WriteData>

	SPI_WriteComm(0x11);   //Sleep out
 8000f10:	2011      	movs	r0, #17
 8000f12:	f000 f80b 	bl	8000f2c <SPI_WriteComm>
	HAL_Delay(120);
 8000f16:	2078      	movs	r0, #120	; 0x78
 8000f18:	f001 f98a 	bl	8002230 <HAL_Delay>
	SPI_WriteComm(0x29);  //Display on
 8000f1c:	2029      	movs	r0, #41	; 0x29
 8000f1e:	f000 f805 	bl	8000f2c <SPI_WriteComm>
	//SPI_WriteComm(0x2C);  //Memory Write
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40020400 	.word	0x40020400

08000f2c <SPI_WriteComm>:

static void SPI_WriteComm(uint8_t comm)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
	uint16_t result16[]={0};
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	81bb      	strh	r3, [r7, #12]

	result = Bit_Reversal(comm);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f865 	bl	8001010 <Bit_Reversal>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
	result16[0] = ((uint16_t)result << 1) | 0 ;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	81bb      	strh	r3, [r7, #12]
	  while (HAL_USART_GetState(&husart2) != HAL_USART_STATE_READY)
 8000f54:	bf00      	nop
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <SPI_WriteComm+0x68>)
 8000f58:	f005 fbe2 	bl	8006720 <HAL_USART_GetState>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d1f9      	bne.n	8000f56 <SPI_WriteComm+0x2a>
	  {
	  }
	  LCD_CSX_LOW;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <SPI_WriteComm+0x6c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <SPI_WriteComm+0x6c>)
 8000f68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f6c:	6193      	str	r3, [r2, #24]
	  HAL_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f001 f95e 	bl	8002230 <HAL_Delay>
	if(HAL_USART_Transmit_IT(&husart2, (uint8_t*)result16, 1)!= HAL_OK)
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <SPI_WriteComm+0x68>)
 8000f7e:	f005 fa4c 	bl	800641a <HAL_USART_Transmit_IT>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d000      	beq.n	8000f8a <SPI_WriteComm+0x5e>
	  {
		//BSP_LED_On(LED3);
		while(1)
 8000f88:	e7fe      	b.n	8000f88 <SPI_WriteComm+0x5c>
		{
		}
	  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20006314 	.word	0x20006314
 8000f98:	40020400 	.word	0x40020400

08000f9c <SPI_WriteData>:

static void SPI_WriteData(uint8_t data)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	uint16_t result16[]={0};
 8000faa:	2300      	movs	r3, #0
 8000fac:	81bb      	strh	r3, [r7, #12]

	result = Bit_Reversal(data);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f82d 	bl	8001010 <Bit_Reversal>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
	result16[0] = ((uint16_t)result << 1) | 1 ;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	81bb      	strh	r3, [r7, #12]
	  while (HAL_USART_GetState(&husart2) != HAL_USART_STATE_READY)
 8000fca:	bf00      	nop
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <SPI_WriteData+0x6c>)
 8000fce:	f005 fba7 	bl	8006720 <HAL_USART_GetState>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d1f9      	bne.n	8000fcc <SPI_WriteData+0x30>
	  {
	  }
	  LCD_CSX_LOW;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <SPI_WriteData+0x70>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <SPI_WriteData+0x70>)
 8000fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fe2:	6193      	str	r3, [r2, #24]
	  HAL_Delay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f001 f923 	bl	8002230 <HAL_Delay>
	if(HAL_USART_Transmit_IT(&husart2, (uint8_t*)result16, 1)!= HAL_OK)
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <SPI_WriteData+0x6c>)
 8000ff4:	f005 fa11 	bl	800641a <HAL_USART_Transmit_IT>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d000      	beq.n	8001000 <SPI_WriteData+0x64>
	  {
		//BSP_LED_On(LED3);
		while(1)
 8000ffe:	e7fe      	b.n	8000ffe <SPI_WriteData+0x62>
		{
		}
	  }
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20006314 	.word	0x20006314
 800100c:	40020400 	.word	0x40020400

08001010 <Bit_Reversal>:

static uint8_t Bit_Reversal(uint8_t v)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]

	result = ((v << 7) & 0x80) | ((v << 5) & 0x40) | ((v << 3) & 0x20) | ((v << 1) & 0x10) |\
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	01db      	lsls	r3, r3, #7
 8001022:	b25a      	sxtb	r2, r3
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	b25b      	sxtb	r3, r3
 800102a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102e:	b25b      	sxtb	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b25a      	sxtb	r2, r3
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	b25b      	sxtb	r3, r3
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	b25b      	sxtb	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b25a      	sxtb	r2, r3
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	b25b      	sxtb	r3, r3
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b25a      	sxtb	r2, r3
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	09db      	lsrs	r3, r3, #7
 8001058:	b2db      	uxtb	r3, r3
 800105a:	b25b      	sxtb	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b25a      	sxtb	r2, r3
			((v >> 7) & 0x01) | ((v >> 5) & 0x02) | ((v >> 3) & 0x04) | ((v >> 1) & 0x08);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	b2db      	uxtb	r3, r3
 8001066:	b25b      	sxtb	r3, r3
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b25a      	sxtb	r2, r3
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	08db      	lsrs	r3, r3, #3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	b25b      	sxtb	r3, r3
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	b25b      	sxtb	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b25a      	sxtb	r2, r3
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	085b      	lsrs	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b25b      	sxtb	r3, r3
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	b25b      	sxtb	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b25b      	sxtb	r3, r3
	result = ((v << 7) & 0x80) | ((v << 5) & 0x40) | ((v << 3) & 0x20) | ((v << 1) & 0x10) |\
 8001096:	73fb      	strb	r3, [r7, #15]
	return result;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_USART_TxCpltCallback>:

void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	LCD_CSX_HIGH;
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_USART_TxCpltCallback+0x20>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <HAL_USART_TxCpltCallback+0x20>)
 80010b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ba:	6193      	str	r3, [r2, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40020400 	.word	0x40020400

080010cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010de:	f001 f887 	bl	80021f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40001000 	.word	0x40001000

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_MspInit+0x54>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_MspInit+0x54>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_MspInit+0x54>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_MspInit+0x54>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_MspInit+0x54>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_MspInit+0x54>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	210f      	movs	r1, #15
 8001142:	f06f 0001 	mvn.w	r0, #1
 8001146:	f001 f96f 	bl	8002428 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_CRC_MspInit+0x3c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d10d      	bne.n	8001186 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_CRC_MspInit+0x40>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_CRC_MspInit+0x40>)
 8001174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_CRC_MspInit+0x40>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023000 	.word	0x40023000
 8001198:	40023800 	.word	0x40023800

0800119c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_DMA2D_MspInit+0x48>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d115      	bne.n	80011da <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_DMA2D_MspInit+0x4c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <HAL_DMA2D_MspInit+0x4c>)
 80011b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_DMA2D_MspInit+0x4c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2105      	movs	r1, #5
 80011ce:	205a      	movs	r0, #90	; 0x5a
 80011d0:	f001 f92a 	bl	8002428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80011d4:	205a      	movs	r0, #90	; 0x5a
 80011d6:	f001 f943 	bl	8002460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	4002b000 	.word	0x4002b000
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_DMA2D_MspDeInit+0x2c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d108      	bne.n	8001210 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_DMA2D_MspDeInit+0x30>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_DMA2D_MspDeInit+0x30>)
 8001204:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001208:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 800120a:	205a      	movs	r0, #90	; 0x5a
 800120c:	f001 f936 	bl	800247c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	4002b000 	.word	0x4002b000
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_I2C_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12c      	bne.n	800129c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 800125e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001264:	2312      	movs	r3, #18
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001270:	2304      	movs	r3, #4
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <HAL_I2C_MspInit+0x8c>)
 800127c:	f001 fd42 	bl	8002d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 800128a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128e:	6413      	str	r3, [r2, #64]	; 0x40
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_I2C_MspInit+0x88>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40005400 	.word	0x40005400
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400

080012b0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_I2C_MspDeInit+0x38>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10e      	bne.n	80012e0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_I2C_MspDeInit+0x3c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <HAL_I2C_MspDeInit+0x3c>)
 80012c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80012ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <HAL_I2C_MspDeInit+0x40>)
 80012d4:	f001 fec0 	bl	8003058 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_I2C_MspDeInit+0x40>)
 80012dc:	f001 febc 	bl	8003058 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020400 	.word	0x40020400

080012f4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a3c      	ldr	r2, [pc, #240]	; (8001404 <HAL_LTDC_MspInit+0x110>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d171      	bne.n	80013fa <HAL_LTDC_MspInit+0x106>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a3a      	ldr	r2, [pc, #232]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 8001320:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a33      	ldr	r2, [pc, #204]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 800133c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b31      	ldr	r3, [pc, #196]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a2c      	ldr	r2, [pc, #176]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 8001358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a25      	ldr	r2, [pc, #148]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <HAL_LTDC_MspInit+0x114>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8001386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001398:	230e      	movs	r3, #14
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	481a      	ldr	r0, [pc, #104]	; (800140c <HAL_LTDC_MspInit+0x118>)
 80013a4:	f001 fcae 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80013a8:	23ff      	movs	r3, #255	; 0xff
 80013aa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013b8:	230e      	movs	r3, #14
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4813      	ldr	r0, [pc, #76]	; (8001410 <HAL_LTDC_MspInit+0x11c>)
 80013c4:	f001 fc9e 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
 80013c8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013da:	230e      	movs	r3, #14
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <HAL_LTDC_MspInit+0x120>)
 80013e6:	f001 fc8d 	bl	8002d04 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2105      	movs	r1, #5
 80013ee:	2058      	movs	r0, #88	; 0x58
 80013f0:	f001 f81a 	bl	8002428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013f4:	2058      	movs	r0, #88	; 0x58
 80013f6:	f001 f833 	bl	8002460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40016800 	.word	0x40016800
 8001408:	40023800 	.word	0x40023800
 800140c:	40022400 	.word	0x40022400
 8001410:	40022800 	.word	0x40022800
 8001414:	40022000 	.word	0x40022000

08001418 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_USART_MspInit+0x94>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d133      	bne.n	80014a2 <HAL_USART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_USART_MspInit+0x98>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <HAL_USART_MspInit+0x98>)
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_USART_MspInit+0x98>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_USART_MspInit+0x98>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_USART_MspInit+0x98>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_USART_MspInit+0x98>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
 8001472:	231c      	movs	r3, #28
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001482:	2307      	movs	r3, #7
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <HAL_USART_MspInit+0x9c>)
 800148e:	f001 fc39 	bl	8002d04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2105      	movs	r1, #5
 8001496:	2026      	movs	r0, #38	; 0x26
 8001498:	f000 ffc6 	bl	8002428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800149c:	2026      	movs	r0, #38	; 0x26
 800149e:	f000 ffdf 	bl	8002460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40004400 	.word	0x40004400
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000

080014b8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014cc:	4b3c      	ldr	r3, [pc, #240]	; (80015c0 <HAL_FMC_MspInit+0x108>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d171      	bne.n	80015b8 <HAL_FMC_MspInit+0x100>
    return;
  }
  FMC_Initialized = 1;
 80014d4:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <HAL_FMC_MspInit+0x108>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_FMC_MspInit+0x10c>)
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	4a38      	ldr	r2, [pc, #224]	; (80015c4 <HAL_FMC_MspInit+0x10c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6393      	str	r3, [r2, #56]	; 0x38
 80014ea:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <HAL_FMC_MspInit+0x10c>)
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 80014f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014fa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001508:	230c      	movs	r3, #12
 800150a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	4619      	mov	r1, r3
 8001510:	482d      	ldr	r0, [pc, #180]	; (80015c8 <HAL_FMC_MspInit+0x110>)
 8001512:	f001 fbf7 	bl	8002d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 8001516:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800151a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_10
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001528:	230c      	movs	r3, #12
 800152a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4826      	ldr	r0, [pc, #152]	; (80015cc <HAL_FMC_MspInit+0x114>)
 8001532:	f001 fbe7 	bl	8002d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_3
 8001536:	f248 133f 	movw	r3, #33087	; 0x813f
 800153a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001548:	230c      	movs	r3, #12
 800154a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	481f      	ldr	r0, [pc, #124]	; (80015d0 <HAL_FMC_MspInit+0x118>)
 8001552:	f001 fbd7 	bl	8002d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8001556:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800155a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001568:	230c      	movs	r3, #12
 800156a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4619      	mov	r1, r3
 8001570:	4818      	ldr	r0, [pc, #96]	; (80015d4 <HAL_FMC_MspInit+0x11c>)
 8001572:	f001 fbc7 	bl	8002d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001576:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800157a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001588:	230c      	movs	r3, #12
 800158a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <HAL_FMC_MspInit+0x120>)
 8001592:	f001 fbb7 	bl	8002d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8001596:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800159a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015a8:	230c      	movs	r3, #12
 80015aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	480a      	ldr	r0, [pc, #40]	; (80015dc <HAL_FMC_MspInit+0x124>)
 80015b2:	f001 fba7 	bl	8002d04 <HAL_GPIO_Init>
 80015b6:	e000      	b.n	80015ba <HAL_FMC_MspInit+0x102>
    return;
 80015b8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000016c 	.word	0x2000016c
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021800 	.word	0x40021800
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40021400 	.word	0x40021400
 80015dc:	40021c00 	.word	0x40021c00

080015e0 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 80015e8:	f7ff ff66 	bl	80014b8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015fc:	f7ff ff5c 	bl	80014b8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08c      	sub	sp, #48	; 0x30
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	2036      	movs	r0, #54	; 0x36
 800161e:	f000 ff03 	bl	8002428 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001622:	2036      	movs	r0, #54	; 0x36
 8001624:	f000 ff1c 	bl	8002460 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_InitTick+0xa4>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <HAL_InitTick+0xa4>)
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_InitTick+0xa4>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001644:	f107 0210 	add.w	r2, r7, #16
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f004 f9f6 	bl	8005a40 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001654:	f004 f9cc 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8001658:	4603      	mov	r3, r0
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_InitTick+0xa8>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9b      	lsrs	r3, r3, #18
 8001668:	3b01      	subs	r3, #1
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_InitTick+0xac>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <HAL_InitTick+0xb0>)
 8001670:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_InitTick+0xac>)
 8001674:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001678:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_InitTick+0xac>)
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_InitTick+0xac>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_InitTick+0xac>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <HAL_InitTick+0xac>)
 800168e:	f004 fc46 	bl	8005f1e <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d104      	bne.n	80016a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <HAL_InitTick+0xac>)
 800169a:	f004 fc75 	bl	8005f88 <HAL_TIM_Base_Start_IT>
 800169e:	4603      	mov	r3, r0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3730      	adds	r7, #48	; 0x30
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	431bde83 	.word	0x431bde83
 80016b4:	200063cc 	.word	0x200063cc
 80016b8:	40001000 	.word	0x40001000

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <USART2_IRQHandler+0x10>)
 80016f6:	f004 fed5 	bl	80064a4 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20006314 	.word	0x20006314

08001704 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <TIM6_DAC_IRQHandler+0x10>)
 800170a:	f004 fc61 	bl	8005fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200063cc 	.word	0x200063cc

08001718 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <LTDC_IRQHandler+0x10>)
 800171e:	f003 f9e7 	bl	8004af0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000621c 	.word	0x2000621c

0800172c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA2D_IRQHandler+0x10>)
 8001732:	f001 f8a8 	bl	8002886 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20006358 	.word	0x20006358

08001740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_kill>:

int _kill(int pid, int sig)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800175a:	f01a f94d 	bl	801b9f8 <__errno>
 800175e:	4602      	mov	r2, r0
 8001760:	2316      	movs	r3, #22
 8001762:	6013      	str	r3, [r2, #0]
	return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_exit>:

void _exit (int status)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffe7 	bl	8001750 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001782:	e7fe      	b.n	8001782 <_exit+0x12>

08001784 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001796:	f3af 8000 	nop.w
 800179a:	4601      	mov	r1, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf0      	blt.n	8001796 <_read+0x12>
	}

return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e009      	b.n	80017e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf1      	blt.n	80017d0 <_write+0x12>
	}
	return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_close>:

int _close(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181e:	605a      	str	r2, [r3, #4]
	return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_isatty>:

int _isatty(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
	return 1;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f01a f8b2 	bl	801b9f8 <__errno>
 8001894:	4602      	mov	r2, r0
 8001896:	230c      	movs	r3, #12
 8001898:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20030000 	.word	0x20030000
 80018c0:	00001000 	.word	0x00001000
 80018c4:	20000170 	.word	0x20000170
 80018c8:	20006460 	.word	0x20006460

080018cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <SystemInit+0x28>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <SystemInit+0x28>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SystemInit+0x28>)
 80018e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018e6:	609a      	str	r2, [r3, #8]
#endif
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001930 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018fe:	e003      	b.n	8001908 <LoopCopyDataInit>

08001900 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001902:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001904:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001906:	3104      	adds	r1, #4

08001908 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800190c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800190e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001910:	d3f6      	bcc.n	8001900 <CopyDataInit>
  ldr  r2, =_sbss
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001914:	e002      	b.n	800191c <LoopFillZerobss>

08001916 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001916:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001918:	f842 3b04 	str.w	r3, [r2], #4

0800191c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800191e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001920:	d3f9      	bcc.n	8001916 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001922:	f7ff ffd3 	bl	80018cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001926:	f01a f87f 	bl	801ba28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192a:	f7fe fe31 	bl	8000590 <main>
  bx  lr    
 800192e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001930:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001934:	0803dbb0 	.word	0x0803dbb0
  ldr  r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800193c:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8001940:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 8001944:	20006460 	.word	0x20006460

08001948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC_IRQHandler>

0800194a <exc7200_Init>:
  * @brief  Initialize the exc7200 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void exc7200_Init(uint16_t DeviceAddr)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001954:	f00b fd72 	bl	800d43c <IOE_Init>
  
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <exc7200_Reset>:
  * @brief  Reset the exc7200 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void exc7200_Reset(uint16_t DeviceAddr)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]

}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <exc7200_ReadID>:
  * @brief  Read the exc7200 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t exc7200_ReadID(uint16_t DeviceAddr)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <exc7200_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void exc7200_TS_Start(uint16_t DeviceAddr)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	80fb      	strh	r3, [r7, #6]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <exc7200_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t exc7200_TS_DetectTouch(uint16_t DeviceAddr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
  */
  static uint32_t noTouchCounter = 0;
  static uint8_t lastTouched = 0;  
  
  /* Read TS data : Send I2C Slave address + 1 Bit0=1 for:read */
  IOE_ReadMultiple(DeviceAddr | 1, EXC7200_READ_CMD, aBufferTS, 10);  
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	b2d8      	uxtb	r0, r3
 80019b8:	230a      	movs	r3, #10
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <exc7200_TS_DetectTouch+0x64>)
 80019bc:	2109      	movs	r1, #9
 80019be:	f00b fd70 	bl	800d4a2 <IOE_ReadMultiple>

  /* check for first byte */
  if (aBufferTS[1]==0x83 && noTouchCounter > 4) 
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <exc7200_TS_DetectTouch+0x64>)
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	2b83      	cmp	r3, #131	; 0x83
 80019c8:	d108      	bne.n	80019dc <exc7200_TS_DetectTouch+0x38>
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <exc7200_TS_DetectTouch+0x68>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d904      	bls.n	80019dc <exc7200_TS_DetectTouch+0x38>
  {	
    lastTouched = 1;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <exc7200_TS_DetectTouch+0x6c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
    return 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	e010      	b.n	80019fe <exc7200_TS_DetectTouch+0x5a>
  }
  if (lastTouched)
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <exc7200_TS_DetectTouch+0x6c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <exc7200_TS_DetectTouch+0x4e>
  {
    lastTouched = 0;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <exc7200_TS_DetectTouch+0x6c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
    noTouchCounter = 0;
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <exc7200_TS_DetectTouch+0x68>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e004      	b.n	80019fc <exc7200_TS_DetectTouch+0x58>
  }
  else
  {
    noTouchCounter++;
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <exc7200_TS_DetectTouch+0x68>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <exc7200_TS_DetectTouch+0x68>)
 80019fa:	6013      	str	r3, [r2, #0]
  }
  return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2000640c 	.word	0x2000640c
 8001a0c:	20000174 	.word	0x20000174
 8001a10:	20000178 	.word	0x20000178

08001a14 <exc7200_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void exc7200_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	81fb      	strh	r3, [r7, #14]
  /* Calculate positions */
  *X = (((aBufferTS[3]&0x00ff) << 4) | ((aBufferTS[2]&0x00f0) >> 4));
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <exc7200_TS_GetXY+0x98>)
 8001a24:	78db      	ldrb	r3, [r3, #3]
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <exc7200_TS_GetXY+0x98>)
 8001a2c:	789b      	ldrb	r3, [r3, #2]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	801a      	strh	r2, [r3, #0]
  *Y = (((aBufferTS[5]&0x00ff) << 4) | ((aBufferTS[4]&0x00f0) >> 4));
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <exc7200_TS_GetXY+0x98>)
 8001a40:	795b      	ldrb	r3, [r3, #5]
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <exc7200_TS_GetXY+0x98>)
 8001a48:	791b      	ldrb	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	801a      	strh	r2, [r3, #0]
  
  *X = (*X * 640) / 2048;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	01db      	lsls	r3, r3, #7
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da01      	bge.n	8001a70 <exc7200_TS_GetXY+0x5c>
 8001a6c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a70:	12db      	asrs	r3, r3, #11
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	801a      	strh	r2, [r3, #0]
  *Y = (*Y * 480) / 2048;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	015b      	lsls	r3, r3, #5
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da01      	bge.n	8001a8e <exc7200_TS_GetXY+0x7a>
 8001a8a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a8e:	12db      	asrs	r3, r3, #11
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	801a      	strh	r2, [r3, #0]
  
  /* Dummy Read to deactivate read mode */
  IOE_ReadMultiple(DeviceAddr, EXC7200_READ_CMD, aBufferTS, 10);      
 8001a96:	89fb      	ldrh	r3, [r7, #14]
 8001a98:	b2d8      	uxtb	r0, r3
 8001a9a:	230a      	movs	r3, #10
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <exc7200_TS_GetXY+0x98>)
 8001a9e:	2109      	movs	r1, #9
 8001aa0:	f00b fcff 	bl	800d4a2 <IOE_ReadMultiple>
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	2000640c 	.word	0x2000640c

08001ab0 <exc7200_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void exc7200_TS_EnableIT(uint16_t DeviceAddr)
{  
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <exc7200_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void exc7200_TS_DisableIT(uint16_t DeviceAddr)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	80fb      	strh	r3, [r7, #6]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <exc7200_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t exc7200_TS_ITStatus(uint16_t DeviceAddr)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <exc7200_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void exc7200_TS_ClearIT(uint16_t DeviceAddr)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fa59 	bl	8001fd0 <stmpe811_GetInstance>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	2bff      	cmp	r3, #255	; 0xff
 8001b26:	d112      	bne.n	8001b4e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f000 fa51 	bl	8001fd0 <stmpe811_GetInstance>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001b32:	7bbb      	ldrb	r3, [r7, #14]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d80a      	bhi.n	8001b4e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	88fa      	ldrh	r2, [r7, #6]
 8001b3c:	b2d1      	uxtb	r1, r2
 8001b3e:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <stmpe811_Init+0x4c>)
 8001b40:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001b42:	f00b fc7b 	bl	800d43c <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f807 	bl	8001b5c <stmpe811_Reset>
    }
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000017c 	.word	0x2000017c

08001b5c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f00b fc71 	bl	800d456 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001b74:	200a      	movs	r0, #10
 8001b76:	f00b fcc6 	bl	800d506 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2103      	movs	r1, #3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f00b fc67 	bl	800d456 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f00b fcbc 	bl	800d506 <IOE_Delay>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001b96:	b590      	push	{r4, r7, lr}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001ba0:	f00b fc4c 	bl	800d43c <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f00b fc66 	bl	800d47c <IOE_Read>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2101      	movs	r1, #1
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00b fc5d 	bl	800d47c <IOE_Read>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	b29b      	uxth	r3, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd90      	pop	{r4, r7, pc}

08001bd4 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2109      	movs	r1, #9
 8001be8:	4618      	mov	r0, r3
 8001bea:	f00b fc47 	bl	800d47c <IOE_Read>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	2109      	movs	r1, #9
 8001c02:	4618      	mov	r0, r3
 8001c04:	f00b fc27 	bl	800d456 <IOE_Write>
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2109      	movs	r1, #9
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00b fc29 	bl	800d47c <IOE_Read>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	2109      	movs	r1, #9
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00b fc09 	bl	800d456 <IOE_Write>
    
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	460a      	mov	r2, r1
 8001c56:	80fb      	strh	r3, [r7, #6]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	210a      	movs	r1, #10
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00b fc08 	bl	800d47c <IOE_Read>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	797b      	ldrb	r3, [r7, #5]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	210a      	movs	r1, #10
 8001c80:	4618      	mov	r0, r3
 8001c82:	f00b fbe8 	bl	800d456 <IOE_Write>
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	460a      	mov	r2, r1
 8001c98:	80fb      	strh	r3, [r7, #6]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	210a      	movs	r1, #10
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00b fbe7 	bl	800d47c <IOE_Read>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001cb2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	b25a      	sxtb	r2, r3
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	210a      	movs	r1, #10
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f00b fbc2 	bl	800d456 <IOE_Write>
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	460a      	mov	r2, r1
 8001ce4:	80fb      	strh	r3, [r7, #6]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	210b      	movs	r1, #11
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00b fbc3 	bl	800d47c <IOE_Read>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	797b      	ldrb	r3, [r7, #5]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b2db      	uxtb	r3, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460a      	mov	r2, r1
 8001d12:	80fb      	strh	r3, [r7, #6]
 8001d14:	4613      	mov	r3, r2
 8001d16:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	797a      	ldrb	r2, [r7, #5]
 8001d1e:	210b      	movs	r1, #11
 8001d20:	4618      	mov	r0, r3
 8001d22:	f00b fb98 	bl	800d456 <IOE_Write>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	6039      	str	r1, [r7, #0]
 8001d38:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2117      	movs	r1, #23
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00b fb99 	bl	800d47c <IOE_Read>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b25b      	sxtb	r3, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	b25a      	sxtb	r2, r3
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	2117      	movs	r1, #23
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f00b fb74 	bl	800d456 <IOE_Write>
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2104      	movs	r1, #4
 8001d86:	4618      	mov	r0, r3
 8001d88:	f00b fb78 	bl	800d47c <IOE_Read>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	f023 0304 	bic.w	r3, r3, #4
 8001d96:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	2104      	movs	r1, #4
 8001da0:	4618      	mov	r0, r3
 8001da2:	f00b fb58 	bl	800d456 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	21f0      	movs	r1, #240	; 0xf0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ffbf 	bl	8001d2e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	f023 0303 	bic.w	r3, r3, #3
 8001db6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00b fb48 	bl	800d456 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2249      	movs	r2, #73	; 0x49
 8001dcc:	2120      	movs	r1, #32
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f00b fb41 	bl	800d456 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f00b fb96 	bl	800d506 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2201      	movs	r2, #1
 8001de0:	2121      	movs	r1, #33	; 0x21
 8001de2:	4618      	mov	r0, r3
 8001de4:	f00b fb37 	bl	800d456 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	229a      	movs	r2, #154	; 0x9a
 8001dee:	2141      	movs	r1, #65	; 0x41
 8001df0:	4618      	mov	r0, r3
 8001df2:	f00b fb30 	bl	800d456 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	214a      	movs	r1, #74	; 0x4a
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00b fb29 	bl	800d456 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2201      	movs	r2, #1
 8001e0a:	214b      	movs	r1, #75	; 0x4b
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00b fb22 	bl	800d456 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2200      	movs	r2, #0
 8001e18:	214b      	movs	r1, #75	; 0x4b
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00b fb1b 	bl	800d456 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2201      	movs	r2, #1
 8001e26:	2156      	movs	r1, #86	; 0x56
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00b fb14 	bl	800d456 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2201      	movs	r2, #1
 8001e34:	2158      	movs	r1, #88	; 0x58
 8001e36:	4618      	mov	r0, r3
 8001e38:	f00b fb0d 	bl	800d456 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2201      	movs	r2, #1
 8001e42:	2140      	movs	r1, #64	; 0x40
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00b fb06 	bl	800d456 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	22ff      	movs	r2, #255	; 0xff
 8001e50:	210b      	movs	r1, #11
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00b faff 	bl	800d456 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f00b fb54 	bl	800d506 <IOE_Delay>
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2140      	movs	r1, #64	; 0x40
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f00b fafe 	bl	800d47c <IOE_Read>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	2b80      	cmp	r3, #128	; 0x80
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00b      	beq.n	8001eb0 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	214c      	movs	r1, #76	; 0x4c
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f00b faec 	bl	800d47c <IOE_Read>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d010      	beq.n	8001ecc <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	e00d      	b.n	8001ecc <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	214b      	movs	r1, #75	; 0x4b
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f00b facc 	bl	800d456 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	214b      	movs	r1, #75	; 0x4b
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f00b fac5 	bl	800d456 <IOE_Write>
  }
  
  return ret;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
 8001ee6:	b2d8      	uxtb	r0, r3
 8001ee8:	f107 0210 	add.w	r2, r7, #16
 8001eec:	2304      	movs	r3, #4
 8001eee:	21d7      	movs	r1, #215	; 0xd7
 8001ef0:	f00b fad7 	bl	800d4a2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001ef4:	7c3b      	ldrb	r3, [r7, #16]
 8001ef6:	061a      	lsls	r2, r3, #24
 8001ef8:	7c7b      	ldrb	r3, [r7, #17]
 8001efa:	041b      	lsls	r3, r3, #16
 8001efc:	431a      	orrs	r2, r3
 8001efe:	7cbb      	ldrb	r3, [r7, #18]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	4313      	orrs	r3, r2
 8001f04:	7cfa      	ldrb	r2, [r7, #19]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	0d1b      	lsrs	r3, r3, #20
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2201      	movs	r2, #1
 8001f2a:	214b      	movs	r1, #75	; 0x4b
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f00b fa92 	bl	800d456 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001f32:	89fb      	ldrh	r3, [r7, #14]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2200      	movs	r2, #0
 8001f38:	214b      	movs	r1, #75	; 0x4b
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f00b fa8b 	bl	800d456 <IOE_Write>
}
 8001f40:	bf00      	nop
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8001f52:	f00b fa7a 	bl	800d44a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	211f      	movs	r1, #31
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fe76 	bl	8001c4c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fe36 	bl	8001bd4 <stmpe811_EnableGlobalIT>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fe47 	bl	8001c10 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	211f      	movs	r1, #31
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fe81 	bl	8001c8e <stmpe811_DisableITSource>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	211f      	movs	r1, #31
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fe99 	bl	8001cda <stmpe811_ReadGITStatus>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	211f      	movs	r1, #31
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fea1 	bl	8001d08 <stmpe811_ClearGlobalIT>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	e00b      	b.n	8001ffc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <stmpe811_GetInstance+0x40>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	88fa      	ldrh	r2, [r7, #6]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d101      	bne.n	8001ff6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	e006      	b.n	8002004 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d9f0      	bls.n	8001fe4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002002:	23ff      	movs	r3, #255	; 0xff
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	2000017c 	.word	0x2000017c

08002014 <ts3510_Init>:
  * @brief  Initialize the ts3510 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void ts3510_Init(uint16_t DeviceAddr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800201e:	f00b fa0d 	bl	800d43c <IOE_Init>
  
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <ts3510_Reset>:
  * @brief  Reset the ts3510 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void ts3510_Reset(uint16_t DeviceAddr)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	80fb      	strh	r3, [r7, #6]

}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <ts3510_ReadID>:
  * @brief  Read the ts3510 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t ts3510_ReadID(uint16_t DeviceAddr)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	80fb      	strh	r3, [r7, #6]
  return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <ts3510_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void ts3510_TS_Start(uint16_t DeviceAddr)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <ts3510_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t ts3510_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	80fb      	strh	r3, [r7, #6]
  uint8_t aBufferTS[11];
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <ts3510_TS_DetectTouch+0x58>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	813b      	strh	r3, [r7, #8]
   
  /* Prepare for LCD read data */
  IOE_WriteMultiple(DeviceAddr, TS3510_SEND_CMD_REG, aTmpBuffer, 2);
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	b2d8      	uxtb	r0, r3
 8002084:	f107 0208 	add.w	r2, r7, #8
 8002088:	2302      	movs	r3, #2
 800208a:	2100      	movs	r1, #0
 800208c:	f00b fa23 	bl	800d4d6 <IOE_WriteMultiple>

  /* Read TS data from LCD */
  IOE_ReadMultiple(DeviceAddr, TS3510_READ_BLOCK_REG, aBufferTS, 11);  
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	b2d8      	uxtb	r0, r3
 8002094:	f107 020c 	add.w	r2, r7, #12
 8002098:	230b      	movs	r3, #11
 800209a:	218a      	movs	r1, #138	; 0x8a
 800209c:	f00b fa01 	bl	800d4a2 <IOE_ReadMultiple>

  /* check for first byte */
  if((aBufferTS[1] == 0xFF) && (aBufferTS[2] == 0xFF) && (aBufferTS[3] == 0xFF) && (aBufferTS[4] == 0xFF))
 80020a0:	7b7b      	ldrb	r3, [r7, #13]
 80020a2:	2bff      	cmp	r3, #255	; 0xff
 80020a4:	d10a      	bne.n	80020bc <ts3510_TS_DetectTouch+0x4c>
 80020a6:	7bbb      	ldrb	r3, [r7, #14]
 80020a8:	2bff      	cmp	r3, #255	; 0xff
 80020aa:	d107      	bne.n	80020bc <ts3510_TS_DetectTouch+0x4c>
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2bff      	cmp	r3, #255	; 0xff
 80020b0:	d104      	bne.n	80020bc <ts3510_TS_DetectTouch+0x4c>
 80020b2:	7c3b      	ldrb	r3, [r7, #16]
 80020b4:	2bff      	cmp	r3, #255	; 0xff
 80020b6:	d101      	bne.n	80020bc <ts3510_TS_DetectTouch+0x4c>
  {
    return 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <ts3510_TS_DetectTouch+0x4e>
  }
  else
  {
    return 1;
 80020bc:	2301      	movs	r3, #1
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	0801c9c8 	.word	0x0801c9c8

080020cc <ts3510_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void ts3510_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	81fb      	strh	r3, [r7, #14]
  uint8_t aBufferTS[11];
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <ts3510_TS_GetXY+0x78>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	823b      	strh	r3, [r7, #16]
  
  /* Prepare for LCD read data */
  IOE_WriteMultiple(DeviceAddr, TS3510_SEND_CMD_REG, aTmpBuffer, 2);
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	b2d8      	uxtb	r0, r3
 80020e4:	f107 0210 	add.w	r2, r7, #16
 80020e8:	2302      	movs	r3, #2
 80020ea:	2100      	movs	r1, #0
 80020ec:	f00b f9f3 	bl	800d4d6 <IOE_WriteMultiple>

  /* Read TS data from LCD */
  IOE_ReadMultiple(DeviceAddr, TS3510_READ_BLOCK_REG, aBufferTS, 11);  
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	b2d8      	uxtb	r0, r3
 80020f4:	f107 0214 	add.w	r2, r7, #20
 80020f8:	230b      	movs	r3, #11
 80020fa:	218a      	movs	r1, #138	; 0x8a
 80020fc:	f00b f9d1 	bl	800d4a2 <IOE_ReadMultiple>

  /* Calculate positions */
  *X = (((aBufferTS[1] << 8) | aBufferTS[2]) << 12) / 640;
 8002100:	7d7b      	ldrb	r3, [r7, #21]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	7dba      	ldrb	r2, [r7, #22]
 8002106:	4313      	orrs	r3, r2
 8002108:	031b      	lsls	r3, r3, #12
 800210a:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <ts3510_TS_GetXY+0x7c>)
 800210c:	fb82 1203 	smull	r1, r2, r2, r3
 8002110:	1212      	asrs	r2, r2, #8
 8002112:	17db      	asrs	r3, r3, #31
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	b29a      	uxth	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	801a      	strh	r2, [r3, #0]
  *Y = (((aBufferTS[3] << 8) | aBufferTS[4]) << 12) / 480;
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	7e3a      	ldrb	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	031b      	lsls	r3, r3, #12
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <ts3510_TS_GetXY+0x80>)
 8002128:	fb82 1203 	smull	r1, r2, r2, r3
 800212c:	441a      	add	r2, r3
 800212e:	1212      	asrs	r2, r2, #8
 8002130:	17db      	asrs	r3, r3, #31
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	b29a      	uxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	801a      	strh	r2, [r3, #0]
  
  /* set position to be relative to 12bits resolution */
}
 800213a:	bf00      	nop
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	0801c9c8 	.word	0x0801c9c8
 8002148:	66666667 	.word	0x66666667
 800214c:	88888889 	.word	0x88888889

08002150 <ts3510_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void ts3510_TS_EnableIT(uint16_t DeviceAddr)
{  
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	80fb      	strh	r3, [r7, #6]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <ts3510_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void ts3510_TS_DisableIT(uint16_t DeviceAddr)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	80fb      	strh	r3, [r7, #6]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <ts3510_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t ts3510_TS_ITStatus(uint16_t DeviceAddr)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
  return 0;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <ts3510_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void ts3510_TS_ClearIT(uint16_t DeviceAddr)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <HAL_Init+0x40>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_Init+0x40>)
 80021c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_Init+0x40>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 f91c 	bl	8002412 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff fa14 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7fe ff8e 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00

080021f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000084 	.word	0x20000084
 8002214:	20006418 	.word	0x20006418

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20006418 	.word	0x20006418

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff ffee 	bl	8002218 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_Delay+0x40>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffde 	bl	8002218 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000084 	.word	0x20000084

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db10      	blt.n	8002348 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4909      	ldr	r1, [pc, #36]	; (8002354 <__NVIC_DisableIRQ+0x40>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	3320      	adds	r3, #32
 800233c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002344:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	; (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	; (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ff2a 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243a:	f7ff ff3f 	bl	80022bc <__NVIC_GetPriorityGrouping>
 800243e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	6978      	ldr	r0, [r7, #20]
 8002446:	f7ff ffb1 	bl	80023ac <NVIC_EncodePriority>
 800244a:	4602      	mov	r2, r0
 800244c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff80 	bl	8002358 <__NVIC_SetPriority>
}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff32 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff42 	bl	8002314 <__NVIC_DisableIRQ>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	795b      	ldrb	r3, [r3, #5]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe fe4c 	bl	8001158 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d004      	beq.n	80024ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00c      	b.n	8002508 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2205      	movs	r2, #5
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e03b      	b.n	800259e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fe2e 	bl	800119c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002564:	f023 0107 	bic.w	r1, r3, #7
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800257e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68d1      	ldr	r1, [r2, #12]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	430b      	orrs	r3, r1
 800258c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e05f      	b.n	800267a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80025ba:	4b32      	ldr	r3, [pc, #200]	; (8002684 <HAL_DMA2D_DeInit+0xdc>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d02e      	beq.n	8002624 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f8c1 	bl	800275c <HAL_DMA2D_Abort>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d021      	beq.n	8002624 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e04a      	b.n	800267a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d108      	bne.n	8002604 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80025f2:	2100      	movs	r1, #0
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f8f7 	bl	80027e8 <HAL_DMA2D_CLUTLoading_Abort>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d011      	beq.n	8002624 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e03a      	b.n	800267a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b20      	cmp	r3, #32
 8002610:	d108      	bne.n	8002624 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8002612:	2101      	movs	r1, #1
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f8e7 	bl	80027e8 <HAL_DMA2D_CLUTLoading_Abort>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e02a      	b.n	800267a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	223f      	movs	r2, #63	; 0x3f
 8002632:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2200      	movs	r2, #0
 800264a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fe fdc5 	bl	80011ec <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800

08002688 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_DMA2D_Start_IT+0x1c>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e020      	b.n	80026e6 <HAL_DMA2D_Start_IT+0x5e>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fa84 	bl	8002bcc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80026d2:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af02      	add	r7, sp, #8
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002706:	2302      	movs	r3, #2
 8002708:	e024      	b.n	8002754 <HAL_DMA2D_BlendingStart_IT+0x66>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fa4d 	bl	8002bcc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002740:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 0205 	bic.w	r2, r3, #5
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0204 	orr.w	r2, r2, #4
 8002776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002778:	f7ff fd4e 	bl	8002218 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800277e:	e017      	b.n	80027b0 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002780:	f7ff fd4a 	bl	8002218 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278e:	d90f      	bls.n	80027b0 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2203      	movs	r2, #3
 80027a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e017      	b.n	80027e0 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1e0      	bne.n	8002780 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80027cc:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3324      	adds	r3, #36	; 0x24
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0204 	orr.w	r2, r2, #4
 8002808:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d103      	bne.n	8002818 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	331c      	adds	r3, #28
 8002816:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8002818:	f7ff fcfe 	bl	8002218 <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800281e:	e017      	b.n	8002850 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002820:	f7ff fcfa 	bl	8002218 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800282e:	d90f      	bls.n	8002850 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2203      	movs	r2, #3
 8002840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e016      	b.n	800287e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e1      	bne.n	8002820 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800286a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d026      	beq.n	80028f6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d021      	beq.n	80028f6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2201      	movs	r2, #1
 80028d4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2204      	movs	r2, #4
 80028da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d026      	beq.n	800294e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d021      	beq.n	800294e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002918:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2220      	movs	r2, #32
 8002920:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	f043 0202 	orr.w	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d026      	beq.n	80029a6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295e:	2b00      	cmp	r3, #0
 8002960:	d021      	beq.n	80029a6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002970:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2208      	movs	r2, #8
 8002978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	f043 0204 	orr.w	r2, r3, #4
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2204      	movs	r2, #4
 800298a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00e      	beq.n	80029d8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2204      	movs	r2, #4
 80029d0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f853 	bl	8002a7e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d024      	beq.n	8002a2c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01f      	beq.n	8002a2c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029fa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2202      	movs	r2, #2
 8002a02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01f      	beq.n	8002a76 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01a      	beq.n	8002a76 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2210      	movs	r2, #16
 8002a56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f80e 	bl	8002a92 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_DMA2D_ConfigLayer+0x20>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e079      	b.n	8002bbc <HAL_DMA2D_ConfigLayer+0x114>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	3318      	adds	r3, #24
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	041b      	lsls	r3, r3, #16
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002af2:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <HAL_DMA2D_ConfigLayer+0x120>)
 8002af4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b0a      	cmp	r3, #10
 8002afc:	d003      	beq.n	8002b06 <HAL_DMA2D_ConfigLayer+0x5e>
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	d107      	bne.n	8002b16 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e005      	b.n	8002b22 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	061b      	lsls	r3, r3, #24
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d120      	bne.n	8002b6a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	ea02 0103 	and.w	r1, r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b0a      	cmp	r3, #10
 8002b50:	d003      	beq.n	8002b5a <HAL_DMA2D_ConfigLayer+0xb2>
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b09      	cmp	r3, #9
 8002b58:	d127      	bne.n	8002baa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
 8002b68:	e01f      	b.n	8002baa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	ea02 0103 	and.w	r1, r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b0a      	cmp	r3, #10
 8002b92:	d003      	beq.n	8002b9c <HAL_DMA2D_ConfigLayer+0xf4>
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b09      	cmp	r3, #9
 8002b9a:	d106      	bne.n	8002baa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ba8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	ff03000f 	.word	0xff03000f

08002bcc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b08b      	sub	sp, #44	; 0x2c
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	041a      	lsls	r2, r3, #16
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c04:	d174      	bne.n	8002cf0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c0c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c14:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c1c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d108      	bne.n	8002c3e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	e053      	b.n	8002ce6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d106      	bne.n	8002c54 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	e048      	b.n	8002ce6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d111      	bne.n	8002c80 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	0cdb      	lsrs	r3, r3, #19
 8002c60:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	0a9b      	lsrs	r3, r3, #10
 8002c66:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	08db      	lsrs	r3, r3, #3
 8002c6c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	02db      	lsls	r3, r3, #11
 8002c76:	4313      	orrs	r3, r2
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7e:	e032      	b.n	8002ce6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d117      	bne.n	8002cb8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	0fdb      	lsrs	r3, r3, #31
 8002c8c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	0cdb      	lsrs	r3, r3, #19
 8002c92:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	0adb      	lsrs	r3, r3, #11
 8002c98:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	029b      	lsls	r3, r3, #10
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	03db      	lsls	r3, r3, #15
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	e016      	b.n	8002ce6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	0f1b      	lsrs	r3, r3, #28
 8002cbc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	0d1b      	lsrs	r3, r3, #20
 8002cc2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	0b1b      	lsrs	r3, r3, #12
 8002cc8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	011a      	lsls	r2, r3, #4
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	031b      	lsls	r3, r3, #12
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002cee:	e003      	b.n	8002cf8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	372c      	adds	r7, #44	; 0x2c
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	e177      	b.n	8003010 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d20:	2201      	movs	r2, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	f040 8166 	bne.w	800300a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d00b      	beq.n	8002d5e <HAL_GPIO_Init+0x5a>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d52:	2b11      	cmp	r3, #17
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b12      	cmp	r3, #18
 8002d5c:	d130      	bne.n	8002dc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2203      	movs	r2, #3
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d94:	2201      	movs	r2, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 0201 	and.w	r2, r3, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d003      	beq.n	8002e00 <HAL_GPIO_Init+0xfc>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b12      	cmp	r3, #18
 8002dfe:	d123      	bne.n	8002e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	08da      	lsrs	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3208      	adds	r2, #8
 8002e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3208      	adds	r2, #8
 8002e42:	69b9      	ldr	r1, [r7, #24]
 8002e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0203 	and.w	r2, r3, #3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80c0 	beq.w	800300a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	4a64      	ldr	r2, [pc, #400]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b62      	ldr	r3, [pc, #392]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea6:	4a60      	ldr	r2, [pc, #384]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a57      	ldr	r2, [pc, #348]	; (800302c <HAL_GPIO_Init+0x328>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d037      	beq.n	8002f42 <HAL_GPIO_Init+0x23e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a56      	ldr	r2, [pc, #344]	; (8003030 <HAL_GPIO_Init+0x32c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_GPIO_Init+0x23a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a55      	ldr	r2, [pc, #340]	; (8003034 <HAL_GPIO_Init+0x330>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d02b      	beq.n	8002f3a <HAL_GPIO_Init+0x236>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a54      	ldr	r2, [pc, #336]	; (8003038 <HAL_GPIO_Init+0x334>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d025      	beq.n	8002f36 <HAL_GPIO_Init+0x232>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a53      	ldr	r2, [pc, #332]	; (800303c <HAL_GPIO_Init+0x338>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <HAL_GPIO_Init+0x22e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_GPIO_Init+0x33c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_Init+0x22a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a51      	ldr	r2, [pc, #324]	; (8003044 <HAL_GPIO_Init+0x340>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x226>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a50      	ldr	r2, [pc, #320]	; (8003048 <HAL_GPIO_Init+0x344>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x222>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4f      	ldr	r2, [pc, #316]	; (800304c <HAL_GPIO_Init+0x348>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x21e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4e      	ldr	r2, [pc, #312]	; (8003050 <HAL_GPIO_Init+0x34c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x21a>
 8002f1a:	2309      	movs	r3, #9
 8002f1c:	e012      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f1e:	230a      	movs	r3, #10
 8002f20:	e010      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f22:	2308      	movs	r3, #8
 8002f24:	e00e      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f26:	2307      	movs	r3, #7
 8002f28:	e00c      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	e00a      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e008      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e004      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f42:	2300      	movs	r3, #0
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f002 0203 	and.w	r2, r2, #3
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f54:	4934      	ldr	r1, [pc, #208]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f62:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <HAL_GPIO_Init+0x350>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f86:	4a33      	ldr	r2, [pc, #204]	; (8003054 <HAL_GPIO_Init+0x350>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f8c:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HAL_GPIO_Init+0x350>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb0:	4a28      	ldr	r2, [pc, #160]	; (8003054 <HAL_GPIO_Init+0x350>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb6:	4b27      	ldr	r3, [pc, #156]	; (8003054 <HAL_GPIO_Init+0x350>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fda:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <HAL_GPIO_Init+0x350>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_GPIO_Init+0x350>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003004:	4a13      	ldr	r2, [pc, #76]	; (8003054 <HAL_GPIO_Init+0x350>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	f67f ae84 	bls.w	8002d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003018:	bf00      	nop
 800301a:	3724      	adds	r7, #36	; 0x24
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40023800 	.word	0x40023800
 8003028:	40013800 	.word	0x40013800
 800302c:	40020000 	.word	0x40020000
 8003030:	40020400 	.word	0x40020400
 8003034:	40020800 	.word	0x40020800
 8003038:	40020c00 	.word	0x40020c00
 800303c:	40021000 	.word	0x40021000
 8003040:	40021400 	.word	0x40021400
 8003044:	40021800 	.word	0x40021800
 8003048:	40021c00 	.word	0x40021c00
 800304c:	40022000 	.word	0x40022000
 8003050:	40022400 	.word	0x40022400
 8003054:	40013c00 	.word	0x40013c00

08003058 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e0d9      	b.n	8003228 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003074:	2201      	movs	r2, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	429a      	cmp	r2, r3
 800308c:	f040 80c9 	bne.w	8003222 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003090:	4a6a      	ldr	r2, [pc, #424]	; (800323c <HAL_GPIO_DeInit+0x1e4>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	3302      	adds	r3, #2
 8003098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	220f      	movs	r2, #15
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	4013      	ands	r3, r2
 80030b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a62      	ldr	r2, [pc, #392]	; (8003240 <HAL_GPIO_DeInit+0x1e8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d037      	beq.n	800312a <HAL_GPIO_DeInit+0xd2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a61      	ldr	r2, [pc, #388]	; (8003244 <HAL_GPIO_DeInit+0x1ec>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d031      	beq.n	8003126 <HAL_GPIO_DeInit+0xce>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a60      	ldr	r2, [pc, #384]	; (8003248 <HAL_GPIO_DeInit+0x1f0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02b      	beq.n	8003122 <HAL_GPIO_DeInit+0xca>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a5f      	ldr	r2, [pc, #380]	; (800324c <HAL_GPIO_DeInit+0x1f4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d025      	beq.n	800311e <HAL_GPIO_DeInit+0xc6>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a5e      	ldr	r2, [pc, #376]	; (8003250 <HAL_GPIO_DeInit+0x1f8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01f      	beq.n	800311a <HAL_GPIO_DeInit+0xc2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a5d      	ldr	r2, [pc, #372]	; (8003254 <HAL_GPIO_DeInit+0x1fc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <HAL_GPIO_DeInit+0xbe>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a5c      	ldr	r2, [pc, #368]	; (8003258 <HAL_GPIO_DeInit+0x200>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_DeInit+0xba>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a5b      	ldr	r2, [pc, #364]	; (800325c <HAL_GPIO_DeInit+0x204>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00d      	beq.n	800310e <HAL_GPIO_DeInit+0xb6>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a5a      	ldr	r2, [pc, #360]	; (8003260 <HAL_GPIO_DeInit+0x208>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_DeInit+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a59      	ldr	r2, [pc, #356]	; (8003264 <HAL_GPIO_DeInit+0x20c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_GPIO_DeInit+0xae>
 8003102:	2309      	movs	r3, #9
 8003104:	e012      	b.n	800312c <HAL_GPIO_DeInit+0xd4>
 8003106:	230a      	movs	r3, #10
 8003108:	e010      	b.n	800312c <HAL_GPIO_DeInit+0xd4>
 800310a:	2308      	movs	r3, #8
 800310c:	e00e      	b.n	800312c <HAL_GPIO_DeInit+0xd4>
 800310e:	2307      	movs	r3, #7
 8003110:	e00c      	b.n	800312c <HAL_GPIO_DeInit+0xd4>
 8003112:	2306      	movs	r3, #6
 8003114:	e00a      	b.n	800312c <HAL_GPIO_DeInit+0xd4>
 8003116:	2305      	movs	r3, #5
 8003118:	e008      	b.n	800312c <HAL_GPIO_DeInit+0xd4>
 800311a:	2304      	movs	r3, #4
 800311c:	e006      	b.n	800312c <HAL_GPIO_DeInit+0xd4>
 800311e:	2303      	movs	r3, #3
 8003120:	e004      	b.n	800312c <HAL_GPIO_DeInit+0xd4>
 8003122:	2302      	movs	r3, #2
 8003124:	e002      	b.n	800312c <HAL_GPIO_DeInit+0xd4>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_GPIO_DeInit+0xd4>
 800312a:	2300      	movs	r3, #0
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	f002 0203 	and.w	r2, r2, #3
 8003132:	0092      	lsls	r2, r2, #2
 8003134:	4093      	lsls	r3, r2
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	d132      	bne.n	80031a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800313c:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_GPIO_DeInit+0x210>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	4948      	ldr	r1, [pc, #288]	; (8003268 <HAL_GPIO_DeInit+0x210>)
 8003146:	4013      	ands	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_GPIO_DeInit+0x210>)
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43db      	mvns	r3, r3
 8003152:	4945      	ldr	r1, [pc, #276]	; (8003268 <HAL_GPIO_DeInit+0x210>)
 8003154:	4013      	ands	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003158:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_GPIO_DeInit+0x210>)
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	43db      	mvns	r3, r3
 8003160:	4941      	ldr	r1, [pc, #260]	; (8003268 <HAL_GPIO_DeInit+0x210>)
 8003162:	4013      	ands	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003166:	4b40      	ldr	r3, [pc, #256]	; (8003268 <HAL_GPIO_DeInit+0x210>)
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	493e      	ldr	r1, [pc, #248]	; (8003268 <HAL_GPIO_DeInit+0x210>)
 8003170:	4013      	ands	r3, r2
 8003172:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003184:	4a2d      	ldr	r2, [pc, #180]	; (800323c <HAL_GPIO_DeInit+0x1e4>)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	43da      	mvns	r2, r3
 8003194:	4829      	ldr	r0, [pc, #164]	; (800323c <HAL_GPIO_DeInit+0x1e4>)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	400a      	ands	r2, r1
 800319c:	3302      	adds	r3, #2
 800319e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2103      	movs	r1, #3
 80031ac:	fa01 f303 	lsl.w	r3, r1, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	401a      	ands	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	08da      	lsrs	r2, r3, #3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3208      	adds	r2, #8
 80031c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	08d2      	lsrs	r2, r2, #3
 80031d8:	4019      	ands	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2103      	movs	r1, #3
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	2101      	movs	r1, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	2103      	movs	r1, #3
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	401a      	ands	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	3301      	adds	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	f67f af22 	bls.w	8003074 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40013800 	.word	0x40013800
 8003240:	40020000 	.word	0x40020000
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	40020c00 	.word	0x40020c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40021400 	.word	0x40021400
 8003258:	40021800 	.word	0x40021800
 800325c:	40021c00 	.word	0x40021c00
 8003260:	40022000 	.word	0x40022000
 8003264:	40022400 	.word	0x40022400
 8003268:	40013c00 	.word	0x40013c00

0800326c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
 8003278:	4613      	mov	r3, r2
 800327a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800327c:	787b      	ldrb	r3, [r7, #1]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003288:	e003      	b.n	8003292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	041a      	lsls	r2, r3, #16
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	619a      	str	r2, [r3, #24]
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e11f      	b.n	80034f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd ffaa 	bl	8001220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003304:	f002 fb74 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8003308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4a7b      	ldr	r2, [pc, #492]	; (80034fc <HAL_I2C_Init+0x25c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d807      	bhi.n	8003324 <HAL_I2C_Init+0x84>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a7a      	ldr	r2, [pc, #488]	; (8003500 <HAL_I2C_Init+0x260>)
 8003318:	4293      	cmp	r3, r2
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e006      	b.n	8003332 <HAL_I2C_Init+0x92>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a77      	ldr	r2, [pc, #476]	; (8003504 <HAL_I2C_Init+0x264>)
 8003328:	4293      	cmp	r3, r2
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0db      	b.n	80034f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a72      	ldr	r2, [pc, #456]	; (8003508 <HAL_I2C_Init+0x268>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0c9b      	lsrs	r3, r3, #18
 8003344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a64      	ldr	r2, [pc, #400]	; (80034fc <HAL_I2C_Init+0x25c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d802      	bhi.n	8003374 <HAL_I2C_Init+0xd4>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3301      	adds	r3, #1
 8003372:	e009      	b.n	8003388 <HAL_I2C_Init+0xe8>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	4a63      	ldr	r2, [pc, #396]	; (800350c <HAL_I2C_Init+0x26c>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	3301      	adds	r3, #1
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	430b      	orrs	r3, r1
 800338e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800339a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4956      	ldr	r1, [pc, #344]	; (80034fc <HAL_I2C_Init+0x25c>)
 80033a4:	428b      	cmp	r3, r1
 80033a6:	d80d      	bhi.n	80033c4 <HAL_I2C_Init+0x124>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e59      	subs	r1, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	2b04      	cmp	r3, #4
 80033be:	bf38      	it	cc
 80033c0:	2304      	movcc	r3, #4
 80033c2:	e04f      	b.n	8003464 <HAL_I2C_Init+0x1c4>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <HAL_I2C_Init+0x150>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1e58      	subs	r0, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e012      	b.n	8003416 <HAL_I2C_Init+0x176>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e58      	subs	r0, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	0099      	lsls	r1, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	fbb0 f3f3 	udiv	r3, r0, r3
 8003406:	3301      	adds	r3, #1
 8003408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Init+0x17e>
 800341a:	2301      	movs	r3, #1
 800341c:	e022      	b.n	8003464 <HAL_I2C_Init+0x1c4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10e      	bne.n	8003444 <HAL_I2C_Init+0x1a4>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1e58      	subs	r0, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	440b      	add	r3, r1
 8003434:	fbb0 f3f3 	udiv	r3, r0, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003442:	e00f      	b.n	8003464 <HAL_I2C_Init+0x1c4>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1e58      	subs	r0, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	0099      	lsls	r1, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	fbb0 f3f3 	udiv	r3, r0, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	6809      	ldr	r1, [r1, #0]
 8003468:	4313      	orrs	r3, r2
 800346a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6911      	ldr	r1, [r2, #16]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68d2      	ldr	r2, [r2, #12]
 800349e:	4311      	orrs	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	000186a0 	.word	0x000186a0
 8003500:	001e847f 	.word	0x001e847f
 8003504:	003d08ff 	.word	0x003d08ff
 8003508:	431bde83 	.word	0x431bde83
 800350c:	10624dd3 	.word	0x10624dd3

08003510 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e021      	b.n	8003566 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2224      	movs	r2, #36	; 0x24
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd feb8 	bl	80012b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08c      	sub	sp, #48	; 0x30
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	461a      	mov	r2, r3
 800357c:	460b      	mov	r3, r1
 800357e:	817b      	strh	r3, [r7, #10]
 8003580:	4613      	mov	r3, r2
 8003582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7fe fe48 	bl	8002218 <HAL_GetTick>
 8003588:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	f040 820b 	bne.w	80039ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2319      	movs	r3, #25
 800359e:	2201      	movs	r2, #1
 80035a0:	497c      	ldr	r1, [pc, #496]	; (8003794 <HAL_I2C_Master_Receive+0x224>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 ff7c 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	e1fe      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_I2C_Master_Receive+0x50>
 80035bc:	2302      	movs	r3, #2
 80035be:	e1f7      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d007      	beq.n	80035e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2222      	movs	r2, #34	; 0x22
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2210      	movs	r2, #16
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	893a      	ldrh	r2, [r7, #8]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a5c      	ldr	r2, [pc, #368]	; (8003798 <HAL_I2C_Master_Receive+0x228>)
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003628:	8979      	ldrh	r1, [r7, #10]
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fcf0 	bl	8004014 <I2C_MasterRequestRead>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e1b8      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	623b      	str	r3, [r7, #32]
 800365a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e18c      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	2b01      	cmp	r3, #1
 8003674:	d11b      	bne.n	80036ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e16c      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d11b      	bne.n	80036ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	e14c      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003714:	e138      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	2b03      	cmp	r3, #3
 800371c:	f200 80f1 	bhi.w	8003902 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	2b01      	cmp	r3, #1
 8003726:	d123      	bne.n	8003770 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f001 f80f 	bl	8004750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e139      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800376e:	e10b      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	2b02      	cmp	r3, #2
 8003776:	d14e      	bne.n	8003816 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	2200      	movs	r2, #0
 8003780:	4906      	ldr	r1, [pc, #24]	; (800379c <HAL_I2C_Master_Receive+0x22c>)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fe8c 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e10e      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
 8003792:	bf00      	nop
 8003794:	00100002 	.word	0x00100002
 8003798:	ffff0000 	.word	0xffff0000
 800379c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003814:	e0b8      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	2200      	movs	r2, #0
 800381e:	4966      	ldr	r1, [pc, #408]	; (80039b8 <HAL_I2C_Master_Receive+0x448>)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fe3d 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0bf      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	2200      	movs	r2, #0
 800387a:	494f      	ldr	r1, [pc, #316]	; (80039b8 <HAL_I2C_Master_Receive+0x448>)
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fe0f 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e091      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003900:	e042      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 ff22 	bl	8004750 <I2C_WaitOnRXNEFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e04c      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d118      	bne.n	8003988 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	f47f aec2 	bne.w	8003716 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	00010004 	.word	0x00010004

080039bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d6:	f7fe fc1f 	bl	8002218 <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	f040 80d9 	bne.w	8003b9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2319      	movs	r3, #25
 80039f0:	2201      	movs	r2, #1
 80039f2:	496d      	ldr	r1, [pc, #436]	; (8003ba8 <HAL_I2C_Mem_Write+0x1ec>)
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fd53 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	e0cc      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2C_Mem_Write+0x56>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e0c5      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d007      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2221      	movs	r2, #33	; 0x21
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2240      	movs	r2, #64	; 0x40
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a4d      	ldr	r2, [pc, #308]	; (8003bac <HAL_I2C_Mem_Write+0x1f0>)
 8003a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a7a:	88f8      	ldrh	r0, [r7, #6]
 8003a7c:	893a      	ldrh	r2, [r7, #8]
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	4603      	mov	r3, r0
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fb8e 	bl	80041ac <I2C_RequestMemoryWrite>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d052      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e081      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fdd4 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06b      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_I2C_Mem_Write+0x180>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d017      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1aa      	bne.n	8003a9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fdc0 	bl	80046ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d107      	bne.n	8003b6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e016      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	00100002 	.word	0x00100002
 8003bac:	ffff0000 	.word	0xffff0000

08003bb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08c      	sub	sp, #48	; 0x30
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	817b      	strh	r3, [r7, #10]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	813b      	strh	r3, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bca:	f7fe fb25 	bl	8002218 <HAL_GetTick>
 8003bce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	f040 8208 	bne.w	8003fee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2319      	movs	r3, #25
 8003be4:	2201      	movs	r2, #1
 8003be6:	497b      	ldr	r1, [pc, #492]	; (8003dd4 <HAL_I2C_Mem_Read+0x224>)
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fc59 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e1fb      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_I2C_Mem_Read+0x56>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e1f4      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x440>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d007      	beq.n	8003c2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2222      	movs	r2, #34	; 0x22
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2240      	movs	r2, #64	; 0x40
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a5b      	ldr	r2, [pc, #364]	; (8003dd8 <HAL_I2C_Mem_Read+0x228>)
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c6e:	88f8      	ldrh	r0, [r7, #6]
 8003c70:	893a      	ldrh	r2, [r7, #8]
 8003c72:	8979      	ldrh	r1, [r7, #10]
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fb28 	bl	80042d4 <I2C_RequestMemoryRead>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1b0      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d113      	bne.n	8003cbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e184      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d11b      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e164      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d11b      	bne.n	8003d3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	e144      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d54:	e138      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	f200 80f1 	bhi.w	8003f42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d123      	bne.n	8003db0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fcef 	bl	8004750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e139      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dae:	e10b      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d14e      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4906      	ldr	r1, [pc, #24]	; (8003ddc <HAL_I2C_Mem_Read+0x22c>)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fb6c 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e10e      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x440>
 8003dd2:	bf00      	nop
 8003dd4:	00100002 	.word	0x00100002
 8003dd8:	ffff0000 	.word	0xffff0000
 8003ddc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e54:	e0b8      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4966      	ldr	r1, [pc, #408]	; (8003ff8 <HAL_I2C_Mem_Read+0x448>)
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fb1d 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0bf      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	2200      	movs	r2, #0
 8003eba:	494f      	ldr	r1, [pc, #316]	; (8003ff8 <HAL_I2C_Mem_Read+0x448>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 faef 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e091      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f40:	e042      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fc02 	bl	8004750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e04c      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d118      	bne.n	8003fc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f47f aec2 	bne.w	8003d56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3728      	adds	r7, #40	; 0x28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	00010004 	.word	0x00010004

08003ffc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	460b      	mov	r3, r1
 8004022:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004038:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d006      	beq.n	800404e <I2C_MasterRequestRead+0x3a>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d003      	beq.n	800404e <I2C_MasterRequestRead+0x3a>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800404c:	d108      	bne.n	8004060 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e00b      	b.n	8004078 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	2b11      	cmp	r3, #17
 8004066:	d107      	bne.n	8004078 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004076:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fa0b 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00c      	beq.n	80040aa <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e078      	b.n	800419c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b2:	d108      	bne.n	80040c6 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040b4:	897b      	ldrh	r3, [r7, #10]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]
 80040c4:	e05e      	b.n	8004184 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040c6:	897b      	ldrh	r3, [r7, #10]
 80040c8:	11db      	asrs	r3, r3, #7
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f003 0306 	and.w	r3, r3, #6
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f063 030f 	orn	r3, r3, #15
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4930      	ldr	r1, [pc, #192]	; (80041a4 <I2C_MasterRequestRead+0x190>)
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fa32 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e053      	b.n	800419c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040f4:	897b      	ldrh	r3, [r7, #10]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4929      	ldr	r1, [pc, #164]	; (80041a8 <I2C_MasterRequestRead+0x194>)
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fa22 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e043      	b.n	800419c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004138:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f9aa 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00c      	beq.n	800416c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e017      	b.n	800419c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800416c:	897b      	ldrh	r3, [r7, #10]
 800416e:	11db      	asrs	r3, r3, #7
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 0306 	and.w	r3, r3, #6
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f063 030e 	orn	r3, r3, #14
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	4907      	ldr	r1, [pc, #28]	; (80041a8 <I2C_MasterRequestRead+0x194>)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f9df 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	00010008 	.word	0x00010008
 80041a8:	00010002 	.word	0x00010002

080041ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	4608      	mov	r0, r1
 80041b6:	4611      	mov	r1, r2
 80041b8:	461a      	mov	r2, r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	817b      	strh	r3, [r7, #10]
 80041be:	460b      	mov	r3, r1
 80041c0:	813b      	strh	r3, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	2200      	movs	r2, #0
 80041de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f95c 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00c      	beq.n	8004208 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e05f      	b.n	80042c8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004208:	897b      	ldrh	r3, [r7, #10]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004216:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	6a3a      	ldr	r2, [r7, #32]
 800421c:	492c      	ldr	r1, [pc, #176]	; (80042d0 <I2C_RequestMemoryWrite+0x124>)
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f995 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e04c      	b.n	80042c8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	6a39      	ldr	r1, [r7, #32]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f9ff 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2b04      	cmp	r3, #4
 800425a:	d107      	bne.n	800426c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e02b      	b.n	80042c8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d105      	bne.n	8004282 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004276:	893b      	ldrh	r3, [r7, #8]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	611a      	str	r2, [r3, #16]
 8004280:	e021      	b.n	80042c6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004282:	893b      	ldrh	r3, [r7, #8]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	b29b      	uxth	r3, r3
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	6a39      	ldr	r1, [r7, #32]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f9d9 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d107      	bne.n	80042b8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e005      	b.n	80042c8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042bc:	893b      	ldrh	r3, [r7, #8]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	00010002 	.word	0x00010002

080042d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	817b      	strh	r3, [r7, #10]
 80042e6:	460b      	mov	r3, r1
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	2200      	movs	r2, #0
 8004316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f8c0 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00c      	beq.n	8004340 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e0a9      	b.n	8004494 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004340:	897b      	ldrh	r3, [r7, #10]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800434e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	6a3a      	ldr	r2, [r7, #32]
 8004354:	4951      	ldr	r1, [pc, #324]	; (800449c <I2C_RequestMemoryRead+0x1c8>)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f8f9 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e096      	b.n	8004494 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437e:	6a39      	ldr	r1, [r7, #32]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f963 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00d      	beq.n	80043a8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	2b04      	cmp	r3, #4
 8004392:	d107      	bne.n	80043a4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e075      	b.n	8004494 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d105      	bne.n	80043ba <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ae:	893b      	ldrh	r3, [r7, #8]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	611a      	str	r2, [r3, #16]
 80043b8:	e021      	b.n	80043fe <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043ba:	893b      	ldrh	r3, [r7, #8]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	b29b      	uxth	r3, r3
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ca:	6a39      	ldr	r1, [r7, #32]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f93d 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00d      	beq.n	80043f4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d107      	bne.n	80043f0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e04f      	b.n	8004494 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004400:	6a39      	ldr	r1, [r7, #32]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f922 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00d      	beq.n	800442a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	2b04      	cmp	r3, #4
 8004414:	d107      	bne.n	8004426 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004424:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e034      	b.n	8004494 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004438:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	2200      	movs	r2, #0
 8004442:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f82a 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00c      	beq.n	800446c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e013      	b.n	8004494 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800446c:	897b      	ldrh	r3, [r7, #10]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	4906      	ldr	r1, [pc, #24]	; (800449c <I2C_RequestMemoryRead+0x1c8>)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f863 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	00010002 	.word	0x00010002

080044a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b0:	e025      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d021      	beq.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fd fead 	bl	8002218 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d116      	bne.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e023      	b.n	8004546 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10d      	bne.n	8004524 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	e00c      	b.n	800453e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	43da      	mvns	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d0b6      	beq.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800455c:	e051      	b.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456c:	d123      	bne.n	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004586:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f043 0204 	orr.w	r2, r3, #4
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e046      	b.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d021      	beq.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fd fe2b 	bl	8002218 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e020      	b.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d10c      	bne.n	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	43da      	mvns	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4013      	ands	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e00b      	b.n	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	43da      	mvns	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4013      	ands	r3, r2
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d18d      	bne.n	800455e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004658:	e02d      	b.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f8ce 	bl	80047fc <I2C_IsAcknowledgeFailed>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e02d      	b.n	80046c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d021      	beq.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fd fdd1 	bl	8002218 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d116      	bne.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e007      	b.n	80046c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d1ca      	bne.n	800465a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046da:	e02d      	b.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f88d 	bl	80047fc <I2C_IsAcknowledgeFailed>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e02d      	b.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d021      	beq.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f4:	f7fd fd90 	bl	8002218 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e007      	b.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b04      	cmp	r3, #4
 8004744:	d1ca      	bne.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800475c:	e042      	b.n	80047e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b10      	cmp	r3, #16
 800476a:	d119      	bne.n	80047a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0210 	mvn.w	r2, #16
 8004774:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e029      	b.n	80047f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a0:	f7fd fd3a 	bl	8002218 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d302      	bcc.n	80047b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d116      	bne.n	80047e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e007      	b.n	80047f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d1b5      	bne.n	800475e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004812:	d11b      	bne.n	800484c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800481c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	f043 0204 	orr.w	r2, r3, #4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b20      	cmp	r3, #32
 800486e:	d129      	bne.n	80048c4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	; 0x24
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0210 	bic.w	r2, r2, #16
 8004896:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d12a      	bne.n	8004942 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2224      	movs	r2, #36	; 0x24
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800490c:	89fb      	ldrh	r3, [r7, #14]
 800490e:	f023 030f 	bic.w	r3, r3, #15
 8004912:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	b29a      	uxth	r2, r3
 8004918:	89fb      	ldrh	r3, [r7, #14]
 800491a:	4313      	orrs	r3, r2
 800491c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	89fa      	ldrh	r2, [r7, #14]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	e000      	b.n	8004944 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004942:	2302      	movs	r3, #2
  }
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0bf      	b.n	8004ae2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fcbc 	bl	80012f4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004992:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6999      	ldr	r1, [r3, #24]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6899      	ldr	r1, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b4a      	ldr	r3, [pc, #296]	; (8004aec <HAL_LTDC_Init+0x19c>)
 80049c4:	400b      	ands	r3, r1
 80049c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68d9      	ldr	r1, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4b3e      	ldr	r3, [pc, #248]	; (8004aec <HAL_LTDC_Init+0x19c>)
 80049f2:	400b      	ands	r3, r1
 80049f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68d9      	ldr	r1, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1a      	ldr	r2, [r3, #32]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6919      	ldr	r1, [r3, #16]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b33      	ldr	r3, [pc, #204]	; (8004aec <HAL_LTDC_Init+0x19c>)
 8004a20:	400b      	ands	r3, r1
 8004a22:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6919      	ldr	r1, [r3, #16]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6959      	ldr	r1, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b27      	ldr	r3, [pc, #156]	; (8004aec <HAL_LTDC_Init+0x19c>)
 8004a4e:	400b      	ands	r3, r1
 8004a50:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	041b      	lsls	r3, r3, #16
 8004a58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6959      	ldr	r1, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0206 	orr.w	r2, r2, #6
 8004abe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	f000f800 	.word	0xf000f800

08004af0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d023      	beq.n	8004b5a <HAL_LTDC_IRQHandler+0x6a>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01e      	beq.n	8004b5a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0204 	bic.w	r2, r2, #4
 8004b2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2204      	movs	r2, #4
 8004b32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b3a:	f043 0201 	orr.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2204      	movs	r2, #4
 8004b48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f86f 	bl	8004c38 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d023      	beq.n	8004bac <HAL_LTDC_IRQHandler+0xbc>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01e      	beq.n	8004bac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0202 	bic.w	r2, r2, #2
 8004b7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2202      	movs	r2, #2
 8004b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b8c:	f043 0202 	orr.w	r2, r3, #2
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f846 	bl	8004c38 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01b      	beq.n	8004bee <HAL_LTDC_IRQHandler+0xfe>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d016      	beq.n	8004bee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f00a fa55 	bl	800f098 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01b      	beq.n	8004c30 <HAL_LTDC_IRQHandler+0x140>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0208 	bic.w	r2, r2, #8
 8004c10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2208      	movs	r2, #8
 8004c18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f80e 	bl	8004c4c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c60:	b5b0      	push	{r4, r5, r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_LTDC_ConfigLayer+0x1a>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e02c      	b.n	8004cd4 <HAL_LTDC_ConfigLayer+0x74>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2134      	movs	r1, #52	; 0x34
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	461d      	mov	r5, r3
 8004ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f849 	bl	8004d4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bdb0      	pop	{r4, r5, r7, pc}

08004cdc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_LTDC_ProgramLineEvent+0x18>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e023      	b.n	8004d3c <HAL_LTDC_ProgramLineEvent+0x60>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004d14:	4a0c      	ldr	r2, [pc, #48]	; (8004d48 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40016800 	.word	0x40016800

08004d4c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	0c1b      	lsrs	r3, r3, #16
 8004d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d68:	4413      	add	r3, r2
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	01db      	lsls	r3, r3, #7
 8004d78:	4413      	add	r3, r2
 8004d7a:	3384      	adds	r3, #132	; 0x84
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	4611      	mov	r1, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	01d2      	lsls	r2, r2, #7
 8004d88:	440a      	add	r2, r1
 8004d8a:	3284      	adds	r2, #132	; 0x84
 8004d8c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004d90:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da2:	4413      	add	r3, r2
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4619      	mov	r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	01db      	lsls	r3, r3, #7
 8004db0:	440b      	add	r3, r1
 8004db2:	3384      	adds	r3, #132	; 0x84
 8004db4:	4619      	mov	r1, r3
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dca:	4413      	add	r3, r2
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	01db      	lsls	r3, r3, #7
 8004dda:	4413      	add	r3, r2
 8004ddc:	3384      	adds	r3, #132	; 0x84
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	4611      	mov	r1, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	01d2      	lsls	r2, r2, #7
 8004dea:	440a      	add	r2, r1
 8004dec:	3284      	adds	r2, #132	; 0x84
 8004dee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004df2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e02:	4413      	add	r3, r2
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	01db      	lsls	r3, r3, #7
 8004e10:	440b      	add	r3, r1
 8004e12:	3384      	adds	r3, #132	; 0x84
 8004e14:	4619      	mov	r1, r3
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	01db      	lsls	r3, r3, #7
 8004e26:	4413      	add	r3, r2
 8004e28:	3384      	adds	r3, #132	; 0x84
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	4611      	mov	r1, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	01d2      	lsls	r2, r2, #7
 8004e36:	440a      	add	r2, r1
 8004e38:	3284      	adds	r2, #132	; 0x84
 8004e3a:	f023 0307 	bic.w	r3, r3, #7
 8004e3e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	01db      	lsls	r3, r3, #7
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3384      	adds	r3, #132	; 0x84
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	061b      	lsls	r3, r3, #24
 8004e70:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	01db      	lsls	r3, r3, #7
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3384      	adds	r3, #132	; 0x84
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	01db      	lsls	r3, r3, #7
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3384      	adds	r3, #132	; 0x84
 8004e90:	461a      	mov	r2, r3
 8004e92:	2300      	movs	r3, #0
 8004e94:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	01db      	lsls	r3, r3, #7
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3384      	adds	r3, #132	; 0x84
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	01db      	lsls	r3, r3, #7
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3384      	adds	r3, #132	; 0x84
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	01d2      	lsls	r2, r2, #7
 8004ed6:	440a      	add	r2, r1
 8004ed8:	3284      	adds	r2, #132	; 0x84
 8004eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ede:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	01db      	lsls	r3, r3, #7
 8004eea:	4413      	add	r3, r2
 8004eec:	3384      	adds	r3, #132	; 0x84
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	01db      	lsls	r3, r3, #7
 8004f00:	4413      	add	r3, r2
 8004f02:	3384      	adds	r3, #132	; 0x84
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	01d2      	lsls	r2, r2, #7
 8004f10:	440a      	add	r2, r1
 8004f12:	3284      	adds	r2, #132	; 0x84
 8004f14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f18:	f023 0307 	bic.w	r3, r3, #7
 8004f1c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	69da      	ldr	r2, [r3, #28]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	6809      	ldr	r1, [r1, #0]
 8004f2a:	4608      	mov	r0, r1
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	01c9      	lsls	r1, r1, #7
 8004f30:	4401      	add	r1, r0
 8004f32:	3184      	adds	r1, #132	; 0x84
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	01db      	lsls	r3, r3, #7
 8004f42:	4413      	add	r3, r2
 8004f44:	3384      	adds	r3, #132	; 0x84
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	01db      	lsls	r3, r3, #7
 8004f52:	4413      	add	r3, r2
 8004f54:	3384      	adds	r3, #132	; 0x84
 8004f56:	461a      	mov	r2, r3
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	01db      	lsls	r3, r3, #7
 8004f66:	4413      	add	r3, r2
 8004f68:	3384      	adds	r3, #132	; 0x84
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	e01b      	b.n	8004fb8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d102      	bne.n	8004f8e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	e014      	b.n	8004fb8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d00b      	beq.n	8004fae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d007      	beq.n	8004fae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d003      	beq.n	8004fae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004faa:	2b07      	cmp	r3, #7
 8004fac:	d102      	bne.n	8004fb4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	e001      	b.n	8004fb8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	01db      	lsls	r3, r3, #7
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3384      	adds	r3, #132	; 0x84
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	4611      	mov	r1, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	01d2      	lsls	r2, r2, #7
 8004fd2:	440a      	add	r2, r1
 8004fd4:	3284      	adds	r2, #132	; 0x84
 8004fd6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004fda:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	041a      	lsls	r2, r3, #16
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	1acb      	subs	r3, r1, r3
 8004ff2:	69f9      	ldr	r1, [r7, #28]
 8004ff4:	fb01 f303 	mul.w	r3, r1, r3
 8004ff8:	3303      	adds	r3, #3
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	6809      	ldr	r1, [r1, #0]
 8004ffe:	4608      	mov	r0, r1
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	01c9      	lsls	r1, r1, #7
 8005004:	4401      	add	r1, r0
 8005006:	3184      	adds	r1, #132	; 0x84
 8005008:	4313      	orrs	r3, r2
 800500a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	01db      	lsls	r3, r3, #7
 8005016:	4413      	add	r3, r2
 8005018:	3384      	adds	r3, #132	; 0x84
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	4611      	mov	r1, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	01d2      	lsls	r2, r2, #7
 8005026:	440a      	add	r2, r1
 8005028:	3284      	adds	r2, #132	; 0x84
 800502a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800502e:	f023 0307 	bic.w	r3, r3, #7
 8005032:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	01db      	lsls	r3, r3, #7
 800503e:	4413      	add	r3, r2
 8005040:	3384      	adds	r3, #132	; 0x84
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	01db      	lsls	r3, r3, #7
 8005054:	4413      	add	r3, r2
 8005056:	3384      	adds	r3, #132	; 0x84
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	4611      	mov	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	01d2      	lsls	r2, r2, #7
 8005064:	440a      	add	r2, r1
 8005066:	3284      	adds	r2, #132	; 0x84
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	6013      	str	r3, [r2, #0]
}
 800506e:	bf00      	nop
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
	...

0800507c <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e043      	b.n	800511a <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7fc fa9a 	bl	80015e0 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3308      	adds	r3, #8
 80050b4:	4619      	mov	r1, r3
 80050b6:	4610      	mov	r0, r2
 80050b8:	f001 ff3a 	bl	8006f30 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	461a      	mov	r2, r3
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	f001 ff96 	bl	8006ff8 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6858      	ldr	r0, [r3, #4]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	f001 ffe1 	bl	80070a0 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	6892      	ldr	r2, [r2, #8]
 80050e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	6892      	ldr	r2, [r2, #8]
 80050f2:	f041 0101 	orr.w	r1, r1, #1
 80050f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8005102:	4b08      	ldr	r3, [pc, #32]	; (8005124 <HAL_NOR_Init+0xa8>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e002      	b.n	8005110 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_NOR_Init+0xa8>)
 800510c:	2201      	movs	r2, #1
 800510e:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000180 	.word	0x20000180

08005128 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800513c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005140:	6413      	str	r3, [r2, #64]	; 0x40
 8005142:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800514e:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <HAL_PWREx_EnableOverDrive+0x94>)
 8005150:	2201      	movs	r2, #1
 8005152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005154:	f7fd f860 	bl	8002218 <HAL_GetTick>
 8005158:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800515a:	e009      	b.n	8005170 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800515c:	f7fd f85c 	bl	8002218 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800516a:	d901      	bls.n	8005170 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e01f      	b.n	80051b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005170:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	d1ee      	bne.n	800515c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005184:	f7fd f848 	bl	8002218 <HAL_GetTick>
 8005188:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800518a:	e009      	b.n	80051a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800518c:	f7fd f844 	bl	8002218 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519a:	d901      	bls.n	80051a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e007      	b.n	80051b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ac:	d1ee      	bne.n	800518c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40023800 	.word	0x40023800
 80051bc:	420e0040 	.word	0x420e0040
 80051c0:	40007000 	.word	0x40007000
 80051c4:	420e0044 	.word	0x420e0044

080051c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e25b      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d075      	beq.n	80052d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051e6:	4ba3      	ldr	r3, [pc, #652]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d00c      	beq.n	800520c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051f2:	4ba0      	ldr	r3, [pc, #640]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d112      	bne.n	8005224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051fe:	4b9d      	ldr	r3, [pc, #628]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800520a:	d10b      	bne.n	8005224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800520c:	4b99      	ldr	r3, [pc, #612]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d05b      	beq.n	80052d0 <HAL_RCC_OscConfig+0x108>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d157      	bne.n	80052d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e236      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d106      	bne.n	800523c <HAL_RCC_OscConfig+0x74>
 800522e:	4b91      	ldr	r3, [pc, #580]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a90      	ldr	r2, [pc, #576]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	e01d      	b.n	8005278 <HAL_RCC_OscConfig+0xb0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005244:	d10c      	bne.n	8005260 <HAL_RCC_OscConfig+0x98>
 8005246:	4b8b      	ldr	r3, [pc, #556]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a8a      	ldr	r2, [pc, #552]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800524c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	4b88      	ldr	r3, [pc, #544]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a87      	ldr	r2, [pc, #540]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e00b      	b.n	8005278 <HAL_RCC_OscConfig+0xb0>
 8005260:	4b84      	ldr	r3, [pc, #528]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a83      	ldr	r2, [pc, #524]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	4b81      	ldr	r3, [pc, #516]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a80      	ldr	r2, [pc, #512]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d013      	beq.n	80052a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005280:	f7fc ffca 	bl	8002218 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005288:	f7fc ffc6 	bl	8002218 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	; 0x64
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e1fb      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	4b76      	ldr	r3, [pc, #472]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0xc0>
 80052a6:	e014      	b.n	80052d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fc ffb6 	bl	8002218 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052b0:	f7fc ffb2 	bl	8002218 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	; 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e1e7      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052c2:	4b6c      	ldr	r3, [pc, #432]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0xe8>
 80052ce:	e000      	b.n	80052d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d063      	beq.n	80053a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052de:	4b65      	ldr	r3, [pc, #404]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00b      	beq.n	8005302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ea:	4b62      	ldr	r3, [pc, #392]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d11c      	bne.n	8005330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052f6:	4b5f      	ldr	r3, [pc, #380]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d116      	bne.n	8005330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005302:	4b5c      	ldr	r3, [pc, #368]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <HAL_RCC_OscConfig+0x152>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d001      	beq.n	800531a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e1bb      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531a:	4b56      	ldr	r3, [pc, #344]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4952      	ldr	r1, [pc, #328]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800532a:	4313      	orrs	r3, r2
 800532c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800532e:	e03a      	b.n	80053a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d020      	beq.n	800537a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005338:	4b4f      	ldr	r3, [pc, #316]	; (8005478 <HAL_RCC_OscConfig+0x2b0>)
 800533a:	2201      	movs	r2, #1
 800533c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533e:	f7fc ff6b 	bl	8002218 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005346:	f7fc ff67 	bl	8002218 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e19c      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005358:	4b46      	ldr	r3, [pc, #280]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f0      	beq.n	8005346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005364:	4b43      	ldr	r3, [pc, #268]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4940      	ldr	r1, [pc, #256]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	4313      	orrs	r3, r2
 8005376:	600b      	str	r3, [r1, #0]
 8005378:	e015      	b.n	80053a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800537a:	4b3f      	ldr	r3, [pc, #252]	; (8005478 <HAL_RCC_OscConfig+0x2b0>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fc ff4a 	bl	8002218 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005388:	f7fc ff46 	bl	8002218 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e17b      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800539a:	4b36      	ldr	r3, [pc, #216]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d030      	beq.n	8005414 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d016      	beq.n	80053e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ba:	4b30      	ldr	r3, [pc, #192]	; (800547c <HAL_RCC_OscConfig+0x2b4>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c0:	f7fc ff2a 	bl	8002218 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c8:	f7fc ff26 	bl	8002218 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e15b      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053da:	4b26      	ldr	r3, [pc, #152]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80053dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0x200>
 80053e6:	e015      	b.n	8005414 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e8:	4b24      	ldr	r3, [pc, #144]	; (800547c <HAL_RCC_OscConfig+0x2b4>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ee:	f7fc ff13 	bl	8002218 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053f6:	f7fc ff0f 	bl	8002218 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e144      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005408:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800540a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80a0 	beq.w	8005562 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005422:	2300      	movs	r3, #0
 8005424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005426:	4b13      	ldr	r3, [pc, #76]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10f      	bne.n	8005452 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005432:	2300      	movs	r3, #0
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	4a0e      	ldr	r2, [pc, #56]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800543c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005440:	6413      	str	r3, [r2, #64]	; 0x40
 8005442:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800544e:	2301      	movs	r3, #1
 8005450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005452:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_OscConfig+0x2b8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d121      	bne.n	80054a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_RCC_OscConfig+0x2b8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a07      	ldr	r2, [pc, #28]	; (8005480 <HAL_RCC_OscConfig+0x2b8>)
 8005464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800546a:	f7fc fed5 	bl	8002218 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005470:	e011      	b.n	8005496 <HAL_RCC_OscConfig+0x2ce>
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	42470000 	.word	0x42470000
 800547c:	42470e80 	.word	0x42470e80
 8005480:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005484:	f7fc fec8 	bl	8002218 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e0fd      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005496:	4b81      	ldr	r3, [pc, #516]	; (800569c <HAL_RCC_OscConfig+0x4d4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d106      	bne.n	80054b8 <HAL_RCC_OscConfig+0x2f0>
 80054aa:	4b7d      	ldr	r3, [pc, #500]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	4a7c      	ldr	r2, [pc, #496]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70
 80054b6:	e01c      	b.n	80054f2 <HAL_RCC_OscConfig+0x32a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b05      	cmp	r3, #5
 80054be:	d10c      	bne.n	80054da <HAL_RCC_OscConfig+0x312>
 80054c0:	4b77      	ldr	r3, [pc, #476]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80054c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c4:	4a76      	ldr	r2, [pc, #472]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80054c6:	f043 0304 	orr.w	r3, r3, #4
 80054ca:	6713      	str	r3, [r2, #112]	; 0x70
 80054cc:	4b74      	ldr	r3, [pc, #464]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4a73      	ldr	r2, [pc, #460]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	6713      	str	r3, [r2, #112]	; 0x70
 80054d8:	e00b      	b.n	80054f2 <HAL_RCC_OscConfig+0x32a>
 80054da:	4b71      	ldr	r3, [pc, #452]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	4a70      	ldr	r2, [pc, #448]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	6713      	str	r3, [r2, #112]	; 0x70
 80054e6:	4b6e      	ldr	r3, [pc, #440]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	4a6d      	ldr	r2, [pc, #436]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80054ec:	f023 0304 	bic.w	r3, r3, #4
 80054f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d015      	beq.n	8005526 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fa:	f7fc fe8d 	bl	8002218 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005500:	e00a      	b.n	8005518 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005502:	f7fc fe89 	bl	8002218 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005510:	4293      	cmp	r3, r2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e0bc      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005518:	4b61      	ldr	r3, [pc, #388]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0ee      	beq.n	8005502 <HAL_RCC_OscConfig+0x33a>
 8005524:	e014      	b.n	8005550 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005526:	f7fc fe77 	bl	8002218 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800552c:	e00a      	b.n	8005544 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800552e:	f7fc fe73 	bl	8002218 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e0a6      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005544:	4b56      	ldr	r3, [pc, #344]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1ee      	bne.n	800552e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d105      	bne.n	8005562 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005556:	4b52      	ldr	r3, [pc, #328]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	4a51      	ldr	r2, [pc, #324]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 800555c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005560:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8092 	beq.w	8005690 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800556c:	4b4c      	ldr	r3, [pc, #304]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 030c 	and.w	r3, r3, #12
 8005574:	2b08      	cmp	r3, #8
 8005576:	d05c      	beq.n	8005632 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d141      	bne.n	8005604 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005580:	4b48      	ldr	r3, [pc, #288]	; (80056a4 <HAL_RCC_OscConfig+0x4dc>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005586:	f7fc fe47 	bl	8002218 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800558e:	f7fc fe43 	bl	8002218 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e078      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a0:	4b3f      	ldr	r3, [pc, #252]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f0      	bne.n	800558e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	019b      	lsls	r3, r3, #6
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	3b01      	subs	r3, #1
 80055c6:	041b      	lsls	r3, r3, #16
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	061b      	lsls	r3, r3, #24
 80055d0:	4933      	ldr	r1, [pc, #204]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d6:	4b33      	ldr	r3, [pc, #204]	; (80056a4 <HAL_RCC_OscConfig+0x4dc>)
 80055d8:	2201      	movs	r2, #1
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7fc fe1c 	bl	8002218 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fc fe18 	bl	8002218 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e04d      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f6:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0x41c>
 8005602:	e045      	b.n	8005690 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005604:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <HAL_RCC_OscConfig+0x4dc>)
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560a:	f7fc fe05 	bl	8002218 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005612:	f7fc fe01 	bl	8002218 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e036      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005624:	4b1e      	ldr	r3, [pc, #120]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f0      	bne.n	8005612 <HAL_RCC_OscConfig+0x44a>
 8005630:	e02e      	b.n	8005690 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e029      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800563e:	4b18      	ldr	r3, [pc, #96]	; (80056a0 <HAL_RCC_OscConfig+0x4d8>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	429a      	cmp	r2, r3
 8005650:	d11c      	bne.n	800568c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d115      	bne.n	800568c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005666:	4013      	ands	r3, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800566c:	4293      	cmp	r3, r2
 800566e:	d10d      	bne.n	800568c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d106      	bne.n	800568c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005688:	429a      	cmp	r2, r3
 800568a:	d001      	beq.n	8005690 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40007000 	.word	0x40007000
 80056a0:	40023800 	.word	0x40023800
 80056a4:	42470060 	.word	0x42470060

080056a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0cc      	b.n	8005856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056bc:	4b68      	ldr	r3, [pc, #416]	; (8005860 <HAL_RCC_ClockConfig+0x1b8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d90c      	bls.n	80056e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ca:	4b65      	ldr	r3, [pc, #404]	; (8005860 <HAL_RCC_ClockConfig+0x1b8>)
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d2:	4b63      	ldr	r3, [pc, #396]	; (8005860 <HAL_RCC_ClockConfig+0x1b8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d001      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e0b8      	b.n	8005856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d020      	beq.n	8005732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056fc:	4b59      	ldr	r3, [pc, #356]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4a58      	ldr	r2, [pc, #352]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005714:	4b53      	ldr	r3, [pc, #332]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4a52      	ldr	r2, [pc, #328]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800571e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005720:	4b50      	ldr	r3, [pc, #320]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	494d      	ldr	r1, [pc, #308]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	4313      	orrs	r3, r2
 8005730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d044      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d107      	bne.n	8005756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005746:	4b47      	ldr	r3, [pc, #284]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d119      	bne.n	8005786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e07f      	b.n	8005856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d003      	beq.n	8005766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005762:	2b03      	cmp	r3, #3
 8005764:	d107      	bne.n	8005776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005766:	4b3f      	ldr	r3, [pc, #252]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e06f      	b.n	8005856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005776:	4b3b      	ldr	r3, [pc, #236]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e067      	b.n	8005856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005786:	4b37      	ldr	r3, [pc, #220]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f023 0203 	bic.w	r2, r3, #3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	4934      	ldr	r1, [pc, #208]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 8005794:	4313      	orrs	r3, r2
 8005796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005798:	f7fc fd3e 	bl	8002218 <HAL_GetTick>
 800579c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579e:	e00a      	b.n	80057b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a0:	f7fc fd3a 	bl	8002218 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e04f      	b.n	8005856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b6:	4b2b      	ldr	r3, [pc, #172]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 020c 	and.w	r2, r3, #12
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d1eb      	bne.n	80057a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057c8:	4b25      	ldr	r3, [pc, #148]	; (8005860 <HAL_RCC_ClockConfig+0x1b8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d20c      	bcs.n	80057f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d6:	4b22      	ldr	r3, [pc, #136]	; (8005860 <HAL_RCC_ClockConfig+0x1b8>)
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057de:	4b20      	ldr	r3, [pc, #128]	; (8005860 <HAL_RCC_ClockConfig+0x1b8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e032      	b.n	8005856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057fc:	4b19      	ldr	r3, [pc, #100]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4916      	ldr	r1, [pc, #88]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	4313      	orrs	r3, r2
 800580c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	490e      	ldr	r1, [pc, #56]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800582e:	f000 f821 	bl	8005874 <HAL_RCC_GetSysClockFreq>
 8005832:	4601      	mov	r1, r0
 8005834:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <HAL_RCC_ClockConfig+0x1c0>)
 8005840:	5cd3      	ldrb	r3, [r2, r3]
 8005842:	fa21 f303 	lsr.w	r3, r1, r3
 8005846:	4a09      	ldr	r2, [pc, #36]	; (800586c <HAL_RCC_ClockConfig+0x1c4>)
 8005848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800584a:	4b09      	ldr	r3, [pc, #36]	; (8005870 <HAL_RCC_ClockConfig+0x1c8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f7fb feda 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40023c00 	.word	0x40023c00
 8005864:	40023800 	.word	0x40023800
 8005868:	0801cf4c 	.word	0x0801cf4c
 800586c:	20000004 	.word	0x20000004
 8005870:	20000080 	.word	0x20000080

08005874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	2300      	movs	r3, #0
 8005884:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800588a:	4b50      	ldr	r3, [pc, #320]	; (80059cc <HAL_RCC_GetSysClockFreq+0x158>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
 8005892:	2b04      	cmp	r3, #4
 8005894:	d007      	beq.n	80058a6 <HAL_RCC_GetSysClockFreq+0x32>
 8005896:	2b08      	cmp	r3, #8
 8005898:	d008      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x38>
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 808d 	bne.w	80059ba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058a0:	4b4b      	ldr	r3, [pc, #300]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80058a2:	60bb      	str	r3, [r7, #8]
       break;
 80058a4:	e08c      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058a6:	4b4b      	ldr	r3, [pc, #300]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80058a8:	60bb      	str	r3, [r7, #8]
      break;
 80058aa:	e089      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058ac:	4b47      	ldr	r3, [pc, #284]	; (80059cc <HAL_RCC_GetSysClockFreq+0x158>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058b6:	4b45      	ldr	r3, [pc, #276]	; (80059cc <HAL_RCC_GetSysClockFreq+0x158>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d023      	beq.n	800590a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c2:	4b42      	ldr	r3, [pc, #264]	; (80059cc <HAL_RCC_GetSysClockFreq+0x158>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	099b      	lsrs	r3, r3, #6
 80058c8:	f04f 0400 	mov.w	r4, #0
 80058cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	ea03 0501 	and.w	r5, r3, r1
 80058d8:	ea04 0602 	and.w	r6, r4, r2
 80058dc:	4a3d      	ldr	r2, [pc, #244]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80058de:	fb02 f106 	mul.w	r1, r2, r6
 80058e2:	2200      	movs	r2, #0
 80058e4:	fb02 f205 	mul.w	r2, r2, r5
 80058e8:	440a      	add	r2, r1
 80058ea:	493a      	ldr	r1, [pc, #232]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80058ec:	fba5 0101 	umull	r0, r1, r5, r1
 80058f0:	1853      	adds	r3, r2, r1
 80058f2:	4619      	mov	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f04f 0400 	mov.w	r4, #0
 80058fa:	461a      	mov	r2, r3
 80058fc:	4623      	mov	r3, r4
 80058fe:	f7fa fcc7 	bl	8000290 <__aeabi_uldivmod>
 8005902:	4603      	mov	r3, r0
 8005904:	460c      	mov	r4, r1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e049      	b.n	800599e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590a:	4b30      	ldr	r3, [pc, #192]	; (80059cc <HAL_RCC_GetSysClockFreq+0x158>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	099b      	lsrs	r3, r3, #6
 8005910:	f04f 0400 	mov.w	r4, #0
 8005914:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	ea03 0501 	and.w	r5, r3, r1
 8005920:	ea04 0602 	and.w	r6, r4, r2
 8005924:	4629      	mov	r1, r5
 8005926:	4632      	mov	r2, r6
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	f04f 0400 	mov.w	r4, #0
 8005930:	0154      	lsls	r4, r2, #5
 8005932:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005936:	014b      	lsls	r3, r1, #5
 8005938:	4619      	mov	r1, r3
 800593a:	4622      	mov	r2, r4
 800593c:	1b49      	subs	r1, r1, r5
 800593e:	eb62 0206 	sbc.w	r2, r2, r6
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	f04f 0400 	mov.w	r4, #0
 800594a:	0194      	lsls	r4, r2, #6
 800594c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005950:	018b      	lsls	r3, r1, #6
 8005952:	1a5b      	subs	r3, r3, r1
 8005954:	eb64 0402 	sbc.w	r4, r4, r2
 8005958:	f04f 0100 	mov.w	r1, #0
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	00e2      	lsls	r2, r4, #3
 8005962:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005966:	00d9      	lsls	r1, r3, #3
 8005968:	460b      	mov	r3, r1
 800596a:	4614      	mov	r4, r2
 800596c:	195b      	adds	r3, r3, r5
 800596e:	eb44 0406 	adc.w	r4, r4, r6
 8005972:	f04f 0100 	mov.w	r1, #0
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	02a2      	lsls	r2, r4, #10
 800597c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005980:	0299      	lsls	r1, r3, #10
 8005982:	460b      	mov	r3, r1
 8005984:	4614      	mov	r4, r2
 8005986:	4618      	mov	r0, r3
 8005988:	4621      	mov	r1, r4
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f04f 0400 	mov.w	r4, #0
 8005990:	461a      	mov	r2, r3
 8005992:	4623      	mov	r3, r4
 8005994:	f7fa fc7c 	bl	8000290 <__aeabi_uldivmod>
 8005998:	4603      	mov	r3, r0
 800599a:	460c      	mov	r4, r1
 800599c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800599e:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_RCC_GetSysClockFreq+0x158>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	0c1b      	lsrs	r3, r3, #16
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	3301      	adds	r3, #1
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b6:	60bb      	str	r3, [r7, #8]
      break;
 80059b8:	e002      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059ba:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80059bc:	60bb      	str	r3, [r7, #8]
      break;
 80059be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059c0:	68bb      	ldr	r3, [r7, #8]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800
 80059d0:	00f42400 	.word	0x00f42400
 80059d4:	017d7840 	.word	0x017d7840

080059d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <HAL_RCC_GetHCLKFreq+0x14>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000004 	.word	0x20000004

080059f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059f4:	f7ff fff0 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 80059f8:	4601      	mov	r1, r0
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	0a9b      	lsrs	r3, r3, #10
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	4a03      	ldr	r2, [pc, #12]	; (8005a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a06:	5cd3      	ldrb	r3, [r2, r3]
 8005a08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40023800 	.word	0x40023800
 8005a14:	0801cf5c 	.word	0x0801cf5c

08005a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a1c:	f7ff ffdc 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 8005a20:	4601      	mov	r1, r0
 8005a22:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	0b5b      	lsrs	r3, r3, #13
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	4a03      	ldr	r2, [pc, #12]	; (8005a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a2e:	5cd3      	ldrb	r3, [r2, r3]
 8005a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	0801cf5c 	.word	0x0801cf5c

08005a40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	220f      	movs	r2, #15
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a50:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0203 	and.w	r2, r3, #3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a74:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	08db      	lsrs	r3, r3, #3
 8005a7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a82:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <HAL_RCC_GetClockConfig+0x60>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 020f 	and.w	r2, r3, #15
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	601a      	str	r2, [r3, #0]
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40023c00 	.word	0x40023c00

08005aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10b      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d075      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ad8:	4bad      	ldr	r3, [pc, #692]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ade:	f7fc fb9b 	bl	8002218 <HAL_GetTick>
 8005ae2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ae6:	f7fc fb97 	bl	8002218 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e18b      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005af8:	4ba6      	ldr	r3, [pc, #664]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f0      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	019a      	lsls	r2, r3, #6
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	071b      	lsls	r3, r3, #28
 8005b1c:	499d      	ldr	r1, [pc, #628]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01f      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b30:	4b98      	ldr	r3, [pc, #608]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b36:	0f1b      	lsrs	r3, r3, #28
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	019a      	lsls	r2, r3, #6
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	061b      	lsls	r3, r3, #24
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	071b      	lsls	r3, r3, #28
 8005b50:	4990      	ldr	r1, [pc, #576]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b58:	4b8e      	ldr	r3, [pc, #568]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5e:	f023 021f 	bic.w	r2, r3, #31
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	498a      	ldr	r1, [pc, #552]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00d      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	019a      	lsls	r2, r3, #6
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	061b      	lsls	r3, r3, #24
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	071b      	lsls	r3, r3, #28
 8005b90:	4980      	ldr	r1, [pc, #512]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b98:	4b7d      	ldr	r3, [pc, #500]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b9e:	f7fc fb3b 	bl	8002218 <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ba6:	f7fc fb37 	bl	8002218 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e12b      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bb8:	4b76      	ldr	r3, [pc, #472]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0f0      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d079      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bdc:	4b6e      	ldr	r3, [pc, #440]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005be2:	f7fc fb19 	bl	8002218 <HAL_GetTick>
 8005be6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005be8:	e008      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005bea:	f7fc fb15 	bl	8002218 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e109      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bfc:	4b65      	ldr	r3, [pc, #404]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c08:	d0ef      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d020      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c16:	4b5f      	ldr	r3, [pc, #380]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1c:	0f1b      	lsrs	r3, r3, #28
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	019a      	lsls	r2, r3, #6
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	061b      	lsls	r3, r3, #24
 8005c30:	431a      	orrs	r2, r3
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	071b      	lsls	r3, r3, #28
 8005c36:	4957      	ldr	r1, [pc, #348]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c3e:	4b55      	ldr	r3, [pc, #340]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	4950      	ldr	r1, [pc, #320]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01e      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c64:	4b4b      	ldr	r3, [pc, #300]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6a:	0e1b      	lsrs	r3, r3, #24
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	019a      	lsls	r2, r3, #6
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	061b      	lsls	r3, r3, #24
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	071b      	lsls	r3, r3, #28
 8005c84:	4943      	ldr	r1, [pc, #268]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c8c:	4b41      	ldr	r3, [pc, #260]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	493e      	ldr	r1, [pc, #248]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ca2:	4b3d      	ldr	r3, [pc, #244]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ca8:	f7fc fab6 	bl	8002218 <HAL_GetTick>
 8005cac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005cb0:	f7fc fab2 	bl	8002218 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e0a6      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cc2:	4b34      	ldr	r3, [pc, #208]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cce:	d1ef      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 808d 	beq.w	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	4b2c      	ldr	r3, [pc, #176]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	4a2b      	ldr	r2, [pc, #172]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cec:	6413      	str	r3, [r2, #64]	; 0x40
 8005cee:	4b29      	ldr	r3, [pc, #164]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cfa:	4b28      	ldr	r3, [pc, #160]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a27      	ldr	r2, [pc, #156]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d06:	f7fc fa87 	bl	8002218 <HAL_GetTick>
 8005d0a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d0e:	f7fc fa83 	bl	8002218 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e077      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d20:	4b1e      	ldr	r3, [pc, #120]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0f0      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d2c:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d34:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d039      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d032      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d4a:	4b12      	ldr	r3, [pc, #72]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d52:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d54:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d60:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d66:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d11e      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d72:	f7fc fa51 	bl	8002218 <HAL_GetTick>
 8005d76:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d78:	e014      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d7a:	f7fc fa4d 	bl	8002218 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d90b      	bls.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e03f      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005d90:	42470068 	.word	0x42470068
 8005d94:	40023800 	.word	0x40023800
 8005d98:	42470070 	.word	0x42470070
 8005d9c:	40007000 	.word	0x40007000
 8005da0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da4:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0e4      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dbc:	d10d      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005dbe:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd2:	4911      	ldr	r1, [pc, #68]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	608b      	str	r3, [r1, #8]
 8005dd8:	e005      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	4a0e      	ldr	r2, [pc, #56]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005de0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005de4:	6093      	str	r3, [r2, #8]
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005de8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df2:	4909      	ldr	r1, [pc, #36]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005e0a:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e0c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	424711e0 	.word	0x424711e0

08005e20 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e025      	b.n	8005e80 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fb fbd3 	bl	80015f4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f001 f95d 	bl	8007120 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	f001 f9c8 	bl	8007206 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d101      	bne.n	8005ea4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e018      	b.n	8005ed6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f001 fa25 	bl	8007304 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d104      	bne.n	8005ecc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2205      	movs	r2, #5
 8005ec6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005eca:	e003      	b.n	8005ed4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d101      	bne.n	8005ef8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e00e      	b.n	8005f16 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 fa38 	bl	800737c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e01d      	b.n	8005f6c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f815 	bl	8005f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f000 f967 	bl	8006230 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b06      	cmp	r3, #6
 8005fb0:	d007      	beq.n	8005fc2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0201 	orr.w	r2, r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d122      	bne.n	800602c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d11b      	bne.n	800602c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0202 	mvn.w	r2, #2
 8005ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8ee 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 8006018:	e005      	b.n	8006026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8e0 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f8f1 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b04      	cmp	r3, #4
 8006038:	d122      	bne.n	8006080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b04      	cmp	r3, #4
 8006046:	d11b      	bne.n	8006080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0204 	mvn.w	r2, #4
 8006050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2202      	movs	r2, #2
 8006056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f8c4 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 800606c:	e005      	b.n	800607a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8b6 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f8c7 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b08      	cmp	r3, #8
 800608c:	d122      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b08      	cmp	r3, #8
 800609a:	d11b      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0208 	mvn.w	r2, #8
 80060a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2204      	movs	r2, #4
 80060aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f89a 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 80060c0:	e005      	b.n	80060ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f88c 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f89d 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d122      	bne.n	8006128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	d11b      	bne.n	8006128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0210 	mvn.w	r2, #16
 80060f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2208      	movs	r2, #8
 80060fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f870 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 8006114:	e005      	b.n	8006122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f862 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f873 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b01      	cmp	r3, #1
 8006134:	d10e      	bne.n	8006154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b01      	cmp	r3, #1
 8006142:	d107      	bne.n	8006154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0201 	mvn.w	r2, #1
 800614c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fa ffbc 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d10e      	bne.n	8006180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d107      	bne.n	8006180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f902 	bl	8006384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d10e      	bne.n	80061ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d107      	bne.n	80061ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f838 	bl	800621c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d10e      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d107      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0220 	mvn.w	r2, #32
 80061d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f8cc 	bl	8006370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a40      	ldr	r2, [pc, #256]	; (8006344 <TIM_Base_SetConfig+0x114>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624e:	d00f      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a3d      	ldr	r2, [pc, #244]	; (8006348 <TIM_Base_SetConfig+0x118>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00b      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a3c      	ldr	r2, [pc, #240]	; (800634c <TIM_Base_SetConfig+0x11c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d007      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a3b      	ldr	r2, [pc, #236]	; (8006350 <TIM_Base_SetConfig+0x120>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a3a      	ldr	r2, [pc, #232]	; (8006354 <TIM_Base_SetConfig+0x124>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d108      	bne.n	8006282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2f      	ldr	r2, [pc, #188]	; (8006344 <TIM_Base_SetConfig+0x114>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d02b      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006290:	d027      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2c      	ldr	r2, [pc, #176]	; (8006348 <TIM_Base_SetConfig+0x118>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d023      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2b      	ldr	r2, [pc, #172]	; (800634c <TIM_Base_SetConfig+0x11c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01f      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <TIM_Base_SetConfig+0x120>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d01b      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a29      	ldr	r2, [pc, #164]	; (8006354 <TIM_Base_SetConfig+0x124>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d017      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a28      	ldr	r2, [pc, #160]	; (8006358 <TIM_Base_SetConfig+0x128>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a27      	ldr	r2, [pc, #156]	; (800635c <TIM_Base_SetConfig+0x12c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00f      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a26      	ldr	r2, [pc, #152]	; (8006360 <TIM_Base_SetConfig+0x130>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d00b      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a25      	ldr	r2, [pc, #148]	; (8006364 <TIM_Base_SetConfig+0x134>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d007      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a24      	ldr	r2, [pc, #144]	; (8006368 <TIM_Base_SetConfig+0x138>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d003      	beq.n	80062e2 <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a23      	ldr	r2, [pc, #140]	; (800636c <TIM_Base_SetConfig+0x13c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d108      	bne.n	80062f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a0a      	ldr	r2, [pc, #40]	; (8006344 <TIM_Base_SetConfig+0x114>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_Base_SetConfig+0xf8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a0c      	ldr	r2, [pc, #48]	; (8006354 <TIM_Base_SetConfig+0x124>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d103      	bne.n	8006330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	615a      	str	r2, [r3, #20]
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40010000 	.word	0x40010000
 8006348:	40000400 	.word	0x40000400
 800634c:	40000800 	.word	0x40000800
 8006350:	40000c00 	.word	0x40000c00
 8006354:	40010400 	.word	0x40010400
 8006358:	40014000 	.word	0x40014000
 800635c:	40014400 	.word	0x40014400
 8006360:	40014800 	.word	0x40014800
 8006364:	40001800 	.word	0x40001800
 8006368:	40001c00 	.word	0x40001c00
 800636c:	40002000 	.word	0x40002000

08006370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e033      	b.n	8006412 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fb f82a 	bl	8001418 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fbd1 	bl	8006b74 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695a      	ldr	r2, [r3, #20]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063f0:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006400:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_USART_Transmit_IT>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	4613      	mov	r3, r2
 8006426:	80fb      	strh	r3, [r7, #6]
  if (husart->State == HAL_USART_STATE_READY)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	d130      	bne.n	8006496 <HAL_USART_Transmit_IT+0x7c>
  {
    if ((pTxData == NULL) || (Size == 0))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_USART_Transmit_IT+0x26>
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_USART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e029      	b.n	8006498 <HAL_USART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_USART_Transmit_IT+0x38>
 800644e:	2302      	movs	r3, #2
 8006450:	e022      	b.n	8006498 <HAL_USART_Transmit_IT+0x7e>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pTxBuffPtr = pTxData;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	625a      	str	r2, [r3, #36]	; 0x24
    husart->TxXferSize = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	88fa      	ldrh	r2, [r7, #6]
 800646a:	855a      	strh	r2, [r3, #42]	; 0x2a

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2212      	movs	r2, #18
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
       configured only for transmit "USART_MODE_TX"
       The __HAL_USART_ENABLE_IT(husart, USART_IT_ERR) can be used to enable the Frame error,
       Noise error interrupt */

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the USART Transmit Data Register Empty Interrupt */
    SET_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006490:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	e000      	b.n	8006498 <HAL_USART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006496:	2302      	movs	r3, #2
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d117      	bne.n	800650a <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d012      	beq.n	800650a <HAL_USART_IRQHandler+0x66>
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b22      	cmp	r3, #34	; 0x22
 80064f8:	d103      	bne.n	8006502 <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f9c6 	bl	800688c <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8006500:	e0ea      	b.n	80066d8 <HAL_USART_IRQHandler+0x234>
        USART_TransmitReceive_IT(husart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa5c 	bl	80069c0 <USART_TransmitReceive_IT>
      return;
 8006508:	e0e6      	b.n	80066d8 <HAL_USART_IRQHandler+0x234>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80bb 	beq.w	8006688 <HAL_USART_IRQHandler+0x1e4>
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d105      	bne.n	8006528 <HAL_USART_IRQHandler+0x84>
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80b0 	beq.w	8006688 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HAL_USART_IRQHandler+0xa4>
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	f043 0201 	orr.w	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <HAL_USART_IRQHandler+0xc4>
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	f043 0202 	orr.w	r2, r3, #2
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <HAL_USART_IRQHandler+0xe4>
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	f043 0204 	orr.w	r2, r3, #4
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00f      	beq.n	80065b2 <HAL_USART_IRQHandler+0x10e>
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <HAL_USART_IRQHandler+0x102>
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f043 0208 	orr.w	r2, r3, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 808d 	beq.w	80066d6 <HAL_USART_IRQHandler+0x232>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d011      	beq.n	80065ea <HAL_USART_IRQHandler+0x146>
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00c      	beq.n	80065ea <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b22      	cmp	r3, #34	; 0x22
 80065da:	d103      	bne.n	80065e4 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f955 	bl	800688c <USART_Receive_IT>
 80065e2:	e002      	b.n	80065ea <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f9eb 	bl	80069c0 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	bf0c      	ite	eq
 80065f8:	2301      	moveq	r3, #1
 80065fa:	2300      	movne	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d102      	bne.n	8006612 <HAL_USART_IRQHandler+0x16e>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d031      	beq.n	8006676 <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f892 	bl	800673c <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006622:	2b40      	cmp	r3, #64	; 0x40
 8006624:	d123      	bne.n	800666e <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695a      	ldr	r2, [r3, #20]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006634:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	2b00      	cmp	r3, #0
 800663c:	d013      	beq.n	8006666 <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	4a27      	ldr	r2, [pc, #156]	; (80066e0 <HAL_USART_IRQHandler+0x23c>)
 8006644:	651a      	str	r2, [r3, #80]	; 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	4618      	mov	r0, r3
 800664c:	f7fb ff40 	bl	80024d0 <HAL_DMA_Abort_IT>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006660:	4610      	mov	r0, r2
 8006662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8006664:	e00e      	b.n	8006684 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f850 	bl	800670c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800666c:	e00a      	b.n	8006684 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f84c 	bl	800670c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8006674:	e006      	b.n	8006684 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f848 	bl	800670c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006682:	e028      	b.n	80066d6 <HAL_USART_IRQHandler+0x232>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8006684:	bf00      	nop
    return;
 8006686:	e026      	b.n	80066d6 <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d012      	beq.n	80066b8 <HAL_USART_IRQHandler+0x214>
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00d      	beq.n	80066b8 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b12      	cmp	r3, #18
 80066a6:	d103      	bne.n	80066b0 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f879 	bl	80067a0 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 80066ae:	e013      	b.n	80066d8 <HAL_USART_IRQHandler+0x234>
      USART_TransmitReceive_IT(husart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f985 	bl	80069c0 <USART_TransmitReceive_IT>
    return;
 80066b6:	e00f      	b.n	80066d8 <HAL_USART_IRQHandler+0x234>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <HAL_USART_IRQHandler+0x234>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_USART_IRQHandler+0x234>
  {
    USART_EndTransmit_IT(husart);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f8bd 	bl	800684c <USART_EndTransmit_IT>
    return;
 80066d2:	bf00      	nop
 80066d4:	e000      	b.n	80066d8 <HAL_USART_IRQHandler+0x234>
    return;
 80066d6:	bf00      	nop
  }
}
 80066d8:	3720      	adds	r7, #32
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	08006779 	.word	0x08006779

080066e4 <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_USART_GetState>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL state
  */
HAL_USART_StateTypeDef HAL_USART_GetState(USART_HandleTypeDef *husart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  return husart->State;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672e:	b2db      	uxtb	r3, r3
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006752:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff ffba 	bl	800670c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b12      	cmp	r3, #18
 80067b2:	d144      	bne.n	800683e <USART_Transmit_IT+0x9e>
  {
    if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067bc:	d11a      	bne.n	80067f4 <USART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	461a      	mov	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d2:	605a      	str	r2, [r3, #4]
      if (husart->Init.Parity == USART_PARITY_NONE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <USART_Transmit_IT+0x48>
      {
        husart->pTxBuffPtr += 2U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	1c9a      	adds	r2, r3, #2
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	625a      	str	r2, [r3, #36]	; 0x24
 80067e6:	e00e      	b.n	8006806 <USART_Transmit_IT+0x66>
      }
      else
      {
        husart->pTxBuffPtr += 1U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	625a      	str	r2, [r3, #36]	; 0x24
 80067f2:	e008      	b.n	8006806 <USART_Transmit_IT+0x66>
      }
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	1c59      	adds	r1, r3, #1
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6251      	str	r1, [r2, #36]	; 0x24
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29b      	uxth	r3, r3
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4619      	mov	r1, r3
 8006814:	8551      	strh	r1, [r2, #42]	; 0x2a
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10f      	bne.n	800683a <USART_Transmit_IT+0x9a>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006828:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006838:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	e000      	b.n	8006840 <USART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800683e:	2302      	movs	r3, #2
  }
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006862:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7fa fc13 	bl	80010a8 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b22      	cmp	r3, #34	; 0x22
 800689e:	f040 808a 	bne.w	80069b6 <USART_Receive_IT+0x12a>
  {
    if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068aa:	d132      	bne.n	8006912 <USART_Receive_IT+0x86>
    {
      tmp = (uint16_t *) husart->pRxBuffPtr;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	60fb      	str	r3, [r7, #12]
      if (husart->Init.Parity == USART_PARITY_NONE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10e      	bne.n	80068d8 <USART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	801a      	strh	r2, [r3, #0]
        husart->pRxBuffPtr += 2U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	1c9a      	adds	r2, r3, #2
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80068d6:	e00c      	b.n	80068f2 <USART_Receive_IT+0x66>
      }
      else
      {
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	801a      	strh	r2, [r3, #0]
        husart->pRxBuffPtr += 1U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if (--husart->RxXferCount != 0x00U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	3b01      	subs	r3, #1
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	4619      	mov	r1, r3
 8006900:	8651      	strh	r1, [r2, #50]	; 0x32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d02f      	beq.n	8006966 <USART_Receive_IT+0xda>
      {
        /* Send dummy byte in order to generate the clock for the slave to send the next data */
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800690e:	605a      	str	r2, [r3, #4]
 8006910:	e029      	b.n	8006966 <USART_Receive_IT+0xda>
      }
    }
    else
    {
      if (husart->Init.Parity == USART_PARITY_NONE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <USART_Receive_IT+0xa4>
      {
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6858      	ldr	r0, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	1c59      	adds	r1, r3, #1
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	62d1      	str	r1, [r2, #44]	; 0x2c
 800692a:	b2c2      	uxtb	r2, r0
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e00c      	b.n	800694a <USART_Receive_IT+0xbe>
      }
      else
      {
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	b2da      	uxtb	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	1c58      	adds	r0, r3, #1
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	62c8      	str	r0, [r1, #44]	; 0x2c
 8006942:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
      }

      if (--husart->RxXferCount != 0x00U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29b      	uxth	r3, r3
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	4619      	mov	r1, r3
 8006958:	8651      	strh	r1, [r2, #50]	; 0x32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <USART_Receive_IT+0xda>
      {
        /* Send dummy byte in order to generate the clock for the slave to send the next data */
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x00FF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	22ff      	movs	r2, #255	; 0xff
 8006964:	605a      	str	r2, [r3, #4]
      }
    }

    if (husart->RxXferCount == 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d120      	bne.n	80069b2 <USART_Receive_IT+0x126>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0220 	bic.w	r2, r2, #32
 800697e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800698e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695a      	ldr	r2, [r3, #20]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0201 	bic.w	r2, r2, #1
 800699e:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff fe9b 	bl	80066e4 <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	e002      	b.n	80069b8 <USART_Receive_IT+0x12c>
    }
    return HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	e000      	b.n	80069b8 <USART_Receive_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 80069b6:	2302      	movs	r3, #2
  }
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b32      	cmp	r3, #50	; 0x32
 80069d2:	f040 80c9 	bne.w	8006b68 <USART_TransmitReceive_IT+0x1a8>
  {
    if (husart->TxXferCount != 0x00U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d043      	beq.n	8006a68 <USART_TransmitReceive_IT+0xa8>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ea:	2b80      	cmp	r3, #128	; 0x80
 80069ec:	d13c      	bne.n	8006a68 <USART_TransmitReceive_IT+0xa8>
      {
        if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f6:	d11a      	bne.n	8006a2e <USART_TransmitReceive_IT+0x6e>
        {
          tmp = (uint16_t *) husart->pTxBuffPtr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a0c:	605a      	str	r2, [r3, #4]
          if (husart->Init.Parity == USART_PARITY_NONE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d105      	bne.n	8006a22 <USART_TransmitReceive_IT+0x62>
          {
            husart->pTxBuffPtr += 2U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	1c9a      	adds	r2, r3, #2
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8006a20:	e00e      	b.n	8006a40 <USART_TransmitReceive_IT+0x80>
          }
          else
          {
            husart->pTxBuffPtr += 1U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24
 8006a2c:	e008      	b.n	8006a40 <USART_TransmitReceive_IT+0x80>
          }
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	1c59      	adds	r1, r3, #1
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6251      	str	r1, [r2, #36]	; 0x24
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	605a      	str	r2, [r3, #4]
        }
        husart->TxXferCount--;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d107      	bne.n	8006a68 <USART_TransmitReceive_IT+0xa8>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a66:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d052      	beq.n	8006b18 <USART_TransmitReceive_IT+0x158>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d14b      	bne.n	8006b18 <USART_TransmitReceive_IT+0x158>
      {
        if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a88:	d123      	bne.n	8006ad2 <USART_TransmitReceive_IT+0x112>
        {
          tmp = (uint16_t *) husart->pRxBuffPtr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	60fb      	str	r3, [r7, #12]
          if (husart->Init.Parity == USART_PARITY_NONE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10e      	bne.n	8006ab6 <USART_TransmitReceive_IT+0xf6>
          {
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	801a      	strh	r2, [r3, #0]
            husart->pRxBuffPtr += 2U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	1c9a      	adds	r2, r3, #2
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ab4:	e029      	b.n	8006b0a <USART_TransmitReceive_IT+0x14a>
          }
          else
          {
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	801a      	strh	r2, [r3, #0]
            husart->pRxBuffPtr += 1U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ad0:	e01b      	b.n	8006b0a <USART_TransmitReceive_IT+0x14a>
          }
        }
        else
        {
          if (husart->Init.Parity == USART_PARITY_NONE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <USART_TransmitReceive_IT+0x130>
          {
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6858      	ldr	r0, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	1c59      	adds	r1, r3, #1
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006aea:	b2c2      	uxtb	r2, r0
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	e00c      	b.n	8006b0a <USART_TransmitReceive_IT+0x14a>
          }
          else
          {
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	1c58      	adds	r0, r3, #1
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	62c8      	str	r0, [r1, #44]	; 0x2c
 8006b02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	701a      	strb	r2, [r3, #0]
          }
        }
        husart->RxXferCount--;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d120      	bne.n	8006b64 <USART_TransmitReceive_IT+0x1a4>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0220 	bic.w	r2, r2, #32
 8006b30:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b40:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695a      	ldr	r2, [r3, #20]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0201 	bic.w	r2, r2, #1
 8006b50:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff fdcc 	bl	80066f8 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e002      	b.n	8006b6a <USART_TransmitReceive_IT+0x1aa>
    }

    return HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e000      	b.n	8006b6a <USART_TransmitReceive_IT+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8006b68:	2302      	movs	r3, #2
  }
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 020c 	bic.w	r2, r2, #12
 8006b90:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ba0:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006baa:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bc0:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006bd8:	f023 030c 	bic.w	r3, r3, #12
 8006bdc:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	431a      	orrs	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695a      	ldr	r2, [r3, #20]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c0e:	615a      	str	r2, [r3, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4ac3      	ldr	r2, [pc, #780]	; (8006f24 <USART_SetConfig+0x3b0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d005      	beq.n	8006c26 <USART_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4ac2      	ldr	r2, [pc, #776]	; (8006f28 <USART_SetConfig+0x3b4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	f040 80bd 	bne.w	8006da0 <USART_SetConfig+0x22c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c26:	f7fe fef7 	bl	8005a18 <HAL_RCC_GetPCLK2Freq>
 8006c2a:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	461d      	mov	r5, r3
 8006c30:	f04f 0600 	mov.w	r6, #0
 8006c34:	46a8      	mov	r8, r5
 8006c36:	46b1      	mov	r9, r6
 8006c38:	eb18 0308 	adds.w	r3, r8, r8
 8006c3c:	eb49 0409 	adc.w	r4, r9, r9
 8006c40:	4698      	mov	r8, r3
 8006c42:	46a1      	mov	r9, r4
 8006c44:	eb18 0805 	adds.w	r8, r8, r5
 8006c48:	eb49 0906 	adc.w	r9, r9, r6
 8006c4c:	f04f 0100 	mov.w	r1, #0
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c60:	4688      	mov	r8, r1
 8006c62:	4691      	mov	r9, r2
 8006c64:	eb18 0005 	adds.w	r0, r8, r5
 8006c68:	eb49 0106 	adc.w	r1, r9, r6
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	461d      	mov	r5, r3
 8006c72:	f04f 0600 	mov.w	r6, #0
 8006c76:	196b      	adds	r3, r5, r5
 8006c78:	eb46 0406 	adc.w	r4, r6, r6
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4623      	mov	r3, r4
 8006c80:	f7f9 fb06 	bl	8000290 <__aeabi_uldivmod>
 8006c84:	4603      	mov	r3, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4ba8      	ldr	r3, [pc, #672]	; (8006f2c <USART_SetConfig+0x3b8>)
 8006c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	461d      	mov	r5, r3
 8006c9a:	f04f 0600 	mov.w	r6, #0
 8006c9e:	46a9      	mov	r9, r5
 8006ca0:	46b2      	mov	sl, r6
 8006ca2:	eb19 0309 	adds.w	r3, r9, r9
 8006ca6:	eb4a 040a 	adc.w	r4, sl, sl
 8006caa:	4699      	mov	r9, r3
 8006cac:	46a2      	mov	sl, r4
 8006cae:	eb19 0905 	adds.w	r9, r9, r5
 8006cb2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006cb6:	f04f 0100 	mov.w	r1, #0
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cca:	4689      	mov	r9, r1
 8006ccc:	4692      	mov	sl, r2
 8006cce:	eb19 0005 	adds.w	r0, r9, r5
 8006cd2:	eb4a 0106 	adc.w	r1, sl, r6
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	461d      	mov	r5, r3
 8006cdc:	f04f 0600 	mov.w	r6, #0
 8006ce0:	196b      	adds	r3, r5, r5
 8006ce2:	eb46 0406 	adc.w	r4, r6, r6
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4623      	mov	r3, r4
 8006cea:	f7f9 fad1 	bl	8000290 <__aeabi_uldivmod>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4b8d      	ldr	r3, [pc, #564]	; (8006f2c <USART_SetConfig+0x3b8>)
 8006cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2164      	movs	r1, #100	; 0x64
 8006cfe:	fb01 f303 	mul.w	r3, r1, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	3332      	adds	r3, #50	; 0x32
 8006d08:	4a88      	ldr	r2, [pc, #544]	; (8006f2c <USART_SetConfig+0x3b8>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d16:	4498      	add	r8, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	461d      	mov	r5, r3
 8006d1c:	f04f 0600 	mov.w	r6, #0
 8006d20:	46a9      	mov	r9, r5
 8006d22:	46b2      	mov	sl, r6
 8006d24:	eb19 0309 	adds.w	r3, r9, r9
 8006d28:	eb4a 040a 	adc.w	r4, sl, sl
 8006d2c:	4699      	mov	r9, r3
 8006d2e:	46a2      	mov	sl, r4
 8006d30:	eb19 0905 	adds.w	r9, r9, r5
 8006d34:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d38:	f04f 0100 	mov.w	r1, #0
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d4c:	4689      	mov	r9, r1
 8006d4e:	4692      	mov	sl, r2
 8006d50:	eb19 0005 	adds.w	r0, r9, r5
 8006d54:	eb4a 0106 	adc.w	r1, sl, r6
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	461d      	mov	r5, r3
 8006d5e:	f04f 0600 	mov.w	r6, #0
 8006d62:	196b      	adds	r3, r5, r5
 8006d64:	eb46 0406 	adc.w	r4, r6, r6
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	f7f9 fa90 	bl	8000290 <__aeabi_uldivmod>
 8006d70:	4603      	mov	r3, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	461a      	mov	r2, r3
 8006d76:	4b6d      	ldr	r3, [pc, #436]	; (8006f2c <USART_SetConfig+0x3b8>)
 8006d78:	fba3 1302 	umull	r1, r3, r3, r2
 8006d7c:	095b      	lsrs	r3, r3, #5
 8006d7e:	2164      	movs	r1, #100	; 0x64
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	3332      	adds	r3, #50	; 0x32
 8006d8a:	4a68      	ldr	r2, [pc, #416]	; (8006f2c <USART_SetConfig+0x3b8>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	f003 0207 	and.w	r2, r3, #7
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4442      	add	r2, r8
 8006d9c:	609a      	str	r2, [r3, #8]
 8006d9e:	e0bb      	b.n	8006f18 <USART_SetConfig+0x3a4>
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006da0:	f7fe fe26 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8006da4:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	461d      	mov	r5, r3
 8006daa:	f04f 0600 	mov.w	r6, #0
 8006dae:	46a8      	mov	r8, r5
 8006db0:	46b1      	mov	r9, r6
 8006db2:	eb18 0308 	adds.w	r3, r8, r8
 8006db6:	eb49 0409 	adc.w	r4, r9, r9
 8006dba:	4698      	mov	r8, r3
 8006dbc:	46a1      	mov	r9, r4
 8006dbe:	eb18 0805 	adds.w	r8, r8, r5
 8006dc2:	eb49 0906 	adc.w	r9, r9, r6
 8006dc6:	f04f 0100 	mov.w	r1, #0
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006dd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006dd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006dda:	4688      	mov	r8, r1
 8006ddc:	4691      	mov	r9, r2
 8006dde:	eb18 0005 	adds.w	r0, r8, r5
 8006de2:	eb49 0106 	adc.w	r1, r9, r6
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	461d      	mov	r5, r3
 8006dec:	f04f 0600 	mov.w	r6, #0
 8006df0:	196b      	adds	r3, r5, r5
 8006df2:	eb46 0406 	adc.w	r4, r6, r6
 8006df6:	461a      	mov	r2, r3
 8006df8:	4623      	mov	r3, r4
 8006dfa:	f7f9 fa49 	bl	8000290 <__aeabi_uldivmod>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	460c      	mov	r4, r1
 8006e02:	461a      	mov	r2, r3
 8006e04:	4b49      	ldr	r3, [pc, #292]	; (8006f2c <USART_SetConfig+0x3b8>)
 8006e06:	fba3 2302 	umull	r2, r3, r3, r2
 8006e0a:	095b      	lsrs	r3, r3, #5
 8006e0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	461d      	mov	r5, r3
 8006e14:	f04f 0600 	mov.w	r6, #0
 8006e18:	46a9      	mov	r9, r5
 8006e1a:	46b2      	mov	sl, r6
 8006e1c:	eb19 0309 	adds.w	r3, r9, r9
 8006e20:	eb4a 040a 	adc.w	r4, sl, sl
 8006e24:	4699      	mov	r9, r3
 8006e26:	46a2      	mov	sl, r4
 8006e28:	eb19 0905 	adds.w	r9, r9, r5
 8006e2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e30:	f04f 0100 	mov.w	r1, #0
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e44:	4689      	mov	r9, r1
 8006e46:	4692      	mov	sl, r2
 8006e48:	eb19 0005 	adds.w	r0, r9, r5
 8006e4c:	eb4a 0106 	adc.w	r1, sl, r6
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	461d      	mov	r5, r3
 8006e56:	f04f 0600 	mov.w	r6, #0
 8006e5a:	196b      	adds	r3, r5, r5
 8006e5c:	eb46 0406 	adc.w	r4, r6, r6
 8006e60:	461a      	mov	r2, r3
 8006e62:	4623      	mov	r3, r4
 8006e64:	f7f9 fa14 	bl	8000290 <__aeabi_uldivmod>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4b2f      	ldr	r3, [pc, #188]	; (8006f2c <USART_SetConfig+0x3b8>)
 8006e70:	fba3 1302 	umull	r1, r3, r3, r2
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	2164      	movs	r1, #100	; 0x64
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	3332      	adds	r3, #50	; 0x32
 8006e82:	4a2a      	ldr	r2, [pc, #168]	; (8006f2c <USART_SetConfig+0x3b8>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e90:	4498      	add	r8, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	461d      	mov	r5, r3
 8006e96:	f04f 0600 	mov.w	r6, #0
 8006e9a:	46a9      	mov	r9, r5
 8006e9c:	46b2      	mov	sl, r6
 8006e9e:	eb19 0309 	adds.w	r3, r9, r9
 8006ea2:	eb4a 040a 	adc.w	r4, sl, sl
 8006ea6:	4699      	mov	r9, r3
 8006ea8:	46a2      	mov	sl, r4
 8006eaa:	eb19 0905 	adds.w	r9, r9, r5
 8006eae:	eb4a 0a06 	adc.w	sl, sl, r6
 8006eb2:	f04f 0100 	mov.w	r1, #0
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ebe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ec2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ec6:	4689      	mov	r9, r1
 8006ec8:	4692      	mov	sl, r2
 8006eca:	eb19 0005 	adds.w	r0, r9, r5
 8006ece:	eb4a 0106 	adc.w	r1, sl, r6
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	461d      	mov	r5, r3
 8006ed8:	f04f 0600 	mov.w	r6, #0
 8006edc:	196b      	adds	r3, r5, r5
 8006ede:	eb46 0406 	adc.w	r4, r6, r6
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4623      	mov	r3, r4
 8006ee6:	f7f9 f9d3 	bl	8000290 <__aeabi_uldivmod>
 8006eea:	4603      	mov	r3, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	461a      	mov	r2, r3
 8006ef0:	4b0e      	ldr	r3, [pc, #56]	; (8006f2c <USART_SetConfig+0x3b8>)
 8006ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ef6:	095b      	lsrs	r3, r3, #5
 8006ef8:	2164      	movs	r1, #100	; 0x64
 8006efa:	fb01 f303 	mul.w	r3, r1, r3
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	3332      	adds	r3, #50	; 0x32
 8006f04:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <USART_SetConfig+0x3b8>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	f003 0207 	and.w	r2, r3, #7
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4442      	add	r2, r8
 8006f16:	609a      	str	r2, [r3, #8]
  }
}
 8006f18:	bf00      	nop
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f22:	bf00      	nop
 8006f24:	40011000 	.word	0x40011000
 8006f28:	40011400 	.word	0x40011400
 8006f2c:	51eb851f 	.word	0x51eb851f

08006f30 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f48:	60fb      	str	r3, [r7, #12]

#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <FMC_NORSRAM_Init+0xc4>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CPSIZE   | FMC_BCR1_CBURSTRW | \
                       FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f5a:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 8006f60:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 8006f66:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 8006f6c:	431a      	orrs	r2, r3
                    Init->WrapMode             |\
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
                    Init->WaitSignalPolarity   |\
 8006f72:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	69db      	ldr	r3, [r3, #28]
                    Init->WrapMode             |\
 8006f78:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
                    Init->WaitSignalActive     |\
 8006f7e:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WriteOperation       |\
 8006f84:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->WaitSignal           |\
 8006f8a:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->ExtendedMode         |\
 8006f90:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    Init->AsynchronousWait     |\
 8006f96:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->PageSize             |\
 8006f9c:	431a      	orrs	r2, r3
                    Init->ContinuousClock);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->WriteBurst           |\
 8006fa2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
                    Init->ContinuousClock      |\
                    Init->PageSize             |\
                    Init->WriteFifo);
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	d103      	bne.n	8006fba <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb8:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68f9      	ldr	r1, [r7, #12]
 8006fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fce:	d10a      	bne.n	8006fe6 <FMC_NORSRAM_Init+0xb6>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	601a      	str	r2, [r3, #0]
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	ffe00080 	.word	0xffe00080

08006ff8 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007012:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800701a:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)           |\
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8007026:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)             |\
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)           |\
 800702e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)             |\
 8007036:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	3b01      	subs	r3, #1
 800703e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8007040:	431a      	orrs	r2, r3
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	3b02      	subs	r3, #2
 8007048:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 800704a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8007050:	4313      	orrs	r3, r2
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1U] = tmpr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6979      	ldr	r1, [r7, #20]
 8007060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800706c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007070:	d10e      	bne.n	8007090 <FMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800707a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	3b01      	subs	r3, #1
 8007082:	051b      	lsls	r3, r3, #20
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
	...

080070a0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070b8:	d122      	bne.n	8007100 <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c2:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4b15      	ldr	r3, [pc, #84]	; (800711c <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070d6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80070de:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80070e6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070ec:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6979      	ldr	r1, [r7, #20]
 80070fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80070fe:	e005      	b.n	800710c <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	cff00000 	.word	0xcff00000

08007120 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d029      	beq.n	800718e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007146:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800714a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007154:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800715a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007160:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007166:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800716c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007172:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007178:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800717e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	e034      	b.n	80071f8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800719a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80071a4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80071aa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80071be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071c2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071cc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80071d2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80071d8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80071de:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80071e4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007206:	b480      	push	{r7}
 8007208:	b087      	sub	sp, #28
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d02e      	beq.n	800727e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800722c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	3b01      	subs	r3, #1
 800723a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800723c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	3b01      	subs	r3, #1
 8007244:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007246:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	3b01      	subs	r3, #1
 800724e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007250:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	3b01      	subs	r3, #1
 8007258:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800725a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	3b01      	subs	r3, #1
 8007262:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007264:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	3b01      	subs	r3, #1
 800726c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800726e:	4313      	orrs	r3, r2
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	e03b      	b.n	80072f6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800728a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800728e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	3b01      	subs	r3, #1
 8007296:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	3b01      	subs	r3, #1
 800729e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80072a0:	4313      	orrs	r3, r2
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80072b4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80072c4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80072ce:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80072d8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	3b01      	subs	r3, #1
 80072e0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80072e2:	4313      	orrs	r3, r2
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007320:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	3b01      	subs	r3, #1
 8007328:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800732a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800733c:	f7fa ff6c 	bl	8002218 <HAL_GetTick>
 8007340:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007342:	e010      	b.n	8007366 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734a:	d00c      	beq.n	8007366 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d007      	beq.n	8007362 <FMC_SDRAM_SendCommand+0x5e>
 8007352:	f7fa ff61 	bl	8002218 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	429a      	cmp	r2, r3
 8007360:	d201      	bcs.n	8007366 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e006      	b.n	8007374 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b20      	cmp	r3, #32
 8007370:	d0e8      	beq.n	8007344 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695a      	ldr	r2, [r3, #20]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
	...

080073a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073aa:	f3ef 8305 	mrs	r3, IPSR
 80073ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80073b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10f      	bne.n	80073d6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b6:	f3ef 8310 	mrs	r3, PRIMASK
 80073ba:	607b      	str	r3, [r7, #4]
  return(result);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <osKernelInitialize+0x32>
 80073c2:	4b11      	ldr	r3, [pc, #68]	; (8007408 <osKernelInitialize+0x64>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d109      	bne.n	80073de <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073ca:	f3ef 8311 	mrs	r3, BASEPRI
 80073ce:	603b      	str	r3, [r7, #0]
  return(result);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80073d6:	f06f 0305 	mvn.w	r3, #5
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	e00c      	b.n	80073f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073de:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <osKernelInitialize+0x64>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d105      	bne.n	80073f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80073e6:	4b08      	ldr	r3, [pc, #32]	; (8007408 <osKernelInitialize+0x64>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e002      	b.n	80073f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295
 80073f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80073f8:	68fb      	ldr	r3, [r7, #12]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000184 	.word	0x20000184

0800740c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007412:	f3ef 8305 	mrs	r3, IPSR
 8007416:	60bb      	str	r3, [r7, #8]
  return(result);
 8007418:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10f      	bne.n	800743e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800741e:	f3ef 8310 	mrs	r3, PRIMASK
 8007422:	607b      	str	r3, [r7, #4]
  return(result);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <osKernelStart+0x32>
 800742a:	4b11      	ldr	r3, [pc, #68]	; (8007470 <osKernelStart+0x64>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b02      	cmp	r3, #2
 8007430:	d109      	bne.n	8007446 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007432:	f3ef 8311 	mrs	r3, BASEPRI
 8007436:	603b      	str	r3, [r7, #0]
  return(result);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <osKernelStart+0x3a>
    stat = osErrorISR;
 800743e:	f06f 0305 	mvn.w	r3, #5
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	e00e      	b.n	8007464 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007446:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <osKernelStart+0x64>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d107      	bne.n	800745e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800744e:	4b08      	ldr	r3, [pc, #32]	; (8007470 <osKernelStart+0x64>)
 8007450:	2202      	movs	r2, #2
 8007452:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007454:	f001 fdea 	bl	800902c <vTaskStartScheduler>
      stat = osOK;
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	e002      	b.n	8007464 <osKernelStart+0x58>
    } else {
      stat = osError;
 800745e:	f04f 33ff 	mov.w	r3, #4294967295
 8007462:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007464:	68fb      	ldr	r3, [r7, #12]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20000184 	.word	0x20000184

08007474 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007474:	b580      	push	{r7, lr}
 8007476:	b092      	sub	sp, #72	; 0x48
 8007478:	af04      	add	r7, sp, #16
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007484:	f3ef 8305 	mrs	r3, IPSR
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 8094 	bne.w	80075ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007492:	f3ef 8310 	mrs	r3, PRIMASK
 8007496:	623b      	str	r3, [r7, #32]
  return(result);
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	2b00      	cmp	r3, #0
 800749c:	f040 808d 	bne.w	80075ba <osThreadNew+0x146>
 80074a0:	4b48      	ldr	r3, [pc, #288]	; (80075c4 <osThreadNew+0x150>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d106      	bne.n	80074b6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074a8:	f3ef 8311 	mrs	r3, BASEPRI
 80074ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f040 8082 	bne.w	80075ba <osThreadNew+0x146>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d07e      	beq.n	80075ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80074bc:	2380      	movs	r3, #128	; 0x80
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80074c0:	2318      	movs	r3, #24
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80074c4:	2300      	movs	r3, #0
 80074c6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80074c8:	f107 031b 	add.w	r3, r7, #27
 80074cc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80074ce:	f04f 33ff 	mov.w	r3, #4294967295
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d045      	beq.n	8007566 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <osThreadNew+0x74>
        name = attr->name;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <osThreadNew+0x9a>
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	2b38      	cmp	r3, #56	; 0x38
 8007500:	d805      	bhi.n	800750e <osThreadNew+0x9a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <osThreadNew+0x9e>
        return (NULL);
 800750e:	2300      	movs	r3, #0
 8007510:	e054      	b.n	80075bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	089b      	lsrs	r3, r3, #2
 8007520:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00e      	beq.n	8007548 <osThreadNew+0xd4>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	2b5f      	cmp	r3, #95	; 0x5f
 8007530:	d90a      	bls.n	8007548 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007536:	2b00      	cmp	r3, #0
 8007538:	d006      	beq.n	8007548 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <osThreadNew+0xd4>
        mem = 1;
 8007542:	2301      	movs	r3, #1
 8007544:	62bb      	str	r3, [r7, #40]	; 0x28
 8007546:	e010      	b.n	800756a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10c      	bne.n	800756a <osThreadNew+0xf6>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d108      	bne.n	800756a <osThreadNew+0xf6>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d104      	bne.n	800756a <osThreadNew+0xf6>
          mem = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28
 8007564:	e001      	b.n	800756a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	2b01      	cmp	r3, #1
 800756e:	d110      	bne.n	8007592 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007578:	9202      	str	r2, [sp, #8]
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007584:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f001 fbb8 	bl	8008cfc <xTaskCreateStatic>
 800758c:	4603      	mov	r3, r0
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	e013      	b.n	80075ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	2b00      	cmp	r3, #0
 8007596:	d110      	bne.n	80075ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	b29a      	uxth	r2, r3
 800759c:	f107 0314 	add.w	r3, r7, #20
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 fbff 	bl	8008dae <xTaskCreate>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d001      	beq.n	80075ba <osThreadNew+0x146>
          hTask = NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075ba:	697b      	ldr	r3, [r7, #20]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3738      	adds	r7, #56	; 0x38
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20000184 	.word	0x20000184

080075c8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08c      	sub	sp, #48	; 0x30
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d8:	f3ef 8305 	mrs	r3, IPSR
 80075dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80075de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f040 8088 	bne.w	80076f6 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ea:	617b      	str	r3, [r7, #20]
  return(result);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f040 8081 	bne.w	80076f6 <osSemaphoreNew+0x12e>
 80075f4:	4b42      	ldr	r3, [pc, #264]	; (8007700 <osSemaphoreNew+0x138>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d105      	bne.n	8007608 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007600:	613b      	str	r3, [r7, #16]
  return(result);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d176      	bne.n	80076f6 <osSemaphoreNew+0x12e>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d073      	beq.n	80076f6 <osSemaphoreNew+0x12e>
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	429a      	cmp	r2, r3
 8007614:	d86f      	bhi.n	80076f6 <osSemaphoreNew+0x12e>
    mem = -1;
 8007616:	f04f 33ff 	mov.w	r3, #4294967295
 800761a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d015      	beq.n	800764e <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <osSemaphoreNew+0x70>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	2b4f      	cmp	r3, #79	; 0x4f
 8007630:	d902      	bls.n	8007638 <osSemaphoreNew+0x70>
        mem = 1;
 8007632:	2301      	movs	r3, #1
 8007634:	623b      	str	r3, [r7, #32]
 8007636:	e00c      	b.n	8007652 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d108      	bne.n	8007652 <osSemaphoreNew+0x8a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <osSemaphoreNew+0x8a>
          mem = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	623b      	str	r3, [r7, #32]
 800764c:	e001      	b.n	8007652 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007658:	d04d      	beq.n	80076f6 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d129      	bne.n	80076b4 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d10b      	bne.n	800767e <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	2303      	movs	r3, #3
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	4613      	mov	r3, r2
 8007670:	2200      	movs	r2, #0
 8007672:	2100      	movs	r1, #0
 8007674:	2001      	movs	r0, #1
 8007676:	f000 fbbf 	bl	8007df8 <xQueueGenericCreateStatic>
 800767a:	6278      	str	r0, [r7, #36]	; 0x24
 800767c:	e005      	b.n	800768a <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800767e:	2203      	movs	r2, #3
 8007680:	2100      	movs	r1, #0
 8007682:	2001      	movs	r0, #1
 8007684:	f000 fc2a 	bl	8007edc <xQueueGenericCreate>
 8007688:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d022      	beq.n	80076d6 <osSemaphoreNew+0x10e>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01f      	beq.n	80076d6 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007696:	2300      	movs	r3, #0
 8007698:	2200      	movs	r2, #0
 800769a:	2100      	movs	r1, #0
 800769c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800769e:	f000 fce3 	bl	8008068 <xQueueGenericSend>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d016      	beq.n	80076d6 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 80076a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076aa:	f001 f956 	bl	800895a <vQueueDelete>
            hSemaphore = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
 80076b2:	e010      	b.n	80076d6 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d108      	bne.n	80076cc <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	461a      	mov	r2, r3
 80076c0:	68b9      	ldr	r1, [r7, #8]
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 fc6a 	bl	8007f9c <xQueueCreateCountingSemaphoreStatic>
 80076c8:	6278      	str	r0, [r7, #36]	; 0x24
 80076ca:	e004      	b.n	80076d6 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80076cc:	68b9      	ldr	r1, [r7, #8]
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fc99 	bl	8008006 <xQueueCreateCountingSemaphore>
 80076d4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00c      	beq.n	80076f6 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <osSemaphoreNew+0x122>
          name = attr->name;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	61fb      	str	r3, [r7, #28]
 80076e8:	e001      	b.n	80076ee <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80076ee:	69f9      	ldr	r1, [r7, #28]
 80076f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076f2:	f001 fa7d 	bl	8008bf0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3728      	adds	r7, #40	; 0x28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20000184 	.word	0x20000184

08007704 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007712:	2300      	movs	r3, #0
 8007714:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d103      	bne.n	8007724 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800771c:	f06f 0303 	mvn.w	r3, #3
 8007720:	61fb      	str	r3, [r7, #28]
 8007722:	e04b      	b.n	80077bc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007724:	f3ef 8305 	mrs	r3, IPSR
 8007728:	617b      	str	r3, [r7, #20]
  return(result);
 800772a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10f      	bne.n	8007750 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007730:	f3ef 8310 	mrs	r3, PRIMASK
 8007734:	613b      	str	r3, [r7, #16]
  return(result);
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d109      	bne.n	8007750 <osSemaphoreAcquire+0x4c>
 800773c:	4b22      	ldr	r3, [pc, #136]	; (80077c8 <osSemaphoreAcquire+0xc4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d128      	bne.n	8007796 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007744:	f3ef 8311 	mrs	r3, BASEPRI
 8007748:	60fb      	str	r3, [r7, #12]
  return(result);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d022      	beq.n	8007796 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007756:	f06f 0303 	mvn.w	r3, #3
 800775a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800775c:	e02d      	b.n	80077ba <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007762:	f107 0308 	add.w	r3, r7, #8
 8007766:	461a      	mov	r2, r3
 8007768:	2100      	movs	r1, #0
 800776a:	69b8      	ldr	r0, [r7, #24]
 800776c:	f001 f878 	bl	8008860 <xQueueReceiveFromISR>
 8007770:	4603      	mov	r3, r0
 8007772:	2b01      	cmp	r3, #1
 8007774:	d003      	beq.n	800777e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007776:	f06f 0302 	mvn.w	r3, #2
 800777a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800777c:	e01d      	b.n	80077ba <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01a      	beq.n	80077ba <osSemaphoreAcquire+0xb6>
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <osSemaphoreAcquire+0xc8>)
 8007786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007794:	e011      	b.n	80077ba <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	69b8      	ldr	r0, [r7, #24]
 800779a:	f000 ff59 	bl	8008650 <xQueueSemaphoreTake>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d00b      	beq.n	80077bc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80077aa:	f06f 0301 	mvn.w	r3, #1
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	e004      	b.n	80077bc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80077b2:	f06f 0302 	mvn.w	r3, #2
 80077b6:	61fb      	str	r3, [r7, #28]
 80077b8:	e000      	b.n	80077bc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80077ba:	bf00      	nop
      }
    }
  }

  return (stat);
 80077bc:	69fb      	ldr	r3, [r7, #28]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000184 	.word	0x20000184
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d103      	bne.n	80077ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80077e6:	f06f 0303 	mvn.w	r3, #3
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	e03e      	b.n	800786c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ee:	f3ef 8305 	mrs	r3, IPSR
 80077f2:	617b      	str	r3, [r7, #20]
  return(result);
 80077f4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10f      	bne.n	800781a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077fa:	f3ef 8310 	mrs	r3, PRIMASK
 80077fe:	613b      	str	r3, [r7, #16]
  return(result);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <osSemaphoreRelease+0x4a>
 8007806:	4b1c      	ldr	r3, [pc, #112]	; (8007878 <osSemaphoreRelease+0xa8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d120      	bne.n	8007850 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800780e:	f3ef 8311 	mrs	r3, BASEPRI
 8007812:	60fb      	str	r3, [r7, #12]
  return(result);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d01a      	beq.n	8007850 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800781a:	2300      	movs	r3, #0
 800781c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800781e:	f107 0308 	add.w	r3, r7, #8
 8007822:	4619      	mov	r1, r3
 8007824:	69b8      	ldr	r0, [r7, #24]
 8007826:	f000 fdad 	bl	8008384 <xQueueGiveFromISR>
 800782a:	4603      	mov	r3, r0
 800782c:	2b01      	cmp	r3, #1
 800782e:	d003      	beq.n	8007838 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007830:	f06f 0302 	mvn.w	r3, #2
 8007834:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007836:	e018      	b.n	800786a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d015      	beq.n	800786a <osSemaphoreRelease+0x9a>
 800783e:	4b0f      	ldr	r3, [pc, #60]	; (800787c <osSemaphoreRelease+0xac>)
 8007840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800784e:	e00c      	b.n	800786a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007850:	2300      	movs	r3, #0
 8007852:	2200      	movs	r2, #0
 8007854:	2100      	movs	r1, #0
 8007856:	69b8      	ldr	r0, [r7, #24]
 8007858:	f000 fc06 	bl	8008068 <xQueueGenericSend>
 800785c:	4603      	mov	r3, r0
 800785e:	2b01      	cmp	r3, #1
 8007860:	d004      	beq.n	800786c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007862:	f06f 0302 	mvn.w	r3, #2
 8007866:	61fb      	str	r3, [r7, #28]
 8007868:	e000      	b.n	800786c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800786a:	bf00      	nop
    }
  }

  return (stat);
 800786c:	69fb      	ldr	r3, [r7, #28]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3720      	adds	r7, #32
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000184 	.word	0x20000184
 800787c:	e000ed04 	.word	0xe000ed04

08007880 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007880:	b580      	push	{r7, lr}
 8007882:	b08c      	sub	sp, #48	; 0x30
 8007884:	af02      	add	r7, sp, #8
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800788c:	2300      	movs	r3, #0
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007890:	f3ef 8305 	mrs	r3, IPSR
 8007894:	61bb      	str	r3, [r7, #24]
  return(result);
 8007896:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007898:	2b00      	cmp	r3, #0
 800789a:	d170      	bne.n	800797e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800789c:	f3ef 8310 	mrs	r3, PRIMASK
 80078a0:	617b      	str	r3, [r7, #20]
  return(result);
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d16a      	bne.n	800797e <osMessageQueueNew+0xfe>
 80078a8:	4b37      	ldr	r3, [pc, #220]	; (8007988 <osMessageQueueNew+0x108>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d105      	bne.n	80078bc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078b0:	f3ef 8311 	mrs	r3, BASEPRI
 80078b4:	613b      	str	r3, [r7, #16]
  return(result);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d160      	bne.n	800797e <osMessageQueueNew+0xfe>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d05d      	beq.n	800797e <osMessageQueueNew+0xfe>
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d05a      	beq.n	800797e <osMessageQueueNew+0xfe>
    mem = -1;
 80078c8:	f04f 33ff 	mov.w	r3, #4294967295
 80078cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d029      	beq.n	8007928 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d012      	beq.n	8007902 <osMessageQueueNew+0x82>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	2b4f      	cmp	r3, #79	; 0x4f
 80078e2:	d90e      	bls.n	8007902 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	695a      	ldr	r2, [r3, #20]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	fb01 f303 	mul.w	r3, r1, r3
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d302      	bcc.n	8007902 <osMessageQueueNew+0x82>
        mem = 1;
 80078fc:	2301      	movs	r3, #1
 80078fe:	623b      	str	r3, [r7, #32]
 8007900:	e014      	b.n	800792c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d110      	bne.n	800792c <osMessageQueueNew+0xac>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10c      	bne.n	800792c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007916:	2b00      	cmp	r3, #0
 8007918:	d108      	bne.n	800792c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d104      	bne.n	800792c <osMessageQueueNew+0xac>
          mem = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	623b      	str	r3, [r7, #32]
 8007926:	e001      	b.n	800792c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d10c      	bne.n	800794c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6899      	ldr	r1, [r3, #8]
 800793a:	2300      	movs	r3, #0
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	460b      	mov	r3, r1
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fa58 	bl	8007df8 <xQueueGenericCreateStatic>
 8007948:	6278      	str	r0, [r7, #36]	; 0x24
 800794a:	e008      	b.n	800795e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007952:	2200      	movs	r2, #0
 8007954:	68b9      	ldr	r1, [r7, #8]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fac0 	bl	8007edc <xQueueGenericCreate>
 800795c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00c      	beq.n	800797e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <osMessageQueueNew+0xf2>
        name = attr->name;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	61fb      	str	r3, [r7, #28]
 8007970:	e001      	b.n	8007976 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8007972:	2300      	movs	r3, #0
 8007974:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007976:	69f9      	ldr	r1, [r7, #28]
 8007978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800797a:	f001 f939 	bl	8008bf0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007980:	4618      	mov	r0, r3
 8007982:	3728      	adds	r7, #40	; 0x28
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000184 	.word	0x20000184

0800798c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800798c:	b580      	push	{r7, lr}
 800798e:	b08a      	sub	sp, #40	; 0x28
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	4613      	mov	r3, r2
 800799a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079a4:	f3ef 8305 	mrs	r3, IPSR
 80079a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80079aa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10f      	bne.n	80079d0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079b0:	f3ef 8310 	mrs	r3, PRIMASK
 80079b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <osMessageQueuePut+0x44>
 80079bc:	4b2b      	ldr	r3, [pc, #172]	; (8007a6c <osMessageQueuePut+0xe0>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d12e      	bne.n	8007a22 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079c4:	f3ef 8311 	mrs	r3, BASEPRI
 80079c8:	617b      	str	r3, [r7, #20]
  return(result);
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d028      	beq.n	8007a22 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <osMessageQueuePut+0x56>
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <osMessageQueuePut+0x56>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80079e2:	f06f 0303 	mvn.w	r3, #3
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079e8:	e039      	b.n	8007a5e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80079ee:	f107 0210 	add.w	r2, r7, #16
 80079f2:	2300      	movs	r3, #0
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	6a38      	ldr	r0, [r7, #32]
 80079f8:	f000 fc30 	bl	800825c <xQueueGenericSendFromISR>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d003      	beq.n	8007a0a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007a02:	f06f 0302 	mvn.w	r3, #2
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a08:	e029      	b.n	8007a5e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d026      	beq.n	8007a5e <osMessageQueuePut+0xd2>
 8007a10:	4b17      	ldr	r3, [pc, #92]	; (8007a70 <osMessageQueuePut+0xe4>)
 8007a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a20:	e01d      	b.n	8007a5e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <osMessageQueuePut+0xa2>
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007a2e:	f06f 0303 	mvn.w	r3, #3
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
 8007a34:	e014      	b.n	8007a60 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a36:	2300      	movs	r3, #0
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	68b9      	ldr	r1, [r7, #8]
 8007a3c:	6a38      	ldr	r0, [r7, #32]
 8007a3e:	f000 fb13 	bl	8008068 <xQueueGenericSend>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d00b      	beq.n	8007a60 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007a4e:	f06f 0301 	mvn.w	r3, #1
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
 8007a54:	e004      	b.n	8007a60 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007a56:	f06f 0302 	mvn.w	r3, #2
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5c:	e000      	b.n	8007a60 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a5e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3728      	adds	r7, #40	; 0x28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000184 	.word	0x20000184
 8007a70:	e000ed04 	.word	0xe000ed04

08007a74 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08a      	sub	sp, #40	; 0x28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a8a:	f3ef 8305 	mrs	r3, IPSR
 8007a8e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a90:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10f      	bne.n	8007ab6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a96:	f3ef 8310 	mrs	r3, PRIMASK
 8007a9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <osMessageQueueGet+0x42>
 8007aa2:	4b2b      	ldr	r3, [pc, #172]	; (8007b50 <osMessageQueueGet+0xdc>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d12e      	bne.n	8007b08 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8007aae:	617b      	str	r3, [r7, #20]
  return(result);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d028      	beq.n	8007b08 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <osMessageQueueGet+0x54>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <osMessageQueueGet+0x54>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007ac8:	f06f 0303 	mvn.w	r3, #3
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ace:	e038      	b.n	8007b42 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ad4:	f107 0310 	add.w	r3, r7, #16
 8007ad8:	461a      	mov	r2, r3
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	6a38      	ldr	r0, [r7, #32]
 8007ade:	f000 febf 	bl	8008860 <xQueueReceiveFromISR>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d003      	beq.n	8007af0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007ae8:	f06f 0302 	mvn.w	r3, #2
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007aee:	e028      	b.n	8007b42 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d025      	beq.n	8007b42 <osMessageQueueGet+0xce>
 8007af6:	4b17      	ldr	r3, [pc, #92]	; (8007b54 <osMessageQueueGet+0xe0>)
 8007af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b06:	e01c      	b.n	8007b42 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <osMessageQueueGet+0xa0>
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d103      	bne.n	8007b1c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007b14:	f06f 0303 	mvn.w	r3, #3
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1a:	e013      	b.n	8007b44 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	6a38      	ldr	r0, [r7, #32]
 8007b22:	f000 fcb9 	bl	8008498 <xQueueReceive>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d00b      	beq.n	8007b44 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007b32:	f06f 0301 	mvn.w	r3, #1
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24
 8007b38:	e004      	b.n	8007b44 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007b3a:	f06f 0302 	mvn.w	r3, #2
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b40:	e000      	b.n	8007b44 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b42:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3728      	adds	r7, #40	; 0x28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000184 	.word	0x20000184
 8007b54:	e000ed04 	.word	0xe000ed04

08007b58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4a07      	ldr	r2, [pc, #28]	; (8007b84 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	4a06      	ldr	r2, [pc, #24]	; (8007b88 <vApplicationGetIdleTaskMemory+0x30>)
 8007b6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2280      	movs	r2, #128	; 0x80
 8007b74:	601a      	str	r2, [r3, #0]
}
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	20000188 	.word	0x20000188
 8007b88:	200001e8 	.word	0x200001e8

08007b8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4a07      	ldr	r2, [pc, #28]	; (8007bb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	4a06      	ldr	r2, [pc, #24]	; (8007bbc <vApplicationGetTimerTaskMemory+0x30>)
 8007ba2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007baa:	601a      	str	r2, [r3, #0]
}
 8007bac:	bf00      	nop
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	200003e8 	.word	0x200003e8
 8007bbc:	20000448 	.word	0x20000448

08007bc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f103 0208 	add.w	r2, r3, #8
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f103 0208 	add.w	r2, r3, #8
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f103 0208 	add.w	r2, r3, #8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c0e:	bf00      	nop
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b085      	sub	sp, #20
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d103      	bne.n	8007c82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	e00c      	b.n	8007c9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3308      	adds	r3, #8
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	e002      	b.n	8007c90 <vListInsert+0x2e>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d2f6      	bcs.n	8007c8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6892      	ldr	r2, [r2, #8]
 8007cea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6852      	ldr	r2, [r2, #4]
 8007cf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d103      	bne.n	8007d08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	1e5a      	subs	r2, r3, #1
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d109      	bne.n	8007d50 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	60bb      	str	r3, [r7, #8]
 8007d4e:	e7fe      	b.n	8007d4e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007d50:	f002 fbc4 	bl	800a4dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5c:	68f9      	ldr	r1, [r7, #12]
 8007d5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d60:	fb01 f303 	mul.w	r3, r1, r3
 8007d64:	441a      	add	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d80:	3b01      	subs	r3, #1
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d86:	fb01 f303 	mul.w	r3, r1, r3
 8007d8a:	441a      	add	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	22ff      	movs	r2, #255	; 0xff
 8007d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	22ff      	movs	r2, #255	; 0xff
 8007d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d114      	bne.n	8007dd0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d01a      	beq.n	8007de4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3310      	adds	r3, #16
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 fbc0 	bl	8009538 <xTaskRemoveFromEventList>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d012      	beq.n	8007de4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <xQueueGenericReset+0xcc>)
 8007dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	e009      	b.n	8007de4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3310      	adds	r3, #16
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fef3 	bl	8007bc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3324      	adds	r3, #36	; 0x24
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff feee 	bl	8007bc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007de4:	f002 fba8 	bl	800a538 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007de8:	2301      	movs	r3, #1
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	e000ed04 	.word	0xe000ed04

08007df8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08e      	sub	sp, #56	; 0x38
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d109      	bne.n	8007e20 <xQueueGenericCreateStatic+0x28>
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e1e:	e7fe      	b.n	8007e1e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d109      	bne.n	8007e3a <xQueueGenericCreateStatic+0x42>
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
 8007e38:	e7fe      	b.n	8007e38 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <xQueueGenericCreateStatic+0x4e>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <xQueueGenericCreateStatic+0x52>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e000      	b.n	8007e4c <xQueueGenericCreateStatic+0x54>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d109      	bne.n	8007e64 <xQueueGenericCreateStatic+0x6c>
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	623b      	str	r3, [r7, #32]
 8007e62:	e7fe      	b.n	8007e62 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <xQueueGenericCreateStatic+0x78>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <xQueueGenericCreateStatic+0x7c>
 8007e70:	2301      	movs	r3, #1
 8007e72:	e000      	b.n	8007e76 <xQueueGenericCreateStatic+0x7e>
 8007e74:	2300      	movs	r3, #0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <xQueueGenericCreateStatic+0x96>
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	61fb      	str	r3, [r7, #28]
 8007e8c:	e7fe      	b.n	8007e8c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e8e:	2350      	movs	r3, #80	; 0x50
 8007e90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b50      	cmp	r3, #80	; 0x50
 8007e96:	d009      	beq.n	8007eac <xQueueGenericCreateStatic+0xb4>
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	61bb      	str	r3, [r7, #24]
 8007eaa:	e7fe      	b.n	8007eaa <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00d      	beq.n	8007ed2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ebe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f842 	bl	8007f56 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3730      	adds	r7, #48	; 0x30
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08a      	sub	sp, #40	; 0x28
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d109      	bne.n	8007f04 <xQueueGenericCreate+0x28>
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	e7fe      	b.n	8007f02 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d102      	bne.n	8007f10 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	61fb      	str	r3, [r7, #28]
 8007f0e:	e004      	b.n	8007f1a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	fb02 f303 	mul.w	r3, r2, r3
 8007f18:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	3350      	adds	r3, #80	; 0x50
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f002 fbf6 	bl	800a710 <pvPortMalloc>
 8007f24:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00f      	beq.n	8007f4c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	3350      	adds	r3, #80	; 0x50
 8007f30:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f3a:	79fa      	ldrb	r2, [r7, #7]
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4613      	mov	r3, r2
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	68b9      	ldr	r1, [r7, #8]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f805 	bl	8007f56 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007f4c:	69bb      	ldr	r3, [r7, #24]
	}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	607a      	str	r2, [r7, #4]
 8007f62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	e002      	b.n	8007f78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f84:	2101      	movs	r1, #1
 8007f86:	69b8      	ldr	r0, [r7, #24]
 8007f88:	f7ff fece 	bl	8007d28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f94:	bf00      	nop
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08a      	sub	sp, #40	; 0x28
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d109      	bne.n	8007fc2 <xQueueCreateCountingSemaphoreStatic+0x26>
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	61bb      	str	r3, [r7, #24]
 8007fc0:	e7fe      	b.n	8007fc0 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d909      	bls.n	8007fde <xQueueCreateCountingSemaphoreStatic+0x42>
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	617b      	str	r3, [r7, #20]
 8007fdc:	e7fe      	b.n	8007fdc <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007fde:	2302      	movs	r3, #2
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f7ff ff05 	bl	8007df8 <xQueueGenericCreateStatic>
 8007fee:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
	}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008006:	b580      	push	{r7, lr}
 8008008:	b086      	sub	sp, #24
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d109      	bne.n	800802a <xQueueCreateCountingSemaphore+0x24>
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	e7fe      	b.n	8008028 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	429a      	cmp	r2, r3
 8008030:	d909      	bls.n	8008046 <xQueueCreateCountingSemaphore+0x40>
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	e7fe      	b.n	8008044 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008046:	2202      	movs	r2, #2
 8008048:	2100      	movs	r1, #0
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff ff46 	bl	8007edc <xQueueGenericCreate>
 8008050:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800805e:	697b      	ldr	r3, [r7, #20]
	}
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08e      	sub	sp, #56	; 0x38
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008076:	2300      	movs	r3, #0
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <xQueueGenericSend+0x30>
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	62bb      	str	r3, [r7, #40]	; 0x28
 8008096:	e7fe      	b.n	8008096 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d103      	bne.n	80080a6 <xQueueGenericSend+0x3e>
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <xQueueGenericSend+0x42>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <xQueueGenericSend+0x44>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <xQueueGenericSend+0x5c>
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
 80080c2:	e7fe      	b.n	80080c2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d103      	bne.n	80080d2 <xQueueGenericSend+0x6a>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <xQueueGenericSend+0x6e>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <xQueueGenericSend+0x70>
 80080d6:	2300      	movs	r3, #0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d109      	bne.n	80080f0 <xQueueGenericSend+0x88>
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	623b      	str	r3, [r7, #32]
 80080ee:	e7fe      	b.n	80080ee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080f0:	f001 fbde 	bl	80098b0 <xTaskGetSchedulerState>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <xQueueGenericSend+0x98>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <xQueueGenericSend+0x9c>
 8008100:	2301      	movs	r3, #1
 8008102:	e000      	b.n	8008106 <xQueueGenericSend+0x9e>
 8008104:	2300      	movs	r3, #0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d109      	bne.n	800811e <xQueueGenericSend+0xb6>
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	61fb      	str	r3, [r7, #28]
 800811c:	e7fe      	b.n	800811c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800811e:	f002 f9dd 	bl	800a4dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812a:	429a      	cmp	r2, r3
 800812c:	d302      	bcc.n	8008134 <xQueueGenericSend+0xcc>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d129      	bne.n	8008188 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	68b9      	ldr	r1, [r7, #8]
 8008138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800813a:	f000 fc48 	bl	80089ce <prvCopyDataToQueue>
 800813e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	2b00      	cmp	r3, #0
 8008146:	d010      	beq.n	800816a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	3324      	adds	r3, #36	; 0x24
 800814c:	4618      	mov	r0, r3
 800814e:	f001 f9f3 	bl	8009538 <xTaskRemoveFromEventList>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d013      	beq.n	8008180 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008158:	4b3f      	ldr	r3, [pc, #252]	; (8008258 <xQueueGenericSend+0x1f0>)
 800815a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	e00a      	b.n	8008180 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800816a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d007      	beq.n	8008180 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008170:	4b39      	ldr	r3, [pc, #228]	; (8008258 <xQueueGenericSend+0x1f0>)
 8008172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008180:	f002 f9da 	bl	800a538 <vPortExitCritical>
				return pdPASS;
 8008184:	2301      	movs	r3, #1
 8008186:	e063      	b.n	8008250 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d103      	bne.n	8008196 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800818e:	f002 f9d3 	bl	800a538 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008192:	2300      	movs	r3, #0
 8008194:	e05c      	b.n	8008250 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008198:	2b00      	cmp	r3, #0
 800819a:	d106      	bne.n	80081aa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800819c:	f107 0314 	add.w	r3, r7, #20
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 fa2b 	bl	80095fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081a6:	2301      	movs	r3, #1
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081aa:	f002 f9c5 	bl	800a538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081ae:	f000 ffa1 	bl	80090f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081b2:	f002 f993 	bl	800a4dc <vPortEnterCritical>
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081bc:	b25b      	sxtb	r3, r3
 80081be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c2:	d103      	bne.n	80081cc <xQueueGenericSend+0x164>
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081d2:	b25b      	sxtb	r3, r3
 80081d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d8:	d103      	bne.n	80081e2 <xQueueGenericSend+0x17a>
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081e2:	f002 f9a9 	bl	800a538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081e6:	1d3a      	adds	r2, r7, #4
 80081e8:	f107 0314 	add.w	r3, r7, #20
 80081ec:	4611      	mov	r1, r2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fa1a 	bl	8009628 <xTaskCheckForTimeOut>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d124      	bne.n	8008244 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081fc:	f000 fcdf 	bl	8008bbe <prvIsQueueFull>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d018      	beq.n	8008238 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	3310      	adds	r3, #16
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	4611      	mov	r1, r2
 800820e:	4618      	mov	r0, r3
 8008210:	f001 f944 	bl	800949c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008216:	f000 fc6a 	bl	8008aee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800821a:	f000 ff79 	bl	8009110 <xTaskResumeAll>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	f47f af7c 	bne.w	800811e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008226:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <xQueueGenericSend+0x1f0>)
 8008228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	e772      	b.n	800811e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800823a:	f000 fc58 	bl	8008aee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800823e:	f000 ff67 	bl	8009110 <xTaskResumeAll>
 8008242:	e76c      	b.n	800811e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008246:	f000 fc52 	bl	8008aee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800824a:	f000 ff61 	bl	8009110 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800824e:	2300      	movs	r3, #0
		}
	}
}
 8008250:	4618      	mov	r0, r3
 8008252:	3738      	adds	r7, #56	; 0x38
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08e      	sub	sp, #56	; 0x38
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	2b00      	cmp	r3, #0
 8008272:	d109      	bne.n	8008288 <xQueueGenericSendFromISR+0x2c>
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
 8008286:	e7fe      	b.n	8008286 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <xQueueGenericSendFromISR+0x3a>
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <xQueueGenericSendFromISR+0x3e>
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <xQueueGenericSendFromISR+0x40>
 800829a:	2300      	movs	r3, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d109      	bne.n	80082b4 <xQueueGenericSendFromISR+0x58>
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	623b      	str	r3, [r7, #32]
 80082b2:	e7fe      	b.n	80082b2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d103      	bne.n	80082c2 <xQueueGenericSendFromISR+0x66>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d101      	bne.n	80082c6 <xQueueGenericSendFromISR+0x6a>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <xQueueGenericSendFromISR+0x6c>
 80082c6:	2300      	movs	r3, #0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d109      	bne.n	80082e0 <xQueueGenericSendFromISR+0x84>
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	e7fe      	b.n	80082de <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082e0:	f002 f9d8 	bl	800a694 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082e4:	f3ef 8211 	mrs	r2, BASEPRI
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	61ba      	str	r2, [r7, #24]
 80082fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008308:	429a      	cmp	r2, r3
 800830a:	d302      	bcc.n	8008312 <xQueueGenericSendFromISR+0xb6>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d12c      	bne.n	800836c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008322:	f000 fb54 	bl	80089ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008326:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832e:	d112      	bne.n	8008356 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	d016      	beq.n	8008366 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	3324      	adds	r3, #36	; 0x24
 800833c:	4618      	mov	r0, r3
 800833e:	f001 f8fb 	bl	8009538 <xTaskRemoveFromEventList>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00e      	beq.n	8008366 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00b      	beq.n	8008366 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	e007      	b.n	8008366 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008356:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800835a:	3301      	adds	r3, #1
 800835c:	b2db      	uxtb	r3, r3
 800835e:	b25a      	sxtb	r2, r3
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008366:	2301      	movs	r3, #1
 8008368:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800836a:	e001      	b.n	8008370 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800836c:	2300      	movs	r3, #0
 800836e:	637b      	str	r3, [r7, #52]	; 0x34
 8008370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008372:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800837a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800837c:	4618      	mov	r0, r3
 800837e:	3738      	adds	r7, #56	; 0x38
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08e      	sub	sp, #56	; 0x38
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	2b00      	cmp	r3, #0
 8008396:	d109      	bne.n	80083ac <xQueueGiveFromISR+0x28>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
 80083aa:	e7fe      	b.n	80083aa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d009      	beq.n	80083c8 <xQueueGiveFromISR+0x44>
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	61fb      	str	r3, [r7, #28]
 80083c6:	e7fe      	b.n	80083c6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d103      	bne.n	80083d8 <xQueueGiveFromISR+0x54>
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <xQueueGiveFromISR+0x58>
 80083d8:	2301      	movs	r3, #1
 80083da:	e000      	b.n	80083de <xQueueGiveFromISR+0x5a>
 80083dc:	2300      	movs	r3, #0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d109      	bne.n	80083f6 <xQueueGiveFromISR+0x72>
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	61bb      	str	r3, [r7, #24]
 80083f4:	e7fe      	b.n	80083f4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083f6:	f002 f94d 	bl	800a694 <vPortValidateInterruptPriority>
	__asm volatile
 80083fa:	f3ef 8211 	mrs	r2, BASEPRI
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	617a      	str	r2, [r7, #20]
 8008410:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008412:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008414:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800841c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008422:	429a      	cmp	r2, r3
 8008424:	d22b      	bcs.n	800847e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800842c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008438:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800843c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008440:	d112      	bne.n	8008468 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	2b00      	cmp	r3, #0
 8008448:	d016      	beq.n	8008478 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	3324      	adds	r3, #36	; 0x24
 800844e:	4618      	mov	r0, r3
 8008450:	f001 f872 	bl	8009538 <xTaskRemoveFromEventList>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00e      	beq.n	8008478 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2201      	movs	r2, #1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e007      	b.n	8008478 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800846c:	3301      	adds	r3, #1
 800846e:	b2db      	uxtb	r3, r3
 8008470:	b25a      	sxtb	r2, r3
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008478:	2301      	movs	r3, #1
 800847a:	637b      	str	r3, [r7, #52]	; 0x34
 800847c:	e001      	b.n	8008482 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800847e:	2300      	movs	r3, #0
 8008480:	637b      	str	r3, [r7, #52]	; 0x34
 8008482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008484:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800848c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800848e:	4618      	mov	r0, r3
 8008490:	3738      	adds	r7, #56	; 0x38
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08c      	sub	sp, #48	; 0x30
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d109      	bne.n	80084c6 <xQueueReceive+0x2e>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	623b      	str	r3, [r7, #32]
 80084c4:	e7fe      	b.n	80084c4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d103      	bne.n	80084d4 <xQueueReceive+0x3c>
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <xQueueReceive+0x40>
 80084d4:	2301      	movs	r3, #1
 80084d6:	e000      	b.n	80084da <xQueueReceive+0x42>
 80084d8:	2300      	movs	r3, #0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d109      	bne.n	80084f2 <xQueueReceive+0x5a>
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	e7fe      	b.n	80084f0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084f2:	f001 f9dd 	bl	80098b0 <xTaskGetSchedulerState>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d102      	bne.n	8008502 <xQueueReceive+0x6a>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <xQueueReceive+0x6e>
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <xQueueReceive+0x70>
 8008506:	2300      	movs	r3, #0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <xQueueReceive+0x88>
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	61bb      	str	r3, [r7, #24]
 800851e:	e7fe      	b.n	800851e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008520:	f001 ffdc 	bl	800a4dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01f      	beq.n	8008570 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008534:	f000 fab5 	bl	8008aa2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	1e5a      	subs	r2, r3, #1
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00f      	beq.n	8008568 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854a:	3310      	adds	r3, #16
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fff3 	bl	8009538 <xTaskRemoveFromEventList>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008558:	4b3c      	ldr	r3, [pc, #240]	; (800864c <xQueueReceive+0x1b4>)
 800855a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008568:	f001 ffe6 	bl	800a538 <vPortExitCritical>
				return pdPASS;
 800856c:	2301      	movs	r3, #1
 800856e:	e069      	b.n	8008644 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d103      	bne.n	800857e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008576:	f001 ffdf 	bl	800a538 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800857a:	2300      	movs	r3, #0
 800857c:	e062      	b.n	8008644 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d106      	bne.n	8008592 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008584:	f107 0310 	add.w	r3, r7, #16
 8008588:	4618      	mov	r0, r3
 800858a:	f001 f837 	bl	80095fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800858e:	2301      	movs	r3, #1
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008592:	f001 ffd1 	bl	800a538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008596:	f000 fdad 	bl	80090f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800859a:	f001 ff9f 	bl	800a4dc <vPortEnterCritical>
 800859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085a4:	b25b      	sxtb	r3, r3
 80085a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085aa:	d103      	bne.n	80085b4 <xQueueReceive+0x11c>
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ba:	b25b      	sxtb	r3, r3
 80085bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c0:	d103      	bne.n	80085ca <xQueueReceive+0x132>
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ca:	f001 ffb5 	bl	800a538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085ce:	1d3a      	adds	r2, r7, #4
 80085d0:	f107 0310 	add.w	r3, r7, #16
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 f826 	bl	8009628 <xTaskCheckForTimeOut>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d123      	bne.n	800862a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e4:	f000 fad5 	bl	8008b92 <prvIsQueueEmpty>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d017      	beq.n	800861e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	3324      	adds	r3, #36	; 0x24
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 ff50 	bl	800949c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085fe:	f000 fa76 	bl	8008aee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008602:	f000 fd85 	bl	8009110 <xTaskResumeAll>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d189      	bne.n	8008520 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800860c:	4b0f      	ldr	r3, [pc, #60]	; (800864c <xQueueReceive+0x1b4>)
 800860e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	e780      	b.n	8008520 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800861e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008620:	f000 fa65 	bl	8008aee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008624:	f000 fd74 	bl	8009110 <xTaskResumeAll>
 8008628:	e77a      	b.n	8008520 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800862a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800862c:	f000 fa5f 	bl	8008aee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008630:	f000 fd6e 	bl	8009110 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008636:	f000 faac 	bl	8008b92 <prvIsQueueEmpty>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	f43f af6f 	beq.w	8008520 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008642:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008644:	4618      	mov	r0, r3
 8008646:	3730      	adds	r7, #48	; 0x30
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	e000ed04 	.word	0xe000ed04

08008650 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08e      	sub	sp, #56	; 0x38
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800865a:	2300      	movs	r3, #0
 800865c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008662:	2300      	movs	r3, #0
 8008664:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008668:	2b00      	cmp	r3, #0
 800866a:	d109      	bne.n	8008680 <xQueueSemaphoreTake+0x30>
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	623b      	str	r3, [r7, #32]
 800867e:	e7fe      	b.n	800867e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008684:	2b00      	cmp	r3, #0
 8008686:	d009      	beq.n	800869c <xQueueSemaphoreTake+0x4c>
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	e7fe      	b.n	800869a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800869c:	f001 f908 	bl	80098b0 <xTaskGetSchedulerState>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d102      	bne.n	80086ac <xQueueSemaphoreTake+0x5c>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <xQueueSemaphoreTake+0x60>
 80086ac:	2301      	movs	r3, #1
 80086ae:	e000      	b.n	80086b2 <xQueueSemaphoreTake+0x62>
 80086b0:	2300      	movs	r3, #0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d109      	bne.n	80086ca <xQueueSemaphoreTake+0x7a>
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	61bb      	str	r3, [r7, #24]
 80086c8:	e7fe      	b.n	80086c8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80086ca:	f001 ff07 	bl	800a4dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d024      	beq.n	8008724 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	1e5a      	subs	r2, r3, #1
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d104      	bne.n	80086f4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80086ea:	f001 fa5d 	bl	8009ba8 <pvTaskIncrementMutexHeldCount>
 80086ee:	4602      	mov	r2, r0
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00f      	beq.n	800871c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	3310      	adds	r3, #16
 8008700:	4618      	mov	r0, r3
 8008702:	f000 ff19 	bl	8009538 <xTaskRemoveFromEventList>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800870c:	4b53      	ldr	r3, [pc, #332]	; (800885c <xQueueSemaphoreTake+0x20c>)
 800870e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800871c:	f001 ff0c 	bl	800a538 <vPortExitCritical>
				return pdPASS;
 8008720:	2301      	movs	r3, #1
 8008722:	e096      	b.n	8008852 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d110      	bne.n	800874c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	2b00      	cmp	r3, #0
 800872e:	d009      	beq.n	8008744 <xQueueSemaphoreTake+0xf4>
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	e7fe      	b.n	8008742 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008744:	f001 fef8 	bl	800a538 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008748:	2300      	movs	r3, #0
 800874a:	e082      	b.n	8008852 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800874c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008752:	f107 030c 	add.w	r3, r7, #12
 8008756:	4618      	mov	r0, r3
 8008758:	f000 ff50 	bl	80095fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800875c:	2301      	movs	r3, #1
 800875e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008760:	f001 feea 	bl	800a538 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008764:	f000 fcc6 	bl	80090f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008768:	f001 feb8 	bl	800a4dc <vPortEnterCritical>
 800876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008772:	b25b      	sxtb	r3, r3
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d103      	bne.n	8008782 <xQueueSemaphoreTake+0x132>
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008788:	b25b      	sxtb	r3, r3
 800878a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878e:	d103      	bne.n	8008798 <xQueueSemaphoreTake+0x148>
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008798:	f001 fece 	bl	800a538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800879c:	463a      	mov	r2, r7
 800879e:	f107 030c 	add.w	r3, r7, #12
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 ff3f 	bl	8009628 <xTaskCheckForTimeOut>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d132      	bne.n	8008816 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087b2:	f000 f9ee 	bl	8008b92 <prvIsQueueEmpty>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d026      	beq.n	800880a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d109      	bne.n	80087d8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80087c4:	f001 fe8a 	bl	800a4dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f001 f88d 	bl	80098ec <xTaskPriorityInherit>
 80087d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80087d4:	f001 feb0 	bl	800a538 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	3324      	adds	r3, #36	; 0x24
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fe5b 	bl	800949c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087e8:	f000 f981 	bl	8008aee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087ec:	f000 fc90 	bl	8009110 <xTaskResumeAll>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f47f af69 	bne.w	80086ca <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80087f8:	4b18      	ldr	r3, [pc, #96]	; (800885c <xQueueSemaphoreTake+0x20c>)
 80087fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	e75f      	b.n	80086ca <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800880a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800880c:	f000 f96f 	bl	8008aee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008810:	f000 fc7e 	bl	8009110 <xTaskResumeAll>
 8008814:	e759      	b.n	80086ca <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008818:	f000 f969 	bl	8008aee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800881c:	f000 fc78 	bl	8009110 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008822:	f000 f9b6 	bl	8008b92 <prvIsQueueEmpty>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	f43f af4e 	beq.w	80086ca <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00d      	beq.n	8008850 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008834:	f001 fe52 	bl	800a4dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800883a:	f000 f8b0 	bl	800899e <prvGetDisinheritPriorityAfterTimeout>
 800883e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008846:	4618      	mov	r0, r3
 8008848:	f001 f92a 	bl	8009aa0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800884c:	f001 fe74 	bl	800a538 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008850:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008852:	4618      	mov	r0, r3
 8008854:	3738      	adds	r7, #56	; 0x38
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	e000ed04 	.word	0xe000ed04

08008860 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08e      	sub	sp, #56	; 0x38
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	d109      	bne.n	800888a <xQueueReceiveFromISR+0x2a>
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	623b      	str	r3, [r7, #32]
 8008888:	e7fe      	b.n	8008888 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d103      	bne.n	8008898 <xQueueReceiveFromISR+0x38>
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <xQueueReceiveFromISR+0x3c>
 8008898:	2301      	movs	r3, #1
 800889a:	e000      	b.n	800889e <xQueueReceiveFromISR+0x3e>
 800889c:	2300      	movs	r3, #0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <xQueueReceiveFromISR+0x56>
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	e7fe      	b.n	80088b4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088b6:	f001 feed 	bl	800a694 <vPortValidateInterruptPriority>
	__asm volatile
 80088ba:	f3ef 8211 	mrs	r2, BASEPRI
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	61ba      	str	r2, [r7, #24]
 80088d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80088d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d02f      	beq.n	8008942 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088ec:	68b9      	ldr	r1, [r7, #8]
 80088ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f0:	f000 f8d7 	bl	8008aa2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	1e5a      	subs	r2, r3, #1
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80088fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008904:	d112      	bne.n	800892c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d016      	beq.n	800893c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	3310      	adds	r3, #16
 8008912:	4618      	mov	r0, r3
 8008914:	f000 fe10 	bl	8009538 <xTaskRemoveFromEventList>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00e      	beq.n	800893c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	e007      	b.n	800893c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800892c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008930:	3301      	adds	r3, #1
 8008932:	b2db      	uxtb	r3, r3
 8008934:	b25a      	sxtb	r2, r3
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800893c:	2301      	movs	r3, #1
 800893e:	637b      	str	r3, [r7, #52]	; 0x34
 8008940:	e001      	b.n	8008946 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008942:	2300      	movs	r3, #0
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
 8008946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008948:	613b      	str	r3, [r7, #16]
	__asm volatile
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008952:	4618      	mov	r0, r3
 8008954:	3738      	adds	r7, #56	; 0x38
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d109      	bne.n	8008980 <vQueueDelete+0x26>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	60bb      	str	r3, [r7, #8]
 800897e:	e7fe      	b.n	800897e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f95d 	bl	8008c40 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800898c:	2b00      	cmp	r3, #0
 800898e:	d102      	bne.n	8008996 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f001 ff7f 	bl	800a894 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008996:	bf00      	nop
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800899e:	b480      	push	{r7}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d006      	beq.n	80089bc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	e001      	b.n	80089c0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80089c0:	68fb      	ldr	r3, [r7, #12]
	}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b086      	sub	sp, #24
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10d      	bne.n	8008a08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d14d      	bne.n	8008a90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 ffe5 	bl	80099c8 <xTaskPriorityDisinherit>
 80089fe:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	605a      	str	r2, [r3, #4]
 8008a06:	e043      	b.n	8008a90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d119      	bne.n	8008a42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6898      	ldr	r0, [r3, #8]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	461a      	mov	r2, r3
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	f013 f839 	bl	801ba90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	689a      	ldr	r2, [r3, #8]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a26:	441a      	add	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d32b      	bcc.n	8008a90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	609a      	str	r2, [r3, #8]
 8008a40:	e026      	b.n	8008a90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	68d8      	ldr	r0, [r3, #12]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	f013 f81f 	bl	801ba90 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	68da      	ldr	r2, [r3, #12]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	425b      	negs	r3, r3
 8008a5c:	441a      	add	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d207      	bcs.n	8008a7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	425b      	negs	r3, r3
 8008a78:	441a      	add	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d105      	bne.n	8008a90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a98:	697b      	ldr	r3, [r7, #20]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d018      	beq.n	8008ae6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	441a      	add	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d303      	bcc.n	8008ad6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68d9      	ldr	r1, [r3, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	461a      	mov	r2, r3
 8008ae0:	6838      	ldr	r0, [r7, #0]
 8008ae2:	f012 ffd5 	bl	801ba90 <memcpy>
	}
}
 8008ae6:	bf00      	nop
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008af6:	f001 fcf1 	bl	800a4dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b02:	e011      	b.n	8008b28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d012      	beq.n	8008b32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3324      	adds	r3, #36	; 0x24
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fd11 	bl	8009538 <xTaskRemoveFromEventList>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b1c:	f000 fde4 	bl	80096e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dce9      	bgt.n	8008b04 <prvUnlockQueue+0x16>
 8008b30:	e000      	b.n	8008b34 <prvUnlockQueue+0x46>
					break;
 8008b32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	22ff      	movs	r2, #255	; 0xff
 8008b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b3c:	f001 fcfc 	bl	800a538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b40:	f001 fccc 	bl	800a4dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b4c:	e011      	b.n	8008b72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d012      	beq.n	8008b7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3310      	adds	r3, #16
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fcec 	bl	8009538 <xTaskRemoveFromEventList>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b66:	f000 fdbf 	bl	80096e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	dce9      	bgt.n	8008b4e <prvUnlockQueue+0x60>
 8008b7a:	e000      	b.n	8008b7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	22ff      	movs	r2, #255	; 0xff
 8008b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b86:	f001 fcd7 	bl	800a538 <vPortExitCritical>
}
 8008b8a:	bf00      	nop
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b9a:	f001 fc9f 	bl	800a4dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d102      	bne.n	8008bac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	e001      	b.n	8008bb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bb0:	f001 fcc2 	bl	800a538 <vPortExitCritical>

	return xReturn;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bc6:	f001 fc89 	bl	800a4dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d102      	bne.n	8008bdc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	e001      	b.n	8008be0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008be0:	f001 fcaa 	bl	800a538 <vPortExitCritical>

	return xReturn;
 8008be4:	68fb      	ldr	r3, [r7, #12]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	e014      	b.n	8008c2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c00:	4a0e      	ldr	r2, [pc, #56]	; (8008c3c <vQueueAddToRegistry+0x4c>)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10b      	bne.n	8008c24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c0c:	490b      	ldr	r1, [pc, #44]	; (8008c3c <vQueueAddToRegistry+0x4c>)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c16:	4a09      	ldr	r2, [pc, #36]	; (8008c3c <vQueueAddToRegistry+0x4c>)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c22:	e005      	b.n	8008c30 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3301      	adds	r3, #1
 8008c28:	60fb      	str	r3, [r7, #12]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2b07      	cmp	r3, #7
 8008c2e:	d9e7      	bls.n	8008c00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c30:	bf00      	nop
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	2000641c 	.word	0x2000641c

08008c40 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	e016      	b.n	8008c7c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008c4e:	4a10      	ldr	r2, [pc, #64]	; (8008c90 <vQueueUnregisterQueue+0x50>)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	00db      	lsls	r3, r3, #3
 8008c54:	4413      	add	r3, r2
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d10b      	bne.n	8008c76 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008c5e:	4a0c      	ldr	r2, [pc, #48]	; (8008c90 <vQueueUnregisterQueue+0x50>)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2100      	movs	r1, #0
 8008c64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008c68:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <vQueueUnregisterQueue+0x50>)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	00db      	lsls	r3, r3, #3
 8008c6e:	4413      	add	r3, r2
 8008c70:	2200      	movs	r2, #0
 8008c72:	605a      	str	r2, [r3, #4]
				break;
 8008c74:	e005      	b.n	8008c82 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b07      	cmp	r3, #7
 8008c80:	d9e5      	bls.n	8008c4e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008c82:	bf00      	nop
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	2000641c 	.word	0x2000641c

08008c94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ca4:	f001 fc1a 	bl	800a4dc <vPortEnterCritical>
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cae:	b25b      	sxtb	r3, r3
 8008cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb4:	d103      	bne.n	8008cbe <vQueueWaitForMessageRestricted+0x2a>
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc4:	b25b      	sxtb	r3, r3
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cca:	d103      	bne.n	8008cd4 <vQueueWaitForMessageRestricted+0x40>
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cd4:	f001 fc30 	bl	800a538 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d106      	bne.n	8008cee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	3324      	adds	r3, #36	; 0x24
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 fbfb 	bl	80094e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008cee:	6978      	ldr	r0, [r7, #20]
 8008cf0:	f7ff fefd 	bl	8008aee <prvUnlockQueue>
	}
 8008cf4:	bf00      	nop
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08e      	sub	sp, #56	; 0x38
 8008d00:	af04      	add	r7, sp, #16
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <xTaskCreateStatic+0x28>
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	623b      	str	r3, [r7, #32]
 8008d22:	e7fe      	b.n	8008d22 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d109      	bne.n	8008d3e <xTaskCreateStatic+0x42>
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	e7fe      	b.n	8008d3c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d3e:	2360      	movs	r3, #96	; 0x60
 8008d40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	2b60      	cmp	r3, #96	; 0x60
 8008d46:	d009      	beq.n	8008d5c <xTaskCreateStatic+0x60>
 8008d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	61bb      	str	r3, [r7, #24]
 8008d5a:	e7fe      	b.n	8008d5a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d01e      	beq.n	8008da0 <xTaskCreateStatic+0xa4>
 8008d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01b      	beq.n	8008da0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	2202      	movs	r2, #2
 8008d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9303      	str	r3, [sp, #12]
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	9302      	str	r3, [sp, #8]
 8008d82:	f107 0314 	add.w	r3, r7, #20
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 f850 	bl	8008e38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d9a:	f000 f8d7 	bl	8008f4c <prvAddNewTaskToReadyList>
 8008d9e:	e001      	b.n	8008da4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008da0:	2300      	movs	r3, #0
 8008da2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008da4:	697b      	ldr	r3, [r7, #20]
	}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3728      	adds	r7, #40	; 0x28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b08c      	sub	sp, #48	; 0x30
 8008db2:	af04      	add	r7, sp, #16
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	603b      	str	r3, [r7, #0]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dbe:	88fb      	ldrh	r3, [r7, #6]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 fca4 	bl	800a710 <pvPortMalloc>
 8008dc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00e      	beq.n	8008dee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008dd0:	2060      	movs	r0, #96	; 0x60
 8008dd2:	f001 fc9d 	bl	800a710 <pvPortMalloc>
 8008dd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	631a      	str	r2, [r3, #48]	; 0x30
 8008de4:	e005      	b.n	8008df2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008de6:	6978      	ldr	r0, [r7, #20]
 8008de8:	f001 fd54 	bl	800a894 <vPortFree>
 8008dec:	e001      	b.n	8008df2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d017      	beq.n	8008e28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e00:	88fa      	ldrh	r2, [r7, #6]
 8008e02:	2300      	movs	r3, #0
 8008e04:	9303      	str	r3, [sp, #12]
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	9302      	str	r3, [sp, #8]
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 f80e 	bl	8008e38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e1c:	69f8      	ldr	r0, [r7, #28]
 8008e1e:	f000 f895 	bl	8008f4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e22:	2301      	movs	r3, #1
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	e002      	b.n	8008e2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e28:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e2e:	69bb      	ldr	r3, [r7, #24]
	}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3720      	adds	r7, #32
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
 8008e44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	461a      	mov	r2, r3
 8008e50:	21a5      	movs	r1, #165	; 0xa5
 8008e52:	f012 fe28 	bl	801baa6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e60:	3b01      	subs	r3, #1
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	f023 0307 	bic.w	r3, r3, #7
 8008e6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d009      	beq.n	8008e8e <prvInitialiseNewTask+0x56>
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	e7fe      	b.n	8008e8c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e8e:	2300      	movs	r3, #0
 8008e90:	61fb      	str	r3, [r7, #28]
 8008e92:	e012      	b.n	8008eba <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	4413      	add	r3, r2
 8008e9a:	7819      	ldrb	r1, [r3, #0]
 8008e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	3334      	adds	r3, #52	; 0x34
 8008ea4:	460a      	mov	r2, r1
 8008ea6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	4413      	add	r3, r2
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d006      	beq.n	8008ec2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	2b0f      	cmp	r3, #15
 8008ebe:	d9e9      	bls.n	8008e94 <prvInitialiseNewTask+0x5c>
 8008ec0:	e000      	b.n	8008ec4 <prvInitialiseNewTask+0x8c>
		{
			break;
 8008ec2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	2b37      	cmp	r3, #55	; 0x37
 8008ed0:	d901      	bls.n	8008ed6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ed2:	2337      	movs	r3, #55	; 0x37
 8008ed4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eda:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	3304      	adds	r3, #4
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fe fe87 	bl	8007c00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	3318      	adds	r3, #24
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe fe82 	bl	8007c00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	2200      	movs	r2, #0
 8008f16:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	68f9      	ldr	r1, [r7, #12]
 8008f2a:	69b8      	ldr	r0, [r7, #24]
 8008f2c:	f001 f9ae 	bl	800a28c <pxPortInitialiseStack>
 8008f30:	4602      	mov	r2, r0
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f42:	bf00      	nop
 8008f44:	3720      	adds	r7, #32
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f54:	f001 fac2 	bl	800a4dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f58:	4b2d      	ldr	r3, [pc, #180]	; (8009010 <prvAddNewTaskToReadyList+0xc4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	4a2c      	ldr	r2, [pc, #176]	; (8009010 <prvAddNewTaskToReadyList+0xc4>)
 8008f60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f62:	4b2c      	ldr	r3, [pc, #176]	; (8009014 <prvAddNewTaskToReadyList+0xc8>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f6a:	4a2a      	ldr	r2, [pc, #168]	; (8009014 <prvAddNewTaskToReadyList+0xc8>)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f70:	4b27      	ldr	r3, [pc, #156]	; (8009010 <prvAddNewTaskToReadyList+0xc4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d110      	bne.n	8008f9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f78:	f000 fbda 	bl	8009730 <prvInitialiseTaskLists>
 8008f7c:	e00d      	b.n	8008f9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f7e:	4b26      	ldr	r3, [pc, #152]	; (8009018 <prvAddNewTaskToReadyList+0xcc>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d109      	bne.n	8008f9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f86:	4b23      	ldr	r3, [pc, #140]	; (8009014 <prvAddNewTaskToReadyList+0xc8>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d802      	bhi.n	8008f9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f94:	4a1f      	ldr	r2, [pc, #124]	; (8009014 <prvAddNewTaskToReadyList+0xc8>)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f9a:	4b20      	ldr	r3, [pc, #128]	; (800901c <prvAddNewTaskToReadyList+0xd0>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	4a1e      	ldr	r2, [pc, #120]	; (800901c <prvAddNewTaskToReadyList+0xd0>)
 8008fa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008fa4:	4b1d      	ldr	r3, [pc, #116]	; (800901c <prvAddNewTaskToReadyList+0xd0>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb0:	4b1b      	ldr	r3, [pc, #108]	; (8009020 <prvAddNewTaskToReadyList+0xd4>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d903      	bls.n	8008fc0 <prvAddNewTaskToReadyList+0x74>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	4a18      	ldr	r2, [pc, #96]	; (8009020 <prvAddNewTaskToReadyList+0xd4>)
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4a15      	ldr	r2, [pc, #84]	; (8009024 <prvAddNewTaskToReadyList+0xd8>)
 8008fce:	441a      	add	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	f7fe fe1f 	bl	8007c1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fdc:	f001 faac 	bl	800a538 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <prvAddNewTaskToReadyList+0xcc>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00e      	beq.n	8009006 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <prvAddNewTaskToReadyList+0xc8>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d207      	bcs.n	8009006 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ff6:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <prvAddNewTaskToReadyList+0xdc>)
 8008ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20000d1c 	.word	0x20000d1c
 8009014:	20000848 	.word	0x20000848
 8009018:	20000d28 	.word	0x20000d28
 800901c:	20000d38 	.word	0x20000d38
 8009020:	20000d24 	.word	0x20000d24
 8009024:	2000084c 	.word	0x2000084c
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08a      	sub	sp, #40	; 0x28
 8009030:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800903a:	463a      	mov	r2, r7
 800903c:	1d39      	adds	r1, r7, #4
 800903e:	f107 0308 	add.w	r3, r7, #8
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe fd88 	bl	8007b58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	9202      	str	r2, [sp, #8]
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	2300      	movs	r3, #0
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	2300      	movs	r3, #0
 8009058:	460a      	mov	r2, r1
 800905a:	4920      	ldr	r1, [pc, #128]	; (80090dc <vTaskStartScheduler+0xb0>)
 800905c:	4820      	ldr	r0, [pc, #128]	; (80090e0 <vTaskStartScheduler+0xb4>)
 800905e:	f7ff fe4d 	bl	8008cfc <xTaskCreateStatic>
 8009062:	4602      	mov	r2, r0
 8009064:	4b1f      	ldr	r3, [pc, #124]	; (80090e4 <vTaskStartScheduler+0xb8>)
 8009066:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009068:	4b1e      	ldr	r3, [pc, #120]	; (80090e4 <vTaskStartScheduler+0xb8>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009070:	2301      	movs	r3, #1
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	e001      	b.n	800907a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d102      	bne.n	8009086 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009080:	f000 fdfa 	bl	8009c78 <xTimerCreateTimerTask>
 8009084:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d115      	bne.n	80090b8 <vTaskStartScheduler+0x8c>
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800909e:	4b12      	ldr	r3, [pc, #72]	; (80090e8 <vTaskStartScheduler+0xbc>)
 80090a0:	f04f 32ff 	mov.w	r2, #4294967295
 80090a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090a6:	4b11      	ldr	r3, [pc, #68]	; (80090ec <vTaskStartScheduler+0xc0>)
 80090a8:	2201      	movs	r2, #1
 80090aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80090ac:	4b10      	ldr	r3, [pc, #64]	; (80090f0 <vTaskStartScheduler+0xc4>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090b2:	f001 f975 	bl	800a3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090b6:	e00d      	b.n	80090d4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090be:	d109      	bne.n	80090d4 <vTaskStartScheduler+0xa8>
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	e7fe      	b.n	80090d2 <vTaskStartScheduler+0xa6>
}
 80090d4:	bf00      	nop
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	0801c9cc 	.word	0x0801c9cc
 80090e0:	08009701 	.word	0x08009701
 80090e4:	20000d40 	.word	0x20000d40
 80090e8:	20000d3c 	.word	0x20000d3c
 80090ec:	20000d28 	.word	0x20000d28
 80090f0:	20000d20 	.word	0x20000d20

080090f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <vTaskSuspendAll+0x18>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3301      	adds	r3, #1
 80090fe:	4a03      	ldr	r2, [pc, #12]	; (800910c <vTaskSuspendAll+0x18>)
 8009100:	6013      	str	r3, [r2, #0]
}
 8009102:	bf00      	nop
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	20000d44 	.word	0x20000d44

08009110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800911a:	2300      	movs	r3, #0
 800911c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800911e:	4b41      	ldr	r3, [pc, #260]	; (8009224 <xTaskResumeAll+0x114>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <xTaskResumeAll+0x2a>
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	603b      	str	r3, [r7, #0]
 8009138:	e7fe      	b.n	8009138 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800913a:	f001 f9cf 	bl	800a4dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800913e:	4b39      	ldr	r3, [pc, #228]	; (8009224 <xTaskResumeAll+0x114>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3b01      	subs	r3, #1
 8009144:	4a37      	ldr	r2, [pc, #220]	; (8009224 <xTaskResumeAll+0x114>)
 8009146:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009148:	4b36      	ldr	r3, [pc, #216]	; (8009224 <xTaskResumeAll+0x114>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d162      	bne.n	8009216 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009150:	4b35      	ldr	r3, [pc, #212]	; (8009228 <xTaskResumeAll+0x118>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d05e      	beq.n	8009216 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009158:	e02f      	b.n	80091ba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800915a:	4b34      	ldr	r3, [pc, #208]	; (800922c <xTaskResumeAll+0x11c>)
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3318      	adds	r3, #24
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fdb4 	bl	8007cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3304      	adds	r3, #4
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe fdaf 	bl	8007cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917a:	4b2d      	ldr	r3, [pc, #180]	; (8009230 <xTaskResumeAll+0x120>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	429a      	cmp	r2, r3
 8009180:	d903      	bls.n	800918a <xTaskResumeAll+0x7a>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009186:	4a2a      	ldr	r2, [pc, #168]	; (8009230 <xTaskResumeAll+0x120>)
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4a27      	ldr	r2, [pc, #156]	; (8009234 <xTaskResumeAll+0x124>)
 8009198:	441a      	add	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3304      	adds	r3, #4
 800919e:	4619      	mov	r1, r3
 80091a0:	4610      	mov	r0, r2
 80091a2:	f7fe fd3a 	bl	8007c1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091aa:	4b23      	ldr	r3, [pc, #140]	; (8009238 <xTaskResumeAll+0x128>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d302      	bcc.n	80091ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80091b4:	4b21      	ldr	r3, [pc, #132]	; (800923c <xTaskResumeAll+0x12c>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091ba:	4b1c      	ldr	r3, [pc, #112]	; (800922c <xTaskResumeAll+0x11c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1cb      	bne.n	800915a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091c8:	f000 fb4c 	bl	8009864 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80091cc:	4b1c      	ldr	r3, [pc, #112]	; (8009240 <xTaskResumeAll+0x130>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d010      	beq.n	80091fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091d8:	f000 f846 	bl	8009268 <xTaskIncrementTick>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80091e2:	4b16      	ldr	r3, [pc, #88]	; (800923c <xTaskResumeAll+0x12c>)
 80091e4:	2201      	movs	r2, #1
 80091e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1f1      	bne.n	80091d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80091f4:	4b12      	ldr	r3, [pc, #72]	; (8009240 <xTaskResumeAll+0x130>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091fa:	4b10      	ldr	r3, [pc, #64]	; (800923c <xTaskResumeAll+0x12c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d009      	beq.n	8009216 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009202:	2301      	movs	r3, #1
 8009204:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009206:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <xTaskResumeAll+0x134>)
 8009208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009216:	f001 f98f 	bl	800a538 <vPortExitCritical>

	return xAlreadyYielded;
 800921a:	68bb      	ldr	r3, [r7, #8]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20000d44 	.word	0x20000d44
 8009228:	20000d1c 	.word	0x20000d1c
 800922c:	20000cdc 	.word	0x20000cdc
 8009230:	20000d24 	.word	0x20000d24
 8009234:	2000084c 	.word	0x2000084c
 8009238:	20000848 	.word	0x20000848
 800923c:	20000d30 	.word	0x20000d30
 8009240:	20000d2c 	.word	0x20000d2c
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800924e:	4b05      	ldr	r3, [pc, #20]	; (8009264 <xTaskGetTickCount+0x1c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009254:	687b      	ldr	r3, [r7, #4]
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000d20 	.word	0x20000d20

08009268 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009272:	4b51      	ldr	r3, [pc, #324]	; (80093b8 <xTaskIncrementTick+0x150>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f040 808d 	bne.w	8009396 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800927c:	4b4f      	ldr	r3, [pc, #316]	; (80093bc <xTaskIncrementTick+0x154>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3301      	adds	r3, #1
 8009282:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009284:	4a4d      	ldr	r2, [pc, #308]	; (80093bc <xTaskIncrementTick+0x154>)
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d11f      	bne.n	80092d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009290:	4b4b      	ldr	r3, [pc, #300]	; (80093c0 <xTaskIncrementTick+0x158>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <xTaskIncrementTick+0x46>
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	e7fe      	b.n	80092ac <xTaskIncrementTick+0x44>
 80092ae:	4b44      	ldr	r3, [pc, #272]	; (80093c0 <xTaskIncrementTick+0x158>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	4b43      	ldr	r3, [pc, #268]	; (80093c4 <xTaskIncrementTick+0x15c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a41      	ldr	r2, [pc, #260]	; (80093c0 <xTaskIncrementTick+0x158>)
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	4a41      	ldr	r2, [pc, #260]	; (80093c4 <xTaskIncrementTick+0x15c>)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	4b41      	ldr	r3, [pc, #260]	; (80093c8 <xTaskIncrementTick+0x160>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3301      	adds	r3, #1
 80092c8:	4a3f      	ldr	r2, [pc, #252]	; (80093c8 <xTaskIncrementTick+0x160>)
 80092ca:	6013      	str	r3, [r2, #0]
 80092cc:	f000 faca 	bl	8009864 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092d0:	4b3e      	ldr	r3, [pc, #248]	; (80093cc <xTaskIncrementTick+0x164>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d34e      	bcc.n	8009378 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092da:	4b39      	ldr	r3, [pc, #228]	; (80093c0 <xTaskIncrementTick+0x158>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <xTaskIncrementTick+0x80>
 80092e4:	2301      	movs	r3, #1
 80092e6:	e000      	b.n	80092ea <xTaskIncrementTick+0x82>
 80092e8:	2300      	movs	r3, #0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ee:	4b37      	ldr	r3, [pc, #220]	; (80093cc <xTaskIncrementTick+0x164>)
 80092f0:	f04f 32ff 	mov.w	r2, #4294967295
 80092f4:	601a      	str	r2, [r3, #0]
					break;
 80092f6:	e03f      	b.n	8009378 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80092f8:	4b31      	ldr	r3, [pc, #196]	; (80093c0 <xTaskIncrementTick+0x158>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	429a      	cmp	r2, r3
 800930e:	d203      	bcs.n	8009318 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009310:	4a2e      	ldr	r2, [pc, #184]	; (80093cc <xTaskIncrementTick+0x164>)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6013      	str	r3, [r2, #0]
						break;
 8009316:	e02f      	b.n	8009378 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	3304      	adds	r3, #4
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe fcd9 	bl	8007cd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009326:	2b00      	cmp	r3, #0
 8009328:	d004      	beq.n	8009334 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	3318      	adds	r3, #24
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe fcd0 	bl	8007cd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009338:	4b25      	ldr	r3, [pc, #148]	; (80093d0 <xTaskIncrementTick+0x168>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	429a      	cmp	r2, r3
 800933e:	d903      	bls.n	8009348 <xTaskIncrementTick+0xe0>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009344:	4a22      	ldr	r2, [pc, #136]	; (80093d0 <xTaskIncrementTick+0x168>)
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934c:	4613      	mov	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4a1f      	ldr	r2, [pc, #124]	; (80093d4 <xTaskIncrementTick+0x16c>)
 8009356:	441a      	add	r2, r3
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	3304      	adds	r3, #4
 800935c:	4619      	mov	r1, r3
 800935e:	4610      	mov	r0, r2
 8009360:	f7fe fc5b 	bl	8007c1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009368:	4b1b      	ldr	r3, [pc, #108]	; (80093d8 <xTaskIncrementTick+0x170>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	429a      	cmp	r2, r3
 8009370:	d3b3      	bcc.n	80092da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009372:	2301      	movs	r3, #1
 8009374:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009376:	e7b0      	b.n	80092da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009378:	4b17      	ldr	r3, [pc, #92]	; (80093d8 <xTaskIncrementTick+0x170>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937e:	4915      	ldr	r1, [pc, #84]	; (80093d4 <xTaskIncrementTick+0x16c>)
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	440b      	add	r3, r1
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d907      	bls.n	80093a0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009390:	2301      	movs	r3, #1
 8009392:	617b      	str	r3, [r7, #20]
 8009394:	e004      	b.n	80093a0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009396:	4b11      	ldr	r3, [pc, #68]	; (80093dc <xTaskIncrementTick+0x174>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3301      	adds	r3, #1
 800939c:	4a0f      	ldr	r2, [pc, #60]	; (80093dc <xTaskIncrementTick+0x174>)
 800939e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80093a0:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <xTaskIncrementTick+0x178>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80093ac:	697b      	ldr	r3, [r7, #20]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000d44 	.word	0x20000d44
 80093bc:	20000d20 	.word	0x20000d20
 80093c0:	20000cd4 	.word	0x20000cd4
 80093c4:	20000cd8 	.word	0x20000cd8
 80093c8:	20000d34 	.word	0x20000d34
 80093cc:	20000d3c 	.word	0x20000d3c
 80093d0:	20000d24 	.word	0x20000d24
 80093d4:	2000084c 	.word	0x2000084c
 80093d8:	20000848 	.word	0x20000848
 80093dc:	20000d2c 	.word	0x20000d2c
 80093e0:	20000d30 	.word	0x20000d30

080093e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093ea:	4b27      	ldr	r3, [pc, #156]	; (8009488 <vTaskSwitchContext+0xa4>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093f2:	4b26      	ldr	r3, [pc, #152]	; (800948c <vTaskSwitchContext+0xa8>)
 80093f4:	2201      	movs	r2, #1
 80093f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093f8:	e040      	b.n	800947c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80093fa:	4b24      	ldr	r3, [pc, #144]	; (800948c <vTaskSwitchContext+0xa8>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009400:	4b23      	ldr	r3, [pc, #140]	; (8009490 <vTaskSwitchContext+0xac>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60fb      	str	r3, [r7, #12]
 8009406:	e00f      	b.n	8009428 <vTaskSwitchContext+0x44>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <vTaskSwitchContext+0x3e>
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	607b      	str	r3, [r7, #4]
 8009420:	e7fe      	b.n	8009420 <vTaskSwitchContext+0x3c>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3b01      	subs	r3, #1
 8009426:	60fb      	str	r3, [r7, #12]
 8009428:	491a      	ldr	r1, [pc, #104]	; (8009494 <vTaskSwitchContext+0xb0>)
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	440b      	add	r3, r1
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0e5      	beq.n	8009408 <vTaskSwitchContext+0x24>
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4a13      	ldr	r2, [pc, #76]	; (8009494 <vTaskSwitchContext+0xb0>)
 8009448:	4413      	add	r3, r2
 800944a:	60bb      	str	r3, [r7, #8]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	685a      	ldr	r2, [r3, #4]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	605a      	str	r2, [r3, #4]
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	3308      	adds	r3, #8
 800945e:	429a      	cmp	r2, r3
 8009460:	d104      	bne.n	800946c <vTaskSwitchContext+0x88>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	605a      	str	r2, [r3, #4]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	4a09      	ldr	r2, [pc, #36]	; (8009498 <vTaskSwitchContext+0xb4>)
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	4a06      	ldr	r2, [pc, #24]	; (8009490 <vTaskSwitchContext+0xac>)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6013      	str	r3, [r2, #0]
}
 800947c:	bf00      	nop
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	20000d44 	.word	0x20000d44
 800948c:	20000d30 	.word	0x20000d30
 8009490:	20000d24 	.word	0x20000d24
 8009494:	2000084c 	.word	0x2000084c
 8009498:	20000848 	.word	0x20000848

0800949c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d109      	bne.n	80094c0 <vTaskPlaceOnEventList+0x24>
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	e7fe      	b.n	80094be <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <vTaskPlaceOnEventList+0x44>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3318      	adds	r3, #24
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7fe fbca 	bl	8007c62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094ce:	2101      	movs	r1, #1
 80094d0:	6838      	ldr	r0, [r7, #0]
 80094d2:	f000 fb7d 	bl	8009bd0 <prvAddCurrentTaskToDelayedList>
}
 80094d6:	bf00      	nop
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20000848 	.word	0x20000848

080094e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d109      	bne.n	800950a <vTaskPlaceOnEventListRestricted+0x26>
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	617b      	str	r3, [r7, #20]
 8009508:	e7fe      	b.n	8009508 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800950a:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <vTaskPlaceOnEventListRestricted+0x50>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3318      	adds	r3, #24
 8009510:	4619      	mov	r1, r3
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f7fe fb81 	bl	8007c1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d002      	beq.n	8009524 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800951e:	f04f 33ff 	mov.w	r3, #4294967295
 8009522:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009524:	6879      	ldr	r1, [r7, #4]
 8009526:	68b8      	ldr	r0, [r7, #8]
 8009528:	f000 fb52 	bl	8009bd0 <prvAddCurrentTaskToDelayedList>
	}
 800952c:	bf00      	nop
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	20000848 	.word	0x20000848

08009538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d109      	bne.n	8009562 <xTaskRemoveFromEventList+0x2a>
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	e7fe      	b.n	8009560 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	3318      	adds	r3, #24
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fbb4 	bl	8007cd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800956c:	4b1d      	ldr	r3, [pc, #116]	; (80095e4 <xTaskRemoveFromEventList+0xac>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d11d      	bne.n	80095b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	3304      	adds	r3, #4
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe fbab 	bl	8007cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009582:	4b19      	ldr	r3, [pc, #100]	; (80095e8 <xTaskRemoveFromEventList+0xb0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	429a      	cmp	r2, r3
 8009588:	d903      	bls.n	8009592 <xTaskRemoveFromEventList+0x5a>
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958e:	4a16      	ldr	r2, [pc, #88]	; (80095e8 <xTaskRemoveFromEventList+0xb0>)
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4a13      	ldr	r2, [pc, #76]	; (80095ec <xTaskRemoveFromEventList+0xb4>)
 80095a0:	441a      	add	r2, r3
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	3304      	adds	r3, #4
 80095a6:	4619      	mov	r1, r3
 80095a8:	4610      	mov	r0, r2
 80095aa:	f7fe fb36 	bl	8007c1a <vListInsertEnd>
 80095ae:	e005      	b.n	80095bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	3318      	adds	r3, #24
 80095b4:	4619      	mov	r1, r3
 80095b6:	480e      	ldr	r0, [pc, #56]	; (80095f0 <xTaskRemoveFromEventList+0xb8>)
 80095b8:	f7fe fb2f 	bl	8007c1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c0:	4b0c      	ldr	r3, [pc, #48]	; (80095f4 <xTaskRemoveFromEventList+0xbc>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d905      	bls.n	80095d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095ca:	2301      	movs	r3, #1
 80095cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095ce:	4b0a      	ldr	r3, [pc, #40]	; (80095f8 <xTaskRemoveFromEventList+0xc0>)
 80095d0:	2201      	movs	r2, #1
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	e001      	b.n	80095da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80095d6:	2300      	movs	r3, #0
 80095d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80095da:	697b      	ldr	r3, [r7, #20]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3718      	adds	r7, #24
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20000d44 	.word	0x20000d44
 80095e8:	20000d24 	.word	0x20000d24
 80095ec:	2000084c 	.word	0x2000084c
 80095f0:	20000cdc 	.word	0x20000cdc
 80095f4:	20000848 	.word	0x20000848
 80095f8:	20000d30 	.word	0x20000d30

080095fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009604:	4b06      	ldr	r3, [pc, #24]	; (8009620 <vTaskInternalSetTimeOutState+0x24>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800960c:	4b05      	ldr	r3, [pc, #20]	; (8009624 <vTaskInternalSetTimeOutState+0x28>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	605a      	str	r2, [r3, #4]
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	20000d34 	.word	0x20000d34
 8009624:	20000d20 	.word	0x20000d20

08009628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d109      	bne.n	800964c <xTaskCheckForTimeOut+0x24>
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	613b      	str	r3, [r7, #16]
 800964a:	e7fe      	b.n	800964a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d109      	bne.n	8009666 <xTaskCheckForTimeOut+0x3e>
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e7fe      	b.n	8009664 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009666:	f000 ff39 	bl	800a4dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800966a:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <xTaskCheckForTimeOut+0xb8>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009682:	d102      	bne.n	800968a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]
 8009688:	e023      	b.n	80096d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <xTaskCheckForTimeOut+0xbc>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d007      	beq.n	80096a6 <xTaskCheckForTimeOut+0x7e>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	69ba      	ldr	r2, [r7, #24]
 800969c:	429a      	cmp	r2, r3
 800969e:	d302      	bcc.n	80096a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096a0:	2301      	movs	r3, #1
 80096a2:	61fb      	str	r3, [r7, #28]
 80096a4:	e015      	b.n	80096d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d20b      	bcs.n	80096c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	1ad2      	subs	r2, r2, r3
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff ff9d 	bl	80095fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096c2:	2300      	movs	r3, #0
 80096c4:	61fb      	str	r3, [r7, #28]
 80096c6:	e004      	b.n	80096d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2200      	movs	r2, #0
 80096cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096ce:	2301      	movs	r3, #1
 80096d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096d2:	f000 ff31 	bl	800a538 <vPortExitCritical>

	return xReturn;
 80096d6:	69fb      	ldr	r3, [r7, #28]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3720      	adds	r7, #32
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20000d20 	.word	0x20000d20
 80096e4:	20000d34 	.word	0x20000d34

080096e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096ec:	4b03      	ldr	r3, [pc, #12]	; (80096fc <vTaskMissedYield+0x14>)
 80096ee:	2201      	movs	r2, #1
 80096f0:	601a      	str	r2, [r3, #0]
}
 80096f2:	bf00      	nop
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	20000d30 	.word	0x20000d30

08009700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009708:	f000 f852 	bl	80097b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800970c:	4b06      	ldr	r3, [pc, #24]	; (8009728 <prvIdleTask+0x28>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d9f9      	bls.n	8009708 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009714:	4b05      	ldr	r3, [pc, #20]	; (800972c <prvIdleTask+0x2c>)
 8009716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009724:	e7f0      	b.n	8009708 <prvIdleTask+0x8>
 8009726:	bf00      	nop
 8009728:	2000084c 	.word	0x2000084c
 800972c:	e000ed04 	.word	0xe000ed04

08009730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009736:	2300      	movs	r3, #0
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	e00c      	b.n	8009756 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4a12      	ldr	r2, [pc, #72]	; (8009790 <prvInitialiseTaskLists+0x60>)
 8009748:	4413      	add	r3, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fa38 	bl	8007bc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3301      	adds	r3, #1
 8009754:	607b      	str	r3, [r7, #4]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b37      	cmp	r3, #55	; 0x37
 800975a:	d9ef      	bls.n	800973c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800975c:	480d      	ldr	r0, [pc, #52]	; (8009794 <prvInitialiseTaskLists+0x64>)
 800975e:	f7fe fa2f 	bl	8007bc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009762:	480d      	ldr	r0, [pc, #52]	; (8009798 <prvInitialiseTaskLists+0x68>)
 8009764:	f7fe fa2c 	bl	8007bc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009768:	480c      	ldr	r0, [pc, #48]	; (800979c <prvInitialiseTaskLists+0x6c>)
 800976a:	f7fe fa29 	bl	8007bc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800976e:	480c      	ldr	r0, [pc, #48]	; (80097a0 <prvInitialiseTaskLists+0x70>)
 8009770:	f7fe fa26 	bl	8007bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009774:	480b      	ldr	r0, [pc, #44]	; (80097a4 <prvInitialiseTaskLists+0x74>)
 8009776:	f7fe fa23 	bl	8007bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800977a:	4b0b      	ldr	r3, [pc, #44]	; (80097a8 <prvInitialiseTaskLists+0x78>)
 800977c:	4a05      	ldr	r2, [pc, #20]	; (8009794 <prvInitialiseTaskLists+0x64>)
 800977e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <prvInitialiseTaskLists+0x7c>)
 8009782:	4a05      	ldr	r2, [pc, #20]	; (8009798 <prvInitialiseTaskLists+0x68>)
 8009784:	601a      	str	r2, [r3, #0]
}
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	2000084c 	.word	0x2000084c
 8009794:	20000cac 	.word	0x20000cac
 8009798:	20000cc0 	.word	0x20000cc0
 800979c:	20000cdc 	.word	0x20000cdc
 80097a0:	20000cf0 	.word	0x20000cf0
 80097a4:	20000d08 	.word	0x20000d08
 80097a8:	20000cd4 	.word	0x20000cd4
 80097ac:	20000cd8 	.word	0x20000cd8

080097b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097b6:	e019      	b.n	80097ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097b8:	f000 fe90 	bl	800a4dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80097bc:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <prvCheckTasksWaitingTermination+0x4c>)
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe fa83 	bl	8007cd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097ce:	4b0c      	ldr	r3, [pc, #48]	; (8009800 <prvCheckTasksWaitingTermination+0x50>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	4a0a      	ldr	r2, [pc, #40]	; (8009800 <prvCheckTasksWaitingTermination+0x50>)
 80097d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097d8:	4b0a      	ldr	r3, [pc, #40]	; (8009804 <prvCheckTasksWaitingTermination+0x54>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3b01      	subs	r3, #1
 80097de:	4a09      	ldr	r2, [pc, #36]	; (8009804 <prvCheckTasksWaitingTermination+0x54>)
 80097e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097e2:	f000 fea9 	bl	800a538 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f80e 	bl	8009808 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097ec:	4b05      	ldr	r3, [pc, #20]	; (8009804 <prvCheckTasksWaitingTermination+0x54>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e1      	bne.n	80097b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	20000cf0 	.word	0x20000cf0
 8009800:	20000d1c 	.word	0x20000d1c
 8009804:	20000d04 	.word	0x20000d04

08009808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009816:	2b00      	cmp	r3, #0
 8009818:	d108      	bne.n	800982c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981e:	4618      	mov	r0, r3
 8009820:	f001 f838 	bl	800a894 <vPortFree>
				vPortFree( pxTCB );
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 f835 	bl	800a894 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800982a:	e017      	b.n	800985c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009832:	2b01      	cmp	r3, #1
 8009834:	d103      	bne.n	800983e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f001 f82c 	bl	800a894 <vPortFree>
	}
 800983c:	e00e      	b.n	800985c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009844:	2b02      	cmp	r3, #2
 8009846:	d009      	beq.n	800985c <prvDeleteTCB+0x54>
 8009848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	60fb      	str	r3, [r7, #12]
 800985a:	e7fe      	b.n	800985a <prvDeleteTCB+0x52>
	}
 800985c:	bf00      	nop
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800986a:	4b0f      	ldr	r3, [pc, #60]	; (80098a8 <prvResetNextTaskUnblockTime+0x44>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <prvResetNextTaskUnblockTime+0x14>
 8009874:	2301      	movs	r3, #1
 8009876:	e000      	b.n	800987a <prvResetNextTaskUnblockTime+0x16>
 8009878:	2300      	movs	r3, #0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d004      	beq.n	8009888 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800987e:	4b0b      	ldr	r3, [pc, #44]	; (80098ac <prvResetNextTaskUnblockTime+0x48>)
 8009880:	f04f 32ff 	mov.w	r2, #4294967295
 8009884:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009886:	e008      	b.n	800989a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009888:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <prvResetNextTaskUnblockTime+0x44>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	4a05      	ldr	r2, [pc, #20]	; (80098ac <prvResetNextTaskUnblockTime+0x48>)
 8009898:	6013      	str	r3, [r2, #0]
}
 800989a:	bf00      	nop
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	20000cd4 	.word	0x20000cd4
 80098ac:	20000d3c 	.word	0x20000d3c

080098b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098b6:	4b0b      	ldr	r3, [pc, #44]	; (80098e4 <xTaskGetSchedulerState+0x34>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d102      	bne.n	80098c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098be:	2301      	movs	r3, #1
 80098c0:	607b      	str	r3, [r7, #4]
 80098c2:	e008      	b.n	80098d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098c4:	4b08      	ldr	r3, [pc, #32]	; (80098e8 <xTaskGetSchedulerState+0x38>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d102      	bne.n	80098d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098cc:	2302      	movs	r3, #2
 80098ce:	607b      	str	r3, [r7, #4]
 80098d0:	e001      	b.n	80098d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098d2:	2300      	movs	r3, #0
 80098d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098d6:	687b      	ldr	r3, [r7, #4]
	}
 80098d8:	4618      	mov	r0, r3
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	20000d28 	.word	0x20000d28
 80098e8:	20000d44 	.word	0x20000d44

080098ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d056      	beq.n	80099b0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009906:	4b2d      	ldr	r3, [pc, #180]	; (80099bc <xTaskPriorityInherit+0xd0>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	429a      	cmp	r2, r3
 800990e:	d246      	bcs.n	800999e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	2b00      	cmp	r3, #0
 8009916:	db06      	blt.n	8009926 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009918:	4b28      	ldr	r3, [pc, #160]	; (80099bc <xTaskPriorityInherit+0xd0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6959      	ldr	r1, [r3, #20]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992e:	4613      	mov	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4a22      	ldr	r2, [pc, #136]	; (80099c0 <xTaskPriorityInherit+0xd4>)
 8009938:	4413      	add	r3, r2
 800993a:	4299      	cmp	r1, r3
 800993c:	d101      	bne.n	8009942 <xTaskPriorityInherit+0x56>
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <xTaskPriorityInherit+0x58>
 8009942:	2300      	movs	r3, #0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d022      	beq.n	800998e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	3304      	adds	r3, #4
 800994c:	4618      	mov	r0, r3
 800994e:	f7fe f9c1 	bl	8007cd4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009952:	4b1a      	ldr	r3, [pc, #104]	; (80099bc <xTaskPriorityInherit+0xd0>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009960:	4b18      	ldr	r3, [pc, #96]	; (80099c4 <xTaskPriorityInherit+0xd8>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	429a      	cmp	r2, r3
 8009966:	d903      	bls.n	8009970 <xTaskPriorityInherit+0x84>
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	4a15      	ldr	r2, [pc, #84]	; (80099c4 <xTaskPriorityInherit+0xd8>)
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4a10      	ldr	r2, [pc, #64]	; (80099c0 <xTaskPriorityInherit+0xd4>)
 800997e:	441a      	add	r2, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f7fe f947 	bl	8007c1a <vListInsertEnd>
 800998c:	e004      	b.n	8009998 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800998e:	4b0b      	ldr	r3, [pc, #44]	; (80099bc <xTaskPriorityInherit+0xd0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009998:	2301      	movs	r3, #1
 800999a:	60fb      	str	r3, [r7, #12]
 800999c:	e008      	b.n	80099b0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099a2:	4b06      	ldr	r3, [pc, #24]	; (80099bc <xTaskPriorityInherit+0xd0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d201      	bcs.n	80099b0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099b0:	68fb      	ldr	r3, [r7, #12]
	}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20000848 	.word	0x20000848
 80099c0:	2000084c 	.word	0x2000084c
 80099c4:	20000d24 	.word	0x20000d24

080099c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d054      	beq.n	8009a88 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099de:	4b2d      	ldr	r3, [pc, #180]	; (8009a94 <xTaskPriorityDisinherit+0xcc>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d009      	beq.n	80099fc <xTaskPriorityDisinherit+0x34>
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	60fb      	str	r3, [r7, #12]
 80099fa:	e7fe      	b.n	80099fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d109      	bne.n	8009a18 <xTaskPriorityDisinherit+0x50>
 8009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	60bb      	str	r3, [r7, #8]
 8009a16:	e7fe      	b.n	8009a16 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a1c:	1e5a      	subs	r2, r3, #1
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d02c      	beq.n	8009a88 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d128      	bne.n	8009a88 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe f94a 	bl	8007cd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a58:	4b0f      	ldr	r3, [pc, #60]	; (8009a98 <xTaskPriorityDisinherit+0xd0>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d903      	bls.n	8009a68 <xTaskPriorityDisinherit+0xa0>
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	4a0c      	ldr	r2, [pc, #48]	; (8009a98 <xTaskPriorityDisinherit+0xd0>)
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4a09      	ldr	r2, [pc, #36]	; (8009a9c <xTaskPriorityDisinherit+0xd4>)
 8009a76:	441a      	add	r2, r3
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	f7fe f8cb 	bl	8007c1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a88:	697b      	ldr	r3, [r7, #20]
	}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000848 	.word	0x20000848
 8009a98:	20000d24 	.word	0x20000d24
 8009a9c:	2000084c 	.word	0x2000084c

08009aa0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d06d      	beq.n	8009b94 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d109      	bne.n	8009ad4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	e7fe      	b.n	8009ad2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d902      	bls.n	8009ae4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	61fb      	str	r3, [r7, #28]
 8009ae2:	e002      	b.n	8009aea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	69fa      	ldr	r2, [r7, #28]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d04f      	beq.n	8009b94 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d14a      	bne.n	8009b94 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009afe:	4b27      	ldr	r3, [pc, #156]	; (8009b9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	69ba      	ldr	r2, [r7, #24]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d109      	bne.n	8009b1c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8009b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0c:	f383 8811 	msr	BASEPRI, r3
 8009b10:	f3bf 8f6f 	isb	sy
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	60bb      	str	r3, [r7, #8]
 8009b1a:	e7fe      	b.n	8009b1a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	69fa      	ldr	r2, [r7, #28]
 8009b26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	db04      	blt.n	8009b3a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	6959      	ldr	r1, [r3, #20]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4a15      	ldr	r2, [pc, #84]	; (8009ba0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009b4a:	4413      	add	r3, r2
 8009b4c:	4299      	cmp	r1, r3
 8009b4e:	d101      	bne.n	8009b54 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8009b50:	2301      	movs	r3, #1
 8009b52:	e000      	b.n	8009b56 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8009b54:	2300      	movs	r3, #0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d01c      	beq.n	8009b94 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe f8b8 	bl	8007cd4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b68:	4b0e      	ldr	r3, [pc, #56]	; (8009ba4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d903      	bls.n	8009b78 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	4a0b      	ldr	r2, [pc, #44]	; (8009ba4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4a06      	ldr	r2, [pc, #24]	; (8009ba0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009b86:	441a      	add	r2, r3
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f7fe f843 	bl	8007c1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b94:	bf00      	nop
 8009b96:	3720      	adds	r7, #32
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20000848 	.word	0x20000848
 8009ba0:	2000084c 	.word	0x2000084c
 8009ba4:	20000d24 	.word	0x20000d24

08009ba8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009ba8:	b480      	push	{r7}
 8009baa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009bac:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d004      	beq.n	8009bbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009bb4:	4b05      	ldr	r3, [pc, #20]	; (8009bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bba:	3201      	adds	r2, #1
 8009bbc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009bbe:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
	}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	20000848 	.word	0x20000848

08009bd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bda:	4b21      	ldr	r3, [pc, #132]	; (8009c60 <prvAddCurrentTaskToDelayedList+0x90>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009be0:	4b20      	ldr	r3, [pc, #128]	; (8009c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3304      	adds	r3, #4
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fe f874 	bl	8007cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf2:	d10a      	bne.n	8009c0a <prvAddCurrentTaskToDelayedList+0x3a>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d007      	beq.n	8009c0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bfa:	4b1a      	ldr	r3, [pc, #104]	; (8009c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	4619      	mov	r1, r3
 8009c02:	4819      	ldr	r0, [pc, #100]	; (8009c68 <prvAddCurrentTaskToDelayedList+0x98>)
 8009c04:	f7fe f809 	bl	8007c1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c08:	e026      	b.n	8009c58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4413      	add	r3, r2
 8009c10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c12:	4b14      	ldr	r3, [pc, #80]	; (8009c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d209      	bcs.n	8009c36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c22:	4b12      	ldr	r3, [pc, #72]	; (8009c6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	4610      	mov	r0, r2
 8009c30:	f7fe f817 	bl	8007c62 <vListInsert>
}
 8009c34:	e010      	b.n	8009c58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c36:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3304      	adds	r3, #4
 8009c40:	4619      	mov	r1, r3
 8009c42:	4610      	mov	r0, r2
 8009c44:	f7fe f80d 	bl	8007c62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c48:	4b0a      	ldr	r3, [pc, #40]	; (8009c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d202      	bcs.n	8009c58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c52:	4a08      	ldr	r2, [pc, #32]	; (8009c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	6013      	str	r3, [r2, #0]
}
 8009c58:	bf00      	nop
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20000d20 	.word	0x20000d20
 8009c64:	20000848 	.word	0x20000848
 8009c68:	20000d08 	.word	0x20000d08
 8009c6c:	20000cd8 	.word	0x20000cd8
 8009c70:	20000cd4 	.word	0x20000cd4
 8009c74:	20000d3c 	.word	0x20000d3c

08009c78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	; 0x28
 8009c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c82:	f000 fac3 	bl	800a20c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c86:	4b1c      	ldr	r3, [pc, #112]	; (8009cf8 <xTimerCreateTimerTask+0x80>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d021      	beq.n	8009cd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c96:	1d3a      	adds	r2, r7, #4
 8009c98:	f107 0108 	add.w	r1, r7, #8
 8009c9c:	f107 030c 	add.w	r3, r7, #12
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fd ff73 	bl	8007b8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	9202      	str	r2, [sp, #8]
 8009cae:	9301      	str	r3, [sp, #4]
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	460a      	mov	r2, r1
 8009cb8:	4910      	ldr	r1, [pc, #64]	; (8009cfc <xTimerCreateTimerTask+0x84>)
 8009cba:	4811      	ldr	r0, [pc, #68]	; (8009d00 <xTimerCreateTimerTask+0x88>)
 8009cbc:	f7ff f81e 	bl	8008cfc <xTaskCreateStatic>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	4b10      	ldr	r3, [pc, #64]	; (8009d04 <xTimerCreateTimerTask+0x8c>)
 8009cc4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009cc6:	4b0f      	ldr	r3, [pc, #60]	; (8009d04 <xTimerCreateTimerTask+0x8c>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d109      	bne.n	8009cec <xTimerCreateTimerTask+0x74>
 8009cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	613b      	str	r3, [r7, #16]
 8009cea:	e7fe      	b.n	8009cea <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009cec:	697b      	ldr	r3, [r7, #20]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000d78 	.word	0x20000d78
 8009cfc:	0801c9d4 	.word	0x0801c9d4
 8009d00:	08009e21 	.word	0x08009e21
 8009d04:	20000d7c 	.word	0x20000d7c

08009d08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08a      	sub	sp, #40	; 0x28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d109      	bne.n	8009d34 <xTimerGenericCommand+0x2c>
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	623b      	str	r3, [r7, #32]
 8009d32:	e7fe      	b.n	8009d32 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d34:	4b19      	ldr	r3, [pc, #100]	; (8009d9c <xTimerGenericCommand+0x94>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d02a      	beq.n	8009d92 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2b05      	cmp	r3, #5
 8009d4c:	dc18      	bgt.n	8009d80 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d4e:	f7ff fdaf 	bl	80098b0 <xTaskGetSchedulerState>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d109      	bne.n	8009d6c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d58:	4b10      	ldr	r3, [pc, #64]	; (8009d9c <xTimerGenericCommand+0x94>)
 8009d5a:	6818      	ldr	r0, [r3, #0]
 8009d5c:	f107 0110 	add.w	r1, r7, #16
 8009d60:	2300      	movs	r3, #0
 8009d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d64:	f7fe f980 	bl	8008068 <xQueueGenericSend>
 8009d68:	6278      	str	r0, [r7, #36]	; 0x24
 8009d6a:	e012      	b.n	8009d92 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d6c:	4b0b      	ldr	r3, [pc, #44]	; (8009d9c <xTimerGenericCommand+0x94>)
 8009d6e:	6818      	ldr	r0, [r3, #0]
 8009d70:	f107 0110 	add.w	r1, r7, #16
 8009d74:	2300      	movs	r3, #0
 8009d76:	2200      	movs	r2, #0
 8009d78:	f7fe f976 	bl	8008068 <xQueueGenericSend>
 8009d7c:	6278      	str	r0, [r7, #36]	; 0x24
 8009d7e:	e008      	b.n	8009d92 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d80:	4b06      	ldr	r3, [pc, #24]	; (8009d9c <xTimerGenericCommand+0x94>)
 8009d82:	6818      	ldr	r0, [r3, #0]
 8009d84:	f107 0110 	add.w	r1, r7, #16
 8009d88:	2300      	movs	r3, #0
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	f7fe fa66 	bl	800825c <xQueueGenericSendFromISR>
 8009d90:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3728      	adds	r7, #40	; 0x28
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000d78 	.word	0x20000d78

08009da0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af02      	add	r7, sp, #8
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009daa:	4b1c      	ldr	r3, [pc, #112]	; (8009e1c <prvProcessExpiredTimer+0x7c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	3304      	adds	r3, #4
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fd ff8b 	bl	8007cd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d121      	bne.n	8009e0a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	699a      	ldr	r2, [r3, #24]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	18d1      	adds	r1, r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	6978      	ldr	r0, [r7, #20]
 8009dd4:	f000 f8c8 	bl	8009f68 <prvInsertTimerInActiveList>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d015      	beq.n	8009e0a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009dde:	2300      	movs	r3, #0
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	2300      	movs	r3, #0
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	2100      	movs	r1, #0
 8009de8:	6978      	ldr	r0, [r7, #20]
 8009dea:	f7ff ff8d 	bl	8009d08 <xTimerGenericCommand>
 8009dee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d109      	bne.n	8009e0a <prvProcessExpiredTimer+0x6a>
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	e7fe      	b.n	8009e08 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	6978      	ldr	r0, [r7, #20]
 8009e10:	4798      	blx	r3
}
 8009e12:	bf00      	nop
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20000d70 	.word	0x20000d70

08009e20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e28:	f107 0308 	add.w	r3, r7, #8
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 f857 	bl	8009ee0 <prvGetNextExpireTime>
 8009e32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4619      	mov	r1, r3
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 f803 	bl	8009e44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e3e:	f000 f8d5 	bl	8009fec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e42:	e7f1      	b.n	8009e28 <prvTimerTask+0x8>

08009e44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e4e:	f7ff f951 	bl	80090f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e52:	f107 0308 	add.w	r3, r7, #8
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 f866 	bl	8009f28 <prvSampleTimeNow>
 8009e5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d130      	bne.n	8009ec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10a      	bne.n	8009e80 <prvProcessTimerOrBlockTask+0x3c>
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d806      	bhi.n	8009e80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e72:	f7ff f94d 	bl	8009110 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e76:	68f9      	ldr	r1, [r7, #12]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff ff91 	bl	8009da0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e7e:	e024      	b.n	8009eca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d008      	beq.n	8009e98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e86:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <prvProcessTimerOrBlockTask+0x90>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bf0c      	ite	eq
 8009e90:	2301      	moveq	r3, #1
 8009e92:	2300      	movne	r3, #0
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e98:	4b0f      	ldr	r3, [pc, #60]	; (8009ed8 <prvProcessTimerOrBlockTask+0x94>)
 8009e9a:	6818      	ldr	r0, [r3, #0]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	f7fe fef5 	bl	8008c94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009eaa:	f7ff f931 	bl	8009110 <xTaskResumeAll>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009eb4:	4b09      	ldr	r3, [pc, #36]	; (8009edc <prvProcessTimerOrBlockTask+0x98>)
 8009eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	f3bf 8f6f 	isb	sy
}
 8009ec4:	e001      	b.n	8009eca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ec6:	f7ff f923 	bl	8009110 <xTaskResumeAll>
}
 8009eca:	bf00      	nop
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20000d74 	.word	0x20000d74
 8009ed8:	20000d78 	.word	0x20000d78
 8009edc:	e000ed04 	.word	0xe000ed04

08009ee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ee8:	4b0e      	ldr	r3, [pc, #56]	; (8009f24 <prvGetNextExpireTime+0x44>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	bf0c      	ite	eq
 8009ef2:	2301      	moveq	r3, #1
 8009ef4:	2300      	movne	r3, #0
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	461a      	mov	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d105      	bne.n	8009f12 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f06:	4b07      	ldr	r3, [pc, #28]	; (8009f24 <prvGetNextExpireTime+0x44>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	e001      	b.n	8009f16 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f16:	68fb      	ldr	r3, [r7, #12]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3714      	adds	r7, #20
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr
 8009f24:	20000d70 	.word	0x20000d70

08009f28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f30:	f7ff f98a 	bl	8009248 <xTaskGetTickCount>
 8009f34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f36:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <prvSampleTimeNow+0x3c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d205      	bcs.n	8009f4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f40:	f000 f904 	bl	800a14c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	e002      	b.n	8009f52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f52:	4a04      	ldr	r2, [pc, #16]	; (8009f64 <prvSampleTimeNow+0x3c>)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f58:	68fb      	ldr	r3, [r7, #12]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	20000d80 	.word	0x20000d80

08009f68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f76:	2300      	movs	r3, #0
 8009f78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d812      	bhi.n	8009fb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	1ad2      	subs	r2, r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d302      	bcc.n	8009fa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	617b      	str	r3, [r7, #20]
 8009fa0:	e01b      	b.n	8009fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009fa2:	4b10      	ldr	r3, [pc, #64]	; (8009fe4 <prvInsertTimerInActiveList+0x7c>)
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	4619      	mov	r1, r3
 8009fac:	4610      	mov	r0, r2
 8009fae:	f7fd fe58 	bl	8007c62 <vListInsert>
 8009fb2:	e012      	b.n	8009fda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d206      	bcs.n	8009fca <prvInsertTimerInActiveList+0x62>
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d302      	bcc.n	8009fca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	e007      	b.n	8009fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fca:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <prvInsertTimerInActiveList+0x80>)
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	f7fd fe44 	bl	8007c62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fda:	697b      	ldr	r3, [r7, #20]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20000d74 	.word	0x20000d74
 8009fe8:	20000d70 	.word	0x20000d70

08009fec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08e      	sub	sp, #56	; 0x38
 8009ff0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ff2:	e099      	b.n	800a128 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	da17      	bge.n	800a02a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ffa:	1d3b      	adds	r3, r7, #4
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a002:	2b00      	cmp	r3, #0
 800a004:	d109      	bne.n	800a01a <prvProcessReceivedCommands+0x2e>
 800a006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	61fb      	str	r3, [r7, #28]
 800a018:	e7fe      	b.n	800a018 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a020:	6850      	ldr	r0, [r2, #4]
 800a022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a024:	6892      	ldr	r2, [r2, #8]
 800a026:	4611      	mov	r1, r2
 800a028:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	db7a      	blt.n	800a126 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d004      	beq.n	800a046 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	3304      	adds	r3, #4
 800a040:	4618      	mov	r0, r3
 800a042:	f7fd fe47 	bl	8007cd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a046:	463b      	mov	r3, r7
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff ff6d 	bl	8009f28 <prvSampleTimeNow>
 800a04e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b09      	cmp	r3, #9
 800a054:	d868      	bhi.n	800a128 <prvProcessReceivedCommands+0x13c>
 800a056:	a201      	add	r2, pc, #4	; (adr r2, 800a05c <prvProcessReceivedCommands+0x70>)
 800a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05c:	0800a085 	.word	0x0800a085
 800a060:	0800a085 	.word	0x0800a085
 800a064:	0800a085 	.word	0x0800a085
 800a068:	0800a129 	.word	0x0800a129
 800a06c:	0800a0df 	.word	0x0800a0df
 800a070:	0800a115 	.word	0x0800a115
 800a074:	0800a085 	.word	0x0800a085
 800a078:	0800a085 	.word	0x0800a085
 800a07c:	0800a129 	.word	0x0800a129
 800a080:	0800a0df 	.word	0x0800a0df
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	18d1      	adds	r1, r2, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a092:	f7ff ff69 	bl	8009f68 <prvInsertTimerInActiveList>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d045      	beq.n	800a128 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d13d      	bne.n	800a128 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	441a      	add	r2, r3
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0be:	f7ff fe23 	bl	8009d08 <xTimerGenericCommand>
 800a0c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d12e      	bne.n	800a128 <prvProcessReceivedCommands+0x13c>
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	61bb      	str	r3, [r7, #24]
 800a0dc:	e7fe      	b.n	800a0dc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d109      	bne.n	800a100 <prvProcessReceivedCommands+0x114>
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	617b      	str	r3, [r7, #20]
 800a0fe:	e7fe      	b.n	800a0fe <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	699a      	ldr	r2, [r3, #24]
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	18d1      	adds	r1, r2, r3
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a10e:	f7ff ff2b 	bl	8009f68 <prvInsertTimerInActiveList>
					break;
 800a112:	e009      	b.n	800a128 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d104      	bne.n	800a128 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800a11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a120:	f000 fbb8 	bl	800a894 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a124:	e000      	b.n	800a128 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a126:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a128:	4b07      	ldr	r3, [pc, #28]	; (800a148 <prvProcessReceivedCommands+0x15c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	1d39      	adds	r1, r7, #4
 800a12e:	2200      	movs	r2, #0
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe f9b1 	bl	8008498 <xQueueReceive>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f47f af5b 	bne.w	8009ff4 <prvProcessReceivedCommands+0x8>
	}
}
 800a13e:	bf00      	nop
 800a140:	3730      	adds	r7, #48	; 0x30
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20000d78 	.word	0x20000d78

0800a14c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b088      	sub	sp, #32
 800a150:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a152:	e044      	b.n	800a1de <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a154:	4b2b      	ldr	r3, [pc, #172]	; (800a204 <prvSwitchTimerLists+0xb8>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a15e:	4b29      	ldr	r3, [pc, #164]	; (800a204 <prvSwitchTimerLists+0xb8>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	3304      	adds	r3, #4
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fd fdb1 	bl	8007cd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d12d      	bne.n	800a1de <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	4413      	add	r3, r2
 800a18a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	429a      	cmp	r2, r3
 800a192:	d90e      	bls.n	800a1b2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1a0:	4b18      	ldr	r3, [pc, #96]	; (800a204 <prvSwitchTimerLists+0xb8>)
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	f7fd fd59 	bl	8007c62 <vListInsert>
 800a1b0:	e015      	b.n	800a1de <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f7ff fda3 	bl	8009d08 <xTimerGenericCommand>
 800a1c2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d109      	bne.n	800a1de <prvSwitchTimerLists+0x92>
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	e7fe      	b.n	800a1dc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1de:	4b09      	ldr	r3, [pc, #36]	; (800a204 <prvSwitchTimerLists+0xb8>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1b5      	bne.n	800a154 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <prvSwitchTimerLists+0xb8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1ee:	4b06      	ldr	r3, [pc, #24]	; (800a208 <prvSwitchTimerLists+0xbc>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a04      	ldr	r2, [pc, #16]	; (800a204 <prvSwitchTimerLists+0xb8>)
 800a1f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1f6:	4a04      	ldr	r2, [pc, #16]	; (800a208 <prvSwitchTimerLists+0xbc>)
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	6013      	str	r3, [r2, #0]
}
 800a1fc:	bf00      	nop
 800a1fe:	3718      	adds	r7, #24
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	20000d70 	.word	0x20000d70
 800a208:	20000d74 	.word	0x20000d74

0800a20c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a212:	f000 f963 	bl	800a4dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a216:	4b15      	ldr	r3, [pc, #84]	; (800a26c <prvCheckForValidListAndQueue+0x60>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d120      	bne.n	800a260 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a21e:	4814      	ldr	r0, [pc, #80]	; (800a270 <prvCheckForValidListAndQueue+0x64>)
 800a220:	f7fd fcce 	bl	8007bc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a224:	4813      	ldr	r0, [pc, #76]	; (800a274 <prvCheckForValidListAndQueue+0x68>)
 800a226:	f7fd fccb 	bl	8007bc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a22a:	4b13      	ldr	r3, [pc, #76]	; (800a278 <prvCheckForValidListAndQueue+0x6c>)
 800a22c:	4a10      	ldr	r2, [pc, #64]	; (800a270 <prvCheckForValidListAndQueue+0x64>)
 800a22e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a230:	4b12      	ldr	r3, [pc, #72]	; (800a27c <prvCheckForValidListAndQueue+0x70>)
 800a232:	4a10      	ldr	r2, [pc, #64]	; (800a274 <prvCheckForValidListAndQueue+0x68>)
 800a234:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a236:	2300      	movs	r3, #0
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	4b11      	ldr	r3, [pc, #68]	; (800a280 <prvCheckForValidListAndQueue+0x74>)
 800a23c:	4a11      	ldr	r2, [pc, #68]	; (800a284 <prvCheckForValidListAndQueue+0x78>)
 800a23e:	2110      	movs	r1, #16
 800a240:	200a      	movs	r0, #10
 800a242:	f7fd fdd9 	bl	8007df8 <xQueueGenericCreateStatic>
 800a246:	4602      	mov	r2, r0
 800a248:	4b08      	ldr	r3, [pc, #32]	; (800a26c <prvCheckForValidListAndQueue+0x60>)
 800a24a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a24c:	4b07      	ldr	r3, [pc, #28]	; (800a26c <prvCheckForValidListAndQueue+0x60>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d005      	beq.n	800a260 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a254:	4b05      	ldr	r3, [pc, #20]	; (800a26c <prvCheckForValidListAndQueue+0x60>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	490b      	ldr	r1, [pc, #44]	; (800a288 <prvCheckForValidListAndQueue+0x7c>)
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fcc8 	bl	8008bf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a260:	f000 f96a 	bl	800a538 <vPortExitCritical>
}
 800a264:	bf00      	nop
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20000d78 	.word	0x20000d78
 800a270:	20000d48 	.word	0x20000d48
 800a274:	20000d5c 	.word	0x20000d5c
 800a278:	20000d70 	.word	0x20000d70
 800a27c:	20000d74 	.word	0x20000d74
 800a280:	20000e24 	.word	0x20000e24
 800a284:	20000d84 	.word	0x20000d84
 800a288:	0801c9dc 	.word	0x0801c9dc

0800a28c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3b04      	subs	r3, #4
 800a29c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3b04      	subs	r3, #4
 800a2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f023 0201 	bic.w	r2, r3, #1
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3b04      	subs	r3, #4
 800a2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2bc:	4a0c      	ldr	r2, [pc, #48]	; (800a2f0 <pxPortInitialiseStack+0x64>)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3b14      	subs	r3, #20
 800a2c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3b04      	subs	r3, #4
 800a2d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f06f 0202 	mvn.w	r2, #2
 800a2da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3b20      	subs	r3, #32
 800a2e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	0800a2f5 	.word	0x0800a2f5

0800a2f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2fe:	4b11      	ldr	r3, [pc, #68]	; (800a344 <prvTaskExitError+0x50>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a306:	d009      	beq.n	800a31c <prvTaskExitError+0x28>
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	e7fe      	b.n	800a31a <prvTaskExitError+0x26>
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a32e:	bf00      	nop
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0fc      	beq.n	800a330 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a336:	bf00      	nop
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	20000088 	.word	0x20000088
	...

0800a350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <pxCurrentTCBConst2>)
 800a352:	6819      	ldr	r1, [r3, #0]
 800a354:	6808      	ldr	r0, [r1, #0]
 800a356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35a:	f380 8809 	msr	PSP, r0
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f04f 0000 	mov.w	r0, #0
 800a366:	f380 8811 	msr	BASEPRI, r0
 800a36a:	4770      	bx	lr
 800a36c:	f3af 8000 	nop.w

0800a370 <pxCurrentTCBConst2>:
 800a370:	20000848 	.word	0x20000848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a374:	bf00      	nop
 800a376:	bf00      	nop

0800a378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a378:	4808      	ldr	r0, [pc, #32]	; (800a39c <prvPortStartFirstTask+0x24>)
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	6800      	ldr	r0, [r0, #0]
 800a37e:	f380 8808 	msr	MSP, r0
 800a382:	f04f 0000 	mov.w	r0, #0
 800a386:	f380 8814 	msr	CONTROL, r0
 800a38a:	b662      	cpsie	i
 800a38c:	b661      	cpsie	f
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	df00      	svc	0
 800a398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a39a:	bf00      	nop
 800a39c:	e000ed08 	.word	0xe000ed08

0800a3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3a6:	4b44      	ldr	r3, [pc, #272]	; (800a4b8 <xPortStartScheduler+0x118>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a44      	ldr	r2, [pc, #272]	; (800a4bc <xPortStartScheduler+0x11c>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d109      	bne.n	800a3c4 <xPortStartScheduler+0x24>
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	613b      	str	r3, [r7, #16]
 800a3c2:	e7fe      	b.n	800a3c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a3c4:	4b3c      	ldr	r3, [pc, #240]	; (800a4b8 <xPortStartScheduler+0x118>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a3d      	ldr	r2, [pc, #244]	; (800a4c0 <xPortStartScheduler+0x120>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d109      	bne.n	800a3e2 <xPortStartScheduler+0x42>
 800a3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	60fb      	str	r3, [r7, #12]
 800a3e0:	e7fe      	b.n	800a3e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3e2:	4b38      	ldr	r3, [pc, #224]	; (800a4c4 <xPortStartScheduler+0x124>)
 800a3e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	22ff      	movs	r2, #255	; 0xff
 800a3f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a404:	b2da      	uxtb	r2, r3
 800a406:	4b30      	ldr	r3, [pc, #192]	; (800a4c8 <xPortStartScheduler+0x128>)
 800a408:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a40a:	4b30      	ldr	r3, [pc, #192]	; (800a4cc <xPortStartScheduler+0x12c>)
 800a40c:	2207      	movs	r2, #7
 800a40e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a410:	e009      	b.n	800a426 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a412:	4b2e      	ldr	r3, [pc, #184]	; (800a4cc <xPortStartScheduler+0x12c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3b01      	subs	r3, #1
 800a418:	4a2c      	ldr	r2, [pc, #176]	; (800a4cc <xPortStartScheduler+0x12c>)
 800a41a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a41c:	78fb      	ldrb	r3, [r7, #3]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	b2db      	uxtb	r3, r3
 800a424:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a426:	78fb      	ldrb	r3, [r7, #3]
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a42e:	2b80      	cmp	r3, #128	; 0x80
 800a430:	d0ef      	beq.n	800a412 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a432:	4b26      	ldr	r3, [pc, #152]	; (800a4cc <xPortStartScheduler+0x12c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f1c3 0307 	rsb	r3, r3, #7
 800a43a:	2b04      	cmp	r3, #4
 800a43c:	d009      	beq.n	800a452 <xPortStartScheduler+0xb2>
 800a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	60bb      	str	r3, [r7, #8]
 800a450:	e7fe      	b.n	800a450 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a452:	4b1e      	ldr	r3, [pc, #120]	; (800a4cc <xPortStartScheduler+0x12c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	021b      	lsls	r3, r3, #8
 800a458:	4a1c      	ldr	r2, [pc, #112]	; (800a4cc <xPortStartScheduler+0x12c>)
 800a45a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a45c:	4b1b      	ldr	r3, [pc, #108]	; (800a4cc <xPortStartScheduler+0x12c>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a464:	4a19      	ldr	r2, [pc, #100]	; (800a4cc <xPortStartScheduler+0x12c>)
 800a466:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a470:	4b17      	ldr	r3, [pc, #92]	; (800a4d0 <xPortStartScheduler+0x130>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a16      	ldr	r2, [pc, #88]	; (800a4d0 <xPortStartScheduler+0x130>)
 800a476:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a47a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a47c:	4b14      	ldr	r3, [pc, #80]	; (800a4d0 <xPortStartScheduler+0x130>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a13      	ldr	r2, [pc, #76]	; (800a4d0 <xPortStartScheduler+0x130>)
 800a482:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a486:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a488:	f000 f8d6 	bl	800a638 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a48c:	4b11      	ldr	r3, [pc, #68]	; (800a4d4 <xPortStartScheduler+0x134>)
 800a48e:	2200      	movs	r2, #0
 800a490:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a492:	f000 f8f5 	bl	800a680 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a496:	4b10      	ldr	r3, [pc, #64]	; (800a4d8 <xPortStartScheduler+0x138>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a0f      	ldr	r2, [pc, #60]	; (800a4d8 <xPortStartScheduler+0x138>)
 800a49c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4a2:	f7ff ff69 	bl	800a378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4a6:	f7fe ff9d 	bl	80093e4 <vTaskSwitchContext>
	prvTaskExitError();
 800a4aa:	f7ff ff23 	bl	800a2f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3718      	adds	r7, #24
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	e000ed00 	.word	0xe000ed00
 800a4bc:	410fc271 	.word	0x410fc271
 800a4c0:	410fc270 	.word	0x410fc270
 800a4c4:	e000e400 	.word	0xe000e400
 800a4c8:	20000e74 	.word	0x20000e74
 800a4cc:	20000e78 	.word	0x20000e78
 800a4d0:	e000ed20 	.word	0xe000ed20
 800a4d4:	20000088 	.word	0x20000088
 800a4d8:	e000ef34 	.word	0xe000ef34

0800a4dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4f4:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <vPortEnterCritical+0x54>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	4a0d      	ldr	r2, [pc, #52]	; (800a530 <vPortEnterCritical+0x54>)
 800a4fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4fe:	4b0c      	ldr	r3, [pc, #48]	; (800a530 <vPortEnterCritical+0x54>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d10e      	bne.n	800a524 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <vPortEnterCritical+0x58>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d009      	beq.n	800a524 <vPortEnterCritical+0x48>
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	603b      	str	r3, [r7, #0]
 800a522:	e7fe      	b.n	800a522 <vPortEnterCritical+0x46>
	}
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	20000088 	.word	0x20000088
 800a534:	e000ed04 	.word	0xe000ed04

0800a538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a53e:	4b11      	ldr	r3, [pc, #68]	; (800a584 <vPortExitCritical+0x4c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d109      	bne.n	800a55a <vPortExitCritical+0x22>
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	607b      	str	r3, [r7, #4]
 800a558:	e7fe      	b.n	800a558 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a55a:	4b0a      	ldr	r3, [pc, #40]	; (800a584 <vPortExitCritical+0x4c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3b01      	subs	r3, #1
 800a560:	4a08      	ldr	r2, [pc, #32]	; (800a584 <vPortExitCritical+0x4c>)
 800a562:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a564:	4b07      	ldr	r3, [pc, #28]	; (800a584 <vPortExitCritical+0x4c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d104      	bne.n	800a576 <vPortExitCritical+0x3e>
 800a56c:	2300      	movs	r3, #0
 800a56e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a576:	bf00      	nop
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	20000088 	.word	0x20000088
	...

0800a590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a590:	f3ef 8009 	mrs	r0, PSP
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	4b15      	ldr	r3, [pc, #84]	; (800a5f0 <pxCurrentTCBConst>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	f01e 0f10 	tst.w	lr, #16
 800a5a0:	bf08      	it	eq
 800a5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5aa:	6010      	str	r0, [r2, #0]
 800a5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5b4:	f380 8811 	msr	BASEPRI, r0
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f7fe ff10 	bl	80093e4 <vTaskSwitchContext>
 800a5c4:	f04f 0000 	mov.w	r0, #0
 800a5c8:	f380 8811 	msr	BASEPRI, r0
 800a5cc:	bc09      	pop	{r0, r3}
 800a5ce:	6819      	ldr	r1, [r3, #0]
 800a5d0:	6808      	ldr	r0, [r1, #0]
 800a5d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d6:	f01e 0f10 	tst.w	lr, #16
 800a5da:	bf08      	it	eq
 800a5dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5e0:	f380 8809 	msr	PSP, r0
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	f3af 8000 	nop.w

0800a5f0 <pxCurrentTCBConst>:
 800a5f0:	20000848 	.word	0x20000848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop

0800a5f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a610:	f7fe fe2a 	bl	8009268 <xTaskIncrementTick>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a61a:	4b06      	ldr	r3, [pc, #24]	; (800a634 <SysTick_Handler+0x3c>)
 800a61c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	2300      	movs	r3, #0
 800a624:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a62c:	bf00      	nop
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	e000ed04 	.word	0xe000ed04

0800a638 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a638:	b480      	push	{r7}
 800a63a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a63c:	4b0b      	ldr	r3, [pc, #44]	; (800a66c <vPortSetupTimerInterrupt+0x34>)
 800a63e:	2200      	movs	r2, #0
 800a640:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a642:	4b0b      	ldr	r3, [pc, #44]	; (800a670 <vPortSetupTimerInterrupt+0x38>)
 800a644:	2200      	movs	r2, #0
 800a646:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a648:	4b0a      	ldr	r3, [pc, #40]	; (800a674 <vPortSetupTimerInterrupt+0x3c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a0a      	ldr	r2, [pc, #40]	; (800a678 <vPortSetupTimerInterrupt+0x40>)
 800a64e:	fba2 2303 	umull	r2, r3, r2, r3
 800a652:	099b      	lsrs	r3, r3, #6
 800a654:	4a09      	ldr	r2, [pc, #36]	; (800a67c <vPortSetupTimerInterrupt+0x44>)
 800a656:	3b01      	subs	r3, #1
 800a658:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a65a:	4b04      	ldr	r3, [pc, #16]	; (800a66c <vPortSetupTimerInterrupt+0x34>)
 800a65c:	2207      	movs	r2, #7
 800a65e:	601a      	str	r2, [r3, #0]
}
 800a660:	bf00      	nop
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	e000e010 	.word	0xe000e010
 800a670:	e000e018 	.word	0xe000e018
 800a674:	20000004 	.word	0x20000004
 800a678:	10624dd3 	.word	0x10624dd3
 800a67c:	e000e014 	.word	0xe000e014

0800a680 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a680:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a690 <vPortEnableVFP+0x10>
 800a684:	6801      	ldr	r1, [r0, #0]
 800a686:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a68a:	6001      	str	r1, [r0, #0]
 800a68c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a68e:	bf00      	nop
 800a690:	e000ed88 	.word	0xe000ed88

0800a694 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a69a:	f3ef 8305 	mrs	r3, IPSR
 800a69e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2b0f      	cmp	r3, #15
 800a6a4:	d913      	bls.n	800a6ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6a6:	4a16      	ldr	r2, [pc, #88]	; (800a700 <vPortValidateInterruptPriority+0x6c>)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6b0:	4b14      	ldr	r3, [pc, #80]	; (800a704 <vPortValidateInterruptPriority+0x70>)
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	7afa      	ldrb	r2, [r7, #11]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d209      	bcs.n	800a6ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	607b      	str	r3, [r7, #4]
 800a6cc:	e7fe      	b.n	800a6cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6ce:	4b0e      	ldr	r3, [pc, #56]	; (800a708 <vPortValidateInterruptPriority+0x74>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6d6:	4b0d      	ldr	r3, [pc, #52]	; (800a70c <vPortValidateInterruptPriority+0x78>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d909      	bls.n	800a6f2 <vPortValidateInterruptPriority+0x5e>
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	e7fe      	b.n	800a6f0 <vPortValidateInterruptPriority+0x5c>
	}
 800a6f2:	bf00      	nop
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	e000e3f0 	.word	0xe000e3f0
 800a704:	20000e74 	.word	0x20000e74
 800a708:	e000ed0c 	.word	0xe000ed0c
 800a70c:	20000e78 	.word	0x20000e78

0800a710 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08a      	sub	sp, #40	; 0x28
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a718:	2300      	movs	r3, #0
 800a71a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a71c:	f7fe fcea 	bl	80090f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a720:	4b57      	ldr	r3, [pc, #348]	; (800a880 <pvPortMalloc+0x170>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a728:	f000 f90c 	bl	800a944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a72c:	4b55      	ldr	r3, [pc, #340]	; (800a884 <pvPortMalloc+0x174>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4013      	ands	r3, r2
 800a734:	2b00      	cmp	r3, #0
 800a736:	f040 808c 	bne.w	800a852 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d01c      	beq.n	800a77a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a740:	2208      	movs	r2, #8
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4413      	add	r3, r2
 800a746:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f003 0307 	and.w	r3, r3, #7
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d013      	beq.n	800a77a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f023 0307 	bic.w	r3, r3, #7
 800a758:	3308      	adds	r3, #8
 800a75a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f003 0307 	and.w	r3, r3, #7
 800a762:	2b00      	cmp	r3, #0
 800a764:	d009      	beq.n	800a77a <pvPortMalloc+0x6a>
 800a766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76a:	f383 8811 	msr	BASEPRI, r3
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f3bf 8f4f 	dsb	sy
 800a776:	617b      	str	r3, [r7, #20]
 800a778:	e7fe      	b.n	800a778 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d068      	beq.n	800a852 <pvPortMalloc+0x142>
 800a780:	4b41      	ldr	r3, [pc, #260]	; (800a888 <pvPortMalloc+0x178>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	429a      	cmp	r2, r3
 800a788:	d863      	bhi.n	800a852 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a78a:	4b40      	ldr	r3, [pc, #256]	; (800a88c <pvPortMalloc+0x17c>)
 800a78c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a78e:	4b3f      	ldr	r3, [pc, #252]	; (800a88c <pvPortMalloc+0x17c>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a794:	e004      	b.n	800a7a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d903      	bls.n	800a7b2 <pvPortMalloc+0xa2>
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1f1      	bne.n	800a796 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7b2:	4b33      	ldr	r3, [pc, #204]	; (800a880 <pvPortMalloc+0x170>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d04a      	beq.n	800a852 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7bc:	6a3b      	ldr	r3, [r7, #32]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	4413      	add	r3, r2
 800a7c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	685a      	ldr	r2, [r3, #4]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	1ad2      	subs	r2, r2, r3
 800a7d6:	2308      	movs	r3, #8
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d91e      	bls.n	800a81c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	f003 0307 	and.w	r3, r3, #7
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d009      	beq.n	800a804 <pvPortMalloc+0xf4>
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	613b      	str	r3, [r7, #16]
 800a802:	e7fe      	b.n	800a802 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	685a      	ldr	r2, [r3, #4]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	1ad2      	subs	r2, r2, r3
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a816:	69b8      	ldr	r0, [r7, #24]
 800a818:	f000 f8f6 	bl	800aa08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a81c:	4b1a      	ldr	r3, [pc, #104]	; (800a888 <pvPortMalloc+0x178>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	4a18      	ldr	r2, [pc, #96]	; (800a888 <pvPortMalloc+0x178>)
 800a828:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a82a:	4b17      	ldr	r3, [pc, #92]	; (800a888 <pvPortMalloc+0x178>)
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	4b18      	ldr	r3, [pc, #96]	; (800a890 <pvPortMalloc+0x180>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	429a      	cmp	r2, r3
 800a834:	d203      	bcs.n	800a83e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a836:	4b14      	ldr	r3, [pc, #80]	; (800a888 <pvPortMalloc+0x178>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a15      	ldr	r2, [pc, #84]	; (800a890 <pvPortMalloc+0x180>)
 800a83c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	4b10      	ldr	r3, [pc, #64]	; (800a884 <pvPortMalloc+0x174>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	431a      	orrs	r2, r3
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	2200      	movs	r2, #0
 800a850:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a852:	f7fe fc5d 	bl	8009110 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f003 0307 	and.w	r3, r3, #7
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d009      	beq.n	800a874 <pvPortMalloc+0x164>
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	e7fe      	b.n	800a872 <pvPortMalloc+0x162>
	return pvReturn;
 800a874:	69fb      	ldr	r3, [r7, #28]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3728      	adds	r7, #40	; 0x28
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20004e84 	.word	0x20004e84
 800a884:	20004e90 	.word	0x20004e90
 800a888:	20004e88 	.word	0x20004e88
 800a88c:	20004e7c 	.word	0x20004e7c
 800a890:	20004e8c 	.word	0x20004e8c

0800a894 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d046      	beq.n	800a934 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8a6:	2308      	movs	r3, #8
 800a8a8:	425b      	negs	r3, r3
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	4b20      	ldr	r3, [pc, #128]	; (800a93c <vPortFree+0xa8>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4013      	ands	r3, r2
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d109      	bne.n	800a8d6 <vPortFree+0x42>
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	e7fe      	b.n	800a8d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <vPortFree+0x5e>
 800a8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	60bb      	str	r3, [r7, #8]
 800a8f0:	e7fe      	b.n	800a8f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	685a      	ldr	r2, [r3, #4]
 800a8f6:	4b11      	ldr	r3, [pc, #68]	; (800a93c <vPortFree+0xa8>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d019      	beq.n	800a934 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d115      	bne.n	800a934 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <vPortFree+0xa8>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	43db      	mvns	r3, r3
 800a912:	401a      	ands	r2, r3
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a918:	f7fe fbec 	bl	80090f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <vPortFree+0xac>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4413      	add	r3, r2
 800a926:	4a06      	ldr	r2, [pc, #24]	; (800a940 <vPortFree+0xac>)
 800a928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a92a:	6938      	ldr	r0, [r7, #16]
 800a92c:	f000 f86c 	bl	800aa08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a930:	f7fe fbee 	bl	8009110 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a934:	bf00      	nop
 800a936:	3718      	adds	r7, #24
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20004e90 	.word	0x20004e90
 800a940:	20004e88 	.word	0x20004e88

0800a944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a94a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a94e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a950:	4b27      	ldr	r3, [pc, #156]	; (800a9f0 <prvHeapInit+0xac>)
 800a952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f003 0307 	and.w	r3, r3, #7
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00c      	beq.n	800a978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3307      	adds	r3, #7
 800a962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 0307 	bic.w	r3, r3, #7
 800a96a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	4a1f      	ldr	r2, [pc, #124]	; (800a9f0 <prvHeapInit+0xac>)
 800a974:	4413      	add	r3, r2
 800a976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a97c:	4a1d      	ldr	r2, [pc, #116]	; (800a9f4 <prvHeapInit+0xb0>)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a982:	4b1c      	ldr	r3, [pc, #112]	; (800a9f4 <prvHeapInit+0xb0>)
 800a984:	2200      	movs	r2, #0
 800a986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	4413      	add	r3, r2
 800a98e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a990:	2208      	movs	r2, #8
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	1a9b      	subs	r3, r3, r2
 800a996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f023 0307 	bic.w	r3, r3, #7
 800a99e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4a15      	ldr	r2, [pc, #84]	; (800a9f8 <prvHeapInit+0xb4>)
 800a9a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9a6:	4b14      	ldr	r3, [pc, #80]	; (800a9f8 <prvHeapInit+0xb4>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9ae:	4b12      	ldr	r3, [pc, #72]	; (800a9f8 <prvHeapInit+0xb4>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	1ad2      	subs	r2, r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9c4:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <prvHeapInit+0xb4>)
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	4a0a      	ldr	r2, [pc, #40]	; (800a9fc <prvHeapInit+0xb8>)
 800a9d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	4a09      	ldr	r2, [pc, #36]	; (800aa00 <prvHeapInit+0xbc>)
 800a9da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9dc:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <prvHeapInit+0xc0>)
 800a9de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9e2:	601a      	str	r2, [r3, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	20000e7c 	.word	0x20000e7c
 800a9f4:	20004e7c 	.word	0x20004e7c
 800a9f8:	20004e84 	.word	0x20004e84
 800a9fc:	20004e8c 	.word	0x20004e8c
 800aa00:	20004e88 	.word	0x20004e88
 800aa04:	20004e90 	.word	0x20004e90

0800aa08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa10:	4b28      	ldr	r3, [pc, #160]	; (800aab4 <prvInsertBlockIntoFreeList+0xac>)
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	e002      	b.n	800aa1c <prvInsertBlockIntoFreeList+0x14>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d8f7      	bhi.n	800aa16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	4413      	add	r3, r2
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d108      	bne.n	800aa4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	441a      	add	r2, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	441a      	add	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d118      	bne.n	800aa90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	4b15      	ldr	r3, [pc, #84]	; (800aab8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d00d      	beq.n	800aa86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	441a      	add	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	e008      	b.n	800aa98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa86:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	e003      	b.n	800aa98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d002      	beq.n	800aaa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaa6:	bf00      	nop
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	20004e7c 	.word	0x20004e7c
 800aab8:	20004e84 	.word	0x20004e84

0800aabc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800aac0:	f003 ff8e 	bl	800e9e0 <touchgfx_init>
}
 800aac4:	bf00      	nop
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800aad0:	f003 ffb0 	bl	800ea34 <touchgfx_taskEntry>
}
 800aad4:	bf00      	nop
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
    {
 800aae4:	4a04      	ldr	r2, [pc, #16]	; (800aaf8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	601a      	str	r2, [r3, #0]
    }
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4618      	mov	r0, r3
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	0801cf80 	.word	0x0801cf80

0800aafc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
    }
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff ffe9 	bl	800aadc <_ZN8touchgfx12FontProviderD1Ev>
 800ab0a:	2104      	movs	r1, #4
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f010 ff15 	bl	801b93c <_ZdlPvj>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4618      	mov	r0, r3
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ab28:	887b      	ldrh	r3, [r7, #2]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d104      	bne.n	800ab38 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
    {
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800ab2e:	f002 f809 	bl	800cb44 <_ZN17TypedTextDatabase8getFontsEv>
 800ab32:	4603      	mov	r3, r0
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	e000      	b.n	800ab3a <_ZN23ApplicationFontProvider7getFontEt+0x1e>
    default:
        return 0;
 800ab38:	2300      	movs	r3, #0
    }
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <_ZN23ApplicationFontProviderD1Ev>:
{
    static const touchgfx::FontId TYPOGRAPHY_00 = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 1;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	4a05      	ldr	r2, [pc, #20]	; (800ab64 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff ffc1 	bl	800aadc <_ZN8touchgfx12FontProviderD1Ev>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	0801cf6c 	.word	0x0801cf6c

0800ab68 <_ZN23ApplicationFontProviderD0Ev>:
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7ff ffe7 	bl	800ab44 <_ZN23ApplicationFontProviderD1Ev>
 800ab76:	2104      	movs	r1, #4
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f010 fedf 	bl	801b93c <_ZdlPvj>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
    {
 800ab90:	4a04      	ldr	r2, [pc, #16]	; (800aba4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
    }
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	0801d3cc 	.word	0x0801d3cc

0800aba8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
    }
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff ffe9 	bl	800ab88 <_ZN8touchgfx4FontD1Ev>
 800abb6:	2110      	movs	r1, #16
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f010 febf 	bl	801b93c <_ZdlPvj>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800abc8:	b590      	push	{r4, r7, lr}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800abd4:	887b      	ldrh	r3, [r7, #2]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d101      	bne.n	800abde <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	e010      	b.n	800ac00 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3308      	adds	r3, #8
 800abec:	681c      	ldr	r4, [r3, #0]
 800abee:	f107 030f 	add.w	r3, r7, #15
 800abf2:	f107 0210 	add.w	r2, r7, #16
 800abf6:	8879      	ldrh	r1, [r7, #2]
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	47a0      	blx	r4
 800abfc:	6178      	str	r0, [r7, #20]
        return glyph;
 800abfe:	697b      	ldr	r3, [r7, #20]
    }
 800ac00:	4618      	mov	r0, r3
 800ac02:	371c      	adds	r7, #28
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd90      	pop	{r4, r7, pc}

0800ac08 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	895b      	ldrh	r3, [r3, #10]
    }
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	899b      	ldrh	r3, [r3, #12]
    }
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	889b      	ldrh	r3, [r3, #4]
    }
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	889a      	ldrh	r2, [r3, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	799b      	ldrb	r3, [r3, #6]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	4413      	add	r3, r2
 800ac64:	b29b      	uxth	r3, r3
    }
 800ac66:	4618      	mov	r0, r3
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800ac72:	b480      	push	{r7}
 800ac74:	b083      	sub	sp, #12
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	79db      	ldrb	r3, [r3, #7]
 800ac7e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800ac82:	b2db      	uxtb	r3, r3
    }
 800ac84:	4618      	mov	r0, r3
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	79db      	ldrb	r3, [r3, #7]
 800ac9c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800aca0:	b2db      	uxtb	r3, r3
    }
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
	...

0800acb0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	4a05      	ldr	r2, [pc, #20]	; (800acd0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff ff61 	bl	800ab88 <_ZN8touchgfx4FontD1Ev>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	0801ec74 	.word	0x0801ec74

0800acd4 <_ZN8touchgfx9ConstFontD0Ev>:
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff ffe7 	bl	800acb0 <_ZN8touchgfx9ConstFontD1Ev>
 800ace2:	2118      	movs	r1, #24
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f010 fe29 	bl	801b93c <_ZdlPvj>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	4a05      	ldr	r2, [pc, #20]	; (800ad14 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff ffd3 	bl	800acb0 <_ZN8touchgfx9ConstFontD1Ev>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	0801cfa4 	.word	0x0801cfa4

0800ad18 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff ffe7 	bl	800acf4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ad26:	2124      	movs	r1, #36	; 0x24
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f010 fe07 	bl	801b93c <_ZdlPvj>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
    {
 800ad40:	4a04      	ldr	r2, [pc, #16]	; (800ad54 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	601a      	str	r2, [r3, #0]
    }
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	0801cf94 	.word	0x0801cf94

0800ad58 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
    }
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff ffe9 	bl	800ad38 <_ZN8touchgfx9TypedTextD1Ev>
 800ad66:	2108      	movs	r1, #8
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f010 fde7 	bl	801b93c <_ZdlPvj>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4618      	mov	r0, r3
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
    }
 800ad84:	4618      	mov	r0, r3
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08c      	sub	sp, #48	; 0x30
 800ad94:	af08      	add	r7, sp, #32
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	460b      	mov	r3, r1
 800ada0:	80fb      	strh	r3, [r7, #6]
 800ada2:	4613      	mov	r3, r2
 800ada4:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	88b9      	ldrh	r1, [r7, #4]
 800adaa:	88fa      	ldrh	r2, [r7, #6]
 800adac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800adae:	9306      	str	r3, [sp, #24]
 800adb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800adb2:	9305      	str	r3, [sp, #20]
 800adb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800adbe:	9303      	str	r3, [sp, #12]
 800adc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adc4:	9302      	str	r3, [sp, #8]
 800adc6:	7f3b      	ldrb	r3, [r7, #28]
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	7e3b      	ldrb	r3, [r7, #24]
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	460b      	mov	r3, r1
 800add0:	68b9      	ldr	r1, [r7, #8]
 800add2:	f007 f94b 	bl	801206c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800add6:	4a08      	ldr	r2, [pc, #32]	; (800adf8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ade0:	619a      	str	r2, [r3, #24]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade6:	61da      	str	r2, [r3, #28]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adec:	621a      	str	r2, [r3, #32]
{
}
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	0801cfa4 	.word	0x0801cfa4

0800adfc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	889b      	ldrh	r3, [r3, #4]
 800ae10:	0adb      	lsrs	r3, r3, #11
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	4413      	add	r3, r2
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4413      	add	r3, r2
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b089      	sub	sp, #36	; 0x24
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	60f8      	str	r0, [r7, #12]
 800ae36:	460b      	mov	r3, r1
 800ae38:	607a      	str	r2, [r7, #4]
 800ae3a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d003      	beq.n	800ae4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	7b1b      	ldrb	r3, [r3, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e030      	b.n	800aeb0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	69da      	ldr	r2, [r3, #28]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	7b5b      	ldrb	r3, [r3, #13]
 800ae5a:	021b      	lsls	r3, r3, #8
 800ae5c:	b21b      	sxth	r3, r3
 800ae5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae62:	b219      	sxth	r1, r3
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	7adb      	ldrb	r3, [r3, #11]
 800ae68:	b21b      	sxth	r3, r3
 800ae6a:	430b      	orrs	r3, r1
 800ae6c:	b21b      	sxth	r3, r3
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	7b1b      	ldrb	r3, [r3, #12]
 800ae7a:	837b      	strh	r3, [r7, #26]
 800ae7c:	8b7b      	ldrh	r3, [r7, #26]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d015      	beq.n	800aeae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	897a      	ldrh	r2, [r7, #10]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d103      	bne.n	800ae94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ae92:	e00d      	b.n	800aeb0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	897a      	ldrh	r2, [r7, #10]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d306      	bcc.n	800aeac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800ae9e:	8b7b      	ldrh	r3, [r7, #26]
 800aea0:	3b01      	subs	r3, #1
 800aea2:	837b      	strh	r3, [r7, #26]
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	3304      	adds	r3, #4
 800aea8:	61fb      	str	r3, [r7, #28]
 800aeaa:	e7e7      	b.n	800ae7c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800aeac:	bf00      	nop
        }
    }
    return 0;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3724      	adds	r7, #36	; 0x24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 11, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__tcf_0+0xc>)
 800aec2:	f7ff ff17 	bl	800acf4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	20004e94 	.word	0x20004e94

0800aecc <_Z23getFont_verdana_20_4bppv>:
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08a      	sub	sp, #40	; 0x28
 800aed0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 11, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800aed2:	4b15      	ldr	r3, [pc, #84]	; (800af28 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d11f      	bne.n	800af1e <_Z23getFont_verdana_20_4bppv+0x52>
 800aede:	2300      	movs	r3, #0
 800aee0:	9309      	str	r3, [sp, #36]	; 0x24
 800aee2:	2300      	movs	r3, #0
 800aee4:	9308      	str	r3, [sp, #32]
 800aee6:	233f      	movs	r3, #63	; 0x3f
 800aee8:	9307      	str	r3, [sp, #28]
 800aeea:	4b10      	ldr	r3, [pc, #64]	; (800af2c <_Z23getFont_verdana_20_4bppv+0x60>)
 800aeec:	9306      	str	r3, [sp, #24]
 800aeee:	4b10      	ldr	r3, [pc, #64]	; (800af30 <_Z23getFont_verdana_20_4bppv+0x64>)
 800aef0:	9305      	str	r3, [sp, #20]
 800aef2:	2301      	movs	r3, #1
 800aef4:	9304      	str	r3, [sp, #16]
 800aef6:	2300      	movs	r3, #0
 800aef8:	9303      	str	r3, [sp, #12]
 800aefa:	2301      	movs	r3, #1
 800aefc:	9302      	str	r3, [sp, #8]
 800aefe:	2304      	movs	r3, #4
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	2300      	movs	r3, #0
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	2314      	movs	r3, #20
 800af08:	220b      	movs	r2, #11
 800af0a:	490a      	ldr	r1, [pc, #40]	; (800af34 <_Z23getFont_verdana_20_4bppv+0x68>)
 800af0c:	480a      	ldr	r0, [pc, #40]	; (800af38 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800af0e:	f7ff ff3f 	bl	800ad90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800af12:	4b05      	ldr	r3, [pc, #20]	; (800af28 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800af14:	2201      	movs	r2, #1
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	4808      	ldr	r0, [pc, #32]	; (800af3c <_Z23getFont_verdana_20_4bppv+0x70>)
 800af1a:	f010 fd59 	bl	801b9d0 <atexit>
    return verdana_20_4bpp;
 800af1e:	4b06      	ldr	r3, [pc, #24]	; (800af38 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800af20:	4618      	mov	r0, r3
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	20004eb8 	.word	0x20004eb8
 800af2c:	080203c4 	.word	0x080203c4
 800af30:	0801cff0 	.word	0x0801cff0
 800af34:	080203d4 	.word	0x080203d4
 800af38:	20004e94 	.word	0x20004e94
 800af3c:	0800aebd 	.word	0x0800aebd

0800af40 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
    {
    }
 800af62:	bf00      	nop
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800af6e:	b480      	push	{r7}
 800af70:	b083      	sub	sp, #12
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	6039      	str	r1, [r7, #0]
    {
    }
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
    {
    }
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	460b      	mov	r3, r1
 800afa4:	70fb      	strb	r3, [r7, #3]
    {
    }
 800afa6:	bf00      	nop
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800afb2:	b480      	push	{r7}
 800afb4:	b083      	sub	sp, #12
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
    {
    }
 800afba:	bf00      	nop
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800afc6:	b480      	push	{r7}
 800afc8:	b083      	sub	sp, #12
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
    {
    }
 800afce:	bf00      	nop
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
	...

0800afdc <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
    {
 800afe4:	4a04      	ldr	r2, [pc, #16]	; (800aff8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	601a      	str	r2, [r3, #0]
    }
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4618      	mov	r0, r3
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	0801d0f4 	.word	0x0801d0f4

0800affc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
    }
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff ffe9 	bl	800afdc <_ZN8touchgfx15UIEventListenerD1Ev>
 800b00a:	2104      	movs	r1, #4
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f010 fc95 	bl	801b93c <_ZdlPvj>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800b024:	4a07      	ldr	r2, [pc, #28]	; (800b044 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	601a      	str	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	605a      	str	r2, [r3, #4]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	721a      	strb	r2, [r3, #8]
    {
    }
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	0801d0d4 	.word	0x0801d0d4

0800b048 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
    {
 800b050:	4a04      	ldr	r2, [pc, #16]	; (800b064 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	601a      	str	r2, [r3, #0]
    }
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	0801d0d4 	.word	0x0801d0d4

0800b068 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
    }
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7ff ffe9 	bl	800b048 <_ZN8touchgfx10TransitionD1Ev>
 800b076:	210c      	movs	r1, #12
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f010 fc5f 	bl	801b93c <_ZdlPvj>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4618      	mov	r0, r3
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
    {
    }
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
    {
    }
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
    {
    }
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	605a      	str	r2, [r3, #4]
    }
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	70fb      	strb	r3, [r7, #3]
    {
    }
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800b10a:	6810      	ldr	r0, [r2, #0]
 800b10c:	6851      	ldr	r1, [r2, #4]
 800b10e:	c303      	stmia	r3!, {r0, r1}
    };
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
    {
 800b124:	4a04      	ldr	r2, [pc, #16]	; (800b138 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	601a      	str	r2, [r3, #0]
    }
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	0801d0bc 	.word	0x0801d0bc

0800b13c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
    }
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7ff ffe9 	bl	800b11c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800b14a:	2104      	movs	r1, #4
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f010 fbf5 	bl	801b93c <_ZdlPvj>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4618      	mov	r0, r3
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800b15c:	b480      	push	{r7}
 800b15e:	af00      	add	r7, sp, #0
    {
        return instance;
 800b160:	4b03      	ldr	r3, [pc, #12]	; (800b170 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800b162:	681b      	ldr	r3, [r3, #0]
    }
 800b164:	4618      	mov	r0, r3
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	20005f24 	.word	0x20005f24

0800b174 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800b178:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800b180:	2b00      	cmp	r3, #0
 800b182:	d008      	beq.n	800b196 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800b184:	4b08      	ldr	r3, [pc, #32]	; (800b1a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800b18e:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b194:	e002      	b.n	800b19c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800b196:	4b04      	ldr	r3, [pc, #16]	; (800b1a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	689b      	ldr	r3, [r3, #8]
        }
    }
 800b19c:	4618      	mov	r0, r3
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	20005f24 	.word	0x20005f24

0800b1ac <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	4a05      	ldr	r2, [pc, #20]	; (800b1cc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	601a      	str	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7ff ff0d 	bl	800afdc <_ZN8touchgfx15UIEventListenerD1Ev>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	0801eb1c 	.word	0x0801eb1c

0800b1d0 <_ZN8touchgfx11ApplicationD0Ev>:
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff ffe7 	bl	800b1ac <_ZN8touchgfx11ApplicationD1Ev>
 800b1de:	f44f 719c 	mov.w	r1, #312	; 0x138
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f010 fbaa 	bl	801b93c <_ZdlPvj>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
	...

0800b1f4 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f006 fa90 	bl	8011724 <_ZN8touchgfx11ApplicationC1Ev>
 800b204:	4a09      	ldr	r2, [pc, #36]	; (800b22c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a04      	ldr	r2, [pc, #16]	; (800b230 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800b21e:	6013      	str	r3, [r2, #0]
    }
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	0801d078 	.word	0x0801d078
 800b230:	20005f90 	.word	0x20005f90

0800b234 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f804 	bl	800b24a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800b242:	bf00      	nop
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b082      	sub	sp, #8
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00f      	beq.n	800b27c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	330c      	adds	r3, #12
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4610      	mov	r0, r2
 800b270:	4798      	blx	r3
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800b278:	2301      	movs	r3, #1
 800b27a:	e000      	b.n	800b27e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800b27c:	2300      	movs	r3, #0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00e      	beq.n	800b2a0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3308      	adds	r3, #8
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4610      	mov	r0, r2
 800b296:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800b2a0:	bf00      	nop
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	601a      	str	r2, [r3, #0]
    }
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	4a05      	ldr	r2, [pc, #20]	; (800b2e4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7ff ff69 	bl	800b1ac <_ZN8touchgfx11ApplicationD1Ev>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	0801d078 	.word	0x0801d078

0800b2e8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7ff ffe7 	bl	800b2c4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800b2f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f010 fb1e 	bl	801b93c <_ZdlPvj>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
	...

0800b30c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	4a08      	ldr	r2, [pc, #32]	; (800b338 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	601a      	str	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b320:	4618      	mov	r0, r3
 800b322:	f000 facd 	bl	800b8c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff ffcb 	bl	800b2c4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	0801d01c 	.word	0x0801d01c

0800b33c <_ZN23FrontendApplicationBaseD0Ev>:
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff ffe1 	bl	800b30c <_ZN23FrontendApplicationBaseD1Ev>
 800b34a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f010 faf4 	bl	801b93c <_ZdlPvj>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4618      	mov	r0, r3
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2201      	movs	r2, #1
 800b36a:	721a      	strb	r2, [r3, #8]
    }
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	683a      	ldr	r2, [r7, #0]
 800b386:	605a      	str	r2, [r3, #4]
    }
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff ff26 	bl	800b1f4 <_ZN8touchgfx14MVPApplicationC1Ev>
 800b3a8:	4a13      	ldr	r2, [pc, #76]	; (800b3f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 f89f 	bl	800b4f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800b3ca:	f7ff fec7 	bl	800b15c <_ZN8touchgfx3HAL11getInstanceEv>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	6813      	ldr	r3, [r2, #0]
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800b3dc:	2000      	movs	r0, #0
 800b3de:	f001 fb39 	bl	800ca54 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800b3e2:	f7ff fec7 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f00b fba2 	bl	8016b32 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	0801d01c 	.word	0x0801d01c

0800b3fc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	4611      	mov	r1, r2
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff ffe9 	bl	800b3fc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	605a      	str	r2, [r3, #4]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	3308      	adds	r3, #8
 800b438:	3208      	adds	r2, #8
 800b43a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b43e:	e883 0003 	stmia.w	r3, {r0, r1}
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4618      	mov	r0, r3
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800b44c:	b590      	push	{r4, r7, lr}
 800b44e:	b089      	sub	sp, #36	; 0x24
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800b45a:	4b10      	ldr	r3, [pc, #64]	; (800b49c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800b45c:	61bb      	str	r3, [r7, #24]
 800b45e:	2300      	movs	r3, #0
 800b460:	61fb      	str	r3, [r7, #28]
 800b462:	f107 0008 	add.w	r0, r7, #8
 800b466:	f107 0318 	add.w	r3, r7, #24
 800b46a:	cb0c      	ldmia	r3, {r2, r3}
 800b46c:	6879      	ldr	r1, [r7, #4]
 800b46e:	f000 f85f 	bl	800b530 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b472:	f107 0308 	add.w	r3, r7, #8
 800b476:	4619      	mov	r1, r3
 800b478:	4620      	mov	r0, r4
 800b47a:	f7ff ffcb 	bl	800b414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b47e:	f107 0308 	add.w	r3, r7, #8
 800b482:	4618      	mov	r0, r3
 800b484:	f000 fa1c 	bl	800b8c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800b494:	bf00      	nop
 800b496:	3724      	adds	r7, #36	; 0x24
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd90      	pop	{r4, r7, pc}
 800b49c:	0800b4a1 	.word	0x0800b4a1

0800b4a0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af02      	add	r7, sp, #8
 800b4a6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	4b04      	ldr	r3, [pc, #16]	; (800b4d0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800b4c0:	4804      	ldr	r0, [pc, #16]	; (800b4d4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800b4c2:	f000 f867 	bl	800b594 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b4c6:	bf00      	nop
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20005f84 	.word	0x20005f84
 800b4d4:	20005f80 	.word	0x20005f80

0800b4d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	4a04      	ldr	r2, [pc, #16]	; (800b4f4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	0801d0bc 	.word	0x0801d0bc

0800b4f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff ffe8 	bl	800b4d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800b508:	4a08      	ldr	r2, [pc, #32]	; (800b52c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	601a      	str	r2, [r3, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	605a      	str	r2, [r3, #4]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	609a      	str	r2, [r3, #8]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	60da      	str	r2, [r3, #12]
    {
    }
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4618      	mov	r0, r3
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	0801d060 	.word	0x0801d060

0800b530 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	4639      	mov	r1, r7
 800b53c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff ffc8 	bl	800b4d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800b548:	4a08      	ldr	r2, [pc, #32]	; (800b56c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3308      	adds	r3, #8
 800b558:	463a      	mov	r2, r7
 800b55a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b55e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	0801d060 	.word	0x0801d060

0800b570 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff fd4e 	bl	800b01c <_ZN8touchgfx10TransitionC1Ev>
 800b580:	4a03      	ldr	r2, [pc, #12]	; (800b590 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	0801cffc 	.word	0x0801cffc

0800b594 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b594:	b590      	push	{r4, r7, lr}
 800b596:	b08f      	sub	sp, #60	; 0x3c
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	689a      	ldr	r2, [r3, #8]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3320      	adds	r3, #32
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	4798      	blx	r3
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800b5ba:	d205      	bcs.n	800b5c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b5bc:	4b86      	ldr	r3, [pc, #536]	; (800b7d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800b5be:	4a87      	ldr	r2, [pc, #540]	; (800b7dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800b5c0:	21a7      	movs	r1, #167	; 0xa7
 800b5c2:	4887      	ldr	r0, [pc, #540]	; (800b7e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800b5c4:	f010 f9e6 	bl	801b994 <__assert_func>
 800b5c8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3320      	adds	r3, #32
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4798      	blx	r3
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b0f      	cmp	r3, #15
 800b5e0:	d805      	bhi.n	800b5ee <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800b5e2:	4b80      	ldr	r3, [pc, #512]	; (800b7e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800b5e4:	4a7d      	ldr	r2, [pc, #500]	; (800b7dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800b5e6:	21a8      	movs	r1, #168	; 0xa8
 800b5e8:	487d      	ldr	r0, [pc, #500]	; (800b7e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800b5ea:	f010 f9d3 	bl	801b994 <__assert_func>
 800b5ee:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68da      	ldr	r2, [r3, #12]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3320      	adds	r3, #32
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4610      	mov	r0, r2
 800b600:	4798      	blx	r3
 800b602:	4603      	mov	r3, r0
 800b604:	2b0b      	cmp	r3, #11
 800b606:	d805      	bhi.n	800b614 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800b608:	4b77      	ldr	r3, [pc, #476]	; (800b7e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800b60a:	4a74      	ldr	r2, [pc, #464]	; (800b7dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800b60c:	21a9      	movs	r1, #169	; 0xa9
 800b60e:	4874      	ldr	r0, [pc, #464]	; (800b7e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800b610:	f010 f9c0 	bl	801b994 <__assert_func>
 800b614:	bf00      	nop
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	62bb      	str	r3, [r7, #40]	; 0x28
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	627b      	str	r3, [r7, #36]	; 0x24
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800b622:	f006 f85f 	bl	80116e4 <_ZN8touchgfx11Application11getInstanceEv>
 800b626:	4603      	mov	r3, r0
 800b628:	4618      	mov	r0, r3
 800b62a:	f006 f861 	bl	80116f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800b62e:	6a3b      	ldr	r3, [r7, #32]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d008      	beq.n	800b648 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	6a3b      	ldr	r3, [r7, #32]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	330c      	adds	r3, #12
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4610      	mov	r0, r2
 800b646:	4798      	blx	r3
    if (*currentTrans)
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d007      	beq.n	800b660 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4610      	mov	r0, r2
 800b65e:	4798      	blx	r3
    if (*currentScreen)
 800b660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d008      	beq.n	800b67a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3314      	adds	r3, #20
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4610      	mov	r0, r2
 800b678:	4798      	blx	r3
    if (*currentPresenter)
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d008      	beq.n	800b694 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3304      	adds	r3, #4
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4610      	mov	r0, r2
 800b692:	4798      	blx	r3
    if (*currentScreen)
 800b694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	4798      	blx	r3
    if (*currentPresenter)
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d008      	beq.n	800b6c6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	3308      	adds	r3, #8
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f000 f88d 	bl	800b7ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	200c      	movs	r0, #12
 800b6d8:	f7ff fc32 	bl	800af40 <_ZnwjPv>
 800b6dc:	4604      	mov	r4, r0
 800b6de:	2c00      	cmp	r4, #0
 800b6e0:	d004      	beq.n	800b6ec <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f7ff ff44 	bl	800b570 <_ZN8touchgfx12NoTransitionC1Ev>
 800b6e8:	4623      	mov	r3, r4
 800b6ea:	e000      	b.n	800b6ee <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800b6ec:	4623      	mov	r3, r4
 800b6ee:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 f88b 	bl	800b812 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	4619      	mov	r1, r3
 800b700:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800b704:	f7ff fc1c 	bl	800af40 <_ZnwjPv>
 800b708:	4604      	mov	r4, r0
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	d004      	beq.n	800b718 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800b70e:	4620      	mov	r0, r4
 800b710:	f001 fbaa 	bl	800ce68 <_ZN10screenViewC1Ev>
 800b714:	4623      	mov	r3, r4
 800b716:	e000      	b.n	800b71a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800b718:	4623      	mov	r3, r4
 800b71a:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	2100      	movs	r1, #0
 800b722:	4618      	mov	r0, r3
 800b724:	f000 f888 	bl	800b838 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800b728:	4603      	mov	r3, r0
 800b72a:	4619      	mov	r1, r3
 800b72c:	2010      	movs	r0, #16
 800b72e:	f7ff fc07 	bl	800af40 <_ZnwjPv>
 800b732:	4604      	mov	r4, r0
 800b734:	2c00      	cmp	r4, #0
 800b736:	d005      	beq.n	800b744 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800b738:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b73a:	4620      	mov	r0, r4
 800b73c:	f001 fb3c 	bl	800cdb8 <_ZN15screenPresenterC1ER10screenView>
 800b740:	4623      	mov	r3, r4
 800b742:	e000      	b.n	800b746 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800b744:	4623      	mov	r3, r4
 800b746:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b74c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b752:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b758:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800b760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b762:	3304      	adds	r3, #4
 800b764:	e000      	b.n	800b768 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800b766:	2300      	movs	r3, #0
 800b768:	4619      	mov	r1, r3
 800b76a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b76c:	f7ff fd9c 	bl	800b2a8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	3304      	adds	r3, #4
 800b774:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff fdfe 	bl	800b378 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b780:	4618      	mov	r0, r3
 800b782:	f000 f86c 	bl	800b85e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	61fb      	str	r3, [r7, #28]
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	61bb      	str	r3, [r7, #24]
 800b78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b790:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	330c      	adds	r3, #12
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	69f8      	ldr	r0, [r7, #28]
 800b79c:	4798      	blx	r3
    newPresenter->activate();
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	69b8      	ldr	r0, [r7, #24]
 800b7a6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800b7a8:	6979      	ldr	r1, [r7, #20]
 800b7aa:	69f8      	ldr	r0, [r7, #28]
 800b7ac:	f007 f852 	bl	8012854 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	3310      	adds	r3, #16
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	6978      	ldr	r0, [r7, #20]
 800b7ba:	4798      	blx	r3
    Application::getInstance()->draw();
 800b7bc:	f005 ff92 	bl	80116e4 <_ZN8touchgfx11Application11getInstanceEv>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	6813      	ldr	r3, [r2, #0]
 800b7c4:	3330      	adds	r3, #48	; 0x30
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	373c      	adds	r7, #60	; 0x3c
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd90      	pop	{r4, r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	0801c9e4 	.word	0x0801c9e4
 800b7dc:	0801d114 	.word	0x0801d114
 800b7e0:	0801ca74 	.word	0x0801ca74
 800b7e4:	0801cab8 	.word	0x0801cab8
 800b7e8:	0801cb5c 	.word	0x0801cb5c

0800b7ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3324      	adds	r3, #36	; 0x24
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	887a      	ldrh	r2, [r7, #2]
 800b802:	4611      	mov	r1, r2
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	4798      	blx	r3
 800b808:	4603      	mov	r3, r0
    }
 800b80a:	4618      	mov	r0, r3
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800b812:	b580      	push	{r7, lr}
 800b814:	b082      	sub	sp, #8
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	460b      	mov	r3, r1
 800b81c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3324      	adds	r3, #36	; 0x24
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	887a      	ldrh	r2, [r7, #2]
 800b828:	4611      	mov	r1, r2
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	4798      	blx	r3
 800b82e:	4603      	mov	r3, r0
    }
 800b830:	4618      	mov	r0, r3
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	460b      	mov	r3, r1
 800b842:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3324      	adds	r3, #36	; 0x24
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	887a      	ldrh	r2, [r7, #2]
 800b84e:	4611      	mov	r1, r2
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	4798      	blx	r3
 800b854:	4603      	mov	r3, r0
    }
 800b856:	4618      	mov	r0, r3
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800b85e:	b480      	push	{r7}
 800b860:	b083      	sub	sp, #12
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b86e:	bf00      	nop
 800b870:	370c      	adds	r7, #12
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
	...

0800b87c <_ZN8touchgfx12NoTransitionD1Ev>:
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	4a05      	ldr	r2, [pc, #20]	; (800b89c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff fbdb 	bl	800b048 <_ZN8touchgfx10TransitionD1Ev>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4618      	mov	r0, r3
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	0801cffc 	.word	0x0801cffc

0800b8a0 <_ZN8touchgfx12NoTransitionD0Ev>:
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7ff ffe7 	bl	800b87c <_ZN8touchgfx12NoTransitionD1Ev>
 800b8ae:	210c      	movs	r1, #12
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f010 f843 	bl	801b93c <_ZdlPvj>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	4a05      	ldr	r2, [pc, #20]	; (800b8e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	601a      	str	r2, [r3, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7ff fc23 	bl	800b11c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	0801d060 	.word	0x0801d060

0800b8e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff ffe7 	bl	800b8c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800b8f2:	2110      	movs	r1, #16
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f010 f821 	bl	801b93c <_ZdlPvj>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	68d2      	ldr	r2, [r2, #12]
 800b914:	1052      	asrs	r2, r2, #1
 800b916:	1899      	adds	r1, r3, r2
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	f003 0301 	and.w	r3, r3, #1
 800b920:	2b00      	cmp	r3, #0
 800b922:	d102      	bne.n	800b92a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	e00a      	b.n	800b940 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	68d2      	ldr	r2, [r2, #12]
 800b932:	1052      	asrs	r2, r2, #1
 800b934:	4413      	add	r3, r2
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	6892      	ldr	r2, [r2, #8]
 800b93c:	4413      	add	r3, r2
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4608      	mov	r0, r1
 800b942:	4798      	blx	r3
    }
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d010      	beq.n	800b97e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d107      	bne.n	800b974 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	f003 0301 	and.w	r3, r3, #1
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d101      	bne.n	800b974 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800b970:	2301      	movs	r3, #1
 800b972:	e000      	b.n	800b976 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800b974:	2300      	movs	r3, #0
 800b976:	2b01      	cmp	r3, #1
 800b978:	d001      	beq.n	800b97e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e000      	b.n	800b980 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800b97e:	2300      	movs	r3, #0
    }
 800b980:	4618      	mov	r0, r3
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	683a      	ldr	r2, [r7, #0]
 800b99a:	601a      	str	r2, [r3, #0]
    }
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800b9aa:	b480      	push	{r7}
 800b9ac:	b083      	sub	sp, #12
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	80da      	strh	r2, [r3, #6]
    }
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	817b      	strh	r3, [r7, #10]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	813b      	strh	r3, [r7, #8]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	897a      	ldrh	r2, [r7, #10]
 800b9f6:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	893a      	ldrh	r2, [r7, #8]
 800b9fc:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	88fa      	ldrh	r2, [r7, #6]
 800ba02:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	8b3a      	ldrh	r2, [r7, #24]
 800ba08:	80da      	strh	r2, [r3, #6]
    }
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	887a      	ldrh	r2, [r7, #2]
 800ba28:	801a      	strh	r2, [r3, #0]
    {
    }
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af02      	add	r7, sp, #8
 800ba3e:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800ba40:	4a13      	ldr	r2, [pc, #76]	; (800ba90 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	601a      	str	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	1d18      	adds	r0, r3, #4
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	2200      	movs	r2, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	f7ff ffc0 	bl	800b9d8 <_ZN8touchgfx4RectC1Essss>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	330c      	adds	r3, #12
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff ffa4 	bl	800b9aa <_ZN8touchgfx4RectC1Ev>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	615a      	str	r2, [r3, #20]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	619a      	str	r2, [r3, #24]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	61da      	str	r2, [r3, #28]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	0801ec0c 	.word	0x0801ec0c

0800ba94 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
    {
 800ba9c:	4a04      	ldr	r2, [pc, #16]	; (800bab0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	601a      	str	r2, [r3, #0]
    }
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	0801ec0c 	.word	0x0801ec0c

0800bab4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
    }
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7ff ffe9 	bl	800ba94 <_ZN8touchgfx8DrawableD1Ev>
 800bac2:	2128      	movs	r1, #40	; 0x28
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f00f ff39 	bl	801b93c <_ZdlPvj>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4618      	mov	r0, r3
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	4608      	mov	r0, r1
 800bade:	4611      	mov	r1, r2
 800bae0:	461a      	mov	r2, r3
 800bae2:	4603      	mov	r3, r0
 800bae4:	817b      	strh	r3, [r7, #10]
 800bae6:	460b      	mov	r3, r1
 800bae8:	813b      	strh	r3, [r7, #8]
 800baea:	4613      	mov	r3, r2
 800baec:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3334      	adds	r3, #52	; 0x34
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800bafa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	4798      	blx	r3
        setWidth(width);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	3338      	adds	r3, #56	; 0x38
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bb0e:	4611      	mov	r1, r2
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	4798      	blx	r3
        setHeight(height);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	333c      	adds	r3, #60	; 0x3c
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800bb20:	4611      	mov	r1, r2
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	4798      	blx	r3
    }
 800bb26:	bf00      	nop
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800bb2e:	b480      	push	{r7}
 800bb30:	b083      	sub	sp, #12
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	460b      	mov	r3, r1
 800bb38:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	887a      	ldrh	r2, [r7, #2]
 800bb3e:	809a      	strh	r2, [r3, #4]
    }
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	887a      	ldrh	r2, [r7, #2]
 800bb5c:	80da      	strh	r2, [r3, #6]
    }
 800bb5e:	bf00      	nop
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	460b      	mov	r3, r1
 800bb74:	807b      	strh	r3, [r7, #2]
 800bb76:	4613      	mov	r3, r2
 800bb78:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	332c      	adds	r3, #44	; 0x2c
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bb86:	4611      	mov	r1, r2
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	4798      	blx	r3
        setY(y);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	3330      	adds	r3, #48	; 0x30
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f9b7 2000 	ldrsh.w	r2, [r7]
 800bb98:	4611      	mov	r1, r2
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	4798      	blx	r3
    }
 800bb9e:	bf00      	nop
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800bba6:	b480      	push	{r7}
 800bba8:	b083      	sub	sp, #12
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	460b      	mov	r3, r1
 800bbb0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	887a      	ldrh	r2, [r7, #2]
 800bbb6:	811a      	strh	r2, [r3, #8]
    }
 800bbb8:	bf00      	nop
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	887a      	ldrh	r2, [r7, #2]
 800bbd4:	815a      	strh	r2, [r3, #10]
    }
 800bbd6:	bf00      	nop
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800bbe2:	b480      	push	{r7}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
    {
    }
 800bbea:	bf00      	nop
 800bbec:	370c      	adds	r7, #12
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	6039      	str	r1, [r7, #0]
    {
    }
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
    {
    }
 800bc16:	bf00      	nop
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800bc22:	b480      	push	{r7}
 800bc24:	b083      	sub	sp, #12
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	6039      	str	r1, [r7, #0]
    {
    }
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
    {
    }
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	460b      	mov	r3, r1
 800bc56:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	78fa      	ldrb	r2, [r7, #3]
 800bc5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	370c      	adds	r7, #12
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800bc86:	b480      	push	{r7}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800bc94:	4618      	mov	r0, r3
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	807b      	strh	r3, [r7, #2]
 800bcac:	4613      	mov	r3, r2
 800bcae:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	3354      	adds	r3, #84	; 0x54
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	8879      	ldrh	r1, [r7, #2]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800bcc0:	b292      	uxth	r2, r2
 800bcc2:	1a8a      	subs	r2, r1, r2
 800bcc4:	b292      	uxth	r2, r2
 800bcc6:	b210      	sxth	r0, r2
 800bcc8:	8839      	ldrh	r1, [r7, #0]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800bcd0:	b292      	uxth	r2, r2
 800bcd2:	1a8a      	subs	r2, r1, r2
 800bcd4:	b292      	uxth	r2, r2
 800bcd6:	b212      	sxth	r2, r2
 800bcd8:	4601      	mov	r1, r0
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	4798      	blx	r3
    }
 800bcde:	bf00      	nop
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800bce6:	b480      	push	{r7}
 800bce8:	b083      	sub	sp, #12
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcf4:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcfc:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd04:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800bd06:	bf00      	nop
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f7ff ffe1 	bl	800bce6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	601a      	str	r2, [r3, #0]
    }
 800bd32:	bf00      	nop
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
	...

0800bd3c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
    {
 800bd44:	4a06      	ldr	r2, [pc, #24]	; (800bd60 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 fcb0 	bl	800c6b4 <_ZN8touchgfx9ContainerD1Ev>
    }
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4618      	mov	r0, r3
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	0801ed04 	.word	0x0801ed04

0800bd64 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
    }
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff ffe5 	bl	800bd3c <_ZN8touchgfx6ScreenD1Ev>
 800bd72:	213c      	movs	r1, #60	; 0x3c
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f00f fde1 	bl	801b93c <_ZdlPvj>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
    {
    }
 800bd8c:	bf00      	nop
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
    {
    }
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
    {
    }
 800bdb4:	bf00      	nop
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
    {
    }
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	70fb      	strb	r3, [r7, #3]
    {
    }
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f003 fab1 	bl	800f364 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800be02:	bf00      	nop
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b084      	sub	sp, #16
 800be0e:	af00      	add	r7, sp, #0
 800be10:	60f8      	str	r0, [r7, #12]
 800be12:	607b      	str	r3, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	817b      	strh	r3, [r7, #10]
 800be18:	4613      	mov	r3, r2
 800be1a:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff ff24 	bl	800bc6c <_ZNK8touchgfx8Drawable9isVisibleEv>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d008      	beq.n	800be3c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7ff ff2a 	bl	800bc86 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800be38:	2301      	movs	r3, #1
 800be3a:	e000      	b.n	800be3e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800be3c:	2300      	movs	r3, #0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d002      	beq.n	800be48 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	601a      	str	r2, [r3, #0]
        }
    }
 800be48:	bf00      	nop
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff fdec 	bl	800ba38 <_ZN8touchgfx8DrawableC1Ev>
 800be60:	4a03      	ldr	r2, [pc, #12]	; (800be70 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	0801d288 	.word	0x0801d288

0800be74 <_ZN8touchgfx6WidgetD1Ev>:
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	4a05      	ldr	r2, [pc, #20]	; (800be94 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	601a      	str	r2, [r3, #0]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff fe05 	bl	800ba94 <_ZN8touchgfx8DrawableD1Ev>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4618      	mov	r0, r3
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	0801d288 	.word	0x0801d288

0800be98 <_ZN8touchgfx6WidgetD0Ev>:
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff ffe7 	bl	800be74 <_ZN8touchgfx6WidgetD1Ev>
 800bea6:	2128      	movs	r1, #40	; 0x28
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f00f fd47 	bl	801b93c <_ZdlPvj>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4618      	mov	r0, r3
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4618      	mov	r0, r3
 800bec4:	2326      	movs	r3, #38	; 0x26
 800bec6:	461a      	mov	r2, r3
 800bec8:	2100      	movs	r1, #0
 800beca:	f00f fdec 	bl	801baa6 <memset>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7ff ffbd 	bl	800be50 <_ZN8touchgfx6WidgetC1Ev>
 800bed6:	4a0a      	ldr	r2, [pc, #40]	; (800bf00 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	601a      	str	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	629a      	str	r2, [r3, #40]	; 0x28
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2101      	movs	r1, #1
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff feac 	bl	800bc4c <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4618      	mov	r0, r3
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	0801e69c 	.word	0x0801e69c

0800bf04 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	4a05      	ldr	r2, [pc, #20]	; (800bf24 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7ff ffad 	bl	800be74 <_ZN8touchgfx6WidgetD1Ev>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	0801e69c 	.word	0x0801e69c

0800bf28 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f7ff ffe7 	bl	800bf04 <_ZN8touchgfx14AbstractButtonD1Ev>
 800bf36:	2130      	movs	r1, #48	; 0x30
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f00f fcff 	bl	801b93c <_ZdlPvj>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4618      	mov	r0, r3
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7ff ffb0 	bl	800beb8 <_ZN8touchgfx14AbstractButtonC1Ev>
 800bf58:	4a0c      	ldr	r2, [pc, #48]	; (800bf8c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	601a      	str	r2, [r3, #0]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	332e      	adds	r3, #46	; 0x2e
 800bf62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff fd56 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3330      	adds	r3, #48	; 0x30
 800bf70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7ff fd4f 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	22ff      	movs	r2, #255	; 0xff
 800bf7e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4618      	mov	r0, r3
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	0801e844 	.word	0x0801e844

0800bf90 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	2326      	movs	r3, #38	; 0x26
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	f00f fd80 	bl	801baa6 <memset>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7ff ff51 	bl	800be50 <_ZN8touchgfx6WidgetC1Ev>
 800bfae:	4a0b      	ldr	r2, [pc, #44]	; (800bfdc <_ZN8touchgfx3BoxC1Ev+0x4c>)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	601a      	str	r2, [r3, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	22ff      	movs	r2, #255	; 0xff
 800bfb8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3328      	adds	r3, #40	; 0x28
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7ff fce2 	bl	800b98c <_ZN8touchgfx9colortypeC1Em>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	0801e778 	.word	0x0801e778

0800bfe0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800c008:	4a06      	ldr	r2, [pc, #24]	; (800c024 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	601a      	str	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	887a      	ldrh	r2, [r7, #2]
 800c012:	809a      	strh	r2, [r3, #4]
    }
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4618      	mov	r0, r3
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop
 800c024:	0801cf94 	.word	0x0801cf94

0800c028 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	889a      	ldrh	r2, [r3, #4]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	809a      	strh	r2, [r3, #4]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4618      	mov	r0, r3
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3334      	adds	r3, #52	; 0x34
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff ffe5 	bl	800c028 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f820 	bl	800c0a4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800c0a4:	b590      	push	{r4, r7, lr}
 800c0a6:	b08b      	sub	sp, #44	; 0x2c
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3334      	adds	r3, #52	; 0x34
 800c0b0:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	889b      	ldrh	r3, [r3, #4]
 800c0b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	bf14      	ite	ne
 800c0be:	2301      	movne	r3, #1
 800c0c0:	2300      	moveq	r3, #0
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d06f      	beq.n	800c1a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	3334      	adds	r3, #52	; 0x34
 800c0cc:	613b      	str	r3, [r7, #16]
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800c0d2:	4b39      	ldr	r3, [pc, #228]	; (800c1b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d105      	bne.n	800c0e6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 800c0da:	4b38      	ldr	r3, [pc, #224]	; (800c1bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 800c0dc:	4a38      	ldr	r2, [pc, #224]	; (800c1c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800c0de:	21b1      	movs	r1, #177	; 0xb1
 800c0e0:	4838      	ldr	r0, [pc, #224]	; (800c1c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800c0e2:	f00f fc57 	bl	801b994 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	889a      	ldrh	r2, [r3, #4]
 800c0ea:	4b37      	ldr	r3, [pc, #220]	; (800c1c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d305      	bcc.n	800c0fe <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 800c0f2:	4b36      	ldr	r3, [pc, #216]	; (800c1cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800c0f4:	4a32      	ldr	r2, [pc, #200]	; (800c1c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800c0f6:	21b2      	movs	r1, #178	; 0xb2
 800c0f8:	4832      	ldr	r0, [pc, #200]	; (800c1c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800c0fa:	f00f fc4b 	bl	801b994 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800c0fe:	4b34      	ldr	r3, [pc, #208]	; (800c1d0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	4b2d      	ldr	r3, [pc, #180]	; (800c1b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800c104:	6819      	ldr	r1, [r3, #0]
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	889b      	ldrh	r3, [r3, #4]
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	440b      	add	r3, r1
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	3334      	adds	r3, #52	; 0x34
 800c11c:	61bb      	str	r3, [r7, #24]
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800c122:	4b25      	ldr	r3, [pc, #148]	; (800c1b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d105      	bne.n	800c136 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 800c12a:	4b24      	ldr	r3, [pc, #144]	; (800c1bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 800c12c:	4a24      	ldr	r2, [pc, #144]	; (800c1c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800c12e:	21b1      	movs	r1, #177	; 0xb1
 800c130:	4824      	ldr	r0, [pc, #144]	; (800c1c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800c132:	f00f fc2f 	bl	801b994 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	889a      	ldrh	r2, [r3, #4]
 800c13a:	4b23      	ldr	r3, [pc, #140]	; (800c1c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d305      	bcc.n	800c14e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 800c142:	4b22      	ldr	r3, [pc, #136]	; (800c1cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800c144:	4a1e      	ldr	r2, [pc, #120]	; (800c1c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800c146:	21b2      	movs	r1, #178	; 0xb2
 800c148:	481e      	ldr	r0, [pc, #120]	; (800c1c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800c14a:	f00f fc23 	bl	801b994 <__assert_func>
        return texts->getText(typedTextId);
 800c14e:	4b21      	ldr	r3, [pc, #132]	; (800c1d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	889b      	ldrh	r3, [r3, #4]
 800c156:	4619      	mov	r1, r3
 800c158:	4610      	mov	r0, r2
 800c15a:	f000 fcd1 	bl	800cb00 <_ZNK8touchgfx5Texts7getTextEt>
 800c15e:	4603      	mov	r3, r0
 800c160:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800c162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3328      	adds	r3, #40	; 0x28
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	6a39      	ldr	r1, [r7, #32]
 800c16c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c16e:	4798      	blx	r3
 800c170:	4603      	mov	r3, r0
 800c172:	b2dc      	uxtb	r4, r3
 800c174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	3340      	adds	r3, #64	; 0x40
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6a39      	ldr	r1, [r7, #32]
 800c17e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c180:	4798      	blx	r3
 800c182:	4603      	mov	r3, r0
 800c184:	b2db      	uxtb	r3, r3
 800c186:	fb14 f303 	smulbb	r3, r4, r3
 800c18a:	b2dc      	uxtb	r4, r3
 800c18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3324      	adds	r3, #36	; 0x24
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	6a39      	ldr	r1, [r7, #32]
 800c196:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c198:	4798      	blx	r3
 800c19a:	4603      	mov	r3, r0
 800c19c:	4423      	add	r3, r4
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800c1a6:	e003      	b.n	800c1b0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 800c1b0:	bf00      	nop
 800c1b2:	372c      	adds	r7, #44	; 0x2c
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd90      	pop	{r4, r7, pc}
 800c1b8:	20005f94 	.word	0x20005f94
 800c1bc:	0801cc00 	.word	0x0801cc00
 800c1c0:	0801d2e8 	.word	0x0801d2e8
 800c1c4:	0801cc44 	.word	0x0801cc44
 800c1c8:	20005f98 	.word	0x20005f98
 800c1cc:	0801cc88 	.word	0x0801cc88
 800c1d0:	20005f9c 	.word	0x20005f9c
 800c1d4:	20005fa0 	.word	0x20005fa0

0800c1d8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 */
class ToggleButton : public Button
{
public:

    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bmpPressed;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	8812      	ldrh	r2, [r2, #0]
 800c1ea:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bmpReleased, bmpPressed);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	68b9      	ldr	r1, [r7, #8]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f004 f90e 	bl	8010414 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800c1f8:	bf00      	nop
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	4a05      	ldr	r2, [pc, #20]	; (800c220 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4618      	mov	r0, r3
 800c212:	f7ff fd93 	bl	800bd3c <_ZN8touchgfx6ScreenD1Ev>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4618      	mov	r0, r3
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	0801d254 	.word	0x0801d254

0800c224 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff ffe7 	bl	800c200 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800c232:	2140      	movs	r1, #64	; 0x40
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f00f fb81 	bl	801b93c <_ZdlPvj>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4618      	mov	r0, r3
 800c23e:	3708      	adds	r7, #8
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	4a13      	ldr	r2, [pc, #76]	; (800c29c <_ZN14screenViewBaseD1Ev+0x58>)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c258:	4618      	mov	r0, r3
 800c25a:	f000 fa97 	bl	800c78c <_ZN8touchgfx12ToggleButtonD1Ev>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c264:	4618      	mov	r0, r3
 800c266:	f000 fa69 	bl	800c73c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	33b8      	adds	r3, #184	; 0xb8
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 fa64 	bl	800c73c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3370      	adds	r3, #112	; 0x70
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 fa5f 	bl	800c73c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	3340      	adds	r3, #64	; 0x40
 800c282:	4618      	mov	r0, r3
 800c284:	f000 fa38 	bl	800c6f8 <_ZN8touchgfx3BoxD1Ev>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7ff ffb8 	bl	800c200 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4618      	mov	r0, r3
 800c294:	3708      	adds	r7, #8
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	0801d220 	.word	0x0801d220

0800c2a0 <_ZN14screenViewBaseD0Ev>:
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f7ff ffcb 	bl	800c244 <_ZN14screenViewBaseD1Ev>
 800c2ae:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f00f fb42 	bl	801b93c <_ZdlPvj>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800c2c4:	b590      	push	{r4, r7, lr}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	71fb      	strb	r3, [r7, #7]
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	71bb      	strb	r3, [r7, #6]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800c2d6:	f7fe ff41 	bl	800b15c <_ZN8touchgfx3HAL11getInstanceEv>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d105      	bne.n	800c2ec <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800c2e2:	4a0b      	ldr	r2, [pc, #44]	; (800c310 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800c2e4:	2135      	movs	r1, #53	; 0x35
 800c2e6:	480b      	ldr	r0, [pc, #44]	; (800c314 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800c2e8:	f00f fb54 	bl	801b994 <__assert_func>
 800c2ec:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800c2ee:	f7fe ff41 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800c2f2:	6803      	ldr	r3, [r0, #0]
 800c2f4:	3328      	adds	r3, #40	; 0x28
 800c2f6:	681c      	ldr	r4, [r3, #0]
 800c2f8:	797b      	ldrb	r3, [r7, #5]
 800c2fa:	79ba      	ldrb	r2, [r7, #6]
 800c2fc:	79f9      	ldrb	r1, [r7, #7]
 800c2fe:	47a0      	blx	r4
 800c300:	4603      	mov	r3, r0
    }
 800c302:	4618      	mov	r0, r3
 800c304:	370c      	adds	r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	bd90      	pop	{r4, r7, pc}
 800c30a:	bf00      	nop
 800c30c:	0801ccdc 	.word	0x0801ccdc
 800c310:	0801d318 	.word	0x0801d318
 800c314:	0801cd20 	.word	0x0801cd20

0800c318 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	4a05      	ldr	r2, [pc, #20]	; (800c338 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	601a      	str	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4618      	mov	r0, r3
 800c32a:	f7ff fdeb 	bl	800bf04 <_ZN8touchgfx14AbstractButtonD1Ev>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4618      	mov	r0, r3
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	0801e844 	.word	0x0801e844

0800c33c <_ZN8touchgfx6ButtonD0Ev>:
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff ffe7 	bl	800c318 <_ZN8touchgfx6ButtonD1Ev>
 800c34a:	2134      	movs	r1, #52	; 0x34
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f00f faf5 	bl	801b93c <_ZdlPvj>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4618      	mov	r0, r3
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fdee 	bl	800bf48 <_ZN8touchgfx6ButtonC1Ev>
 800c36c:	4a07      	ldr	r2, [pc, #28]	; (800c38c <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	601a      	str	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	3334      	adds	r3, #52	; 0x34
 800c376:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7ff fb4c 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4618      	mov	r0, r3
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	0801e708 	.word	0x0801e708

0800c390 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase()
 800c390:	b590      	push	{r4, r7, lr}
 800c392:	b093      	sub	sp, #76	; 0x4c
 800c394:	af02      	add	r7, sp, #8
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f974 	bl	800c688 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800c3a0:	4ab3      	ldr	r2, [pc, #716]	; (800c670 <_ZN14screenViewBaseC1Ev+0x2e0>)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	601a      	str	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	3340      	adds	r3, #64	; 0x40
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fdf0 	bl	800bf90 <_ZN8touchgfx3BoxC1Ev>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	3370      	adds	r3, #112	; 0x70
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f004 f9b1 	bl	801071c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	33b8      	adds	r3, #184	; 0xb8
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f004 f9ac 	bl	801071c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f004 f9a6 	bl	801071c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff ffc0 	bl	800c35c <_ZN8touchgfx12ToggleButtonC1Ev>
{

    box1.setPosition(0, 0, 480, 320);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c3e2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	f7ff fb70 	bl	800bad4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(33, 18, 106));
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800c3fa:	226a      	movs	r2, #106	; 0x6a
 800c3fc:	2112      	movs	r1, #18
 800c3fe:	2021      	movs	r0, #33	; 0x21
 800c400:	f7ff ff60 	bl	800c2c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c404:	4603      	mov	r3, r0
 800c406:	4619      	mov	r1, r3
 800c408:	4620      	mov	r0, r4
 800c40a:	f7ff fde9 	bl	800bfe0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(155, 114);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3370      	adds	r3, #112	; 0x70
 800c412:	2272      	movs	r2, #114	; 0x72
 800c414:	219b      	movs	r1, #155	; 0x9b
 800c416:	4618      	mov	r0, r3
 800c418:	f7ff fba7 	bl	800bb6a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800c422:	f107 0308 	add.w	r3, r7, #8
 800c426:	2100      	movs	r1, #0
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff faf5 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800c42e:	f107 030c 	add.w	r3, r7, #12
 800c432:	2101      	movs	r1, #1
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff faef 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800c43a:	f107 020c 	add.w	r2, r7, #12
 800c43e:	f107 0308 	add.w	r3, r7, #8
 800c442:	4619      	mov	r1, r3
 800c444:	4620      	mov	r0, r4
 800c446:	f003 ffe5 	bl	8010414 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID1));
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800c450:	f107 0310 	add.w	r3, r7, #16
 800c454:	2100      	movs	r1, #0
 800c456:	4618      	mov	r0, r3
 800c458:	f7ff fdd0 	bl	800bffc <_ZN8touchgfx9TypedTextC1Et>
 800c45c:	f107 0310 	add.w	r3, r7, #16
 800c460:	4619      	mov	r1, r3
 800c462:	4620      	mov	r0, r4
 800c464:	f7ff fdf0 	bl	800c048 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800c468:	f107 0310 	add.w	r3, r7, #16
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe fc63 	bl	800ad38 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800c478:	22ff      	movs	r2, #255	; 0xff
 800c47a:	21ff      	movs	r1, #255	; 0xff
 800c47c:	20ff      	movs	r0, #255	; 0xff
 800c47e:	f7ff ff21 	bl	800c2c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c482:	4603      	mov	r3, r0
 800c484:	4619      	mov	r1, r3
 800c486:	4620      	mov	r0, r4
 800c488:	f7ff fdf0 	bl	800c06c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800c492:	22ff      	movs	r2, #255	; 0xff
 800c494:	21ff      	movs	r1, #255	; 0xff
 800c496:	20ff      	movs	r0, #255	; 0xff
 800c498:	f7ff ff14 	bl	800c2c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c49c:	4603      	mov	r3, r0
 800c49e:	4619      	mov	r1, r3
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f7ff fdf1 	bl	800c088 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>

    buttonWithLabel2.setXY(310, 0);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	33b8      	adds	r3, #184	; 0xb8
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff fb5a 	bl	800bb6a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800c4bc:	f107 0318 	add.w	r3, r7, #24
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7ff faa8 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800c4c8:	f107 031c 	add.w	r3, r7, #28
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7ff faa2 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800c4d4:	f107 021c 	add.w	r2, r7, #28
 800c4d8:	f107 0318 	add.w	r3, r7, #24
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f003 ff98 	bl	8010414 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800c4ea:	f107 0320 	add.w	r3, r7, #32
 800c4ee:	2101      	movs	r1, #1
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7ff fd83 	bl	800bffc <_ZN8touchgfx9TypedTextC1Et>
 800c4f6:	f107 0320 	add.w	r3, r7, #32
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	f7ff fda3 	bl	800c048 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800c502:	f107 0320 	add.w	r3, r7, #32
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fc16 	bl	800ad38 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800c512:	22ff      	movs	r2, #255	; 0xff
 800c514:	21ff      	movs	r1, #255	; 0xff
 800c516:	20ff      	movs	r0, #255	; 0xff
 800c518:	f7ff fed4 	bl	800c2c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c51c:	4603      	mov	r3, r0
 800c51e:	4619      	mov	r1, r3
 800c520:	4620      	mov	r0, r4
 800c522:	f7ff fda3 	bl	800c06c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800c52c:	22ff      	movs	r2, #255	; 0xff
 800c52e:	21ff      	movs	r1, #255	; 0xff
 800c530:	20ff      	movs	r0, #255	; 0xff
 800c532:	f7ff fec7 	bl	800c2c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c536:	4603      	mov	r3, r0
 800c538:	4619      	mov	r1, r3
 800c53a:	4620      	mov	r0, r4
 800c53c:	f7ff fda4 	bl	800c088 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>

    buttonWithLabel3.setXY(0, 260);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c546:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c54a:	2100      	movs	r1, #0
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7ff fb0c 	bl	800bb6a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800c558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c55c:	2100      	movs	r1, #0
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff fa5a 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800c564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c568:	2101      	movs	r1, #1
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7ff fa54 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800c570:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c578:	4619      	mov	r1, r3
 800c57a:	4620      	mov	r0, r4
 800c57c:	f003 ff4a 	bl	8010414 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel3.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800c586:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c58a:	2102      	movs	r1, #2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff fd35 	bl	800bffc <_ZN8touchgfx9TypedTextC1Et>
 800c592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c596:	4619      	mov	r1, r3
 800c598:	4620      	mov	r0, r4
 800c59a:	f7ff fd55 	bl	800c048 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800c59e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fe fbc8 	bl	800ad38 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel3.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800c5ae:	22ff      	movs	r2, #255	; 0xff
 800c5b0:	21ff      	movs	r1, #255	; 0xff
 800c5b2:	20ff      	movs	r0, #255	; 0xff
 800c5b4:	f7ff fe86 	bl	800c2c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f7ff fd55 	bl	800c06c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel3.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800c5c8:	22ff      	movs	r2, #255	; 0xff
 800c5ca:	21ff      	movs	r1, #255	; 0xff
 800c5cc:	20ff      	movs	r0, #255	; 0xff
 800c5ce:	f7ff fe79 	bl	800c2c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f7ff fd56 	bl	800c088 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>

    toggleButton1.setXY(0, 0);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7ff fabf 	bl	800bb6a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 800c5f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c5f6:	2102      	movs	r1, #2
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7ff fa0d 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800c5fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c602:	2103      	movs	r1, #3
 800c604:	4618      	mov	r0, r3
 800c606:	f7ff fa07 	bl	800ba18 <_ZN8touchgfx6BitmapC1Et>
 800c60a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c60e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c612:	4619      	mov	r1, r3
 800c614:	4620      	mov	r0, r4
 800c616:	f7ff fddf 	bl	800c1d8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    add(box1);
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3340      	adds	r3, #64	; 0x40
 800c620:	4619      	mov	r1, r3
 800c622:	4610      	mov	r0, r2
 800c624:	f7ff fbe2 	bl	800bdec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	3370      	adds	r3, #112	; 0x70
 800c62e:	4619      	mov	r1, r3
 800c630:	4610      	mov	r0, r2
 800c632:	f7ff fbdb 	bl	800bdec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel2);
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	33b8      	adds	r3, #184	; 0xb8
 800c63c:	4619      	mov	r1, r3
 800c63e:	4610      	mov	r0, r2
 800c640:	f7ff fbd4 	bl	800bdec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel3);
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c64c:	4619      	mov	r1, r3
 800c64e:	4610      	mov	r0, r2
 800c650:	f7ff fbcc 	bl	800bdec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1);
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c65c:	4619      	mov	r1, r3
 800c65e:	4610      	mov	r0, r2
 800c660:	f7ff fbc4 	bl	800bdec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4618      	mov	r0, r3
 800c668:	3744      	adds	r7, #68	; 0x44
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd90      	pop	{r4, r7, pc}
 800c66e:	bf00      	nop
 800c670:	0801d220 	.word	0x0801d220

0800c674 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]

}
 800c67c:	bf00      	nop
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4618      	mov	r0, r3
 800c694:	f005 ff62 	bl	801255c <_ZN8touchgfx6ScreenC1Ev>
 800c698:	4a05      	ldr	r2, [pc, #20]	; (800c6b0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	0801d254 	.word	0x0801d254

0800c6b4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	4a05      	ldr	r2, [pc, #20]	; (800c6d4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	601a      	str	r2, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7ff f9e5 	bl	800ba94 <_ZN8touchgfx8DrawableD1Ev>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	0801de8c 	.word	0x0801de8c

0800c6d8 <_ZN8touchgfx9ContainerD0Ev>:
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f7ff ffe7 	bl	800c6b4 <_ZN8touchgfx9ContainerD1Ev>
 800c6e6:	212c      	movs	r1, #44	; 0x2c
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f00f f927 	bl	801b93c <_ZdlPvj>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	4a05      	ldr	r2, [pc, #20]	; (800c718 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7ff fbb3 	bl	800be74 <_ZN8touchgfx6WidgetD1Ev>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4618      	mov	r0, r3
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	0801e778 	.word	0x0801e778

0800c71c <_ZN8touchgfx3BoxD0Ev>:
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff ffe7 	bl	800c6f8 <_ZN8touchgfx3BoxD1Ev>
 800c72a:	2130      	movs	r1, #48	; 0x30
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f00f f905 	bl	801b93c <_ZdlPvj>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4618      	mov	r0, r3
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	4a08      	ldr	r2, [pc, #32]	; (800c768 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	601a      	str	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3334      	adds	r3, #52	; 0x34
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fe faf2 	bl	800ad38 <_ZN8touchgfx9TypedTextD1Ev>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff fdde 	bl	800c318 <_ZN8touchgfx6ButtonD1Ev>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4618      	mov	r0, r3
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	0801e9a4 	.word	0x0801e9a4

0800c76c <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7ff ffe1 	bl	800c73c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800c77a:	2148      	movs	r1, #72	; 0x48
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f00f f8dd 	bl	801b93c <_ZdlPvj>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4618      	mov	r0, r3
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <_ZN8touchgfx12ToggleButtonD1Ev>:
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	4a05      	ldr	r2, [pc, #20]	; (800c7ac <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	601a      	str	r2, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7ff fdbb 	bl	800c318 <_ZN8touchgfx6ButtonD1Ev>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	0801e708 	.word	0x0801e708

0800c7b0 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ffe7 	bl	800c78c <_ZN8touchgfx12ToggleButtonD1Ev>
 800c7be:	2138      	movs	r1, #56	; 0x38
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f00f f8bb 	bl	801b93c <_ZdlPvj>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	af00      	add	r7, sp, #0
    return bitmap_database;
 800c7d4:	4b02      	ldr	r3, [pc, #8]	; (800c7e0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr
 800c7e0:	0801d374 	.word	0x0801d374

0800c7e4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800c7e8:	2304      	movs	r3, #4
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	607a      	str	r2, [r7, #4]
 800c800:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800c802:	2300      	movs	r3, #0
    }
 800c804:	4618      	mov	r0, r3
 800c806:	3714      	adds	r7, #20
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800c818:	2300      	movs	r3, #0
    }
 800c81a:	4618      	mov	r0, r3
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
	...

0800c828 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	4613      	mov	r3, r2
 800c834:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800c836:	4a07      	ldr	r2, [pc, #28]	; (800c854 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6013      	str	r3, [r2, #0]
        fonts = f;
 800c83c:	4a06      	ldr	r2, [pc, #24]	; (800c858 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800c842:	4a06      	ldr	r2, [pc, #24]	; (800c85c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800c844:	88fb      	ldrh	r3, [r7, #6]
 800c846:	8013      	strh	r3, [r2, #0]
    }
 800c848:	bf00      	nop
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	20005f94 	.word	0x20005f94
 800c858:	20005f9c 	.word	0x20005f9c
 800c85c:	20005f98 	.word	0x20005f98

0800c860 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800c860:	b40e      	push	{r1, r2, r3}
 800c862:	b580      	push	{r7, lr}
 800c864:	b085      	sub	sp, #20
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800c86a:	f107 0320 	add.w	r3, r7, #32
 800c86e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	69fa      	ldr	r2, [r7, #28]
 800c874:	2100      	movs	r1, #0
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f005 fa34 	bl	8011ce4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800c87c:	4603      	mov	r3, r0
 800c87e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800c880:	89fb      	ldrh	r3, [r7, #14]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c88c:	b003      	add	sp, #12
 800c88e:	4770      	bx	lr

0800c890 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800c890:	b40c      	push	{r2, r3}
 800c892:	b580      	push	{r7, lr}
 800c894:	b084      	sub	sp, #16
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800c89e:	f107 031c 	add.w	r3, r7, #28
 800c8a2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800c8a4:	78f9      	ldrb	r1, [r7, #3]
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	69ba      	ldr	r2, [r7, #24]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f005 fa1a 	bl	8011ce4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800c8b4:	89fb      	ldrh	r3, [r7, #14]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8c0:	b002      	add	sp, #8
 800c8c2:	4770      	bx	lr

0800c8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b08a      	sub	sp, #40	; 0x28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d016      	beq.n	800c906 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	331a      	adds	r3, #26
 800c8dc:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800c8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e0:	8adb      	ldrh	r3, [r3, #22]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d105      	bne.n	800c8f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800c8e6:	4b42      	ldr	r3, [pc, #264]	; (800c9f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 800c8e8:	4a42      	ldr	r2, [pc, #264]	; (800c9f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800c8ea:	21c0      	movs	r1, #192	; 0xc0
 800c8ec:	4842      	ldr	r0, [pc, #264]	; (800c9f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800c8ee:	f00f f851 	bl	801b994 <__assert_func>
            return buffer[pos];
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	8a9b      	ldrh	r3, [r3, #20]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800c902:	2301      	movs	r3, #1
 800c904:	e000      	b.n	800c908 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800c906:	2300      	movs	r3, #0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d068      	beq.n	800c9de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f006 fcf3 	bl	80132f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	331a      	adds	r3, #26
 800c916:	623b      	str	r3, [r7, #32]
 800c918:	2301      	movs	r3, #1
 800c91a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800c91c:	6a3b      	ldr	r3, [r7, #32]
 800c91e:	8adb      	ldrh	r3, [r3, #22]
 800c920:	8bfa      	ldrh	r2, [r7, #30]
 800c922:	429a      	cmp	r2, r3
 800c924:	d305      	bcc.n	800c932 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800c926:	4b35      	ldr	r3, [pc, #212]	; (800c9fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800c928:	4a35      	ldr	r2, [pc, #212]	; (800ca00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800c92a:	21c5      	movs	r1, #197	; 0xc5
 800c92c:	4832      	ldr	r0, [pc, #200]	; (800c9f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800c92e:	f00f f831 	bl	801b994 <__assert_func>
            const uint16_t index = pos + offset;
 800c932:	6a3b      	ldr	r3, [r7, #32]
 800c934:	8a9a      	ldrh	r2, [r3, #20]
 800c936:	8bfb      	ldrh	r3, [r7, #30]
 800c938:	4413      	add	r3, r2
 800c93a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800c93c:	8bbb      	ldrh	r3, [r7, #28]
 800c93e:	2b09      	cmp	r3, #9
 800c940:	d801      	bhi.n	800c946 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800c942:	8bbb      	ldrh	r3, [r7, #28]
 800c944:	e001      	b.n	800c94a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800c946:	8bbb      	ldrh	r3, [r7, #28]
 800c948:	3b0a      	subs	r3, #10
 800c94a:	6a3a      	ldr	r2, [r7, #32]
 800c94c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c950:	f640 123f 	movw	r2, #2367	; 0x93f
 800c954:	4293      	cmp	r3, r2
 800c956:	bf0c      	ite	eq
 800c958:	2301      	moveq	r3, #1
 800c95a:	2300      	movne	r3, #0
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d03d      	beq.n	800c9de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	331a      	adds	r3, #26
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	321a      	adds	r2, #26
 800c96a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	8ad2      	ldrh	r2, [r2, #22]
 800c970:	2a00      	cmp	r2, #0
 800c972:	d105      	bne.n	800c980 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800c974:	4b1e      	ldr	r3, [pc, #120]	; (800c9f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 800c976:	4a1f      	ldr	r2, [pc, #124]	; (800c9f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800c978:	21c0      	movs	r1, #192	; 0xc0
 800c97a:	481f      	ldr	r0, [pc, #124]	; (800c9f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800c97c:	f00f f80a 	bl	801b994 <__assert_func>
            return buffer[pos];
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	8a92      	ldrh	r2, [r2, #20]
 800c984:	4611      	mov	r1, r2
 800c986:	68ba      	ldr	r2, [r7, #8]
 800c988:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800c98c:	613b      	str	r3, [r7, #16]
 800c98e:	4613      	mov	r3, r2
 800c990:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	8adb      	ldrh	r3, [r3, #22]
 800c996:	2b01      	cmp	r3, #1
 800c998:	d806      	bhi.n	800c9a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800c99a:	4b1a      	ldr	r3, [pc, #104]	; (800ca04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800c99c:	4a1a      	ldr	r2, [pc, #104]	; (800ca08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800c99e:	f240 110d 	movw	r1, #269	; 0x10d
 800c9a2:	4815      	ldr	r0, [pc, #84]	; (800c9f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800c9a4:	f00e fff6 	bl	801b994 <__assert_func>
            const uint16_t index = pos + 1;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	8a9b      	ldrh	r3, [r3, #20]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800c9b0:	89bb      	ldrh	r3, [r7, #12]
 800c9b2:	2b09      	cmp	r3, #9
 800c9b4:	d801      	bhi.n	800c9ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800c9b6:	89bb      	ldrh	r3, [r7, #12]
 800c9b8:	e000      	b.n	800c9bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	693a      	ldr	r2, [r7, #16]
 800c9be:	89f9      	ldrh	r1, [r7, #14]
 800c9c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	331a      	adds	r3, #26
 800c9c8:	61bb      	str	r3, [r7, #24]
 800c9ca:	f640 133f 	movw	r3, #2367	; 0x93f
 800c9ce:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	8a9b      	ldrh	r3, [r3, #20]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	8afa      	ldrh	r2, [r7, #22]
 800c9da:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f006 fb6e 	bl	80130c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c9e4:	4603      	mov	r3, r0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3728      	adds	r7, #40	; 0x28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	0801cd60 	.word	0x0801cd60
 800c9f4:	0801d4e8 	.word	0x0801d4e8
 800c9f8:	0801cd6c 	.word	0x0801cd6c
 800c9fc:	0801cdb4 	.word	0x0801cdb4
 800ca00:	0801d414 	.word	0x0801d414
 800ca04:	0801cdc4 	.word	0x0801cdc4
 800ca08:	0801d594 	.word	0x0801d594

0800ca0c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f006 fb0d 	bl	8013034 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800ca1a:	bf00      	nop
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b088      	sub	sp, #32
 800ca26:	af02      	add	r7, sp, #8
 800ca28:	60f8      	str	r0, [r7, #12]
 800ca2a:	1d38      	adds	r0, r7, #4
 800ca2c:	e880 0006 	stmia.w	r0, {r1, r2}
 800ca30:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800ca32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca36:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800ca38:	1d39      	adds	r1, r7, #4
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	9301      	str	r3, [sp, #4]
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f004 fa66 	bl	8010f18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800ca4c:	bf00      	nop
 800ca4e:	3718      	adds	r7, #24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800ca54:	b590      	push	{r4, r7, lr}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800ca62:	88fb      	ldrh	r3, [r7, #6]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d127      	bne.n	800cab8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800ca68:	88fb      	ldrh	r3, [r7, #6]
 800ca6a:	4a1e      	ldr	r2, [pc, #120]	; (800cae4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800ca6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d016      	beq.n	800caa2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800ca74:	88fb      	ldrh	r3, [r7, #6]
 800ca76:	4a1b      	ldr	r2, [pc, #108]	; (800cae4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800ca78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca7c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	4413      	add	r3, r2
 800ca86:	4a18      	ldr	r2, [pc, #96]	; (800cae8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800ca88:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	4413      	add	r3, r2
 800ca92:	4a16      	ldr	r2, [pc, #88]	; (800caec <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800ca94:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	e00a      	b.n	800cab8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800caa2:	4b11      	ldr	r3, [pc, #68]	; (800cae8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800caa4:	4a12      	ldr	r2, [pc, #72]	; (800caf0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800caa6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800caa8:	4a12      	ldr	r2, [pc, #72]	; (800caf4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800caaa:	4b10      	ldr	r3, [pc, #64]	; (800caec <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800caac:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800caae:	88fb      	ldrh	r3, [r7, #6]
 800cab0:	4a11      	ldr	r2, [pc, #68]	; (800caf8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800cab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00d      	beq.n	800cada <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800cabe:	4a0f      	ldr	r2, [pc, #60]	; (800cafc <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800cac0:	88fb      	ldrh	r3, [r7, #6]
 800cac2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800cac4:	f000 f83e 	bl	800cb44 <_ZN17TypedTextDatabase8getFontsEv>
 800cac8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800caca:	f000 f833 	bl	800cb34 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800cace:	4603      	mov	r3, r0
 800cad0:	461a      	mov	r2, r3
 800cad2:	4621      	mov	r1, r4
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f7ff fea7 	bl	800c828 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800cada:	bf00      	nop
 800cadc:	3714      	adds	r7, #20
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd90      	pop	{r4, r7, pc}
 800cae2:	bf00      	nop
 800cae4:	20004ebc 	.word	0x20004ebc
 800cae8:	20004ec4 	.word	0x20004ec4
 800caec:	20004ec8 	.word	0x20004ec8
 800caf0:	0803db3c 	.word	0x0803db3c
 800caf4:	0803db30 	.word	0x0803db30
 800caf8:	0803db88 	.word	0x0803db88
 800cafc:	20004ec0 	.word	0x20004ec0

0800cb00 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	460b      	mov	r3, r1
 800cb0a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800cb0c:	4b07      	ldr	r3, [pc, #28]	; (800cb2c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800cb12:	6819      	ldr	r1, [r3, #0]
 800cb14:	887b      	ldrh	r3, [r7, #2]
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	440b      	add	r3, r1
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	005b      	lsls	r3, r3, #1
 800cb1e:	4413      	add	r3, r2
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	20004ec4 	.word	0x20004ec4
 800cb30:	20004ec8 	.word	0x20004ec8

0800cb34 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800cb34:	b480      	push	{r7}
 800cb36:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800cb38:	2303      	movs	r3, #3
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800cb44:	b480      	push	{r7}
 800cb46:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800cb48:	4b02      	ldr	r3, [pc, #8]	; (800cb54 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	20004ecc 	.word	0x20004ecc

0800cb58 <_Z41__static_initialization_and_destruction_0ii>:
    case 0:
        touchgfx_fonts[0] = &(getFont_verdana_20_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d109      	bne.n	800cb7c <_Z41__static_initialization_and_destruction_0ii+0x24>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d104      	bne.n	800cb7c <_Z41__static_initialization_and_destruction_0ii+0x24>
    &(getFont_verdana_20_4bpp())
 800cb72:	f7fe f9ab 	bl	800aecc <_Z23getFont_verdana_20_4bppv>
 800cb76:	4602      	mov	r2, r0
};
 800cb78:	4b02      	ldr	r3, [pc, #8]	; (800cb84 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800cb7a:	601a      	str	r2, [r3, #0]
}  // namespace TypedTextDatabase
 800cb7c:	bf00      	nop
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	20004ecc 	.word	0x20004ecc

0800cb88 <_GLOBAL__sub_I_touchgfx_fonts>:
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cb90:	2001      	movs	r0, #1
 800cb92:	f7ff ffe1 	bl	800cb58 <_Z41__static_initialization_and_destruction_0ii>
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	4a05      	ldr	r2, [pc, #20]	; (800cbb8 <_ZN19FrontendApplicationD1Ev+0x20>)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fe fbaf 	bl	800b30c <_ZN23FrontendApplicationBaseD1Ev>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	0801d650 	.word	0x0801d650

0800cbbc <_ZN19FrontendApplicationD0Ev>:
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7ff ffe7 	bl	800cb98 <_ZN19FrontendApplicationD1Ev>
 800cbca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f00e feb4 	bl	801b93c <_ZdlPvj>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 f82d 	bl	800cc4c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f004 fc57 	bl	80114a8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800cbfa:	bf00      	nop
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	68b9      	ldr	r1, [r7, #8]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7fe fbbc 	bl	800b394 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800cc1c:	4a03      	ldr	r2, [pc, #12]	; (800cc2c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	601a      	str	r2, [r3, #0]
{

}
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	4618      	mov	r0, r3
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	0801d650 	.word	0x0801d650

0800cc30 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	601a      	str	r2, [r3, #0]
{

}
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <_ZN5Model4tickEv>:

void Model::tick()
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]

}
 800cc54:	bf00      	nop
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
    {
    }
 800cc68:	bf00      	nop
 800cc6a:	370c      	adds	r7, #12
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
    {
    }
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
    {
 800cc90:	4a04      	ldr	r2, [pc, #16]	; (800cca4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	601a      	str	r2, [r3, #0]
    }
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr
 800cca4:	0801d6cc 	.word	0x0801d6cc

0800cca8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
    }
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7ff ffe9 	bl	800cc88 <_ZN8touchgfx9PresenterD1Ev>
 800ccb6:	2104      	movs	r1, #4
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f00e fe3f 	bl	801b93c <_ZdlPvj>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
    {
 800ccd0:	4a04      	ldr	r2, [pc, #16]	; (800cce4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	601a      	str	r2, [r3, #0]
    }
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	0801d6cc 	.word	0x0801d6cc

0800cce8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	4a06      	ldr	r2, [pc, #24]	; (800cd0c <_ZN13ModelListenerC1Ev+0x24>)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	605a      	str	r2, [r3, #4]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	370c      	adds	r7, #12
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	0801d6bc 	.word	0x0801d6bc

0800cd10 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	4a04      	ldr	r2, [pc, #16]	; (800cd2c <_ZN13ModelListenerD1Ev+0x1c>)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4618      	mov	r0, r3
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr
 800cd2c:	0801d6bc 	.word	0x0801d6bc

0800cd30 <_ZN13ModelListenerD0Ev>:
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff ffe9 	bl	800cd10 <_ZN13ModelListenerD1Ev>
 800cd3e:	2108      	movs	r1, #8
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f00e fdfb 	bl	801b93c <_ZdlPvj>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	4a09      	ldr	r2, [pc, #36]	; (800cd80 <_ZN15screenPresenterD1Ev+0x30>)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	4a09      	ldr	r2, [pc, #36]	; (800cd84 <_ZN15screenPresenterD1Ev+0x34>)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	605a      	str	r2, [r3, #4]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	3304      	adds	r3, #4
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7ff ffd1 	bl	800cd10 <_ZN13ModelListenerD1Ev>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7ff ff89 	bl	800cc88 <_ZN8touchgfx9PresenterD1Ev>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	0801d694 	.word	0x0801d694
 800cd84:	0801d6ac 	.word	0x0801d6ac

0800cd88 <_ZThn4_N15screenPresenterD1Ev>:
 800cd88:	f1a0 0004 	sub.w	r0, r0, #4
 800cd8c:	e7e0      	b.n	800cd50 <_ZN15screenPresenterD1Ev>
 800cd8e:	bf00      	nop

0800cd90 <_ZN15screenPresenterD0Ev>:
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff ffd9 	bl	800cd50 <_ZN15screenPresenterD1Ev>
 800cd9e:	2110      	movs	r1, #16
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f00e fdcb 	bl	801b93c <_ZdlPvj>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <_ZThn4_N15screenPresenterD0Ev>:
 800cdb0:	f1a0 0004 	sub.w	r0, r0, #4
 800cdb4:	e7ec      	b.n	800cd90 <_ZN15screenPresenterD0Ev>
	...

0800cdb8 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
    : view(v)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7ff ff7f 	bl	800ccc8 <_ZN8touchgfx9PresenterC1Ev>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	3304      	adds	r3, #4
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7ff ff8a 	bl	800cce8 <_ZN13ModelListenerC1Ev>
 800cdd4:	4a06      	ldr	r2, [pc, #24]	; (800cdf0 <_ZN15screenPresenterC1ER10screenView+0x38>)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	4a06      	ldr	r2, [pc, #24]	; (800cdf4 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	605a      	str	r2, [r3, #4]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	60da      	str	r2, [r3, #12]
{

}
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4618      	mov	r0, r3
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	0801d694 	.word	0x0801d694
 800cdf4:	0801d6ac 	.word	0x0801d6ac

0800cdf8 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]

}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]

}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	4a05      	ldr	r2, [pc, #20]	; (800ce40 <_ZN10screenViewD1Ev+0x20>)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	601a      	str	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7ff fa07 	bl	800c244 <_ZN14screenViewBaseD1Ev>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	0801d6e4 	.word	0x0801d6e4

0800ce44 <_ZN10screenViewD0Ev>:
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7ff ffe7 	bl	800ce20 <_ZN10screenViewD1Ev>
 800ce52:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f00e fd70 	bl	801b93c <_ZdlPvj>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
	...

0800ce68 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7ff fa8c 	bl	800c390 <_ZN14screenViewBaseC1Ev>
 800ce78:	4a03      	ldr	r2, [pc, #12]	; (800ce88 <_ZN10screenViewC1Ev+0x20>)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	601a      	str	r2, [r3, #0]
{

}
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	4618      	mov	r0, r3
 800ce82:	3708      	adds	r7, #8
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	0801d6e4 	.word	0x0801d6e4

0800ce8c <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff fbec 	bl	800c674 <_ZN14screenViewBase11setupScreenEv>
}
 800ce9c:	bf00      	nop
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe ff7c 	bl	800bdac <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800ceb4:	bf00      	nop
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
    {
 800cec4:	4a04      	ldr	r2, [pc, #16]	; (800ced8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	601a      	str	r2, [r3, #0]
    }
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4618      	mov	r0, r3
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr
 800ced8:	0801d730 	.word	0x0801d730

0800cedc <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
    }
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7ff ffe9 	bl	800cebc <_ZN8touchgfx15TouchControllerD1Ev>
 800ceea:	2104      	movs	r1, #4
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f00e fd25 	bl	801b93c <_ZdlPvj>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	4618      	mov	r0, r3
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <_ZN20STM32TouchController4initEv>:
}

using namespace touchgfx;

void STM32TouchController::init()
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    //if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) == TS_OK)
    if (BSP_TS_Init(480, 272) == TS_OK)
 800cf04:	f44f 7188 	mov.w	r1, #272	; 0x110
 800cf08:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800cf0c:	f000 f830 	bl	800cf70 <BSP_TS_Init>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	bf0c      	ite	eq
 800cf16:	2301      	moveq	r3, #1
 800cf18:	2300      	movne	r3, #0
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <_ZN20STM32TouchController4initEv+0x2a>
    {
        isInitialized = true;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	711a      	strb	r2, [r3, #4]
    }
}
 800cf26:	bf00      	nop
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b086      	sub	sp, #24
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	60f8      	str	r0, [r7, #12]
 800cf36:	60b9      	str	r1, [r7, #8]
 800cf38:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (isInitialized)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	791b      	ldrb	r3, [r3, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d011      	beq.n	800cf66 <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        TS_StateTypeDef state;
        BSP_TS_GetState(&state);
 800cf42:	f107 0310 	add.w	r3, r7, #16
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 f87c 	bl	800d044 <BSP_TS_GetState>
        if (state.TouchDetected)
 800cf4c:	8a3b      	ldrh	r3, [r7, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d009      	beq.n	800cf66 <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
        {
            x = state.x;
 800cf52:	8a7b      	ldrh	r3, [r7, #18]
 800cf54:	461a      	mov	r2, r3
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	601a      	str	r2, [r3, #0]
            y = state.y;
 800cf5a:	8abb      	ldrh	r3, [r7, #20]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	601a      	str	r2, [r3, #0]

            return true;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e000      	b.n	800cf68 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3a>
        }
    }
    return false;
 800cf66:	2300      	movs	r3, #0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3718      	adds	r7, #24
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <BSP_TS_Init>:
      * @param  xSize: Maximum X size of the TS area on LCD
      *         ySize: Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    uint8_t BSP_TS_Init(uint16_t xSize, uint16_t ySize)
    {
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	460a      	mov	r2, r1
 800cf7a:	80fb      	strh	r3, [r7, #6]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	80bb      	strh	r3, [r7, #4]
        uint8_t status = TS_OK;
 800cf80:	2300      	movs	r3, #0
 800cf82:	73fb      	strb	r3, [r7, #15]
        ts_x_boundary = xSize;
 800cf84:	4a27      	ldr	r2, [pc, #156]	; (800d024 <BSP_TS_Init+0xb4>)
 800cf86:	88fb      	ldrh	r3, [r7, #6]
 800cf88:	8013      	strh	r3, [r2, #0]
        ts_y_boundary = ySize;
 800cf8a:	4a27      	ldr	r2, [pc, #156]	; (800d028 <BSP_TS_Init+0xb8>)
 800cf8c:	88bb      	ldrh	r3, [r7, #4]
 800cf8e:	8013      	strh	r3, [r2, #0]

        /* Read ID and verify if the IO expander is ready */
        if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800cf90:	4b26      	ldr	r3, [pc, #152]	; (800d02c <BSP_TS_Init+0xbc>)
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	2082      	movs	r0, #130	; 0x82
 800cf96:	4798      	blx	r3
 800cf98:	4603      	mov	r3, r0
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	f640 0311 	movw	r3, #2065	; 0x811
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	bf0c      	ite	eq
 800cfa4:	2301      	moveq	r3, #1
 800cfa6:	2300      	movne	r3, #0
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d009      	beq.n	800cfc2 <BSP_TS_Init+0x52>
        {
            /* Initialize the TS driver structure */
            ts_driver = &stmpe811_ts_drv;
 800cfae:	4b20      	ldr	r3, [pc, #128]	; (800d030 <BSP_TS_Init+0xc0>)
 800cfb0:	4a1e      	ldr	r2, [pc, #120]	; (800d02c <BSP_TS_Init+0xbc>)
 800cfb2:	601a      	str	r2, [r3, #0]
            I2C_Address = TS_I2C_ADDRESS;
 800cfb4:	4b1f      	ldr	r3, [pc, #124]	; (800d034 <BSP_TS_Init+0xc4>)
 800cfb6:	2282      	movs	r2, #130	; 0x82
 800cfb8:	701a      	strb	r2, [r3, #0]
            ts_orientation = TS_SWAP_XY; //TS_SWAP_NONE; //TS_SWAP_Y;
 800cfba:	4b1f      	ldr	r3, [pc, #124]	; (800d038 <BSP_TS_Init+0xc8>)
 800cfbc:	2204      	movs	r2, #4
 800cfbe:	701a      	strb	r2, [r3, #0]
 800cfc0:	e01b      	b.n	800cffa <BSP_TS_Init+0x8a>
        }
        else
        {
            IOE_Init();
 800cfc2:	f000 fa3b 	bl	800d43c <IOE_Init>

            /* Check TS3510 touch screen driver presence to determine if TS3510 or
             * EXC7200 driver will be used */
            if (BSP_TS3510_IsDetected() == 0)
 800cfc6:	f000 f8e9 	bl	800d19c <BSP_TS3510_IsDetected>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	bf0c      	ite	eq
 800cfd0:	2301      	moveq	r3, #1
 800cfd2:	2300      	movne	r3, #0
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d006      	beq.n	800cfe8 <BSP_TS_Init+0x78>
            {
                /* Initialize the TS driver structure */
                ts_driver = &ts3510_ts_drv;
 800cfda:	4b15      	ldr	r3, [pc, #84]	; (800d030 <BSP_TS_Init+0xc0>)
 800cfdc:	4a17      	ldr	r2, [pc, #92]	; (800d03c <BSP_TS_Init+0xcc>)
 800cfde:	601a      	str	r2, [r3, #0]
                I2C_Address = TS3510_I2C_ADDRESS;
 800cfe0:	4b14      	ldr	r3, [pc, #80]	; (800d034 <BSP_TS_Init+0xc4>)
 800cfe2:	2280      	movs	r2, #128	; 0x80
 800cfe4:	701a      	strb	r2, [r3, #0]
 800cfe6:	e005      	b.n	800cff4 <BSP_TS_Init+0x84>
            }
            else
            {
                /* Initialize the TS driver structure */
                ts_driver = &exc7200_ts_drv;
 800cfe8:	4b11      	ldr	r3, [pc, #68]	; (800d030 <BSP_TS_Init+0xc0>)
 800cfea:	4a15      	ldr	r2, [pc, #84]	; (800d040 <BSP_TS_Init+0xd0>)
 800cfec:	601a      	str	r2, [r3, #0]
                I2C_Address = EXC7200_I2C_ADDRESS;
 800cfee:	4b11      	ldr	r3, [pc, #68]	; (800d034 <BSP_TS_Init+0xc4>)
 800cff0:	2208      	movs	r2, #8
 800cff2:	701a      	strb	r2, [r3, #0]
            }
            ts_orientation = TS_SWAP_NONE;
 800cff4:	4b10      	ldr	r3, [pc, #64]	; (800d038 <BSP_TS_Init+0xc8>)
 800cff6:	2200      	movs	r2, #0
 800cff8:	701a      	strb	r2, [r3, #0]
        }

        /* Initialize the TS driver */
        ts_driver->Init(I2C_Address);
 800cffa:	4b0d      	ldr	r3, [pc, #52]	; (800d030 <BSP_TS_Init+0xc0>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a0c      	ldr	r2, [pc, #48]	; (800d034 <BSP_TS_Init+0xc4>)
 800d002:	7812      	ldrb	r2, [r2, #0]
 800d004:	b292      	uxth	r2, r2
 800d006:	4610      	mov	r0, r2
 800d008:	4798      	blx	r3
        ts_driver->Start(I2C_Address);
 800d00a:	4b09      	ldr	r3, [pc, #36]	; (800d030 <BSP_TS_Init+0xc0>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	4a08      	ldr	r2, [pc, #32]	; (800d034 <BSP_TS_Init+0xc4>)
 800d012:	7812      	ldrb	r2, [r2, #0]
 800d014:	b292      	uxth	r2, r2
 800d016:	4610      	mov	r0, r2
 800d018:	4798      	blx	r3

        return status;
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
    }
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	20004ed4 	.word	0x20004ed4
 800d028:	20004ed6 	.word	0x20004ed6
 800d02c:	20000030 	.word	0x20000030
 800d030:	20004ed0 	.word	0x20004ed0
 800d034:	20004ed9 	.word	0x20004ed9
 800d038:	20004ed8 	.word	0x20004ed8
 800d03c:	20000058 	.word	0x20000058
 800d040:	20000008 	.word	0x20000008

0800d044 <BSP_TS_GetState>:
      * @brief  Returns status and positions of the touch screen.
      * @param  TS_State: Pointer to touch screen current state structure
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
    {
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
        static uint32_t _x = 0, _y = 0;
        uint16_t xDiff, yDiff, x, y;
        uint16_t swap;

        TS_State->TouchDetected = ts_driver->DetectTouch(I2C_Address);
 800d04c:	4b4c      	ldr	r3, [pc, #304]	; (800d180 <BSP_TS_GetState+0x13c>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	4a4c      	ldr	r2, [pc, #304]	; (800d184 <BSP_TS_GetState+0x140>)
 800d054:	7812      	ldrb	r2, [r2, #0]
 800d056:	b292      	uxth	r2, r2
 800d058:	4610      	mov	r0, r2
 800d05a:	4798      	blx	r3
 800d05c:	4603      	mov	r3, r0
 800d05e:	b29a      	uxth	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	801a      	strh	r2, [r3, #0]

        if (TS_State->TouchDetected)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f000 8083 	beq.w	800d174 <BSP_TS_GetState+0x130>
        {
            ts_driver->GetXY(I2C_Address, &x, &y);
 800d06e:	4b44      	ldr	r3, [pc, #272]	; (800d180 <BSP_TS_GetState+0x13c>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	695b      	ldr	r3, [r3, #20]
 800d074:	4a43      	ldr	r2, [pc, #268]	; (800d184 <BSP_TS_GetState+0x140>)
 800d076:	7812      	ldrb	r2, [r2, #0]
 800d078:	b290      	uxth	r0, r2
 800d07a:	f107 020e 	add.w	r2, r7, #14
 800d07e:	f107 0110 	add.w	r1, r7, #16
 800d082:	4798      	blx	r3

            if (ts_orientation & TS_SWAP_X)
 800d084:	4b40      	ldr	r3, [pc, #256]	; (800d188 <BSP_TS_GetState+0x144>)
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 0301 	and.w	r3, r3, #1
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d004      	beq.n	800d09a <BSP_TS_GetState+0x56>
            {
                x = 4096 - x;
 800d090:	8a3b      	ldrh	r3, [r7, #16]
 800d092:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800d096:	b29b      	uxth	r3, r3
 800d098:	823b      	strh	r3, [r7, #16]
            }

            if (ts_orientation & TS_SWAP_Y)
 800d09a:	4b3b      	ldr	r3, [pc, #236]	; (800d188 <BSP_TS_GetState+0x144>)
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	f003 0302 	and.w	r3, r3, #2
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d004      	beq.n	800d0b0 <BSP_TS_GetState+0x6c>
            {
                y = 4096 - y;
 800d0a6:	89fb      	ldrh	r3, [r7, #14]
 800d0a8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	81fb      	strh	r3, [r7, #14]
            }

            if (ts_orientation & TS_SWAP_XY)
 800d0b0:	4b35      	ldr	r3, [pc, #212]	; (800d188 <BSP_TS_GetState+0x144>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	f003 0304 	and.w	r3, r3, #4
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d005      	beq.n	800d0c8 <BSP_TS_GetState+0x84>
            {
                swap = y;
 800d0bc:	89fb      	ldrh	r3, [r7, #14]
 800d0be:	82fb      	strh	r3, [r7, #22]
                y = x;
 800d0c0:	8a3b      	ldrh	r3, [r7, #16]
 800d0c2:	81fb      	strh	r3, [r7, #14]
                x = swap;
 800d0c4:	8afb      	ldrh	r3, [r7, #22]
 800d0c6:	823b      	strh	r3, [r7, #16]
            }

            xDiff = x > _x ? (x - _x) : (_x - x);
 800d0c8:	8a3b      	ldrh	r3, [r7, #16]
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	4b2f      	ldr	r3, [pc, #188]	; (800d18c <BSP_TS_GetState+0x148>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d906      	bls.n	800d0e2 <BSP_TS_GetState+0x9e>
 800d0d4:	8a3a      	ldrh	r2, [r7, #16]
 800d0d6:	4b2d      	ldr	r3, [pc, #180]	; (800d18c <BSP_TS_GetState+0x148>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	e005      	b.n	800d0ee <BSP_TS_GetState+0xaa>
 800d0e2:	4b2a      	ldr	r3, [pc, #168]	; (800d18c <BSP_TS_GetState+0x148>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	8a3b      	ldrh	r3, [r7, #16]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	82bb      	strh	r3, [r7, #20]
            yDiff = y > _y ? (y - _y) : (_y - y);
 800d0f0:	89fb      	ldrh	r3, [r7, #14]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	4b26      	ldr	r3, [pc, #152]	; (800d190 <BSP_TS_GetState+0x14c>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d906      	bls.n	800d10a <BSP_TS_GetState+0xc6>
 800d0fc:	89fa      	ldrh	r2, [r7, #14]
 800d0fe:	4b24      	ldr	r3, [pc, #144]	; (800d190 <BSP_TS_GetState+0x14c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	b29b      	uxth	r3, r3
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	b29b      	uxth	r3, r3
 800d108:	e005      	b.n	800d116 <BSP_TS_GetState+0xd2>
 800d10a:	4b21      	ldr	r3, [pc, #132]	; (800d190 <BSP_TS_GetState+0x14c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	b29a      	uxth	r2, r3
 800d110:	89fb      	ldrh	r3, [r7, #14]
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	b29b      	uxth	r3, r3
 800d116:	827b      	strh	r3, [r7, #18]

            if (xDiff + yDiff > 5)
 800d118:	8aba      	ldrh	r2, [r7, #20]
 800d11a:	8a7b      	ldrh	r3, [r7, #18]
 800d11c:	4413      	add	r3, r2
 800d11e:	2b05      	cmp	r3, #5
 800d120:	dd07      	ble.n	800d132 <BSP_TS_GetState+0xee>
            {
                _x = x;
 800d122:	8a3b      	ldrh	r3, [r7, #16]
 800d124:	461a      	mov	r2, r3
 800d126:	4b19      	ldr	r3, [pc, #100]	; (800d18c <BSP_TS_GetState+0x148>)
 800d128:	601a      	str	r2, [r3, #0]
                _y = y;
 800d12a:	89fb      	ldrh	r3, [r7, #14]
 800d12c:	461a      	mov	r2, r3
 800d12e:	4b18      	ldr	r3, [pc, #96]	; (800d190 <BSP_TS_GetState+0x14c>)
 800d130:	601a      	str	r2, [r3, #0]
            }

            if (I2C_Address == EXC7200_I2C_ADDRESS)
 800d132:	4b14      	ldr	r3, [pc, #80]	; (800d184 <BSP_TS_GetState+0x140>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b08      	cmp	r3, #8
 800d138:	d106      	bne.n	800d148 <BSP_TS_GetState+0x104>
            {
                TS_State->x = x;
 800d13a:	8a3a      	ldrh	r2, [r7, #16]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	805a      	strh	r2, [r3, #2]
                TS_State->y = y;
 800d140:	89fa      	ldrh	r2, [r7, #14]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	809a      	strh	r2, [r3, #4]
 800d146:	e015      	b.n	800d174 <BSP_TS_GetState+0x130>
            }
            else
            {
                TS_State->x = (ts_x_boundary * _x) >> 12;
 800d148:	4b12      	ldr	r3, [pc, #72]	; (800d194 <BSP_TS_GetState+0x150>)
 800d14a:	881b      	ldrh	r3, [r3, #0]
 800d14c:	461a      	mov	r2, r3
 800d14e:	4b0f      	ldr	r3, [pc, #60]	; (800d18c <BSP_TS_GetState+0x148>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	fb03 f302 	mul.w	r3, r3, r2
 800d156:	0b1b      	lsrs	r3, r3, #12
 800d158:	b29a      	uxth	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	805a      	strh	r2, [r3, #2]
                TS_State->y = (ts_y_boundary * _y) >> 12;
 800d15e:	4b0e      	ldr	r3, [pc, #56]	; (800d198 <BSP_TS_GetState+0x154>)
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	461a      	mov	r2, r3
 800d164:	4b0a      	ldr	r3, [pc, #40]	; (800d190 <BSP_TS_GetState+0x14c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	fb03 f302 	mul.w	r3, r3, r2
 800d16c:	0b1b      	lsrs	r3, r3, #12
 800d16e:	b29a      	uxth	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	809a      	strh	r2, [r3, #4]
            }
        }
        return TS_OK;
 800d174:	2300      	movs	r3, #0
    }
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	20004ed0 	.word	0x20004ed0
 800d184:	20004ed9 	.word	0x20004ed9
 800d188:	20004ed8 	.word	0x20004ed8
 800d18c:	20004edc 	.word	0x20004edc
 800d190:	20004ee0 	.word	0x20004ee0
 800d194:	20004ed4 	.word	0x20004ed4
 800d198:	20004ed6 	.word	0x20004ed6

0800d19c <BSP_TS3510_IsDetected>:
    * @brief  Check TS3510 touch screen presence
    * @param  None
    * @retval Return 0 if TS3510 is detected, return 1 if not detected
    */
    uint8_t BSP_TS3510_IsDetected(void)
    {
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b088      	sub	sp, #32
 800d1a0:	af04      	add	r7, sp, #16
        HAL_StatusTypeDef status = HAL_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73fb      	strb	r3, [r7, #15]
        uint32_t error = 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	60bb      	str	r3, [r7, #8]
        uint8_t a_buffer;

        uint8_t tmp_buffer[2] = {0x81, 0x08};
 800d1aa:	4b16      	ldr	r3, [pc, #88]	; (800d204 <BSP_TS3510_IsDetected+0x68>)
 800d1ac:	881b      	ldrh	r3, [r3, #0]
 800d1ae:	80bb      	strh	r3, [r7, #4]

        /* Prepare for LCD read data */
        IOE_WriteMultiple(TS3510_I2C_ADDRESS, 0x8A, tmp_buffer, 2);
 800d1b0:	1d3a      	adds	r2, r7, #4
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	218a      	movs	r1, #138	; 0x8a
 800d1b6:	2080      	movs	r0, #128	; 0x80
 800d1b8:	f000 f98d 	bl	800d4d6 <IOE_WriteMultiple>

        status = HAL_I2C_Mem_Read(&hi2c1, TS3510_I2C_ADDRESS, 0x8A, I2C_MEMADD_SIZE_8BIT, &a_buffer, 1, 1000);
 800d1bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d1c0:	9302      	str	r3, [sp, #8]
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	9301      	str	r3, [sp, #4]
 800d1c6:	1dfb      	adds	r3, r7, #7
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	228a      	movs	r2, #138	; 0x8a
 800d1ce:	2180      	movs	r1, #128	; 0x80
 800d1d0:	480d      	ldr	r0, [pc, #52]	; (800d208 <BSP_TS3510_IsDetected+0x6c>)
 800d1d2:	f7f6 fced 	bl	8003bb0 <HAL_I2C_Mem_Read>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	73fb      	strb	r3, [r7, #15]

        /* Check the communication status */
        if (status != HAL_OK)
 800d1da:	7bfb      	ldrb	r3, [r7, #15]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00b      	beq.n	800d1f8 <BSP_TS3510_IsDetected+0x5c>
        {
            error = (uint32_t)HAL_I2C_GetError(&hi2c1);
 800d1e0:	4809      	ldr	r0, [pc, #36]	; (800d208 <BSP_TS3510_IsDetected+0x6c>)
 800d1e2:	f7f6 ff0b 	bl	8003ffc <HAL_I2C_GetError>
 800d1e6:	60b8      	str	r0, [r7, #8]

            /* I2C error occured */
            I2Cx_Error(TS3510_I2C_ADDRESS);
 800d1e8:	2080      	movs	r0, #128	; 0x80
 800d1ea:	f000 f80f 	bl	800d20c <I2Cx_Error>

            if (error == HAL_I2C_ERROR_AF)
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	2b04      	cmp	r3, #4
 800d1f2:	d101      	bne.n	800d1f8 <BSP_TS3510_IsDetected+0x5c>
            {
                return 1;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e000      	b.n	800d1fa <BSP_TS3510_IsDetected+0x5e>
            }
        }
        return 0;
 800d1f8:	2300      	movs	r3, #0
    }
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	0801cdd0 	.word	0x0801cdd0
 800d208:	200061c0 	.word	0x200061c0

0800d20c <I2Cx_Error>:
    * @brief  Manages error callback by re-initializing I2C.
    * @param  Addr: I2C Address
    * @retval None
    */
    static void I2Cx_Error(uint8_t Addr)
    {
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	4603      	mov	r3, r0
 800d214:	71fb      	strb	r3, [r7, #7]
        /* De-initialize the I2C communication bus */
        HAL_I2C_DeInit(&hi2c1);
 800d216:	4805      	ldr	r0, [pc, #20]	; (800d22c <I2Cx_Error+0x20>)
 800d218:	f7f6 f97a 	bl	8003510 <HAL_I2C_DeInit>

        /* Modification, Draupner Graphics: Add delay to avoid BUSY flag error */
        HAL_Delay(2);
 800d21c:	2002      	movs	r0, #2
 800d21e:	f7f5 f807 	bl	8002230 <HAL_Delay>

        /* Re-Initialize the I2C communication bus */
        //    I2Cx_Init();
    }
 800d222:	bf00      	nop
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	200061c0 	.word	0x200061c0

0800d230 <I2Cx_ITConfig>:
      * @brief  Configures I2C Interrupt.
      * @param  None
      * @retval None
      */
    static void I2Cx_ITConfig(void)
    {
 800d230:	b580      	push	{r7, lr}
 800d232:	b088      	sub	sp, #32
 800d234:	af00      	add	r7, sp, #0
        static uint8_t I2C_IT_Enabled = 0;
        GPIO_InitTypeDef  GPIO_InitStruct;

        if (I2C_IT_Enabled == 0)
 800d236:	4b1f      	ldr	r3, [pc, #124]	; (800d2b4 <I2Cx_ITConfig+0x84>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d135      	bne.n	800d2aa <I2Cx_ITConfig+0x7a>
        {
            I2C_IT_Enabled = 1;
 800d23e:	4b1d      	ldr	r3, [pc, #116]	; (800d2b4 <I2Cx_ITConfig+0x84>)
 800d240:	2201      	movs	r2, #1
 800d242:	701a      	strb	r2, [r3, #0]
            /* Enable the GPIO EXTI clock */
            __GPIOI_CLK_ENABLE();
 800d244:	2300      	movs	r3, #0
 800d246:	60bb      	str	r3, [r7, #8]
 800d248:	4b1b      	ldr	r3, [pc, #108]	; (800d2b8 <I2Cx_ITConfig+0x88>)
 800d24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24c:	4a1a      	ldr	r2, [pc, #104]	; (800d2b8 <I2Cx_ITConfig+0x88>)
 800d24e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d252:	6313      	str	r3, [r2, #48]	; 0x30
 800d254:	4b18      	ldr	r3, [pc, #96]	; (800d2b8 <I2Cx_ITConfig+0x88>)
 800d256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d25c:	60bb      	str	r3, [r7, #8]
 800d25e:	68bb      	ldr	r3, [r7, #8]
            __SYSCFG_CLK_ENABLE();
 800d260:	2300      	movs	r3, #0
 800d262:	607b      	str	r3, [r7, #4]
 800d264:	4b14      	ldr	r3, [pc, #80]	; (800d2b8 <I2Cx_ITConfig+0x88>)
 800d266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d268:	4a13      	ldr	r2, [pc, #76]	; (800d2b8 <I2Cx_ITConfig+0x88>)
 800d26a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d26e:	6453      	str	r3, [r2, #68]	; 0x44
 800d270:	4b11      	ldr	r3, [pc, #68]	; (800d2b8 <I2Cx_ITConfig+0x88>)
 800d272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d278:	607b      	str	r3, [r7, #4]
 800d27a:	687b      	ldr	r3, [r7, #4]

            GPIO_InitStruct.Pin   = GPIO_PIN_8;
 800d27c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d280:	60fb      	str	r3, [r7, #12]
            GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800d282:	2300      	movs	r3, #0
 800d284:	617b      	str	r3, [r7, #20]
            GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800d286:	2300      	movs	r3, #0
 800d288:	61bb      	str	r3, [r7, #24]
            GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800d28a:	4b0c      	ldr	r3, [pc, #48]	; (800d2bc <I2Cx_ITConfig+0x8c>)
 800d28c:	613b      	str	r3, [r7, #16]
            HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d28e:	f107 030c 	add.w	r3, r7, #12
 800d292:	4619      	mov	r1, r3
 800d294:	480a      	ldr	r0, [pc, #40]	; (800d2c0 <I2Cx_ITConfig+0x90>)
 800d296:	f7f5 fd35 	bl	8002d04 <HAL_GPIO_Init>

            /* Enable and set GPIO EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(EXTI9_5_IRQn), 0x0F, 0x0F);
 800d29a:	220f      	movs	r2, #15
 800d29c:	210f      	movs	r1, #15
 800d29e:	2017      	movs	r0, #23
 800d2a0:	f7f5 f8c2 	bl	8002428 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI9_5_IRQn));
 800d2a4:	2017      	movs	r0, #23
 800d2a6:	f7f5 f8db 	bl	8002460 <HAL_NVIC_EnableIRQ>
        }
    }
 800d2aa:	bf00      	nop
 800d2ac:	3720      	adds	r7, #32
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20004ee4 	.word	0x20004ee4
 800d2b8:	40023800 	.word	0x40023800
 800d2bc:	10210000 	.word	0x10210000
 800d2c0:	40022000 	.word	0x40022000

0800d2c4 <I2Cx_Write>:
      * @param  Reg: Register address
      * @param  Value: Data to be written
      * @retval None
      */
    static void I2Cx_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af04      	add	r7, sp, #16
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	71fb      	strb	r3, [r7, #7]
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	71bb      	strb	r3, [r7, #6]
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	717b      	strb	r3, [r7, #5]
        HAL_StatusTypeDef status = HAL_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	73fb      	strb	r3, [r7, #15]

        status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100);
 800d2da:	79fb      	ldrb	r3, [r7, #7]
 800d2dc:	b299      	uxth	r1, r3
 800d2de:	79bb      	ldrb	r3, [r7, #6]
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	2364      	movs	r3, #100	; 0x64
 800d2e4:	9302      	str	r3, [sp, #8]
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	9301      	str	r3, [sp, #4]
 800d2ea:	1d7b      	adds	r3, r7, #5
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	4807      	ldr	r0, [pc, #28]	; (800d310 <I2Cx_Write+0x4c>)
 800d2f2:	f7f6 fb63 	bl	80039bc <HAL_I2C_Mem_Write>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	73fb      	strb	r3, [r7, #15]

        /* Check the communication status */
        if (status != HAL_OK)
 800d2fa:	7bfb      	ldrb	r3, [r7, #15]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d003      	beq.n	800d308 <I2Cx_Write+0x44>
        {
            /* Execute user timeout callback */
            I2Cx_Error(Addr);
 800d300:	79fb      	ldrb	r3, [r7, #7]
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff ff82 	bl	800d20c <I2Cx_Error>
        }
    }
 800d308:	bf00      	nop
 800d30a:	3710      	adds	r7, #16
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	200061c0 	.word	0x200061c0

0800d314 <I2Cx_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Register address
      * @retval Read data
      */
    static uint8_t I2Cx_Read(uint8_t Addr, uint8_t Reg)
    {
 800d314:	b580      	push	{r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af04      	add	r7, sp, #16
 800d31a:	4603      	mov	r3, r0
 800d31c:	460a      	mov	r2, r1
 800d31e:	71fb      	strb	r3, [r7, #7]
 800d320:	4613      	mov	r3, r2
 800d322:	71bb      	strb	r3, [r7, #6]
        HAL_StatusTypeDef status = HAL_OK;
 800d324:	2300      	movs	r3, #0
 800d326:	73fb      	strb	r3, [r7, #15]
        uint8_t Value = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	73bb      	strb	r3, [r7, #14]

        status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 800d32c:	79fb      	ldrb	r3, [r7, #7]
 800d32e:	b299      	uxth	r1, r3
 800d330:	79bb      	ldrb	r3, [r7, #6]
 800d332:	b29a      	uxth	r2, r3
 800d334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d338:	9302      	str	r3, [sp, #8]
 800d33a:	2301      	movs	r3, #1
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	f107 030e 	add.w	r3, r7, #14
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	2301      	movs	r3, #1
 800d346:	4808      	ldr	r0, [pc, #32]	; (800d368 <I2Cx_Read+0x54>)
 800d348:	f7f6 fc32 	bl	8003bb0 <HAL_I2C_Mem_Read>
 800d34c:	4603      	mov	r3, r0
 800d34e:	73fb      	strb	r3, [r7, #15]

        /* Check the communication status */
        if (status != HAL_OK)
 800d350:	7bfb      	ldrb	r3, [r7, #15]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <I2Cx_Read+0x4a>
        {
            /* Execute user timeout callback */
            I2Cx_Error(Addr);
 800d356:	79fb      	ldrb	r3, [r7, #7]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7ff ff57 	bl	800d20c <I2Cx_Error>
        }
        return Value;
 800d35e:	7bbb      	ldrb	r3, [r7, #14]
    }
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	200061c0 	.word	0x200061c0

0800d36c <I2Cx_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    static HAL_StatusTypeDef I2Cx_ReadMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t* Buffer, uint16_t Length)
    {
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b08a      	sub	sp, #40	; 0x28
 800d370:	af04      	add	r7, sp, #16
 800d372:	607b      	str	r3, [r7, #4]
 800d374:	4603      	mov	r3, r0
 800d376:	73fb      	strb	r3, [r7, #15]
 800d378:	460b      	mov	r3, r1
 800d37a:	81bb      	strh	r3, [r7, #12]
 800d37c:	4613      	mov	r3, r2
 800d37e:	817b      	strh	r3, [r7, #10]
        HAL_StatusTypeDef status = HAL_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	75fb      	strb	r3, [r7, #23]

        if (Addr == EXC7200_I2C_ADDRESS)
 800d384:	7bfb      	ldrb	r3, [r7, #15]
 800d386:	2b08      	cmp	r3, #8
 800d388:	d10d      	bne.n	800d3a6 <I2Cx_ReadMultiple+0x3a>
        {
            status = HAL_I2C_Master_Receive(&hi2c1, Addr, Buffer, Length, 1000);
 800d38a:	7bfb      	ldrb	r3, [r7, #15]
 800d38c:	b299      	uxth	r1, r3
 800d38e:	8c3a      	ldrh	r2, [r7, #32]
 800d390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	4613      	mov	r3, r2
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	4811      	ldr	r0, [pc, #68]	; (800d3e0 <I2Cx_ReadMultiple+0x74>)
 800d39c:	f7f6 f8e8 	bl	8003570 <HAL_I2C_Master_Receive>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	75fb      	strb	r3, [r7, #23]
 800d3a4:	e010      	b.n	800d3c8 <I2Cx_ReadMultiple+0x5c>
        }
        else
        {
            status = HAL_I2C_Mem_Read(&hi2c1, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	b299      	uxth	r1, r3
 800d3aa:	8978      	ldrh	r0, [r7, #10]
 800d3ac:	89ba      	ldrh	r2, [r7, #12]
 800d3ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d3b2:	9302      	str	r3, [sp, #8]
 800d3b4:	8c3b      	ldrh	r3, [r7, #32]
 800d3b6:	9301      	str	r3, [sp, #4]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	9300      	str	r3, [sp, #0]
 800d3bc:	4603      	mov	r3, r0
 800d3be:	4808      	ldr	r0, [pc, #32]	; (800d3e0 <I2Cx_ReadMultiple+0x74>)
 800d3c0:	f7f6 fbf6 	bl	8003bb0 <HAL_I2C_Mem_Read>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	75fb      	strb	r3, [r7, #23]
        }

        /* Check the communication status */
        if (status != HAL_OK)
 800d3c8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <I2Cx_ReadMultiple+0x6a>
        {
            /* I2C error occured */
            I2Cx_Error(Addr);
 800d3ce:	7bfb      	ldrb	r3, [r7, #15]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff ff1b 	bl	800d20c <I2Cx_Error>
        }
        return status;
 800d3d6:	7dfb      	ldrb	r3, [r7, #23]
    }
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3718      	adds	r7, #24
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	200061c0 	.word	0x200061c0

0800d3e4 <I2Cx_WriteMultiple>:
      * @param  pBuffer: The target register value to be written
      * @param  Length: buffer size to be written
      * @retval HAL status
      */
    static HAL_StatusTypeDef I2Cx_WriteMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t* Buffer, uint16_t Length)
    {
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b08a      	sub	sp, #40	; 0x28
 800d3e8:	af04      	add	r7, sp, #16
 800d3ea:	607b      	str	r3, [r7, #4]
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	81bb      	strh	r3, [r7, #12]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	817b      	strh	r3, [r7, #10]
        HAL_StatusTypeDef status = HAL_OK;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	75fb      	strb	r3, [r7, #23]

        status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
 800d3fe:	b299      	uxth	r1, r3
 800d400:	8978      	ldrh	r0, [r7, #10]
 800d402:	89ba      	ldrh	r2, [r7, #12]
 800d404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d408:	9302      	str	r3, [sp, #8]
 800d40a:	8c3b      	ldrh	r3, [r7, #32]
 800d40c:	9301      	str	r3, [sp, #4]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	4603      	mov	r3, r0
 800d414:	4808      	ldr	r0, [pc, #32]	; (800d438 <I2Cx_WriteMultiple+0x54>)
 800d416:	f7f6 fad1 	bl	80039bc <HAL_I2C_Mem_Write>
 800d41a:	4603      	mov	r3, r0
 800d41c:	75fb      	strb	r3, [r7, #23]

        /* Check the communication status */
        if (status != HAL_OK)
 800d41e:	7dfb      	ldrb	r3, [r7, #23]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d003      	beq.n	800d42c <I2Cx_WriteMultiple+0x48>
        {
            /* Re-Initialize the I2C Bus */
            I2Cx_Error(Addr);
 800d424:	7bfb      	ldrb	r3, [r7, #15]
 800d426:	4618      	mov	r0, r3
 800d428:	f7ff fef0 	bl	800d20c <I2Cx_Error>
        }
        return status;
 800d42c:	7dfb      	ldrb	r3, [r7, #23]
    }
 800d42e:	4618      	mov	r0, r3
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	200061c0 	.word	0x200061c0

0800d43c <IOE_Init>:
      * @brief  Initializes IOE low level.
      * @param  None
      * @retval None
      */
    void IOE_Init(void)
    {
 800d43c:	b480      	push	{r7}
 800d43e:	af00      	add	r7, sp, #0
        //Dummy
    }
 800d440:	bf00      	nop
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr

0800d44a <IOE_ITConfig>:
      * @brief  Configures IOE low level interrupt.
      * @param  None
      * @retval None
      */
    void IOE_ITConfig(void)
    {
 800d44a:	b580      	push	{r7, lr}
 800d44c:	af00      	add	r7, sp, #0
        I2Cx_ITConfig();
 800d44e:	f7ff feef 	bl	800d230 <I2Cx_ITConfig>
    }
 800d452:	bf00      	nop
 800d454:	bd80      	pop	{r7, pc}

0800d456 <IOE_Write>:
      * @param  Reg: Register address
      * @param  Value: Data to be written
      * @retval None
      */
    void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 800d456:	b580      	push	{r7, lr}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	4603      	mov	r3, r0
 800d45e:	71fb      	strb	r3, [r7, #7]
 800d460:	460b      	mov	r3, r1
 800d462:	71bb      	strb	r3, [r7, #6]
 800d464:	4613      	mov	r3, r2
 800d466:	717b      	strb	r3, [r7, #5]
        I2Cx_Write(Addr, Reg, Value);
 800d468:	797a      	ldrb	r2, [r7, #5]
 800d46a:	79b9      	ldrb	r1, [r7, #6]
 800d46c:	79fb      	ldrb	r3, [r7, #7]
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff ff28 	bl	800d2c4 <I2Cx_Write>
    }
 800d474:	bf00      	nop
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <IOE_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Register address
      * @retval Read data
      */
    uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
    {
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	4603      	mov	r3, r0
 800d484:	460a      	mov	r2, r1
 800d486:	71fb      	strb	r3, [r7, #7]
 800d488:	4613      	mov	r3, r2
 800d48a:	71bb      	strb	r3, [r7, #6]
        return I2Cx_Read(Addr, Reg);
 800d48c:	79ba      	ldrb	r2, [r7, #6]
 800d48e:	79fb      	ldrb	r3, [r7, #7]
 800d490:	4611      	mov	r1, r2
 800d492:	4618      	mov	r0, r3
 800d494:	f7ff ff3e 	bl	800d314 <I2Cx_Read>
 800d498:	4603      	mov	r3, r0
    }
 800d49a:	4618      	mov	r0, r3
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <IOE_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b084      	sub	sp, #16
 800d4a6:	af02      	add	r7, sp, #8
 800d4a8:	603a      	str	r2, [r7, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	71fb      	strb	r3, [r7, #7]
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	71bb      	strb	r3, [r7, #6]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	80bb      	strh	r3, [r7, #4]
        return I2Cx_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800d4b8:	79bb      	ldrb	r3, [r7, #6]
 800d4ba:	b299      	uxth	r1, r3
 800d4bc:	79f8      	ldrb	r0, [r7, #7]
 800d4be:	88bb      	ldrh	r3, [r7, #4]
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f7ff ff51 	bl	800d36c <I2Cx_ReadMultiple>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	b29b      	uxth	r3, r3
    }
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <IOE_WriteMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval None
      */
    void IOE_WriteMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b084      	sub	sp, #16
 800d4da:	af02      	add	r7, sp, #8
 800d4dc:	603a      	str	r2, [r7, #0]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	71fb      	strb	r3, [r7, #7]
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	71bb      	strb	r3, [r7, #6]
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	80bb      	strh	r3, [r7, #4]
        I2Cx_WriteMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800d4ec:	79bb      	ldrb	r3, [r7, #6]
 800d4ee:	b299      	uxth	r1, r3
 800d4f0:	79f8      	ldrb	r0, [r7, #7]
 800d4f2:	88bb      	ldrh	r3, [r7, #4]
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	f7ff ff73 	bl	800d3e4 <I2Cx_WriteMultiple>
    }
 800d4fe:	bf00      	nop
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <IOE_Delay>:
      * @brief  IOE delay
      * @param  Delay: Delay in ms
      * @retval None
      */
    void IOE_Delay(uint32_t Delay)
    {
 800d506:	b580      	push	{r7, lr}
 800d508:	b082      	sub	sp, #8
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
        HAL_Delay(Delay);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7f4 fe8e 	bl	8002230 <HAL_Delay>
    }
 800d514:	bf00      	nop
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	4a05      	ldr	r2, [pc, #20]	; (800d53c <_ZN20STM32TouchControllerD1Ev+0x20>)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	601a      	str	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff fcc5 	bl	800cebc <_ZN8touchgfx15TouchControllerD1Ev>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	0801d718 	.word	0x0801d718

0800d540 <_ZN20STM32TouchControllerD0Ev>:
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7ff ffe7 	bl	800d51c <_ZN20STM32TouchControllerD1Ev>
 800d54e:	2108      	movs	r1, #8
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f00e f9f3 	bl	801b93c <_ZdlPvj>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4618      	mov	r0, r3
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
 800d566:	4603      	mov	r3, r0
 800d568:	71fb      	strb	r3, [r7, #7]

}
 800d56a:	bf00      	nop
 800d56c:	370c      	adds	r7, #12
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr

0800d576 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800d576:	b480      	push	{r7}
 800d578:	b083      	sub	sp, #12
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	4603      	mov	r3, r0
 800d57e:	71fb      	strb	r3, [r7, #7]

}
 800d580:	bf00      	nop
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	4603      	mov	r3, r0
 800d594:	71fb      	strb	r3, [r7, #7]

}
 800d596:	bf00      	nop
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
	...

0800d5a4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
    {
 800d5ac:	4a04      	ldr	r2, [pc, #16]	; (800d5c0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	601a      	str	r2, [r3, #0]
    }
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	0801e134 	.word	0x0801e134

0800d5c4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
    }
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7ff ffe9 	bl	800d5a4 <_ZN8touchgfx3HALD1Ev>
 800d5d2:	2178      	movs	r1, #120	; 0x78
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f00e f9b1 	bl	801b93c <_ZdlPvj>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	78fa      	ldrb	r2, [r7, #3]
 800d5f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800d600:	bf00      	nop
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     * Function for obtaining the blit capabilities of the concrete HAL implementation. As
     * default, will return whatever blitcaps are reported by the associated DMA object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	685a      	ldr	r2, [r3, #4]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4610      	mov	r0, r2
 800d622:	4798      	blx	r3
 800d624:	4603      	mov	r3, r0
    }
 800d626:	4618      	mov	r0, r3
 800d628:	3708      	adds	r7, #8
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800d62e:	b580      	push	{r7, lr}
 800d630:	b082      	sub	sp, #8
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f002 fd52 	bl	80100e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3390      	adds	r3, #144	; 0x90
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	4798      	blx	r3
    }
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
    {
        return false;
 800d65a:	2300      	movs	r3, #0
    }
 800d65c:	4618      	mov	r0, r3
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation
     *                                 storage.
     *
     * @deprecated Use HAL::setFrameBufferStartAddresses(void*,void*,void*).
     */
    TOUCHGFX_DEPRECATED(
 800d668:	b590      	push	{r4, r7, lr}
 800d66a:	b08b      	sub	sp, #44	; 0x2c
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	4611      	mov	r1, r2
 800d674:	461a      	mov	r2, r3
 800d676:	460b      	mov	r3, r1
 800d678:	80fb      	strh	r3, [r7, #6]
 800d67a:	4613      	mov	r3, r2
 800d67c:	717b      	strb	r3, [r7, #5]
        "Use HAL::setFrameBufferStartAddresses(void*,void*,void*).",
        virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true))
    {
        uint16_t stride = lcd().framebufferStride();
 800d67e:	f7fd fd79 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800d682:	4602      	mov	r2, r0
 800d684:	6813      	ldr	r3, [r2, #0]
 800d686:	3324      	adds	r3, #36	; 0x24
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4610      	mov	r0, r2
 800d68c:	4798      	blx	r3
 800d68e:	4603      	mov	r3, r0
 800d690:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 800d692:	8b7b      	ldrh	r3, [r7, #26]
 800d694:	4a3d      	ldr	r2, [pc, #244]	; (800d78c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 800d696:	8812      	ldrh	r2, [r2, #0]
 800d698:	fb02 f303 	mul.w	r3, r2, r3
 800d69c:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 800d6aa:	797b      	ldrb	r3, [r7, #5]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d005      	beq.n	800d6bc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 800d6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 800d6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ba:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 800d6bc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d005      	beq.n	800d6d0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 800d6c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 800d6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ce:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 800d6d0:	88fb      	ldrh	r3, [r7, #6]
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	2b1f      	cmp	r3, #31
 800d6d6:	d84d      	bhi.n	800d774 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 800d6d8:	a201      	add	r2, pc, #4	; (adr r2, 800d6e0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 800d6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6de:	bf00      	nop
 800d6e0:	0800d761 	.word	0x0800d761
 800d6e4:	0800d761 	.word	0x0800d761
 800d6e8:	0800d775 	.word	0x0800d775
 800d6ec:	0800d761 	.word	0x0800d761
 800d6f0:	0800d775 	.word	0x0800d775
 800d6f4:	0800d775 	.word	0x0800d775
 800d6f8:	0800d775 	.word	0x0800d775
 800d6fc:	0800d761 	.word	0x0800d761
 800d700:	0800d775 	.word	0x0800d775
 800d704:	0800d775 	.word	0x0800d775
 800d708:	0800d775 	.word	0x0800d775
 800d70c:	0800d775 	.word	0x0800d775
 800d710:	0800d775 	.word	0x0800d775
 800d714:	0800d775 	.word	0x0800d775
 800d718:	0800d775 	.word	0x0800d775
 800d71c:	0800d761 	.word	0x0800d761
 800d720:	0800d775 	.word	0x0800d775
 800d724:	0800d775 	.word	0x0800d775
 800d728:	0800d775 	.word	0x0800d775
 800d72c:	0800d775 	.word	0x0800d775
 800d730:	0800d775 	.word	0x0800d775
 800d734:	0800d775 	.word	0x0800d775
 800d738:	0800d775 	.word	0x0800d775
 800d73c:	0800d761 	.word	0x0800d761
 800d740:	0800d775 	.word	0x0800d775
 800d744:	0800d775 	.word	0x0800d775
 800d748:	0800d775 	.word	0x0800d775
 800d74c:	0800d775 	.word	0x0800d775
 800d750:	0800d775 	.word	0x0800d775
 800d754:	0800d775 	.word	0x0800d775
 800d758:	0800d775 	.word	0x0800d775
 800d75c:	0800d761 	.word	0x0800d761
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3374      	adds	r3, #116	; 0x74
 800d766:	681c      	ldr	r4, [r3, #0]
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	6a3a      	ldr	r2, [r7, #32]
 800d76c:	68b9      	ldr	r1, [r7, #8]
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	47a0      	blx	r4
            break;
 800d772:	e006      	b.n	800d782 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 800d774:	4b06      	ldr	r3, [pc, #24]	; (800d790 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 800d776:	4a07      	ldr	r2, [pc, #28]	; (800d794 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 800d778:	f240 216f 	movw	r1, #623	; 0x26f
 800d77c:	4806      	ldr	r0, [pc, #24]	; (800d798 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 800d77e:	f00e f909 	bl	801b994 <__assert_func>
            break;
        }
    }
 800d782:	bf00      	nop
 800d784:	372c      	adds	r7, #44	; 0x2c
 800d786:	46bd      	mov	sp, r7
 800d788:	bd90      	pop	{r4, r7, pc}
 800d78a:	bf00      	nop
 800d78c:	20005f20 	.word	0x20005f20
 800d790:	0801cdd4 	.word	0x0801cdd4
 800d794:	0801d844 	.word	0x0801d844
 800d798:	0801cdf4 	.word	0x0801cdf4

0800d79c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
 800d7a8:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d106      	bne.n	800d7be <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800d7b0:	4b11      	ldr	r3, [pc, #68]	; (800d7f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800d7b2:	4a12      	ldr	r2, [pc, #72]	; (800d7fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800d7b4:	f240 2182 	movw	r1, #642	; 0x282
 800d7b8:	4811      	ldr	r0, [pc, #68]	; (800d800 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800d7ba:	f00e f8eb 	bl	801b994 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	68ba      	ldr	r2, [r7, #8]
 800d7c2:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	bf14      	ite	ne
 800d7d6:	2301      	movne	r3, #1
 800d7d8:	2300      	moveq	r3, #0
 800d7da:	b2da      	uxtb	r2, r3
 800d7dc:	4b09      	ldr	r3, [pc, #36]	; (800d804 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800d7de:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	bf14      	ite	ne
 800d7e6:	2301      	movne	r3, #1
 800d7e8:	2300      	moveq	r3, #0
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	4b06      	ldr	r3, [pc, #24]	; (800d808 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800d7ee:	701a      	strb	r2, [r3, #0]
    }
 800d7f0:	bf00      	nop
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	0801ce38 	.word	0x0801ce38
 800d7fc:	0801d7f4 	.word	0x0801d7f4
 800d800:	0801cdf4 	.word	0x0801cdf4
 800d804:	20005f22 	.word	0x20005f22
 800d808:	20005f23 	.word	0x20005f23

0800d80c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	460b      	mov	r3, r1
 800d816:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d004      	beq.n	800d82a <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d824:	887a      	ldrh	r2, [r7, #2]
 800d826:	4610      	mov	r0, r2
 800d828:	4798      	blx	r3
        }
    }
 800d82a:	bf00      	nop
 800d82c:	3708      	adds	r7, #8
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800d832:	b480      	push	{r7}
 800d834:	b083      	sub	sp, #12
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800d83a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800d83e:	4618      	mov	r0, r3
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b082      	sub	sp, #8
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	685a      	ldr	r2, [r3, #4]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	3318      	adds	r3, #24
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4610      	mov	r0, r2
 800d862:	4798      	blx	r3
 800d864:	4603      	mov	r3, r0
    }
 800d866:	4618      	mov	r0, r3
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d884:	429a      	cmp	r2, r3
 800d886:	d017      	beq.n	800d8b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 800d888:	4b1a      	ldr	r3, [pc, #104]	; (800d8f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d12a      	bne.n	800d8e6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800d890:	4b19      	ldr	r3, [pc, #100]	; (800d8f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800d892:	881a      	ldrh	r2, [r3, #0]
 800d894:	4b19      	ldr	r3, [pc, #100]	; (800d8fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800d896:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800d898:	4b19      	ldr	r3, [pc, #100]	; (800d900 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800d89a:	881a      	ldrh	r2, [r3, #0]
 800d89c:	4b19      	ldr	r3, [pc, #100]	; (800d904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800d89e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800d8a0:	4b16      	ldr	r3, [pc, #88]	; (800d8fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800d8a2:	881a      	ldrh	r2, [r3, #0]
 800d8a4:	4b16      	ldr	r3, [pc, #88]	; (800d900 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800d8a6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800d8a8:	4b16      	ldr	r3, [pc, #88]	; (800d904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800d8aa:	881a      	ldrh	r2, [r3, #0]
 800d8ac:	4b12      	ldr	r3, [pc, #72]	; (800d8f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800d8ae:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800d8b0:	4b10      	ldr	r3, [pc, #64]	; (800d8f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800d8b6:	e016      	b.n	800d8e6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800d8b8:	4b0e      	ldr	r3, [pc, #56]	; (800d8f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d012      	beq.n	800d8e6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800d8c0:	4b0f      	ldr	r3, [pc, #60]	; (800d900 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800d8c2:	881a      	ldrh	r2, [r3, #0]
 800d8c4:	4b0d      	ldr	r3, [pc, #52]	; (800d8fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800d8c6:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800d8c8:	4b0b      	ldr	r3, [pc, #44]	; (800d8f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800d8ca:	881a      	ldrh	r2, [r3, #0]
 800d8cc:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800d8ce:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800d8d0:	4b0c      	ldr	r3, [pc, #48]	; (800d904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800d8d2:	881a      	ldrh	r2, [r3, #0]
 800d8d4:	4b0a      	ldr	r3, [pc, #40]	; (800d900 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800d8d6:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800d8d8:	4b08      	ldr	r3, [pc, #32]	; (800d8fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800d8da:	881a      	ldrh	r2, [r3, #0]
 800d8dc:	4b06      	ldr	r3, [pc, #24]	; (800d8f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800d8de:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800d8e0:	4b04      	ldr	r3, [pc, #16]	; (800d8f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	701a      	strb	r2, [r3, #0]
    }
 800d8e6:	bf00      	nop
 800d8e8:	370c      	adds	r7, #12
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	20005f1c 	.word	0x20005f1c
 800d8f8:	20005f18 	.word	0x20005f18
 800d8fc:	20005f1e 	.word	0x20005f1e
 800d900:	20005f1a 	.word	0x20005f1a
 800d904:	20005f20 	.word	0x20005f20

0800d908 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	4618      	mov	r0, r3
 800d914:	f001 fe66 	bl	800f5e4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800d918:	bf00      	nop
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	4a05      	ldr	r2, [pc, #20]	; (800d940 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4618      	mov	r0, r3
 800d932:	f7ff fe37 	bl	800d5a4 <_ZN8touchgfx3HALD1Ev>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4618      	mov	r0, r3
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	0801db20 	.word	0x0801db20

0800d944 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f7ff ffe7 	bl	800d920 <_ZN20TouchGFXGeneratedHALD1Ev>
 800d952:	2178      	movs	r1, #120	; 0x78
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f00d fff1 	bl	801b93c <_ZdlPvj>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4618      	mov	r0, r3
 800d970:	f7ff ffca 	bl	800d908 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f4xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4618      	mov	r0, r3
 800d988:	f001 fad2 	bl	800ef30 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800d98c:	bf00      	nop
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f001 fb48 	bl	800f034 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800d9a4:	4603      	mov	r3, r0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3708      	adds	r7, #8
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b082      	sub	sp, #8
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
 800d9b6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6839      	ldr	r1, [r7, #0]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f001 fb47 	bl	800f050 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800d9c2:	bf00      	nop
 800d9c4:	3708      	adds	r7, #8
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6839      	ldr	r1, [r7, #0]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f001 fb4f 	bl	800f07c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800d9de:	bf00      	nop
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	60f8      	str	r0, [r7, #12]
 800d9ee:	60b9      	str	r1, [r7, #8]
 800d9f0:	607a      	str	r2, [r7, #4]
 800d9f2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	68b9      	ldr	r1, [r7, #8]
 800d9fc:	f001 ff2d 	bl	800f85a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800da00:	4603      	mov	r3, r0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}

0800da0a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b082      	sub	sp, #8
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	4618      	mov	r0, r3
 800da16:	f001 fab3 	bl	800ef80 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800da1a:	bf00      	nop
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b082      	sub	sp, #8
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f001 fab7 	bl	800efa0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800da32:	bf00      	nop
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b082      	sub	sp, #8
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4618      	mov	r0, r3
 800da46:	f001 fab9 	bl	800efbc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800da4a:	bf00      	nop
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b082      	sub	sp, #8
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f001 fabb 	bl	800efd8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800da62:	bf00      	nop
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
	...

0800da6c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	4a05      	ldr	r2, [pc, #20]	; (800da8c <_ZN11TouchGFXHALD1Ev+0x20>)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	601a      	str	r2, [r3, #0]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff ff4f 	bl	800d920 <_ZN20TouchGFXGeneratedHALD1Ev>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4618      	mov	r0, r3
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	0801d748 	.word	0x0801d748

0800da90 <_ZN11TouchGFXHALD0Ev>:
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f7ff ffe7 	bl	800da6c <_ZN11TouchGFXHALD1Ev>
 800da9e:	2178      	movs	r1, #120	; 0x78
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f00d ff4b 	bl	801b93c <_ZdlPvj>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4618      	mov	r0, r3
 800daaa:	3708      	adds	r7, #8
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800dab4:	2200      	movs	r2, #0
 800dab6:	2101      	movs	r1, #1
 800dab8:	2001      	movs	r0, #1
 800daba:	f7f9 fd85 	bl	80075c8 <osSemaphoreNew>
 800dabe:	4602      	mov	r2, r0
 800dac0:	4b09      	ldr	r3, [pc, #36]	; (800dae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800dac2:	601a      	str	r2, [r3, #0]
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever); // take the lock
 800dac4:	4b08      	ldr	r3, [pc, #32]	; (800dae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f04f 31ff 	mov.w	r1, #4294967295
 800dacc:	4618      	mov	r0, r3
 800dace:	f7f9 fe19 	bl	8007704 <osSemaphoreAcquire>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800dad2:	2200      	movs	r2, #0
 800dad4:	2104      	movs	r1, #4
 800dad6:	2001      	movs	r0, #1
 800dad8:	f7f9 fed2 	bl	8007880 <osMessageQueueNew>
 800dadc:	4602      	mov	r2, r0
 800dade:	4b03      	ldr	r3, [pc, #12]	; (800daec <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 800dae0:	601a      	str	r2, [r3, #0]
}
 800dae2:	bf00      	nop
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	20004ee8 	.word	0x20004ee8
 800daec:	20004eec 	.word	0x20004eec

0800daf0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800daf4:	4b09      	ldr	r3, [pc, #36]	; (800db1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d105      	bne.n	800db08 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 800dafc:	4b08      	ldr	r3, [pc, #32]	; (800db20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 800dafe:	4a09      	ldr	r2, [pc, #36]	; (800db24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 800db00:	2131      	movs	r1, #49	; 0x31
 800db02:	4809      	ldr	r0, [pc, #36]	; (800db28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 800db04:	f00d ff46 	bl	801b994 <__assert_func>
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800db08:	4b04      	ldr	r3, [pc, #16]	; (800db1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f04f 31ff 	mov.w	r1, #4294967295
 800db10:	4618      	mov	r0, r3
 800db12:	f7f9 fdf7 	bl	8007704 <osSemaphoreAcquire>
}
 800db16:	bf00      	nop
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	20004ee8 	.word	0x20004ee8
 800db20:	0801ce70 	.word	0x0801ce70
 800db24:	0801d898 	.word	0x0801d898
 800db28:	0801ce84 	.word	0x0801ce84

0800db2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800db30:	4b08      	ldr	r3, [pc, #32]	; (800db54 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d105      	bne.n	800db44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>
 800db38:	4b07      	ldr	r3, [pc, #28]	; (800db58 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2c>)
 800db3a:	4a08      	ldr	r2, [pc, #32]	; (800db5c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x30>)
 800db3c:	213a      	movs	r1, #58	; 0x3a
 800db3e:	4808      	ldr	r0, [pc, #32]	; (800db60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 800db40:	f00d ff28 	bl	801b994 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 800db44:	4b03      	ldr	r3, [pc, #12]	; (800db54 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4618      	mov	r0, r3
 800db4a:	f7f9 fe41 	bl	80077d0 <osSemaphoreRelease>
}
 800db4e:	bf00      	nop
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	20004ee8 	.word	0x20004ee8
 800db58:	0801ce70 	.word	0x0801ce70
 800db5c:	0801d8d8 	.word	0x0801d8d8
 800db60:	0801ce84 	.word	0x0801ce84

0800db64 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800db64:	b580      	push	{r7, lr}
 800db66:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800db68:	4b08      	ldr	r3, [pc, #32]	; (800db8c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d105      	bne.n	800db7c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x18>
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x2c>)
 800db72:	4a08      	ldr	r2, [pc, #32]	; (800db94 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x30>)
 800db74:	2147      	movs	r1, #71	; 0x47
 800db76:	4808      	ldr	r0, [pc, #32]	; (800db98 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x34>)
 800db78:	f00d ff0c 	bl	801b994 <__assert_func>
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800db7c:	4b03      	ldr	r3, [pc, #12]	; (800db8c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2100      	movs	r1, #0
 800db82:	4618      	mov	r0, r3
 800db84:	f7f9 fdbe 	bl	8007704 <osSemaphoreAcquire>
}
 800db88:	bf00      	nop
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	20004ee8 	.word	0x20004ee8
 800db90:	0801ce70 	.word	0x0801ce70
 800db94:	0801d918 	.word	0x0801d918
 800db98:	0801ce84 	.word	0x0801ce84

0800db9c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800dba0:	4b08      	ldr	r3, [pc, #32]	; (800dbc4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d105      	bne.n	800dbb4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x18>
 800dba8:	4b07      	ldr	r3, [pc, #28]	; (800dbc8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2c>)
 800dbaa:	4a08      	ldr	r2, [pc, #32]	; (800dbcc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 800dbac:	2154      	movs	r1, #84	; 0x54
 800dbae:	4808      	ldr	r0, [pc, #32]	; (800dbd0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x34>)
 800dbb0:	f00d fef0 	bl	801b994 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 800dbb4:	4b03      	ldr	r3, [pc, #12]	; (800dbc4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7f9 fe09 	bl	80077d0 <osSemaphoreRelease>
}
 800dbbe:	bf00      	nop
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	20004ee8 	.word	0x20004ee8
 800dbc8:	0801ce70 	.word	0x0801ce70
 800dbcc:	0801d958 	.word	0x0801d958
 800dbd0:	0801ce84 	.word	0x0801ce84

0800dbd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	af00      	add	r7, sp, #0
    if (vsync_queue)
 800dbd8:	4b06      	ldr	r3, [pc, #24]	; (800dbf4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d006      	beq.n	800dbee <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1a>
    {
        osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800dbe0:	4b04      	ldr	r3, [pc, #16]	; (800dbf4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 800dbe2:	6818      	ldr	r0, [r3, #0]
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	4903      	ldr	r1, [pc, #12]	; (800dbf8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 800dbea:	f7f9 fecf 	bl	800798c <osMessageQueuePut>
    }
}
 800dbee:	bf00      	nop
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20004eec 	.word	0x20004eec
 800dbf8:	2000008c 	.word	0x2000008c

0800dbfc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
    if (vsync_queue)
 800dc02:	4b0b      	ldr	r3, [pc, #44]	; (800dc30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d00e      	beq.n	800dc28 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
      uint32_t dummyGet;
      // First make sure the queue is empty, by trying to remove an element with 0 timeout.
      osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800dc0a:	4b09      	ldr	r3, [pc, #36]	; (800dc30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800dc0c:	6818      	ldr	r0, [r3, #0]
 800dc0e:	1d39      	adds	r1, r7, #4
 800dc10:	2300      	movs	r3, #0
 800dc12:	2200      	movs	r2, #0
 800dc14:	f7f9 ff2e 	bl	8007a74 <osMessageQueueGet>

      // Then, wait for next VSYNC to occur.
      osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800dc1a:	6818      	ldr	r0, [r3, #0]
 800dc1c:	1d39      	adds	r1, r7, #4
 800dc1e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc22:	2200      	movs	r2, #0
 800dc24:	f7f9 ff26 	bl	8007a74 <osMessageQueueGet>
    }
}
 800dc28:	bf00      	nop
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20004eec 	.word	0x20004eec

0800dc34 <__NVIC_EnableIRQ>:
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dc3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	db0d      	blt.n	800dc62 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dc46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	f003 021f 	and.w	r2, r3, #31
 800dc50:	4907      	ldr	r1, [pc, #28]	; (800dc70 <__NVIC_EnableIRQ+0x3c>)
 800dc52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc56:	095b      	lsrs	r3, r3, #5
 800dc58:	2001      	movs	r0, #1
 800dc5a:	fa00 f202 	lsl.w	r2, r0, r2
 800dc5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800dc62:	bf00      	nop
 800dc64:	370c      	adds	r7, #12
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	e000e100 	.word	0xe000e100

0800dc74 <__NVIC_DisableIRQ>:
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dc7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	db12      	blt.n	800dcac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dc86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	f003 021f 	and.w	r2, r3, #31
 800dc90:	4909      	ldr	r1, [pc, #36]	; (800dcb8 <__NVIC_DisableIRQ+0x44>)
 800dc92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc96:	095b      	lsrs	r3, r3, #5
 800dc98:	2001      	movs	r0, #1
 800dc9a:	fa00 f202 	lsl.w	r2, r0, r2
 800dc9e:	3320      	adds	r3, #32
 800dca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800dca4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dca8:	f3bf 8f6f 	isb	sy
}
 800dcac:	bf00      	nop
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr
 800dcb8:	e000e100 	.word	0xe000e100

0800dcbc <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
        : color(0)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	601a      	str	r2, [r3, #0]
    }
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4618      	mov	r0, r3
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
        return color;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
    }
 800dce4:	4618      	mov	r0, r3
 800dce6:	370c      	adds	r7, #12
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
    {
 800dcf8:	4a04      	ldr	r2, [pc, #16]	; (800dd0c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	601a      	str	r2, [r3, #0]
    }
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4618      	mov	r0, r3
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	0801d9f4 	.word	0x0801d9f4

0800dd10 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
    }
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff ffe9 	bl	800dcf0 <_ZN8touchgfx9DMA_QueueD1Ev>
 800dd1e:	2104      	movs	r1, #4
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f00d fe0b 	bl	801b93c <_ZdlPvj>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	3344      	adds	r3, #68	; 0x44
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	4798      	blx	r3
    }
 800dd44:	bf00      	nop
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800dd54:	2300      	movs	r3, #0
    }
 800dd56:	4618      	mov	r0, r3
 800dd58:	370c      	adds	r7, #12
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
	...

0800dd64 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800dd64:	b480      	push	{r7}
 800dd66:	b083      	sub	sp, #12
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
    {
 800dd6c:	4a04      	ldr	r2, [pc, #16]	; (800dd80 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	601a      	str	r2, [r3, #0]
    }
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4618      	mov	r0, r3
 800dd76:	370c      	adds	r7, #12
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr
 800dd80:	0801e578 	.word	0x0801e578

0800dd84 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
    }
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7ff ffe9 	bl	800dd64 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800dd92:	210c      	movs	r1, #12
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f00d fdd1 	bl	801b93c <_ZdlPvj>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800ddae:	4a09      	ldr	r2, [pc, #36]	; (800ddd4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	605a      	str	r2, [r3, #4]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	721a      	strb	r2, [r3, #8]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	725a      	strb	r2, [r3, #9]
    {
    }
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	4618      	mov	r0, r3
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr
 800ddd4:	0801e578 	.word	0x0801e578

0800ddd8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	685a      	ldr	r2, [r3, #4]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3314      	adds	r3, #20
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4610      	mov	r0, r2
 800ddf0:	4798      	blx	r3
    }
 800ddf2:	bf00      	nop
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b082      	sub	sp, #8
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	3328      	adds	r3, #40	; 0x28
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4610      	mov	r0, r2
 800de0e:	4798      	blx	r3
    }
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
 800de24:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	430a      	orrs	r2, r1
 800de38:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de40:	f023 0107 	bic.w	r1, r3, #7
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	430a      	orrs	r2, r1
 800de4c:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800de58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800de5c:	6839      	ldr	r1, [r7, #0]
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	6812      	ldr	r2, [r2, #0]
 800de62:	430b      	orrs	r3, r1
 800de64:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3714      	adds	r7, #20
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 800de7c:	f7fd f96e 	bl	800b15c <_ZN8touchgfx3HAL11getInstanceEv>
 800de80:	4603      	mov	r3, r0
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff ffa8 	bl	800ddd8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 800de88:	bf00      	nop
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
    assert(0);
 800de98:	4b02      	ldr	r3, [pc, #8]	; (800dea4 <DMA2D_XferErrorCallback+0x14>)
 800de9a:	4a03      	ldr	r2, [pc, #12]	; (800dea8 <DMA2D_XferErrorCallback+0x18>)
 800de9c:	2136      	movs	r1, #54	; 0x36
 800de9e:	4803      	ldr	r0, [pc, #12]	; (800deac <DMA2D_XferErrorCallback+0x1c>)
 800dea0:	f00d fd78 	bl	801b994 <__assert_func>
 800dea4:	0801ceb0 	.word	0x0801ceb0
 800dea8:	0801da10 	.word	0x0801da10
 800deac:	0801ceb4 	.word	0x0801ceb4

0800deb0 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	3318      	adds	r3, #24
 800debc:	4618      	mov	r0, r3
 800debe:	f7ff fefd 	bl	800dcbc <_ZN8touchgfx9colortypeC1Ev>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	4618      	mov	r0, r3
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <_ZN10STM32F4DMAC1Ev>:
}

}

STM32F4DMA::STM32F4DMA()
 800decc:	b5b0      	push	{r4, r5, r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	330c      	adds	r3, #12
 800deda:	4619      	mov	r1, r3
 800dedc:	4610      	mov	r0, r2
 800dede:	f7ff ff61 	bl	800dda4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800dee2:	4a0e      	ldr	r2, [pc, #56]	; (800df1c <_ZN10STM32F4DMAC1Ev+0x50>)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	601a      	str	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f103 000c 	add.w	r0, r3, #12
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	3320      	adds	r3, #32
 800def2:	2260      	movs	r2, #96	; 0x60
 800def4:	4619      	mov	r1, r3
 800def6:	f002 fa19 	bl	801032c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	3320      	adds	r3, #32
 800defe:	245f      	movs	r4, #95	; 0x5f
 800df00:	461d      	mov	r5, r3
 800df02:	2c00      	cmp	r4, #0
 800df04:	db05      	blt.n	800df12 <_ZN10STM32F4DMAC1Ev+0x46>
 800df06:	4628      	mov	r0, r5
 800df08:	f7ff ffd2 	bl	800deb0 <_ZN8touchgfx6BlitOpC1Ev>
 800df0c:	3520      	adds	r5, #32
 800df0e:	3c01      	subs	r4, #1
 800df10:	e7f7      	b.n	800df02 <_ZN10STM32F4DMAC1Ev+0x36>
{}
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4618      	mov	r0, r3
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bdb0      	pop	{r4, r5, r7, pc}
 800df1c:	0801d9a4 	.word	0x0801d9a4

0800df20 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	4a0b      	ldr	r2, [pc, #44]	; (800df58 <_ZN10STM32F4DMAD1Ev+0x38>)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 800df2e:	480b      	ldr	r0, [pc, #44]	; (800df5c <_ZN10STM32F4DMAD1Ev+0x3c>)
 800df30:	f7f4 fb3a 	bl	80025a8 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 800df34:	205a      	movs	r0, #90	; 0x5a
 800df36:	f7ff fe9d 	bl	800dc74 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	330c      	adds	r3, #12
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 faa4 	bl	800e48c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	4618      	mov	r0, r3
 800df48:	f7ff ff0c 	bl	800dd64 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	0801d9a4 	.word	0x0801d9a4
 800df5c:	20006358 	.word	0x20006358

0800df60 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
}
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f7ff ffd9 	bl	800df20 <_ZN10STM32F4DMAD1Ev>
 800df6e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f00d fce2 	bl	801b93c <_ZdlPvj>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4618      	mov	r0, r3
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
	...

0800df84 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 800df8c:	4b09      	ldr	r3, [pc, #36]	; (800dfb4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800df8e:	4a0a      	ldr	r2, [pc, #40]	; (800dfb8 <_ZN10STM32F4DMA10initializeEv+0x34>)
 800df90:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 800df92:	4808      	ldr	r0, [pc, #32]	; (800dfb4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800df94:	f7f4 fabe 	bl	8002514 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800df98:	4b06      	ldr	r3, [pc, #24]	; (800dfb4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800df9a:	4a08      	ldr	r2, [pc, #32]	; (800dfbc <_ZN10STM32F4DMA10initializeEv+0x38>)
 800df9c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800df9e:	4b05      	ldr	r3, [pc, #20]	; (800dfb4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800dfa0:	4a07      	ldr	r2, [pc, #28]	; (800dfc0 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 800dfa2:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 800dfa4:	205a      	movs	r0, #90	; 0x5a
 800dfa6:	f7ff fe45 	bl	800dc34 <__NVIC_EnableIRQ>
}
 800dfaa:	bf00      	nop
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	20006358 	.word	0x20006358
 800dfb8:	4002b000 	.word	0x4002b000
 800dfbc:	0800de75 	.word	0x0800de75
 800dfc0:	0800de91 	.word	0x0800de91

0800dfc4 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 800dfcc:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 800dfdc:	b590      	push	{r4, r7, lr}
 800dfde:	b08d      	sub	sp, #52	; 0x34
 800dfe0:	af02      	add	r7, sp, #8
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 800dfe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dfea:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 800dfec:	2300      	movs	r3, #0
 800dfee:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800dff4:	2b20      	cmp	r3, #32
 800dff6:	d007      	beq.n	800e008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b40      	cmp	r3, #64	; 0x40
 800dffe:	d003      	beq.n	800e008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b04      	cmp	r3, #4
 800e006:	d101      	bne.n	800e00c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 800e008:	2301      	movs	r3, #1
 800e00a:	e000      	b.n	800e00e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 800e00c:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800e00e:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 800e014:	2b80      	cmp	r3, #128	; 0x80
 800e016:	d004      	beq.n	800e022 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e020:	d101      	bne.n	800e026 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 800e022:	2301      	movs	r3, #1
 800e024:	e000      	b.n	800e028 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 800e026:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800e028:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 800e02a:	f7fd f8a3 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800e02e:	4602      	mov	r2, r0
 800e030:	6813      	ldr	r3, [r2, #0]
 800e032:	331c      	adds	r3, #28
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4610      	mov	r0, r2
 800e038:	4798      	blx	r3
 800e03a:	4603      	mov	r3, r0
 800e03c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b40      	cmp	r3, #64	; 0x40
 800e044:	d01d      	beq.n	800e082 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800e046:	2b40      	cmp	r3, #64	; 0x40
 800e048:	d804      	bhi.n	800e054 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800e04a:	2b04      	cmp	r3, #4
 800e04c:	d00e      	beq.n	800e06c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800e04e:	2b20      	cmp	r3, #32
 800e050:	d017      	beq.n	800e082 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800e052:	e019      	b.n	800e088 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 800e054:	2b80      	cmp	r3, #128	; 0x80
 800e056:	d003      	beq.n	800e060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 800e058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e05c:	d003      	beq.n	800e066 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 800e05e:	e013      	b.n	800e088 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 800e060:	230a      	movs	r3, #10
 800e062:	623b      	str	r3, [r7, #32]
        break;
 800e064:	e01a      	b.n	800e09c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 800e066:	2309      	movs	r3, #9
 800e068:	623b      	str	r3, [r7, #32]
        break;
 800e06a:	e017      	b.n	800e09c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800e06c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e070:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800e072:	7f7b      	ldrb	r3, [r7, #29]
 800e074:	2b10      	cmp	r3, #16
 800e076:	d101      	bne.n	800e07c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 800e078:	2302      	movs	r3, #2
 800e07a:	e000      	b.n	800e07e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 800e07c:	2301      	movs	r3, #1
 800e07e:	623b      	str	r3, [r7, #32]
        break;
 800e080:	e00c      	b.n	800e09c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 800e082:	2300      	movs	r3, #0
 800e084:	623b      	str	r3, [r7, #32]
        break;
 800e086:	e009      	b.n	800e09c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 800e088:	2300      	movs	r3, #0
 800e08a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800e08c:	7f7b      	ldrb	r3, [r7, #29]
 800e08e:	2b10      	cmp	r3, #16
 800e090:	d101      	bne.n	800e096 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 800e092:	2302      	movs	r3, #2
 800e094:	e000      	b.n	800e098 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 800e096:	2301      	movs	r3, #1
 800e098:	623b      	str	r3, [r7, #32]
        break;
 800e09a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800e09c:	4a75      	ldr	r2, [pc, #468]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a0:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800e0a2:	7f7b      	ldrb	r3, [r7, #29]
 800e0a4:	2b10      	cmp	r3, #16
 800e0a6:	d101      	bne.n	800e0ac <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	e000      	b.n	800e0ae <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	4a71      	ldr	r2, [pc, #452]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e0b0:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	8adb      	ldrh	r3, [r3, #22]
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	8a1b      	ldrh	r3, [r3, #16]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	461a      	mov	r2, r3
 800e0c0:	4b6c      	ldr	r3, [pc, #432]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e0c2:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800e0c4:	7f7b      	ldrb	r3, [r7, #29]
 800e0c6:	2b10      	cmp	r3, #16
 800e0c8:	d101      	bne.n	800e0ce <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 800e0ca:	2202      	movs	r2, #2
 800e0cc:	e000      	b.n	800e0d0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 800e0ce:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	8adb      	ldrh	r3, [r3, #22]
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	8a1b      	ldrh	r3, [r3, #16]
 800e0da:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800e0dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0de:	4865      	ldr	r0, [pc, #404]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e0e0:	f7ff fe9a 	bl	800de18 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800e0e4:	4a63      	ldr	r2, [pc, #396]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e0e6:	6a3b      	ldr	r3, [r7, #32]
 800e0e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	8a9b      	ldrh	r3, [r3, #20]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	8a1b      	ldrh	r3, [r3, #16]
 800e0f4:	1ad3      	subs	r3, r2, r3
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	4b5e      	ldr	r3, [pc, #376]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e0fa:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 800e0fc:	7ffb      	ldrb	r3, [r7, #31]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d103      	bne.n	800e10a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 800e102:	7fbb      	ldrb	r3, [r7, #30]
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 8081 	beq.w	800e20c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	7f1b      	ldrb	r3, [r3, #28]
 800e10e:	2bff      	cmp	r3, #255	; 0xff
 800e110:	d008      	beq.n	800e124 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 800e112:	4b58      	ldr	r3, [pc, #352]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e114:	2202      	movs	r2, #2
 800e116:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	7f1b      	ldrb	r3, [r3, #28]
 800e11c:	461a      	mov	r2, r3
 800e11e:	4b55      	ldr	r3, [pc, #340]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e120:	635a      	str	r2, [r3, #52]	; 0x34
 800e122:	e002      	b.n	800e12a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800e124:	4b53      	ldr	r3, [pc, #332]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e126:	2200      	movs	r2, #0
 800e128:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 800e12a:	7fbb      	ldrb	r3, [r7, #30]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d058      	beq.n	800e1e2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 800e130:	7f7b      	ldrb	r3, [r7, #29]
 800e132:	2b10      	cmp	r3, #16
 800e134:	d14a      	bne.n	800e1cc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	3318      	adds	r3, #24
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff fdcc 	bl	800dcd8 <_ZNK8touchgfx9colortypecvmEv>
 800e140:	4603      	mov	r3, r0
 800e142:	0adb      	lsrs	r3, r3, #11
 800e144:	f003 021f 	and.w	r2, r3, #31
 800e148:	4613      	mov	r3, r2
 800e14a:	021b      	lsls	r3, r3, #8
 800e14c:	1a9a      	subs	r2, r3, r2
 800e14e:	4b4a      	ldr	r3, [pc, #296]	; (800e278 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800e150:	fba3 1302 	umull	r1, r3, r3, r2
 800e154:	1ad2      	subs	r2, r2, r3
 800e156:	0852      	lsrs	r2, r2, #1
 800e158:	4413      	add	r3, r2
 800e15a:	091b      	lsrs	r3, r3, #4
 800e15c:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	3318      	adds	r3, #24
 800e162:	4618      	mov	r0, r3
 800e164:	f7ff fdb8 	bl	800dcd8 <_ZNK8touchgfx9colortypecvmEv>
 800e168:	4603      	mov	r3, r0
 800e16a:	095b      	lsrs	r3, r3, #5
 800e16c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e170:	4613      	mov	r3, r2
 800e172:	021b      	lsls	r3, r3, #8
 800e174:	1a9a      	subs	r2, r3, r2
 800e176:	4b41      	ldr	r3, [pc, #260]	; (800e27c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800e178:	fba3 1302 	umull	r1, r3, r3, r2
 800e17c:	1ad2      	subs	r2, r2, r3
 800e17e:	0852      	lsrs	r2, r2, #1
 800e180:	4413      	add	r3, r2
 800e182:	095b      	lsrs	r3, r3, #5
 800e184:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	3318      	adds	r3, #24
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7ff fda4 	bl	800dcd8 <_ZNK8touchgfx9colortypecvmEv>
 800e190:	4603      	mov	r3, r0
 800e192:	f003 021f 	and.w	r2, r3, #31
 800e196:	4613      	mov	r3, r2
 800e198:	021b      	lsls	r3, r3, #8
 800e19a:	1a9a      	subs	r2, r3, r2
 800e19c:	4b36      	ldr	r3, [pc, #216]	; (800e278 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800e19e:	fba3 1302 	umull	r1, r3, r3, r2
 800e1a2:	1ad2      	subs	r2, r2, r3
 800e1a4:	0852      	lsrs	r2, r2, #1
 800e1a6:	4413      	add	r3, r2
 800e1a8:	091b      	lsrs	r3, r3, #4
 800e1aa:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	7f1b      	ldrb	r3, [r3, #28]
 800e1b0:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	061a      	lsls	r2, r3, #24
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	041b      	lsls	r3, r3, #16
 800e1ba:	431a      	orrs	r2, r3
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	021b      	lsls	r3, r3, #8
 800e1c0:	431a      	orrs	r2, r3
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	4a2b      	ldr	r2, [pc, #172]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e1c8:	6353      	str	r3, [r2, #52]	; 0x34
 800e1ca:	e00a      	b.n	800e1e2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	3318      	adds	r3, #24
 800e1d0:	60bb      	str	r3, [r7, #8]
        return color;
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	7f12      	ldrb	r2, [r2, #28]
 800e1da:	0612      	lsls	r2, r2, #24
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	4a25      	ldr	r2, [pc, #148]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e1e0:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	8adb      	ldrh	r3, [r3, #22]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	8a1b      	ldrh	r3, [r3, #16]
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	4b20      	ldr	r3, [pc, #128]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e1f2:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800e1f4:	7f7b      	ldrb	r3, [r7, #29]
 800e1f6:	2b10      	cmp	r3, #16
 800e1f8:	d101      	bne.n	800e1fe <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	e000      	b.n	800e200 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 800e1fe:	2301      	movs	r3, #1
 800e200:	4a1c      	ldr	r2, [pc, #112]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e202:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800e204:	2100      	movs	r1, #0
 800e206:	481b      	ldr	r0, [pc, #108]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e208:	f7f4 fc4e 	bl	8002aa8 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800e20c:	2101      	movs	r1, #1
 800e20e:	4819      	ldr	r0, [pc, #100]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e210:	f7f4 fc4a 	bl	8002aa8 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 800e214:	7ffb      	ldrb	r3, [r7, #31]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d102      	bne.n	800e220 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 800e21a:	7fbb      	ldrb	r3, [r7, #30]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d015      	beq.n	800e24c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800e224:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800e22a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800e230:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800e236:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800e23c:	9301      	str	r3, [sp, #4]
 800e23e:	9200      	str	r2, [sp, #0]
 800e240:	4623      	mov	r3, r4
 800e242:	4602      	mov	r2, r0
 800e244:	480b      	ldr	r0, [pc, #44]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e246:	f7f4 fa52 	bl	80026ee <HAL_DMA2D_BlendingStart_IT>
 800e24a:	e00f      	b.n	800e26c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 800e250:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 800e256:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 800e25c:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 800e262:	9300      	str	r3, [sp, #0]
 800e264:	4603      	mov	r3, r0
 800e266:	4803      	ldr	r0, [pc, #12]	; (800e274 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800e268:	f7f4 fa0e 	bl	8002688 <HAL_DMA2D_Start_IT>
    }
}
 800e26c:	bf00      	nop
 800e26e:	372c      	adds	r7, #44	; 0x2c
 800e270:	46bd      	mov	sp, r7
 800e272:	bd90      	pop	{r4, r7, pc}
 800e274:	20006358 	.word	0x20006358
 800e278:	08421085 	.word	0x08421085
 800e27c:	04104105 	.word	0x04104105

0800e280 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 800e280:	b590      	push	{r4, r7, lr}
 800e282:	b08f      	sub	sp, #60	; 0x3c
 800e284:	af02      	add	r7, sp, #8
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 800e28a:	f7fc ff73 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800e28e:	4602      	mov	r2, r0
 800e290:	6813      	ldr	r3, [r2, #0]
 800e292:	331c      	adds	r3, #28
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4610      	mov	r0, r2
 800e298:	4798      	blx	r3
 800e29a:	4603      	mov	r3, r0
 800e29c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800e2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a4:	2b10      	cmp	r3, #16
 800e2a6:	d101      	bne.n	800e2ac <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 800e2a8:	2302      	movs	r3, #2
 800e2aa:	e000      	b.n	800e2ae <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 800e2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2b8:	2b10      	cmp	r3, #16
 800e2ba:	d149      	bne.n	800e350 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	3318      	adds	r3, #24
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7ff fd09 	bl	800dcd8 <_ZNK8touchgfx9colortypecvmEv>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	0adb      	lsrs	r3, r3, #11
 800e2ca:	f003 021f 	and.w	r2, r3, #31
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	021b      	lsls	r3, r3, #8
 800e2d2:	1a9a      	subs	r2, r3, r2
 800e2d4:	4b6a      	ldr	r3, [pc, #424]	; (800e480 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 800e2d6:	fba3 1302 	umull	r1, r3, r3, r2
 800e2da:	1ad2      	subs	r2, r2, r3
 800e2dc:	0852      	lsrs	r2, r2, #1
 800e2de:	4413      	add	r3, r2
 800e2e0:	091b      	lsrs	r3, r3, #4
 800e2e2:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	3318      	adds	r3, #24
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7ff fcf5 	bl	800dcd8 <_ZNK8touchgfx9colortypecvmEv>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	095b      	lsrs	r3, r3, #5
 800e2f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	021b      	lsls	r3, r3, #8
 800e2fa:	1a9a      	subs	r2, r3, r2
 800e2fc:	4b61      	ldr	r3, [pc, #388]	; (800e484 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 800e2fe:	fba3 1302 	umull	r1, r3, r3, r2
 800e302:	1ad2      	subs	r2, r2, r3
 800e304:	0852      	lsrs	r2, r2, #1
 800e306:	4413      	add	r3, r2
 800e308:	095b      	lsrs	r3, r3, #5
 800e30a:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	3318      	adds	r3, #24
 800e310:	4618      	mov	r0, r3
 800e312:	f7ff fce1 	bl	800dcd8 <_ZNK8touchgfx9colortypecvmEv>
 800e316:	4603      	mov	r3, r0
 800e318:	f003 021f 	and.w	r2, r3, #31
 800e31c:	4613      	mov	r3, r2
 800e31e:	021b      	lsls	r3, r3, #8
 800e320:	1a9a      	subs	r2, r3, r2
 800e322:	4b57      	ldr	r3, [pc, #348]	; (800e480 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 800e324:	fba3 1302 	umull	r1, r3, r3, r2
 800e328:	1ad2      	subs	r2, r2, r3
 800e32a:	0852      	lsrs	r2, r2, #1
 800e32c:	4413      	add	r3, r2
 800e32e:	091b      	lsrs	r3, r3, #4
 800e330:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	7f1b      	ldrb	r3, [r3, #28]
 800e336:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	061a      	lsls	r2, r3, #24
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	041b      	lsls	r3, r3, #16
 800e340:	431a      	orrs	r2, r3
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	021b      	lsls	r3, r3, #8
 800e346:	4313      	orrs	r3, r2
 800e348:	697a      	ldr	r2, [r7, #20]
 800e34a:	4313      	orrs	r3, r2
 800e34c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e34e:	e00a      	b.n	800e366 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	7f1b      	ldrb	r3, [r3, #28]
 800e354:	061b      	lsls	r3, r3, #24
 800e356:	461a      	mov	r2, r3
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	3318      	adds	r3, #24
 800e35c:	60fb      	str	r3, [r7, #12]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4313      	orrs	r3, r2
 800e364:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2b08      	cmp	r3, #8
 800e36c:	d103      	bne.n	800e376 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800e36e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e374:	e003      	b.n	800e37e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 800e376:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800e37a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e37c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800e37e:	4a42      	ldr	r2, [pc, #264]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e382:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800e384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e388:	2b10      	cmp	r3, #16
 800e38a:	d101      	bne.n	800e390 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 800e38c:	2302      	movs	r3, #2
 800e38e:	e000      	b.n	800e392 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 800e390:	2301      	movs	r3, #1
 800e392:	4a3d      	ldr	r2, [pc, #244]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e394:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	8adb      	ldrh	r3, [r3, #22]
 800e39a:	461a      	mov	r2, r3
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	8a1b      	ldrh	r3, [r3, #16]
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	4b38      	ldr	r3, [pc, #224]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e3a6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800e3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3ac:	2b10      	cmp	r3, #16
 800e3ae:	d101      	bne.n	800e3b4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 800e3b0:	2202      	movs	r2, #2
 800e3b2:	e000      	b.n	800e3b6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 800e3b4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	8adb      	ldrh	r3, [r3, #22]
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	8a1b      	ldrh	r3, [r3, #16]
 800e3c0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800e3c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3c4:	4830      	ldr	r0, [pc, #192]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e3c6:	f7ff fd27 	bl	800de18 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 800e3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3d0:	d11f      	bne.n	800e412 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800e3d2:	4b2d      	ldr	r3, [pc, #180]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 800e3d8:	4a2b      	ldr	r2, [pc, #172]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3dc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 800e3de:	4b2a      	ldr	r3, [pc, #168]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e3e0:	2209      	movs	r2, #9
 800e3e2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	8adb      	ldrh	r3, [r3, #22]
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	8a1b      	ldrh	r3, [r3, #16]
 800e3ee:	1ad3      	subs	r3, r2, r3
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	4b25      	ldr	r3, [pc, #148]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e3f4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800e3f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3fa:	2b10      	cmp	r3, #16
 800e3fc:	d101      	bne.n	800e402 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 800e3fe:	2302      	movs	r3, #2
 800e400:	e000      	b.n	800e404 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 800e402:	2301      	movs	r3, #1
 800e404:	4a20      	ldr	r2, [pc, #128]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e406:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800e408:	2100      	movs	r1, #0
 800e40a:	481f      	ldr	r0, [pc, #124]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e40c:	f7f4 fb4c 	bl	8002aa8 <HAL_DMA2D_ConfigLayer>
 800e410:	e005      	b.n	800e41e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800e412:	4a1d      	ldr	r2, [pc, #116]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e414:	6a3b      	ldr	r3, [r7, #32]
 800e416:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 800e418:	4b1b      	ldr	r3, [pc, #108]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800e41e:	2101      	movs	r1, #1
 800e420:	4819      	ldr	r0, [pc, #100]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e422:	f7f4 fb41 	bl	8002aa8 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e42c:	d115      	bne.n	800e45a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800e432:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800e438:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800e43e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800e444:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800e44a:	9301      	str	r3, [sp, #4]
 800e44c:	9200      	str	r2, [sp, #0]
 800e44e:	4623      	mov	r3, r4
 800e450:	4602      	mov	r2, r0
 800e452:	480d      	ldr	r0, [pc, #52]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e454:	f7f4 f94b 	bl	80026ee <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 800e458:	e00d      	b.n	800e476 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800e464:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	460b      	mov	r3, r1
 800e46e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e470:	4805      	ldr	r0, [pc, #20]	; (800e488 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 800e472:	f7f4 f909 	bl	8002688 <HAL_DMA2D_Start_IT>
}
 800e476:	bf00      	nop
 800e478:	3734      	adds	r7, #52	; 0x34
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd90      	pop	{r4, r7, pc}
 800e47e:	bf00      	nop
 800e480:	08421085 	.word	0x08421085
 800e484:	04104105 	.word	0x04104105
 800e488:	20006358 	.word	0x20006358

0800e48c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	4a05      	ldr	r2, [pc, #20]	; (800e4ac <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	601a      	str	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7ff fc27 	bl	800dcf0 <_ZN8touchgfx9DMA_QueueD1Ev>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3708      	adds	r7, #8
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	0801e5c8 	.word	0x0801e5c8

0800e4b0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f7ff ffe7 	bl	800e48c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800e4be:	2114      	movs	r1, #20
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f00d fa3b 	bl	801b93c <_ZdlPvj>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3708      	adds	r7, #8
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
        texts = t;
 800e4d8:	4a04      	ldr	r2, [pc, #16]	; (800e4ec <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6013      	str	r3, [r2, #0]
    }
 800e4de:	bf00      	nop
 800e4e0:	370c      	adds	r7, #12
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	20005fa0 	.word	0x20005fa0

0800e4f0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800e4fe:	4a0b      	ldr	r2, [pc, #44]	; (800e52c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	601a      	str	r2, [r3, #0]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	68ba      	ldr	r2, [r7, #8]
 800e508:	605a      	str	r2, [r3, #4]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	609a      	str	r2, [r3, #8]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	683a      	ldr	r2, [r7, #0]
 800e514:	60da      	str	r2, [r3, #12]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	69ba      	ldr	r2, [r7, #24]
 800e51a:	611a      	str	r2, [r3, #16]
    {
    }
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	4618      	mov	r0, r3
 800e520:	3714      	adds	r7, #20
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	0801db10 	.word	0x0801db10

0800e530 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
    {
 800e538:	4a04      	ldr	r2, [pc, #16]	; (800e54c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	601a      	str	r2, [r3, #0]
    }
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4618      	mov	r0, r3
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr
 800e54c:	0801db10 	.word	0x0801db10

0800e550 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
    }
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f7ff ffe9 	bl	800e530 <_ZN8touchgfx7MVPHeapD1Ev>
 800e55e:	2114      	movs	r1, #20
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f00d f9eb 	bl	801b93c <_ZdlPvj>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
    {
 800e578:	4a04      	ldr	r2, [pc, #16]	; (800e58c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	601a      	str	r2, [r3, #0]
    }
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4618      	mov	r0, r3
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr
 800e58c:	0801ea44 	.word	0x0801ea44

0800e590 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
    }
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f7ff ffe9 	bl	800e570 <_ZN8touchgfx3LCDD1Ev>
 800e59e:	2108      	movs	r1, #8
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f00d f9cb 	bl	801b93c <_ZdlPvj>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3708      	adds	r7, #8
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	801a      	strh	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	805a      	strh	r2, [r3, #2]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	809a      	strh	r2, [r3, #4]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	80da      	strh	r2, [r3, #6]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	811a      	strh	r2, [r3, #8]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	815a      	strh	r2, [r3, #10]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	819a      	strh	r2, [r3, #12]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	739a      	strb	r2, [r3, #14]
        {
        }
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b082      	sub	sp, #8
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	4618      	mov	r0, r3
 800e602:	f7ff ffd5 	bl	800e5b0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2200      	movs	r2, #0
 800e60a:	611a      	str	r2, [r3, #16]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	829a      	strh	r2, [r3, #20]
    {
    }
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4618      	mov	r0, r3
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	603b      	str	r3, [r7, #0]
          displayOrientationChangeRequested(false)
 800e62a:	4a44      	ldr	r2, [pc, #272]	; (800e73c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	601a      	str	r2, [r3, #0]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	605a      	str	r2, [r3, #4]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	609a      	str	r2, [r3, #8]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	683a      	ldr	r2, [r7, #0]
 800e640:	60da      	str	r2, [r3, #12]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2200      	movs	r2, #0
 800e646:	611a      	str	r2, [r3, #16]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2200      	movs	r2, #0
 800e64c:	615a      	str	r2, [r3, #20]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2200      	movs	r2, #0
 800e652:	619a      	str	r2, [r3, #24]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	331c      	adds	r3, #28
 800e658:	4618      	mov	r0, r3
 800e65a:	f7ff ffcc 	bl	800e5f6 <_ZN8touchgfx8GesturesC1Ev>
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2200      	movs	r2, #0
 800e662:	639a      	str	r2, [r3, #56]	; 0x38
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2200      	movs	r2, #0
 800e668:	63da      	str	r2, [r3, #60]	; 0x3c
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2200      	movs	r2, #0
 800e66e:	641a      	str	r2, [r3, #64]	; 0x40
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2200      	movs	r2, #0
 800e674:	645a      	str	r2, [r3, #68]	; 0x44
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2200      	movs	r2, #0
 800e67a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2201      	movs	r2, #1
 800e682:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2200      	movs	r2, #0
 800e692:	64da      	str	r2, [r3, #76]	; 0x4c
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	3350      	adds	r3, #80	; 0x50
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fd f986 	bl	800b9aa <_ZN8touchgfx4RectC1Ev>
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	671a      	str	r2, [r3, #112]	; 0x70
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 800e6f4:	4a12      	ldr	r2, [pc, #72]	; (800e740 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800e6fa:	4a12      	ldr	r2, [pc, #72]	; (800e744 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 800e6fc:	8b3b      	ldrh	r3, [r7, #24]
 800e6fe:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 800e700:	4a11      	ldr	r2, [pc, #68]	; (800e748 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 800e702:	8bbb      	ldrh	r3, [r7, #28]
 800e704:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800e706:	4b11      	ldr	r3, [pc, #68]	; (800e74c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 800e708:	2200      	movs	r2, #0
 800e70a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800e70c:	4b0d      	ldr	r3, [pc, #52]	; (800e744 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 800e70e:	881a      	ldrh	r2, [r3, #0]
 800e710:	4b0f      	ldr	r3, [pc, #60]	; (800e750 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 800e712:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800e714:	4b0c      	ldr	r3, [pc, #48]	; (800e748 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 800e716:	881a      	ldrh	r2, [r3, #0]
 800e718:	4b0e      	ldr	r3, [pc, #56]	; (800e754 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 800e71a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800e71c:	8b3a      	ldrh	r2, [r7, #24]
 800e71e:	8bbb      	ldrh	r3, [r7, #28]
 800e720:	429a      	cmp	r2, r3
 800e722:	d301      	bcc.n	800e728 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 800e724:	2200      	movs	r2, #0
 800e726:	e000      	b.n	800e72a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 800e728:	2201      	movs	r2, #1
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	4618      	mov	r0, r3
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	0801e134 	.word	0x0801e134
 800e740:	20005f24 	.word	0x20005f24
 800e744:	20005f18 	.word	0x20005f18
 800e748:	20005f1a 	.word	0x20005f1a
 800e74c:	20005f1c 	.word	0x20005f1c
 800e750:	20005f1e 	.word	0x20005f1e
 800e754:	20005f20 	.word	0x20005f20

0800e758 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	4618      	mov	r0, r3
 800e766:	f7fc fe71 	bl	800b44c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800e76a:	bf00      	nop
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
	...

0800e774 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800e774:	b580      	push	{r7, lr}
 800e776:	b086      	sub	sp, #24
 800e778:	af02      	add	r7, sp, #8
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	607a      	str	r2, [r7, #4]
 800e780:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	68b9      	ldr	r1, [r7, #8]
 800e78e:	f7ff feaf 	bl	800e4f0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800e792:	4a04      	ldr	r2, [pc, #16]	; (800e7a4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	601a      	str	r2, [r3, #0]
    {

    }
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	4618      	mov	r0, r3
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	0801dafc 	.word	0x0801dafc

0800e7a8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	4801      	ldr	r0, [pc, #4]	; (800e7b4 <__tcf_0+0xc>)
 800e7ae:	f000 f94b 	bl	800ea48 <_ZN12FrontendHeapD1Ev>
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	20004ef0 	.word	0x20004ef0

0800e7b8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800e7bc:	4b08      	ldr	r3, [pc, #32]	; (800e7e0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d108      	bne.n	800e7da <_ZN12FrontendHeap11getInstanceEv+0x22>
 800e7c8:	4806      	ldr	r0, [pc, #24]	; (800e7e4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 800e7ca:	f000 f867 	bl	800e89c <_ZN12FrontendHeapC1Ev>
 800e7ce:	4b04      	ldr	r3, [pc, #16]	; (800e7e0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	601a      	str	r2, [r3, #0]
 800e7d4:	4804      	ldr	r0, [pc, #16]	; (800e7e8 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 800e7d6:	f00d f8fb 	bl	801b9d0 <atexit>
        return instance;
 800e7da:	4b02      	ldr	r3, [pc, #8]	; (800e7e4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 800e7dc:	4618      	mov	r0, r3
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	20005214 	.word	0x20005214
 800e7e4:	20004ef0 	.word	0x20004ef0
 800e7e8:	0800e7a9 	.word	0x0800e7a9

0800e7ec <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	4a05      	ldr	r2, [pc, #20]	; (800e80c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	601a      	str	r2, [r3, #0]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7ff fe97 	bl	800e530 <_ZN8touchgfx7MVPHeapD1Ev>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4618      	mov	r0, r3
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	0801dafc 	.word	0x0801dafc

0800e810 <_ZN16FrontendHeapBaseD0Ev>:
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7ff ffe7 	bl	800e7ec <_ZN16FrontendHeapBaseD1Ev>
 800e81e:	2114      	movs	r1, #20
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f00d f88b 	bl	801b93c <_ZdlPvj>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4618      	mov	r0, r3
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4618      	mov	r0, r3
 800e83c:	f000 fcf2 	bl	800f224 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800e840:	4a03      	ldr	r2, [pc, #12]	; (800e850 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	601a      	str	r2, [r3, #0]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	0801dac8 	.word	0x0801dac8

0800e854 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4618      	mov	r0, r3
 800e860:	f000 fce0 	bl	800f224 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800e864:	4a03      	ldr	r2, [pc, #12]	; (800e874 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	601a      	str	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4618      	mov	r0, r3
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	0801da94 	.word	0x0801da94

0800e878 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	4618      	mov	r0, r3
 800e884:	f000 fcce 	bl	800f224 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800e888:	4a03      	ldr	r2, [pc, #12]	; (800e898 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4618      	mov	r0, r3
 800e892:	3708      	adds	r7, #8
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}
 800e898:	0801da60 	.word	0x0801da60

0800e89c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800e89c:	b590      	push	{r4, r7, lr}
 800e89e:	b085      	sub	sp, #20
 800e8a0:	af02      	add	r7, sp, #8
 800e8a2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f103 0114 	add.w	r1, r3, #20
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	4623      	mov	r3, r4
 800e8c2:	f7ff ff57 	bl	800e774 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800e8c6:	4a18      	ldr	r2, [pc, #96]	; (800e928 <_ZN12FrontendHeapC1Ev+0x8c>)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	601a      	str	r2, [r3, #0]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3314      	adds	r3, #20
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7ff ffad 	bl	800e830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	332c      	adds	r3, #44	; 0x2c
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7ff ffba 	bl	800e854 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7ff ffc6 	bl	800e878 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fe f99c 	bl	800cc30 <_ZN5ModelC1Ev>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f503 70e6 	add.w	r0, r3, #460	; 0x1cc
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	4619      	mov	r1, r3
 800e908:	f7fe f97c 	bl	800cc04 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800e914:	4619      	mov	r1, r3
 800e916:	4610      	mov	r0, r2
 800e918:	f7ff ff1e 	bl	800e758 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4618      	mov	r0, r3
 800e920:	370c      	adds	r7, #12
 800e922:	46bd      	mov	sp, r7
 800e924:	bd90      	pop	{r4, r7, pc}
 800e926:	bf00      	nop
 800e928:	0801da4c 	.word	0x0801da4c

0800e92c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b086      	sub	sp, #24
 800e930:	af02      	add	r7, sp, #8
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
 800e938:	603b      	str	r3, [r7, #0]
 800e93a:	68f8      	ldr	r0, [r7, #12]
 800e93c:	8bbb      	ldrh	r3, [r7, #28]
 800e93e:	9301      	str	r3, [sp, #4]
 800e940:	8b3b      	ldrh	r3, [r7, #24]
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	68b9      	ldr	r1, [r7, #8]
 800e94a:	f7ff fe67 	bl	800e61c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800e94e:	4a04      	ldr	r2, [pc, #16]	; (800e960 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	601a      	str	r2, [r3, #0]
    }
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	4618      	mov	r0, r3
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	0801db20 	.word	0x0801db20

0800e964 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800e964:	b580      	push	{r7, lr}
 800e966:	b086      	sub	sp, #24
 800e968:	af02      	add	r7, sp, #8
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
 800e970:	603b      	str	r3, [r7, #0]
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	8bbb      	ldrh	r3, [r7, #28]
 800e976:	9301      	str	r3, [sp, #4]
 800e978:	8b3b      	ldrh	r3, [r7, #24]
 800e97a:	9300      	str	r3, [sp, #0]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	68b9      	ldr	r1, [r7, #8]
 800e982:	f7ff ffd3 	bl	800e92c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800e986:	4a04      	ldr	r2, [pc, #16]	; (800e998 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	601a      	str	r2, [r3, #0]
    }
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	4618      	mov	r0, r3
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	0801d748 	.word	0x0801d748

0800e99c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	4a04      	ldr	r2, [pc, #16]	; (800e9b8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	601a      	str	r2, [r3, #0]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	370c      	adds	r7, #12
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr
 800e9b8:	0801d730 	.word	0x0801d730

0800e9bc <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7ff ffe8 	bl	800e99c <_ZN8touchgfx15TouchControllerC1Ev>
 800e9cc:	4a03      	ldr	r2, [pc, #12]	; (800e9dc <_ZN20STM32TouchControllerC1Ev+0x20>)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	601a      	str	r2, [r3, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3708      	adds	r7, #8
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	0801d718 	.word	0x0801d718

0800e9e0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 320);

void touchgfx_init()
{
 800e9e0:	b590      	push	{r4, r7, lr}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800e9e6:	f7fd fef3 	bl	800c7d0 <_ZN14BitmapDatabase11getInstanceEv>
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	f7fd fefa 	bl	800c7e4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f004 fd5f 	bl	80134c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 800ea02:	4809      	ldr	r0, [pc, #36]	; (800ea28 <touchgfx_init+0x48>)
 800ea04:	f7ff fd64 	bl	800e4d0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 800ea08:	2000      	movs	r0, #0
 800ea0a:	f7fe f823 	bl	800ca54 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 800ea0e:	4807      	ldr	r0, [pc, #28]	; (800ea2c <touchgfx_init+0x4c>)
 800ea10:	f004 fca0 	bl	8013354 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 800ea14:	f7ff fed0 	bl	800e7b8 <_ZN12FrontendHeap11getInstanceEv>
 800ea18:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 800ea1a:	4805      	ldr	r0, [pc, #20]	; (800ea30 <touchgfx_init+0x50>)
 800ea1c:	f7fe ffae 	bl	800d97c <_ZN11TouchGFXHAL10initializeEv>
}
 800ea20:	bf00      	nop
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd90      	pop	{r4, r7, pc}
 800ea28:	20005e98 	.word	0x20005e98
 800ea2c:	20000090 	.word	0x20000090
 800ea30:	20005e9c 	.word	0x20005e9c

0800ea34 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 800ea38:	4802      	ldr	r0, [pc, #8]	; (800ea44 <touchgfx_taskEntry+0x10>)
 800ea3a:	f000 fe04 	bl	800f646 <_ZN8touchgfx3HAL9taskEntryEv>
}
 800ea3e:	bf00      	nop
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20005e9c 	.word	0x20005e9c

0800ea48 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	4a10      	ldr	r2, [pc, #64]	; (800ea94 <_ZN12FrontendHeapD1Ev+0x4c>)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	601a      	str	r2, [r3, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7fe f89b 	bl	800cb98 <_ZN19FrontendApplicationD1Ev>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f000 f827 	bl	800eabc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	332c      	adds	r3, #44	; 0x2c
 800ea72:	4618      	mov	r0, r3
 800ea74:	f000 f844 	bl	800eb00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	3314      	adds	r3, #20
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f000 f863 	bl	800eb48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7ff feb1 	bl	800e7ec <_ZN16FrontendHeapBaseD1Ev>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3708      	adds	r7, #8
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	0801da4c 	.word	0x0801da4c

0800ea98 <_ZN12FrontendHeapD0Ev>:
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f7ff ffd1 	bl	800ea48 <_ZN12FrontendHeapD1Ev>
 800eaa6:	f44f 7149 	mov.w	r1, #804	; 0x324
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f00c ff46 	bl	801b93c <_ZdlPvj>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	4618      	mov	r0, r3
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
	...

0800eabc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	4a05      	ldr	r2, [pc, #20]	; (800eadc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4618      	mov	r0, r3
 800eace:	f000 fba7 	bl	800f220 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	4618      	mov	r0, r3
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	0801da60 	.word	0x0801da60

0800eae0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff ffe7 	bl	800eabc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800eaee:	2114      	movs	r1, #20
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f00c ff23 	bl	801b93c <_ZdlPvj>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	4a05      	ldr	r2, [pc, #20]	; (800eb20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	601a      	str	r2, [r3, #0]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	4618      	mov	r0, r3
 800eb12:	f000 fb85 	bl	800f220 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3708      	adds	r7, #8
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	0801da94 	.word	0x0801da94

0800eb24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f7ff ffe7 	bl	800eb00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800eb32:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f00c ff00 	bl	801b93c <_ZdlPvj>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3708      	adds	r7, #8
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
	...

0800eb48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	4a05      	ldr	r2, [pc, #20]	; (800eb68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	601a      	str	r2, [r3, #0]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f000 fb61 	bl	800f220 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4618      	mov	r0, r3
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	0801dac8 	.word	0x0801dac8

0800eb6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f7ff ffe7 	bl	800eb48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800eb7a:	2118      	movs	r1, #24
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f00c fedd 	bl	801b93c <_ZdlPvj>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4618      	mov	r0, r3
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	4a05      	ldr	r2, [pc, #20]	; (800ebac <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff fce7 	bl	800e570 <_ZN8touchgfx3LCDD1Ev>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4618      	mov	r0, r3
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	0801fb18 	.word	0x0801fb18

0800ebb0 <_ZN8touchgfx8LCD24bppD0Ev>:
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7ff ffe7 	bl	800eb8c <_ZN8touchgfx8LCD24bppD1Ev>
 800ebbe:	2158      	movs	r1, #88	; 0x58
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f00c febb 	bl	801b93c <_ZdlPvj>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <_Z41__static_initialization_and_destruction_0ii>:
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af02      	add	r7, sp, #8
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d119      	bne.n	800ec14 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d114      	bne.n	800ec14 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800ebea:	4818      	ldr	r0, [pc, #96]	; (800ec4c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800ebec:	f7ff fee6 	bl	800e9bc <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 800ebf0:	4817      	ldr	r0, [pc, #92]	; (800ec50 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800ebf2:	f7ff f96b 	bl	800decc <_ZN10STM32F4DMAC1Ev>
static LCD24bpp display;
 800ebf6:	4817      	ldr	r0, [pc, #92]	; (800ec54 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800ebf8:	f006 fe50 	bl	801589c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 320);
 800ebfc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800ec00:	9301      	str	r3, [sp, #4]
 800ec02:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	4b10      	ldr	r3, [pc, #64]	; (800ec4c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800ec0a:	4a12      	ldr	r2, [pc, #72]	; (800ec54 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800ec0c:	4910      	ldr	r1, [pc, #64]	; (800ec50 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800ec0e:	4812      	ldr	r0, [pc, #72]	; (800ec58 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800ec10:	f7ff fea8 	bl	800e964 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d113      	bne.n	800ec42 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d10e      	bne.n	800ec42 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800ec24:	480c      	ldr	r0, [pc, #48]	; (800ec58 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800ec26:	f7fe ff21 	bl	800da6c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800ec2a:	480c      	ldr	r0, [pc, #48]	; (800ec5c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800ec2c:	f7fb ff8a 	bl	800ab44 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800ec30:	4808      	ldr	r0, [pc, #32]	; (800ec54 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800ec32:	f7ff ffab 	bl	800eb8c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F4DMA dma;
 800ec36:	4806      	ldr	r0, [pc, #24]	; (800ec50 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800ec38:	f7ff f972 	bl	800df20 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 800ec3c:	4803      	ldr	r0, [pc, #12]	; (800ec4c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800ec3e:	f7fe fc6d 	bl	800d51c <_ZN20STM32TouchControllerD1Ev>
}
 800ec42:	bf00      	nop
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	20005218 	.word	0x20005218
 800ec50:	20005220 	.word	0x20005220
 800ec54:	20005e40 	.word	0x20005e40
 800ec58:	20005e9c 	.word	0x20005e9c
 800ec5c:	20000090 	.word	0x20000090

0800ec60 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800ec68:	2301      	movs	r3, #1
    }
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	370c      	adds	r7, #12
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr

0800ec76 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 800ec76:	b480      	push	{r7}
 800ec78:	b083      	sub	sp, #12
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800ec7e:	230c      	movs	r3, #12
    }
 800ec80:	4618      	mov	r0, r3
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	460b      	mov	r3, r1
 800ec96:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800ec98:	887a      	ldrh	r2, [r7, #2]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	4413      	add	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	3308      	adds	r3, #8
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	4413      	add	r3, r2
    }
 800eca8:	4618      	mov	r0, r3
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800ecc0:	887a      	ldrh	r2, [r7, #2]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	005b      	lsls	r3, r3, #1
 800ecc6:	4413      	add	r3, r2
 800ecc8:	009b      	lsls	r3, r3, #2
 800ecca:	3308      	adds	r3, #8
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	4413      	add	r3, r2
    }
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800ece4:	2301      	movs	r3, #1
    }
 800ece6:	4618      	mov	r0, r3
 800ece8:	370c      	adds	r7, #12
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr

0800ecf2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800ecf2:	b480      	push	{r7}
 800ecf4:	b083      	sub	sp, #12
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800ecfa:	f44f 73c0 	mov.w	r3, #384	; 0x180
    }
 800ecfe:	4618      	mov	r0, r3
 800ed00:	370c      	adds	r7, #12
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800ed0a:	b480      	push	{r7}
 800ed0c:	b083      	sub	sp, #12
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
 800ed12:	460b      	mov	r3, r1
 800ed14:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800ed16:	887a      	ldrh	r2, [r7, #2]
 800ed18:	4613      	mov	r3, r2
 800ed1a:	005b      	lsls	r3, r3, #1
 800ed1c:	4413      	add	r3, r2
 800ed1e:	01db      	lsls	r3, r3, #7
 800ed20:	3308      	adds	r3, #8
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	4413      	add	r3, r2
    }
 800ed26:	4618      	mov	r0, r3
 800ed28:	370c      	adds	r7, #12
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr

0800ed32 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800ed32:	b480      	push	{r7}
 800ed34:	b083      	sub	sp, #12
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800ed3e:	887a      	ldrh	r2, [r7, #2]
 800ed40:	4613      	mov	r3, r2
 800ed42:	005b      	lsls	r3, r3, #1
 800ed44:	4413      	add	r3, r2
 800ed46:	01db      	lsls	r3, r3, #7
 800ed48:	3308      	adds	r3, #8
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	4413      	add	r3, r2
    }
 800ed4e:	4618      	mov	r0, r3
 800ed50:	370c      	adds	r7, #12
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr

0800ed5a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800ed5a:	b480      	push	{r7}
 800ed5c:	b083      	sub	sp, #12
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800ed62:	2301      	movs	r3, #1
    }
 800ed64:	4618      	mov	r0, r3
 800ed66:	370c      	adds	r7, #12
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr

0800ed70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800ed78:	2310      	movs	r3, #16
    }
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	370c      	adds	r7, #12
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed84:	4770      	bx	lr

0800ed86 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800ed86:	b480      	push	{r7}
 800ed88:	b083      	sub	sp, #12
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
 800ed8e:	460b      	mov	r3, r1
 800ed90:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800ed92:	887b      	ldrh	r3, [r7, #2]
 800ed94:	011b      	lsls	r3, r3, #4
 800ed96:	3308      	adds	r3, #8
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	4413      	add	r3, r2
    }
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	460b      	mov	r3, r1
 800edb2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800edb4:	887b      	ldrh	r3, [r7, #2]
 800edb6:	011b      	lsls	r3, r3, #4
 800edb8:	3308      	adds	r3, #8
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	4413      	add	r3, r2
    }
 800edbe:	4618      	mov	r0, r3
 800edc0:	370c      	adds	r7, #12
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr

0800edca <_GLOBAL__sub_I_touchgfx_init>:
 800edca:	b580      	push	{r7, lr}
 800edcc:	af00      	add	r7, sp, #0
 800edce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800edd2:	2001      	movs	r0, #1
 800edd4:	f7ff fefc 	bl	800ebd0 <_Z41__static_initialization_and_destruction_0ii>
 800edd8:	bd80      	pop	{r7, pc}

0800edda <_GLOBAL__sub_D_touchgfx_init>:
 800edda:	b580      	push	{r7, lr}
 800eddc:	af00      	add	r7, sp, #0
 800edde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ede2:	2000      	movs	r0, #0
 800ede4:	f7ff fef4 	bl	800ebd0 <_Z41__static_initialization_and_destruction_0ii>
 800ede8:	bd80      	pop	{r7, pc}

0800edea <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800edea:	b580      	push	{r7, lr}
 800edec:	b082      	sub	sp, #8
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	3318      	adds	r3, #24
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	4798      	blx	r3
    }
 800edfe:	bf00      	nop
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}

0800ee06 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 800ee06:	b480      	push	{r7}
 800ee08:	b083      	sub	sp, #12
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	460b      	mov	r3, r1
 800ee10:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	78fa      	ldrb	r2, [r7, #3]
 800ee16:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 800ee1a:	bf00      	nop
 800ee1c:	370c      	adds	r7, #12
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr

0800ee26 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800ee26:	b480      	push	{r7}
 800ee28:	b083      	sub	sp, #12
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800ee34:	3301      	adds	r3, #1
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800ee3e:	bf00      	nop
 800ee40:	370c      	adds	r7, #12
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
	...

0800ee4c <__NVIC_EnableIRQ>:
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	4603      	mov	r3, r0
 800ee54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	db0d      	blt.n	800ee7a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	f003 021f 	and.w	r2, r3, #31
 800ee68:	4907      	ldr	r1, [pc, #28]	; (800ee88 <__NVIC_EnableIRQ+0x3c>)
 800ee6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee6e:	095b      	lsrs	r3, r3, #5
 800ee70:	2001      	movs	r0, #1
 800ee72:	fa00 f202 	lsl.w	r2, r0, r2
 800ee76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ee7a:	bf00      	nop
 800ee7c:	370c      	adds	r7, #12
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	e000e100 	.word	0xe000e100

0800ee8c <__NVIC_DisableIRQ>:
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	4603      	mov	r3, r0
 800ee94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	db12      	blt.n	800eec4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	f003 021f 	and.w	r2, r3, #31
 800eea8:	4909      	ldr	r1, [pc, #36]	; (800eed0 <__NVIC_DisableIRQ+0x44>)
 800eeaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eeae:	095b      	lsrs	r3, r3, #5
 800eeb0:	2001      	movs	r0, #1
 800eeb2:	fa00 f202 	lsl.w	r2, r0, r2
 800eeb6:	3320      	adds	r3, #32
 800eeb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800eebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800eec0:	f3bf 8f6f 	isb	sy
}
 800eec4:	bf00      	nop
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr
 800eed0:	e000e100 	.word	0xe000e100

0800eed4 <__NVIC_SetPriority>:
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	4603      	mov	r3, r0
 800eedc:	6039      	str	r1, [r7, #0]
 800eede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	db0c      	blt.n	800ef02 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	4a0e      	ldr	r2, [pc, #56]	; (800ef28 <__NVIC_SetPriority+0x54>)
 800eeee:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800eef2:	4608      	mov	r0, r1
 800eef4:	011b      	lsls	r3, r3, #4
 800eef6:	b2d9      	uxtb	r1, r3
 800eef8:	1813      	adds	r3, r2, r0
 800eefa:	460a      	mov	r2, r1
 800eefc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ef00:	e00c      	b.n	800ef1c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	b2da      	uxtb	r2, r3
 800ef06:	4909      	ldr	r1, [pc, #36]	; (800ef2c <__NVIC_SetPriority+0x58>)
 800ef08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef0c:	b2db      	uxtb	r3, r3
 800ef0e:	f003 030f 	and.w	r3, r3, #15
 800ef12:	3b04      	subs	r3, #4
 800ef14:	0112      	lsls	r2, r2, #4
 800ef16:	b2d2      	uxtb	r2, r2
 800ef18:	440b      	add	r3, r1
 800ef1a:	761a      	strb	r2, [r3, #24]
}
 800ef1c:	bf00      	nop
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	e000e100 	.word	0xe000e100
 800ef2c:	e000ed00 	.word	0xe000ed00

0800ef30 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800ef30:	b5b0      	push	{r4, r5, r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 fe48 	bl	800fbd0 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 800ef40:	687d      	ldr	r5, [r7, #4]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	334c      	adds	r3, #76	; 0x4c
 800ef48:	681c      	ldr	r4, [r3, #0]
 800ef4a:	f002 fbcb 	bl	80116e4 <_ZN8touchgfx11Application11getInstanceEv>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	4619      	mov	r1, r3
 800ef52:	4628      	mov	r0, r5
 800ef54:	47a0      	blx	r4

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC005FA01, (void*)0);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	3374      	adds	r3, #116	; 0x74
 800ef5e:	681c      	ldr	r4, [r3, #0]
 800ef60:	2300      	movs	r3, #0
 800ef62:	4a06      	ldr	r2, [pc, #24]	; (800ef7c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 800ef64:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800ef68:	47a0      	blx	r4
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     *
     * Setting to false to increase performance when using double buffering
     */
    lockDMAToFrontPorch(false);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff ff49 	bl	800ee06 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 800ef74:	bf00      	nop
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bdb0      	pop	{r4, r5, r7, pc}
 800ef7c:	c005fa01 	.word	0xc005fa01

0800ef80 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b082      	sub	sp, #8
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800ef88:	2109      	movs	r1, #9
 800ef8a:	205a      	movs	r0, #90	; 0x5a
 800ef8c:	f7ff ffa2 	bl	800eed4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800ef90:	2109      	movs	r1, #9
 800ef92:	2058      	movs	r0, #88	; 0x58
 800ef94:	f7ff ff9e 	bl	800eed4 <__NVIC_SetPriority>
}
 800ef98:	bf00      	nop
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800efa8:	205a      	movs	r0, #90	; 0x5a
 800efaa:	f7ff ff4f 	bl	800ee4c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800efae:	2058      	movs	r0, #88	; 0x58
 800efb0:	f7ff ff4c 	bl	800ee4c <__NVIC_EnableIRQ>
}
 800efb4:	bf00      	nop
 800efb6:	3708      	adds	r7, #8
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800efc4:	205a      	movs	r0, #90	; 0x5a
 800efc6:	f7ff ff61 	bl	800ee8c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800efca:	2058      	movs	r0, #88	; 0x58
 800efcc:	f7ff ff5e 	bl	800ee8c <__NVIC_DisableIRQ>
}
 800efd0:	bf00      	nop
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800efe0:	4b11      	ldr	r3, [pc, #68]	; (800f028 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800efe2:	68db      	ldr	r3, [r3, #12]
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800efea:	b29b      	uxth	r3, r3
 800efec:	3b01      	subs	r3, #1
 800efee:	b29a      	uxth	r2, r3
 800eff0:	4b0e      	ldr	r3, [pc, #56]	; (800f02c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800eff2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800eff4:	4b0c      	ldr	r3, [pc, #48]	; (800f028 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800eff6:	691b      	ldr	r3, [r3, #16]
 800eff8:	b29b      	uxth	r3, r3
 800effa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800effe:	b29b      	uxth	r3, r3
 800f000:	3b01      	subs	r3, #1
 800f002:	b29a      	uxth	r2, r3
 800f004:	4b0a      	ldr	r3, [pc, #40]	; (800f030 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800f006:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800f008:	4b08      	ldr	r3, [pc, #32]	; (800f02c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800f00a:	881a      	ldrh	r2, [r3, #0]
 800f00c:	4b06      	ldr	r3, [pc, #24]	; (800f028 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800f00e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800f010:	4b05      	ldr	r3, [pc, #20]	; (800f028 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800f012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f014:	4a04      	ldr	r2, [pc, #16]	; (800f028 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800f016:	f043 0301 	orr.w	r3, r3, #1
 800f01a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800f01c:	bf00      	nop
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr
 800f028:	40016800 	.word	0x40016800
 800f02c:	20005f14 	.word	0x20005f14
 800f030:	20005f16 	.word	0x20005f16

0800f034 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800f03c:	4b03      	ldr	r3, [pc, #12]	; (800f04c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800f03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800f040:	4618      	mov	r0, r3
 800f042:	370c      	adds	r7, #12
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr
 800f04c:	40016884 	.word	0x40016884

0800f050 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800f05a:	4a06      	ldr	r2, [pc, #24]	; (800f074 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800f060:	4b05      	ldr	r3, [pc, #20]	; (800f078 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800f062:	2201      	movs	r2, #1
 800f064:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f066:	bf00      	nop
 800f068:	370c      	adds	r7, #12
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	40016884 	.word	0x40016884
 800f078:	40016800 	.word	0x40016800

0800f07c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6839      	ldr	r1, [r7, #0]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f000 fab0 	bl	800f5f0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800f090:	bf00      	nop
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800f0a0:	4b1a      	ldr	r3, [pc, #104]	; (800f10c <HAL_LTDC_LineEventCallback+0x74>)
 800f0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0a4:	4a1a      	ldr	r2, [pc, #104]	; (800f110 <HAL_LTDC_LineEventCallback+0x78>)
 800f0a6:	8812      	ldrh	r2, [r2, #0]
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	bf0c      	ite	eq
 800f0ac:	2301      	moveq	r3, #1
 800f0ae:	2300      	movne	r3, #0
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d017      	beq.n	800f0e6 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800f0b6:	4b17      	ldr	r3, [pc, #92]	; (800f114 <HAL_LTDC_LineEventCallback+0x7c>)
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7f5 fe0d 	bl	8004cdc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800f0c2:	f7fc f84b 	bl	800b15c <_ZN8touchgfx3HAL11getInstanceEv>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7ff feac 	bl	800ee26 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800f0ce:	f7fe fd81 	bl	800dbd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800f0d2:	f7fc f843 	bl	800b15c <_ZN8touchgfx3HAL11getInstanceEv>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f001 f801 	bl	80100e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800f0de:	2000      	movs	r0, #0
 800f0e0:	f7fe fa3e 	bl	800d560 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800f0e4:	e00e      	b.n	800f104 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800f0e6:	4b0a      	ldr	r3, [pc, #40]	; (800f110 <HAL_LTDC_LineEventCallback+0x78>)
 800f0e8:	881b      	ldrh	r3, [r3, #0]
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7f5 fdf5 	bl	8004cdc <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800f0f2:	2000      	movs	r0, #0
 800f0f4:	f7fe fa3f 	bl	800d576 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800f0f8:	f7fc f830 	bl	800b15c <_ZN8touchgfx3HAL11getInstanceEv>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7ff fe73 	bl	800edea <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 800f104:	bf00      	nop
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	40016800 	.word	0x40016800
 800f110:	20005f14 	.word	0x20005f14
 800f114:	20005f16 	.word	0x20005f16

0800f118 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f118:	8880      	ldrh	r0, [r0, #4]
 800f11a:	4770      	bx	lr

0800f11c <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f11c:	2300      	movs	r3, #0
 800f11e:	8083      	strh	r3, [r0, #4]
 800f120:	4770      	bx	lr
	...

0800f124 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f126:	6803      	ldr	r3, [r0, #0]
 800f128:	4605      	mov	r5, r0
 800f12a:	460e      	mov	r6, r1
 800f12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f12e:	2100      	movs	r1, #0
 800f130:	4798      	blx	r3
 800f132:	682b      	ldr	r3, [r5, #0]
 800f134:	4604      	mov	r4, r0
 800f136:	6a1b      	ldr	r3, [r3, #32]
 800f138:	4628      	mov	r0, r5
 800f13a:	4798      	blx	r3
 800f13c:	88ab      	ldrh	r3, [r5, #4]
 800f13e:	1b34      	subs	r4, r6, r4
 800f140:	b2a4      	uxth	r4, r4
 800f142:	fbb4 f4f0 	udiv	r4, r4, r0
 800f146:	42a3      	cmp	r3, r4
 800f148:	d805      	bhi.n	800f156 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800f14a:	4b0e      	ldr	r3, [pc, #56]	; (800f184 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800f14c:	4a0e      	ldr	r2, [pc, #56]	; (800f188 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800f14e:	2120      	movs	r1, #32
 800f150:	480e      	ldr	r0, [pc, #56]	; (800f18c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800f152:	f00c fc1f 	bl	801b994 <__assert_func>
 800f156:	682b      	ldr	r3, [r5, #0]
 800f158:	2100      	movs	r1, #0
 800f15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f15c:	4628      	mov	r0, r5
 800f15e:	4798      	blx	r3
 800f160:	682b      	ldr	r3, [r5, #0]
 800f162:	4607      	mov	r7, r0
 800f164:	6a1b      	ldr	r3, [r3, #32]
 800f166:	4628      	mov	r0, r5
 800f168:	4798      	blx	r3
 800f16a:	1bf3      	subs	r3, r6, r7
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	fbb3 f2f0 	udiv	r2, r3, r0
 800f172:	fb02 3010 	mls	r0, r2, r0, r3
 800f176:	b118      	cbz	r0, 800f180 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800f178:	4b05      	ldr	r3, [pc, #20]	; (800f190 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800f17a:	4a03      	ldr	r2, [pc, #12]	; (800f188 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800f17c:	2121      	movs	r1, #33	; 0x21
 800f17e:	e7e7      	b.n	800f150 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800f180:	4620      	mov	r0, r4
 800f182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f184:	0801dbcc 	.word	0x0801dbcc
 800f188:	0801dd3a 	.word	0x0801dd3a
 800f18c:	0801dbe1 	.word	0x0801dbe1
 800f190:	0801dc0f 	.word	0x0801dc0f

0800f194 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	6803      	ldr	r3, [r0, #0]
 800f198:	6a1b      	ldr	r3, [r3, #32]
 800f19a:	460d      	mov	r5, r1
 800f19c:	4604      	mov	r4, r0
 800f19e:	4798      	blx	r3
 800f1a0:	4285      	cmp	r5, r0
 800f1a2:	d905      	bls.n	800f1b0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800f1a4:	4b0c      	ldr	r3, [pc, #48]	; (800f1d8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800f1a6:	4a0d      	ldr	r2, [pc, #52]	; (800f1dc <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800f1a8:	2132      	movs	r1, #50	; 0x32
 800f1aa:	480d      	ldr	r0, [pc, #52]	; (800f1e0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800f1ac:	f00c fbf2 	bl	801b994 <__assert_func>
 800f1b0:	6823      	ldr	r3, [r4, #0]
 800f1b2:	88a5      	ldrh	r5, [r4, #4]
 800f1b4:	69db      	ldr	r3, [r3, #28]
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	4798      	blx	r3
 800f1ba:	4285      	cmp	r5, r0
 800f1bc:	d303      	bcc.n	800f1c6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800f1be:	4b09      	ldr	r3, [pc, #36]	; (800f1e4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800f1c0:	4a06      	ldr	r2, [pc, #24]	; (800f1dc <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800f1c2:	2133      	movs	r1, #51	; 0x33
 800f1c4:	e7f1      	b.n	800f1aa <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800f1c6:	6823      	ldr	r3, [r4, #0]
 800f1c8:	88a1      	ldrh	r1, [r4, #4]
 800f1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	4798      	blx	r3
 800f1d0:	88a3      	ldrh	r3, [r4, #4]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	80a3      	strh	r3, [r4, #4]
 800f1d6:	bd38      	pop	{r3, r4, r5, pc}
 800f1d8:	0801dc89 	.word	0x0801dc89
 800f1dc:	0801dd7d 	.word	0x0801dd7d
 800f1e0:	0801dbe1 	.word	0x0801dbe1
 800f1e4:	0801dca0 	.word	0x0801dca0

0800f1e8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f1e8:	b570      	push	{r4, r5, r6, lr}
 800f1ea:	6803      	ldr	r3, [r0, #0]
 800f1ec:	6a1b      	ldr	r3, [r3, #32]
 800f1ee:	4616      	mov	r6, r2
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	460d      	mov	r5, r1
 800f1f4:	4798      	blx	r3
 800f1f6:	4286      	cmp	r6, r0
 800f1f8:	d905      	bls.n	800f206 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800f1fa:	4b06      	ldr	r3, [pc, #24]	; (800f214 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800f1fc:	4a06      	ldr	r2, [pc, #24]	; (800f218 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800f1fe:	4807      	ldr	r0, [pc, #28]	; (800f21c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800f200:	213c      	movs	r1, #60	; 0x3c
 800f202:	f00c fbc7 	bl	801b994 <__assert_func>
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	4629      	mov	r1, r5
 800f20a:	4620      	mov	r0, r4
 800f20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f212:	4718      	bx	r3
 800f214:	0801dc89 	.word	0x0801dc89
 800f218:	0801dcf0 	.word	0x0801dcf0
 800f21c:	0801dbe1 	.word	0x0801dbe1

0800f220 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f220:	4770      	bx	lr
	...

0800f224 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f224:	4a02      	ldr	r2, [pc, #8]	; (800f230 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f226:	6002      	str	r2, [r0, #0]
 800f228:	2200      	movs	r2, #0
 800f22a:	8082      	strh	r2, [r0, #4]
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop
 800f230:	0801dcc4 	.word	0x0801dcc4

0800f234 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800f234:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f236:	2000      	movs	r0, #0
 800f238:	b12b      	cbz	r3, 800f246 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f23a:	b920      	cbnz	r0, 800f246 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f23c:	1a5a      	subs	r2, r3, r1
 800f23e:	4250      	negs	r0, r2
 800f240:	4150      	adcs	r0, r2
 800f242:	699b      	ldr	r3, [r3, #24]
 800f244:	e7f8      	b.n	800f238 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800f246:	4770      	bx	lr

0800f248 <_ZN8touchgfx9Container9removeAllEv>:
 800f248:	2200      	movs	r2, #0
 800f24a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f24c:	b123      	cbz	r3, 800f258 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800f24e:	6999      	ldr	r1, [r3, #24]
 800f250:	6281      	str	r1, [r0, #40]	; 0x28
 800f252:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800f256:	e7f8      	b.n	800f24a <_ZN8touchgfx9Container9removeAllEv+0x2>
 800f258:	4770      	bx	lr

0800f25a <_ZN8touchgfx9Container6unlinkEv>:
 800f25a:	2300      	movs	r3, #0
 800f25c:	6283      	str	r3, [r0, #40]	; 0x28
 800f25e:	4770      	bx	lr

0800f260 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800f260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f264:	461f      	mov	r7, r3
 800f266:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800f26a:	460d      	mov	r5, r1
 800f26c:	4616      	mov	r6, r2
 800f26e:	b103      	cbz	r3, 800f272 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800f270:	6038      	str	r0, [r7, #0]
 800f272:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f274:	b314      	cbz	r4, 800f2bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800f276:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f27a:	b1eb      	cbz	r3, 800f2b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f27c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f280:	428d      	cmp	r5, r1
 800f282:	db19      	blt.n	800f2b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f284:	8923      	ldrh	r3, [r4, #8]
 800f286:	b289      	uxth	r1, r1
 800f288:	440b      	add	r3, r1
 800f28a:	b21b      	sxth	r3, r3
 800f28c:	429d      	cmp	r5, r3
 800f28e:	da13      	bge.n	800f2b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f290:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f294:	4296      	cmp	r6, r2
 800f296:	db0f      	blt.n	800f2b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f298:	8963      	ldrh	r3, [r4, #10]
 800f29a:	b292      	uxth	r2, r2
 800f29c:	4413      	add	r3, r2
 800f29e:	b21b      	sxth	r3, r3
 800f2a0:	429e      	cmp	r6, r3
 800f2a2:	da09      	bge.n	800f2b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f2a4:	6823      	ldr	r3, [r4, #0]
 800f2a6:	1ab2      	subs	r2, r6, r2
 800f2a8:	1a69      	subs	r1, r5, r1
 800f2aa:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800f2ae:	b212      	sxth	r2, r2
 800f2b0:	463b      	mov	r3, r7
 800f2b2:	b209      	sxth	r1, r1
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	47c0      	blx	r8
 800f2b8:	69a4      	ldr	r4, [r4, #24]
 800f2ba:	e7db      	b.n	800f274 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800f2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f2c0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	8002      	strh	r2, [r0, #0]
 800f2c4:	8042      	strh	r2, [r0, #2]
 800f2c6:	8082      	strh	r2, [r0, #4]
 800f2c8:	80c2      	strh	r2, [r0, #6]
 800f2ca:	4770      	bx	lr

0800f2cc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800f2cc:	b570      	push	{r4, r5, r6, lr}
 800f2ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f2d0:	460d      	mov	r5, r1
 800f2d2:	4616      	mov	r6, r2
 800f2d4:	b13c      	cbz	r4, 800f2e6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800f2d6:	6823      	ldr	r3, [r4, #0]
 800f2d8:	4620      	mov	r0, r4
 800f2da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2dc:	4632      	mov	r2, r6
 800f2de:	4629      	mov	r1, r5
 800f2e0:	4798      	blx	r3
 800f2e2:	69a4      	ldr	r4, [r4, #24]
 800f2e4:	e7f6      	b.n	800f2d4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800f2e6:	bd70      	pop	{r4, r5, r6, pc}

0800f2e8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f2ec:	460d      	mov	r5, r1
 800f2ee:	b134      	cbz	r4, 800f2fe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800f2f0:	682b      	ldr	r3, [r5, #0]
 800f2f2:	4621      	mov	r1, r4
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	4798      	blx	r3
 800f2fa:	69a4      	ldr	r4, [r4, #24]
 800f2fc:	e7f7      	b.n	800f2ee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800f2fe:	bd38      	pop	{r3, r4, r5, pc}

0800f300 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800f300:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f302:	b19b      	cbz	r3, 800f32c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f304:	428b      	cmp	r3, r1
 800f306:	d109      	bne.n	800f31c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800f308:	699a      	ldr	r2, [r3, #24]
 800f30a:	2100      	movs	r1, #0
 800f30c:	6159      	str	r1, [r3, #20]
 800f30e:	6282      	str	r2, [r0, #40]	; 0x28
 800f310:	b902      	cbnz	r2, 800f314 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800f312:	4770      	bx	lr
 800f314:	6199      	str	r1, [r3, #24]
 800f316:	4770      	bx	lr
 800f318:	4613      	mov	r3, r2
 800f31a:	b13a      	cbz	r2, 800f32c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f31c:	699a      	ldr	r2, [r3, #24]
 800f31e:	428a      	cmp	r2, r1
 800f320:	d1fa      	bne.n	800f318 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800f322:	698a      	ldr	r2, [r1, #24]
 800f324:	619a      	str	r2, [r3, #24]
 800f326:	2300      	movs	r3, #0
 800f328:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800f32c:	4770      	bx	lr

0800f32e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800f32e:	b410      	push	{r4}
 800f330:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f332:	4604      	mov	r4, r0
 800f334:	b92b      	cbnz	r3, 800f342 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800f336:	6803      	ldr	r3, [r0, #0]
 800f338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f33c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f33e:	4611      	mov	r1, r2
 800f340:	4718      	bx	r3
 800f342:	b941      	cbnz	r1, 800f356 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800f344:	6193      	str	r3, [r2, #24]
 800f346:	6282      	str	r2, [r0, #40]	; 0x28
 800f348:	6154      	str	r4, [r2, #20]
 800f34a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	4603      	mov	r3, r0
 800f352:	2800      	cmp	r0, #0
 800f354:	d0f9      	beq.n	800f34a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800f356:	4299      	cmp	r1, r3
 800f358:	6998      	ldr	r0, [r3, #24]
 800f35a:	d1f9      	bne.n	800f350 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800f35c:	6190      	str	r0, [r2, #24]
 800f35e:	618a      	str	r2, [r1, #24]
 800f360:	e7f2      	b.n	800f348 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800f364 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800f364:	4288      	cmp	r0, r1
 800f366:	b508      	push	{r3, lr}
 800f368:	d105      	bne.n	800f376 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800f36a:	4b11      	ldr	r3, [pc, #68]	; (800f3b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800f36c:	4a11      	ldr	r2, [pc, #68]	; (800f3b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800f36e:	2123      	movs	r1, #35	; 0x23
 800f370:	4811      	ldr	r0, [pc, #68]	; (800f3b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800f372:	f00c fb0f 	bl	801b994 <__assert_func>
 800f376:	694b      	ldr	r3, [r1, #20]
 800f378:	b11b      	cbz	r3, 800f382 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800f37a:	4b10      	ldr	r3, [pc, #64]	; (800f3bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800f37c:	4a0d      	ldr	r2, [pc, #52]	; (800f3b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800f37e:	2124      	movs	r1, #36	; 0x24
 800f380:	e7f6      	b.n	800f370 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800f382:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800f386:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f388:	b913      	cbnz	r3, 800f390 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800f38a:	6281      	str	r1, [r0, #40]	; 0x28
 800f38c:	bd08      	pop	{r3, pc}
 800f38e:	4613      	mov	r3, r2
 800f390:	699a      	ldr	r2, [r3, #24]
 800f392:	b12a      	cbz	r2, 800f3a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800f394:	428b      	cmp	r3, r1
 800f396:	d1fa      	bne.n	800f38e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800f398:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800f39a:	4a06      	ldr	r2, [pc, #24]	; (800f3b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800f39c:	2135      	movs	r1, #53	; 0x35
 800f39e:	e7e7      	b.n	800f370 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800f3a0:	428b      	cmp	r3, r1
 800f3a2:	d103      	bne.n	800f3ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800f3a4:	4b06      	ldr	r3, [pc, #24]	; (800f3c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800f3a6:	4a03      	ldr	r2, [pc, #12]	; (800f3b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800f3a8:	2138      	movs	r1, #56	; 0x38
 800f3aa:	e7e1      	b.n	800f370 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800f3ac:	6199      	str	r1, [r3, #24]
 800f3ae:	e7ed      	b.n	800f38c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800f3b0:	0801ddbb 	.word	0x0801ddbb
 800f3b4:	0801df10 	.word	0x0801df10
 800f3b8:	0801dde7 	.word	0x0801dde7
 800f3bc:	0801de1a 	.word	0x0801de1a
 800f3c0:	0801de50 	.word	0x0801de50

0800f3c4 <_ZN8touchgfx4RectaNERKS0_>:
 800f3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3c8:	f9b1 7000 	ldrsh.w	r7, [r1]
 800f3cc:	888c      	ldrh	r4, [r1, #4]
 800f3ce:	f9b0 9000 	ldrsh.w	r9, [r0]
 800f3d2:	443c      	add	r4, r7
 800f3d4:	b2a4      	uxth	r4, r4
 800f3d6:	fa0f f884 	sxth.w	r8, r4
 800f3da:	45c1      	cmp	r9, r8
 800f3dc:	da2f      	bge.n	800f43e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f3de:	8882      	ldrh	r2, [r0, #4]
 800f3e0:	444a      	add	r2, r9
 800f3e2:	b292      	uxth	r2, r2
 800f3e4:	fa0f fe82 	sxth.w	lr, r2
 800f3e8:	4577      	cmp	r7, lr
 800f3ea:	da28      	bge.n	800f43e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f3ec:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f3f0:	88cb      	ldrh	r3, [r1, #6]
 800f3f2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800f3f6:	442b      	add	r3, r5
 800f3f8:	b21b      	sxth	r3, r3
 800f3fa:	429e      	cmp	r6, r3
 800f3fc:	da1f      	bge.n	800f43e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f3fe:	88c3      	ldrh	r3, [r0, #6]
 800f400:	4433      	add	r3, r6
 800f402:	b29b      	uxth	r3, r3
 800f404:	fa0f fc83 	sxth.w	ip, r3
 800f408:	4565      	cmp	r5, ip
 800f40a:	da18      	bge.n	800f43e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f40c:	454f      	cmp	r7, r9
 800f40e:	bfb8      	it	lt
 800f410:	464f      	movlt	r7, r9
 800f412:	42b5      	cmp	r5, r6
 800f414:	bfb8      	it	lt
 800f416:	4635      	movlt	r5, r6
 800f418:	45f0      	cmp	r8, lr
 800f41a:	bfd8      	it	le
 800f41c:	4622      	movle	r2, r4
 800f41e:	1bd2      	subs	r2, r2, r7
 800f420:	8082      	strh	r2, [r0, #4]
 800f422:	884a      	ldrh	r2, [r1, #2]
 800f424:	88c9      	ldrh	r1, [r1, #6]
 800f426:	8007      	strh	r7, [r0, #0]
 800f428:	440a      	add	r2, r1
 800f42a:	b292      	uxth	r2, r2
 800f42c:	b211      	sxth	r1, r2
 800f42e:	458c      	cmp	ip, r1
 800f430:	bfa8      	it	ge
 800f432:	4613      	movge	r3, r2
 800f434:	1b5b      	subs	r3, r3, r5
 800f436:	80c3      	strh	r3, [r0, #6]
 800f438:	8045      	strh	r5, [r0, #2]
 800f43a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f43e:	2300      	movs	r3, #0
 800f440:	8003      	strh	r3, [r0, #0]
 800f442:	8043      	strh	r3, [r0, #2]
 800f444:	8083      	strh	r3, [r0, #4]
 800f446:	80c3      	strh	r3, [r0, #6]
 800f448:	e7f7      	b.n	800f43a <_ZN8touchgfx4RectaNERKS0_+0x76>

0800f44a <_ZNK8touchgfx4Rect7isEmptyEv>:
 800f44a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	dd06      	ble.n	800f460 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800f452:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800f456:	2800      	cmp	r0, #0
 800f458:	bfcc      	ite	gt
 800f45a:	2000      	movgt	r0, #0
 800f45c:	2001      	movle	r0, #1
 800f45e:	4770      	bx	lr
 800f460:	2001      	movs	r0, #1
 800f462:	4770      	bx	lr

0800f464 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800f464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f468:	2300      	movs	r3, #0
 800f46a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800f46c:	8003      	strh	r3, [r0, #0]
 800f46e:	4604      	mov	r4, r0
 800f470:	8043      	strh	r3, [r0, #2]
 800f472:	8083      	strh	r3, [r0, #4]
 800f474:	80c3      	strh	r3, [r0, #6]
 800f476:	2d00      	cmp	r5, #0
 800f478:	d040      	beq.n	800f4fc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800f47a:	1d28      	adds	r0, r5, #4
 800f47c:	f7ff ffe5 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 800f480:	b988      	cbnz	r0, 800f4a6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f482:	4620      	mov	r0, r4
 800f484:	f7ff ffe1 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 800f488:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800f48c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f490:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800f494:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800f498:	b138      	cbz	r0, 800f4aa <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800f49a:	8022      	strh	r2, [r4, #0]
 800f49c:	8063      	strh	r3, [r4, #2]
 800f49e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800f4a2:	f8a4 c006 	strh.w	ip, [r4, #6]
 800f4a6:	69ad      	ldr	r5, [r5, #24]
 800f4a8:	e7e5      	b.n	800f476 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800f4aa:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f4ae:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f4b2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800f4b6:	4290      	cmp	r0, r2
 800f4b8:	4607      	mov	r7, r0
 800f4ba:	bfa8      	it	ge
 800f4bc:	4617      	movge	r7, r2
 800f4be:	4472      	add	r2, lr
 800f4c0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800f4c4:	8027      	strh	r7, [r4, #0]
 800f4c6:	4299      	cmp	r1, r3
 800f4c8:	460e      	mov	r6, r1
 800f4ca:	4440      	add	r0, r8
 800f4cc:	bfa8      	it	ge
 800f4ce:	461e      	movge	r6, r3
 800f4d0:	4471      	add	r1, lr
 800f4d2:	4463      	add	r3, ip
 800f4d4:	b200      	sxth	r0, r0
 800f4d6:	b212      	sxth	r2, r2
 800f4d8:	b209      	sxth	r1, r1
 800f4da:	b21b      	sxth	r3, r3
 800f4dc:	4290      	cmp	r0, r2
 800f4de:	bfac      	ite	ge
 800f4e0:	ebc7 0200 	rsbge	r2, r7, r0
 800f4e4:	ebc7 0202 	rsblt	r2, r7, r2
 800f4e8:	4299      	cmp	r1, r3
 800f4ea:	bfac      	ite	ge
 800f4ec:	ebc6 0301 	rsbge	r3, r6, r1
 800f4f0:	ebc6 0303 	rsblt	r3, r6, r3
 800f4f4:	8066      	strh	r6, [r4, #2]
 800f4f6:	80a2      	strh	r2, [r4, #4]
 800f4f8:	80e3      	strh	r3, [r4, #6]
 800f4fa:	e7d4      	b.n	800f4a6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f502 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800f502:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f506:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800f50a:	b383      	cbz	r3, 800f56e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f50c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f50e:	b374      	cbz	r4, 800f56e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f510:	f9b1 5000 	ldrsh.w	r5, [r1]
 800f514:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800f518:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800f51c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800f520:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f524:	b303      	cbz	r3, 800f568 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f526:	4668      	mov	r0, sp
 800f528:	1d21      	adds	r1, r4, #4
 800f52a:	f8ad 5000 	strh.w	r5, [sp]
 800f52e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f532:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f536:	f8ad 8006 	strh.w	r8, [sp, #6]
 800f53a:	f7ff ff43 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 800f53e:	4668      	mov	r0, sp
 800f540:	f7ff ff83 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 800f544:	b980      	cbnz	r0, 800f568 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f546:	f8bd 3000 	ldrh.w	r3, [sp]
 800f54a:	88a2      	ldrh	r2, [r4, #4]
 800f54c:	1a9b      	subs	r3, r3, r2
 800f54e:	f8ad 3000 	strh.w	r3, [sp]
 800f552:	88e2      	ldrh	r2, [r4, #6]
 800f554:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f558:	1a9b      	subs	r3, r3, r2
 800f55a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f55e:	6823      	ldr	r3, [r4, #0]
 800f560:	4669      	mov	r1, sp
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	4620      	mov	r0, r4
 800f566:	4798      	blx	r3
 800f568:	69a4      	ldr	r4, [r4, #24]
 800f56a:	2c00      	cmp	r4, #0
 800f56c:	d1d8      	bne.n	800f520 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800f56e:	b002      	add	sp, #8
 800f570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f574 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800f574:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f576:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800f57a:	460d      	mov	r5, r1
 800f57c:	4616      	mov	r6, r2
 800f57e:	b323      	cbz	r3, 800f5ca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f580:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f582:	b314      	cbz	r4, 800f5ca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f584:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f588:	b1eb      	cbz	r3, 800f5c6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f58a:	6828      	ldr	r0, [r5, #0]
 800f58c:	6869      	ldr	r1, [r5, #4]
 800f58e:	466b      	mov	r3, sp
 800f590:	c303      	stmia	r3!, {r0, r1}
 800f592:	4668      	mov	r0, sp
 800f594:	1d21      	adds	r1, r4, #4
 800f596:	f7ff ff15 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 800f59a:	4668      	mov	r0, sp
 800f59c:	f7ff ff55 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 800f5a0:	b988      	cbnz	r0, 800f5c6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f5a2:	f8bd 3000 	ldrh.w	r3, [sp]
 800f5a6:	88a2      	ldrh	r2, [r4, #4]
 800f5a8:	1a9b      	subs	r3, r3, r2
 800f5aa:	f8ad 3000 	strh.w	r3, [sp]
 800f5ae:	88e2      	ldrh	r2, [r4, #6]
 800f5b0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f5b4:	1a9b      	subs	r3, r3, r2
 800f5b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f5ba:	6823      	ldr	r3, [r4, #0]
 800f5bc:	4632      	mov	r2, r6
 800f5be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5c0:	4669      	mov	r1, sp
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	4798      	blx	r3
 800f5c6:	69a4      	ldr	r4, [r4, #24]
 800f5c8:	e7db      	b.n	800f582 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800f5ca:	b002      	add	sp, #8
 800f5cc:	bd70      	pop	{r4, r5, r6, pc}

0800f5ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800f5ce:	b513      	push	{r0, r1, r4, lr}
 800f5d0:	6803      	ldr	r3, [r0, #0]
 800f5d2:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	e9cd 3300 	strd	r3, r3, [sp]
 800f5dc:	466b      	mov	r3, sp
 800f5de:	47a0      	blx	r4
 800f5e0:	b002      	add	sp, #8
 800f5e2:	bd10      	pop	{r4, pc}

0800f5e4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800f5ea:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800f5ee:	4770      	bx	lr

0800f5f0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800f5f6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800f5fa:	4770      	bx	lr

0800f5fc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800f5fc:	6843      	ldr	r3, [r0, #4]
 800f5fe:	2201      	movs	r2, #1
 800f600:	725a      	strb	r2, [r3, #9]
 800f602:	6840      	ldr	r0, [r0, #4]
 800f604:	6803      	ldr	r3, [r0, #0]
 800f606:	691b      	ldr	r3, [r3, #16]
 800f608:	4718      	bx	r3

0800f60a <_ZN8touchgfx3HAL8flushDMAEv>:
 800f60a:	6840      	ldr	r0, [r0, #4]
 800f60c:	6803      	ldr	r3, [r0, #0]
 800f60e:	689b      	ldr	r3, [r3, #8]
 800f610:	4718      	bx	r3
	...

0800f614 <_ZN8touchgfx3HAL10beginFrameEv>:
 800f614:	4b04      	ldr	r3, [pc, #16]	; (800f628 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	b123      	cbz	r3, 800f624 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800f61a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800f61e:	f080 0001 	eor.w	r0, r0, #1
 800f622:	4770      	bx	lr
 800f624:	2001      	movs	r0, #1
 800f626:	4770      	bx	lr
 800f628:	20005f22 	.word	0x20005f22

0800f62c <_ZN8touchgfx3HAL8endFrameEv>:
 800f62c:	b510      	push	{r4, lr}
 800f62e:	4604      	mov	r4, r0
 800f630:	6840      	ldr	r0, [r0, #4]
 800f632:	6803      	ldr	r3, [r0, #0]
 800f634:	689b      	ldr	r3, [r3, #8]
 800f636:	4798      	blx	r3
 800f638:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800f63c:	b113      	cbz	r3, 800f644 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800f63e:	2301      	movs	r3, #1
 800f640:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800f644:	bd10      	pop	{r4, pc}

0800f646 <_ZN8touchgfx3HAL9taskEntryEv>:
 800f646:	b508      	push	{r3, lr}
 800f648:	6803      	ldr	r3, [r0, #0]
 800f64a:	4604      	mov	r4, r0
 800f64c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f64e:	4798      	blx	r3
 800f650:	6823      	ldr	r3, [r4, #0]
 800f652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f654:	4620      	mov	r0, r4
 800f656:	4798      	blx	r3
 800f658:	f7fe fad0 	bl	800dbfc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800f65c:	6823      	ldr	r3, [r4, #0]
 800f65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f660:	e7f8      	b.n	800f654 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800f664 <_ZN8touchgfx3HAL4tickEv>:
 800f664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f666:	6803      	ldr	r3, [r0, #0]
 800f668:	4d5c      	ldr	r5, [pc, #368]	; (800f7dc <_ZN8touchgfx3HAL4tickEv+0x178>)
 800f66a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f66e:	4604      	mov	r4, r0
 800f670:	4798      	blx	r3
 800f672:	2800      	cmp	r0, #0
 800f674:	f000 8097 	beq.w	800f7a6 <_ZN8touchgfx3HAL4tickEv+0x142>
 800f678:	2001      	movs	r0, #1
 800f67a:	f7fd ff71 	bl	800d560 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f67e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800f682:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800f686:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800f68a:	2600      	movs	r6, #0
 800f68c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800f690:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800f694:	b133      	cbz	r3, 800f6a4 <_ZN8touchgfx3HAL4tickEv+0x40>
 800f696:	6823      	ldr	r3, [r4, #0]
 800f698:	4620      	mov	r0, r4
 800f69a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f69e:	4798      	blx	r3
 800f6a0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800f6a4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800f6a8:	6862      	ldr	r2, [r4, #4]
 800f6aa:	f083 0301 	eor.w	r3, r3, #1
 800f6ae:	7253      	strb	r3, [r2, #9]
 800f6b0:	2601      	movs	r6, #1
 800f6b2:	702e      	strb	r6, [r5, #0]
 800f6b4:	f002 f816 	bl	80116e4 <_ZN8touchgfx11Application11getInstanceEv>
 800f6b8:	6803      	ldr	r3, [r0, #0]
 800f6ba:	4631      	mov	r1, r6
 800f6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6be:	4798      	blx	r3
 800f6c0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800f6c4:	b90b      	cbnz	r3, 800f6ca <_ZN8touchgfx3HAL4tickEv+0x66>
 800f6c6:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800f6ca:	f002 f80b 	bl	80116e4 <_ZN8touchgfx11Application11getInstanceEv>
 800f6ce:	6803      	ldr	r3, [r0, #0]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	4798      	blx	r3
 800f6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6d6:	6803      	ldr	r3, [r0, #0]
 800f6d8:	691b      	ldr	r3, [r3, #16]
 800f6da:	4798      	blx	r3
 800f6dc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800f6e0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800f6ec:	b10a      	cbz	r2, 800f6f2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1eb      	bne.n	800f6ca <_ZN8touchgfx3HAL4tickEv+0x66>
 800f6f2:	4a3b      	ldr	r2, [pc, #236]	; (800f7e0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800f6f4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800f6f8:	7813      	ldrb	r3, [r2, #0]
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	b25b      	sxtb	r3, r3
 800f6fe:	4299      	cmp	r1, r3
 800f700:	7013      	strb	r3, [r2, #0]
 800f702:	dc10      	bgt.n	800f726 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800f704:	68e0      	ldr	r0, [r4, #12]
 800f706:	2300      	movs	r3, #0
 800f708:	7013      	strb	r3, [r2, #0]
 800f70a:	6803      	ldr	r3, [r0, #0]
 800f70c:	aa03      	add	r2, sp, #12
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	a902      	add	r1, sp, #8
 800f712:	4798      	blx	r3
 800f714:	6823      	ldr	r3, [r4, #0]
 800f716:	2800      	cmp	r0, #0
 800f718:	d051      	beq.n	800f7be <_ZN8touchgfx3HAL4tickEv+0x15a>
 800f71a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f71e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f722:	4620      	mov	r0, r4
 800f724:	4798      	blx	r3
 800f726:	6960      	ldr	r0, [r4, #20]
 800f728:	2300      	movs	r3, #0
 800f72a:	f88d 3007 	strb.w	r3, [sp, #7]
 800f72e:	b158      	cbz	r0, 800f748 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800f730:	6803      	ldr	r3, [r0, #0]
 800f732:	f10d 0107 	add.w	r1, sp, #7
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	4798      	blx	r3
 800f73a:	b128      	cbz	r0, 800f748 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800f73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f73e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f742:	6803      	ldr	r3, [r0, #0]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	4798      	blx	r3
 800f748:	f104 001c 	add.w	r0, r4, #28
 800f74c:	f00c f83e 	bl	801b7cc <_ZN8touchgfx8Gestures4tickEv>
 800f750:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800f754:	b30b      	cbz	r3, 800f79a <_ZN8touchgfx3HAL4tickEv+0x136>
 800f756:	6920      	ldr	r0, [r4, #16]
 800f758:	6803      	ldr	r3, [r0, #0]
 800f75a:	691b      	ldr	r3, [r3, #16]
 800f75c:	4798      	blx	r3
 800f75e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f760:	4606      	mov	r6, r0
 800f762:	b903      	cbnz	r3, 800f766 <_ZN8touchgfx3HAL4tickEv+0x102>
 800f764:	6720      	str	r0, [r4, #112]	; 0x70
 800f766:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f768:	4a1e      	ldr	r2, [pc, #120]	; (800f7e4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800f76a:	1af3      	subs	r3, r6, r3
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d914      	bls.n	800f79a <_ZN8touchgfx3HAL4tickEv+0x136>
 800f770:	6920      	ldr	r0, [r4, #16]
 800f772:	6803      	ldr	r3, [r0, #0]
 800f774:	699b      	ldr	r3, [r3, #24]
 800f776:	4798      	blx	r3
 800f778:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f77a:	2264      	movs	r2, #100	; 0x64
 800f77c:	1af3      	subs	r3, r6, r3
 800f77e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f782:	fbb0 f0f3 	udiv	r0, r0, r3
 800f786:	2800      	cmp	r0, #0
 800f788:	dc1e      	bgt.n	800f7c8 <_ZN8touchgfx3HAL4tickEv+0x164>
 800f78a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800f78e:	6920      	ldr	r0, [r4, #16]
 800f790:	6803      	ldr	r3, [r0, #0]
 800f792:	2100      	movs	r1, #0
 800f794:	69db      	ldr	r3, [r3, #28]
 800f796:	4798      	blx	r3
 800f798:	6726      	str	r6, [r4, #112]	; 0x70
 800f79a:	f001 ffa3 	bl	80116e4 <_ZN8touchgfx11Application11getInstanceEv>
 800f79e:	6803      	ldr	r3, [r0, #0]
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7a4:	4798      	blx	r3
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f7ae:	4798      	blx	r3
 800f7b0:	2001      	movs	r0, #1
 800f7b2:	f7fd fee0 	bl	800d576 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	702b      	strb	r3, [r5, #0]
 800f7ba:	b004      	add	sp, #16
 800f7bc:	bd70      	pop	{r4, r5, r6, pc}
 800f7be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	4798      	blx	r3
 800f7c6:	e7ae      	b.n	800f726 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800f7c8:	2863      	cmp	r0, #99	; 0x63
 800f7ca:	bfcb      	itete	gt
 800f7cc:	2300      	movgt	r3, #0
 800f7ce:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800f7d2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800f7d6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800f7da:	e7d8      	b.n	800f78e <_ZN8touchgfx3HAL4tickEv+0x12a>
 800f7dc:	20005f28 	.word	0x20005f28
 800f7e0:	20005f29 	.word	0x20005f29
 800f7e4:	05f5e100 	.word	0x05f5e100

0800f7e8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800f7e8:	f7fe b9a0 	b.w	800db2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800f7ec <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800f7ec:	6581      	str	r1, [r0, #88]	; 0x58
 800f7ee:	301c      	adds	r0, #28
 800f7f0:	f00b bfea 	b.w	801b7c8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800f7f4 <_ZN8touchgfx3HAL5touchEll>:
 800f7f4:	b530      	push	{r4, r5, lr}
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	a804      	add	r0, sp, #16
 800f7fc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800f800:	f001 fd2a 	bl	8011258 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800f804:	9b04      	ldr	r3, [sp, #16]
 800f806:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f80a:	a906      	add	r1, sp, #24
 800f80c:	9b05      	ldr	r3, [sp, #20]
 800f80e:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800f812:	a803      	add	r0, sp, #12
 800f814:	f001 fd6e 	bl	80112f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800f818:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800f81c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f820:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f824:	f104 001c 	add.w	r0, r4, #28
 800f828:	b189      	cbz	r1, 800f84e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800f82a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800f82e:	9300      	str	r3, [sp, #0]
 800f830:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800f834:	4613      	mov	r3, r2
 800f836:	462a      	mov	r2, r5
 800f838:	f00b ffd6 	bl	801b7e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800f83c:	b128      	cbz	r0, 800f84a <_ZN8touchgfx3HAL5touchEll+0x56>
 800f83e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f842:	65e3      	str	r3, [r4, #92]	; 0x5c
 800f844:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f848:	6623      	str	r3, [r4, #96]	; 0x60
 800f84a:	b007      	add	sp, #28
 800f84c:	bd30      	pop	{r4, r5, pc}
 800f84e:	f00c f80f 	bl	801b870 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f852:	2301      	movs	r3, #1
 800f854:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800f858:	e7f1      	b.n	800f83e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800f85a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800f85a:	b570      	push	{r4, r5, r6, lr}
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d050      	beq.n	800f902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800f860:	ea81 0002 	eor.w	r0, r1, r2
 800f864:	07c6      	lsls	r6, r0, #31
 800f866:	d508      	bpl.n	800f87a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800f868:	3a01      	subs	r2, #1
 800f86a:	18cc      	adds	r4, r1, r3
 800f86c:	42a1      	cmp	r1, r4
 800f86e:	d048      	beq.n	800f902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800f870:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f874:	f801 0b01 	strb.w	r0, [r1], #1
 800f878:	e7f8      	b.n	800f86c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800f87a:	07d5      	lsls	r5, r2, #31
 800f87c:	bf42      	ittt	mi
 800f87e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800f882:	f801 0b01 	strbmi.w	r0, [r1], #1
 800f886:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d915      	bls.n	800f8ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800f88e:	ea82 0001 	eor.w	r0, r2, r1
 800f892:	0784      	lsls	r4, r0, #30
 800f894:	d02d      	beq.n	800f8f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 800f896:	1e94      	subs	r4, r2, #2
 800f898:	4608      	mov	r0, r1
 800f89a:	18ce      	adds	r6, r1, r3
 800f89c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 800f8a0:	f820 5b02 	strh.w	r5, [r0], #2
 800f8a4:	1a35      	subs	r5, r6, r0
 800f8a6:	2d01      	cmp	r5, #1
 800f8a8:	d8f8      	bhi.n	800f89c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 800f8aa:	1e98      	subs	r0, r3, #2
 800f8ac:	f020 0001 	bic.w	r0, r0, #1
 800f8b0:	3002      	adds	r0, #2
 800f8b2:	4401      	add	r1, r0
 800f8b4:	4402      	add	r2, r0
 800f8b6:	f003 0301 	and.w	r3, r3, #1
 800f8ba:	1f14      	subs	r4, r2, #4
 800f8bc:	4608      	mov	r0, r1
 800f8be:	18ce      	adds	r6, r1, r3
 800f8c0:	1a35      	subs	r5, r6, r0
 800f8c2:	2d03      	cmp	r5, #3
 800f8c4:	d810      	bhi.n	800f8e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 800f8c6:	089c      	lsrs	r4, r3, #2
 800f8c8:	00a0      	lsls	r0, r4, #2
 800f8ca:	4401      	add	r1, r0
 800f8cc:	3801      	subs	r0, #1
 800f8ce:	4402      	add	r2, r0
 800f8d0:	f06f 0003 	mvn.w	r0, #3
 800f8d4:	fb00 3404 	mla	r4, r0, r4, r3
 800f8d8:	440c      	add	r4, r1
 800f8da:	42a1      	cmp	r1, r4
 800f8dc:	d011      	beq.n	800f902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800f8de:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800f8e2:	f801 3b01 	strb.w	r3, [r1], #1
 800f8e6:	e7f8      	b.n	800f8da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800f8e8:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800f8ec:	f840 5b04 	str.w	r5, [r0], #4
 800f8f0:	e7e6      	b.n	800f8c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800f8f2:	0790      	lsls	r0, r2, #30
 800f8f4:	d0e1      	beq.n	800f8ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800f8f6:	f832 0b02 	ldrh.w	r0, [r2], #2
 800f8fa:	f821 0b02 	strh.w	r0, [r1], #2
 800f8fe:	3b02      	subs	r3, #2
 800f900:	e7db      	b.n	800f8ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800f902:	2001      	movs	r0, #1
 800f904:	bd70      	pop	{r4, r5, r6, pc}

0800f906 <_ZN8touchgfx3HAL7noTouchEv>:
 800f906:	b510      	push	{r4, lr}
 800f908:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800f90c:	4604      	mov	r4, r0
 800f90e:	b153      	cbz	r3, 800f926 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800f910:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800f914:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800f918:	2101      	movs	r1, #1
 800f91a:	301c      	adds	r0, #28
 800f91c:	f00b ffa8 	bl	801b870 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f920:	2300      	movs	r3, #0
 800f922:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800f926:	bd10      	pop	{r4, pc}

0800f928 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800f928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f92c:	4605      	mov	r5, r0
 800f92e:	6980      	ldr	r0, [r0, #24]
 800f930:	b085      	sub	sp, #20
 800f932:	460f      	mov	r7, r1
 800f934:	4690      	mov	r8, r2
 800f936:	4699      	mov	r9, r3
 800f938:	b930      	cbnz	r0, 800f948 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800f93a:	4b1f      	ldr	r3, [pc, #124]	; (800f9b8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800f93c:	4a1f      	ldr	r2, [pc, #124]	; (800f9bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800f93e:	f44f 7198 	mov.w	r1, #304	; 0x130
 800f942:	481f      	ldr	r0, [pc, #124]	; (800f9c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 800f944:	f00c f826 	bl	801b994 <__assert_func>
 800f948:	ac04      	add	r4, sp, #16
 800f94a:	2600      	movs	r6, #0
 800f94c:	f844 6d04 	str.w	r6, [r4, #-4]!
 800f950:	6806      	ldr	r6, [r0, #0]
 800f952:	9401      	str	r4, [sp, #4]
 800f954:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800f958:	9400      	str	r4, [sp, #0]
 800f95a:	6834      	ldr	r4, [r6, #0]
 800f95c:	47a0      	blx	r4
 800f95e:	4c19      	ldr	r4, [pc, #100]	; (800f9c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 800f960:	4606      	mov	r6, r0
 800f962:	f8a4 9000 	strh.w	r9, [r4]
 800f966:	f7fb fc05 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800f96a:	6803      	ldr	r3, [r0, #0]
 800f96c:	6a1b      	ldr	r3, [r3, #32]
 800f96e:	4798      	blx	r3
 800f970:	280c      	cmp	r0, #12
 800f972:	d80f      	bhi.n	800f994 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 800f974:	e8df f000 	tbb	[pc, r0]
 800f978:	1b1b1207 	.word	0x1b1b1207
 800f97c:	1b1b1b1b 	.word	0x1b1b1b1b
 800f980:	1b1b1b1b 	.word	0x1b1b1b1b
 800f984:	1b          	.byte	0x1b
 800f985:	00          	.byte	0x00
 800f986:	8823      	ldrh	r3, [r4, #0]
 800f988:	fb08 7203 	mla	r2, r8, r3, r7
 800f98c:	9b03      	ldr	r3, [sp, #12]
 800f98e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800f992:	63eb      	str	r3, [r5, #60]	; 0x3c
 800f994:	4630      	mov	r0, r6
 800f996:	b005      	add	sp, #20
 800f998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f99c:	8822      	ldrh	r2, [r4, #0]
 800f99e:	9b03      	ldr	r3, [sp, #12]
 800f9a0:	fb08 7202 	mla	r2, r8, r2, r7
 800f9a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f9a8:	1a9a      	subs	r2, r3, r2
 800f9aa:	63ea      	str	r2, [r5, #60]	; 0x3c
 800f9ac:	e7f2      	b.n	800f994 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 800f9ae:	4b06      	ldr	r3, [pc, #24]	; (800f9c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 800f9b0:	4a02      	ldr	r2, [pc, #8]	; (800f9bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800f9b2:	f240 114d 	movw	r1, #333	; 0x14d
 800f9b6:	e7c4      	b.n	800f942 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800f9b8:	0801dfb9 	.word	0x0801dfb9
 800f9bc:	0801e2ca 	.word	0x0801e2ca
 800f9c0:	0801dffe 	.word	0x0801dffe
 800f9c4:	20005f1e 	.word	0x20005f1e
 800f9c8:	0801e024 	.word	0x0801e024

0800f9cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 800f9cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9d0:	4698      	mov	r8, r3
 800f9d2:	6803      	ldr	r3, [r0, #0]
 800f9d4:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800f9d6:	4b0f      	ldr	r3, [pc, #60]	; (800fa14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 800f9d8:	b087      	sub	sp, #28
 800f9da:	f8b3 9000 	ldrh.w	r9, [r3]
 800f9de:	460e      	mov	r6, r1
 800f9e0:	4617      	mov	r7, r2
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	f7fb fbc6 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800f9e8:	6803      	ldr	r3, [r0, #0]
 800f9ea:	6a1b      	ldr	r3, [r3, #32]
 800f9ec:	4798      	blx	r3
 800f9ee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800f9f2:	9302      	str	r3, [sp, #8]
 800f9f4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800f9f8:	9301      	str	r3, [sp, #4]
 800f9fa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800f9fe:	9300      	str	r3, [sp, #0]
 800fa00:	e9cd 9003 	strd	r9, r0, [sp, #12]
 800fa04:	4643      	mov	r3, r8
 800fa06:	463a      	mov	r2, r7
 800fa08:	4631      	mov	r1, r6
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	47a8      	blx	r5
 800fa0e:	b007      	add	sp, #28
 800fa10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa14:	20005f1e 	.word	0x20005f1e

0800fa18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800fa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	4606      	mov	r6, r0
 800fa1e:	b089      	sub	sp, #36	; 0x24
 800fa20:	4610      	mov	r0, r2
 800fa22:	460c      	mov	r4, r1
 800fa24:	4691      	mov	r9, r2
 800fa26:	4698      	mov	r8, r3
 800fa28:	f003 fc9a 	bl	8013360 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	f000 8093 	beq.w	800fb58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 800fa32:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800fb70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800fa36:	f8df b13c 	ldr.w	fp, [pc, #316]	; 800fb74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 800fa3a:	f8da 0000 	ldr.w	r0, [sl]
 800fa3e:	4f4b      	ldr	r7, [pc, #300]	; (800fb6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 800fa40:	6802      	ldr	r2, [r0, #0]
 800fa42:	6a12      	ldr	r2, [r2, #32]
 800fa44:	4790      	blx	r2
 800fa46:	f8da 0000 	ldr.w	r0, [sl]
 800fa4a:	6802      	ldr	r2, [r0, #0]
 800fa4c:	ad08      	add	r5, sp, #32
 800fa4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fa50:	4790      	blx	r2
 800fa52:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 800fa56:	f8bb 3000 	ldrh.w	r3, [fp]
 800fa5a:	9300      	str	r3, [sp, #0]
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	883b      	ldrh	r3, [r7, #0]
 800fa60:	9301      	str	r3, [sp, #4]
 800fa62:	f003 fd41 	bl	80134e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fa66:	f8ab 0000 	strh.w	r0, [fp]
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f003 fd76 	bl	801355c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fa70:	f8da b000 	ldr.w	fp, [sl]
 800fa74:	8038      	strh	r0, [r7, #0]
 800fa76:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 800fa7a:	9302      	str	r3, [sp, #8]
 800fa7c:	4648      	mov	r0, r9
 800fa7e:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 800fa82:	f003 fc6d 	bl	8013360 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800fa86:	f8da 2000 	ldr.w	r2, [sl]
 800fa8a:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800fa8e:	63d0      	str	r0, [r2, #60]	; 0x3c
 800fa90:	6822      	ldr	r2, [r4, #0]
 800fa92:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 800fa96:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fa98:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	4611      	mov	r1, r2
 800faa0:	4620      	mov	r0, r4
 800faa2:	4798      	blx	r3
 800faa4:	2201      	movs	r2, #1
 800faa6:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 800faaa:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800faae:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800fab2:	2a00      	cmp	r2, #0
 800fab4:	f104 0204 	add.w	r2, r4, #4
 800fab8:	dd51      	ble.n	800fb5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 800faba:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 800fabe:	2900      	cmp	r1, #0
 800fac0:	dd4d      	ble.n	800fb5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 800fac2:	6810      	ldr	r0, [r2, #0]
 800fac4:	6851      	ldr	r1, [r2, #4]
 800fac6:	f10d 0c18 	add.w	ip, sp, #24
 800faca:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800face:	4641      	mov	r1, r8
 800fad0:	a806      	add	r0, sp, #24
 800fad2:	f7ff fc77 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 800fad6:	4628      	mov	r0, r5
 800fad8:	f003 fe58 	bl	801378c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800fadc:	4680      	mov	r8, r0
 800fade:	f7fb fb49 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800fae2:	6802      	ldr	r2, [r0, #0]
 800fae4:	6a12      	ldr	r2, [r2, #32]
 800fae6:	4790      	blx	r2
 800fae8:	4580      	cmp	r8, r0
 800faea:	d03d      	beq.n	800fb68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 800faec:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800faee:	b150      	cbz	r0, 800fb06 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 800faf0:	4628      	mov	r0, r5
 800faf2:	f003 fe4b 	bl	801378c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800faf6:	4605      	mov	r5, r0
 800faf8:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800fafa:	6803      	ldr	r3, [r0, #0]
 800fafc:	6a1b      	ldr	r3, [r3, #32]
 800fafe:	4798      	blx	r3
 800fb00:	1a2b      	subs	r3, r5, r0
 800fb02:	4258      	negs	r0, r3
 800fb04:	4158      	adcs	r0, r3
 800fb06:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 800fb0a:	6822      	ldr	r2, [r4, #0]
 800fb0c:	6963      	ldr	r3, [r4, #20]
 800fb0e:	9303      	str	r3, [sp, #12]
 800fb10:	2500      	movs	r5, #0
 800fb12:	6165      	str	r5, [r4, #20]
 800fb14:	4620      	mov	r0, r4
 800fb16:	6892      	ldr	r2, [r2, #8]
 800fb18:	a906      	add	r1, sp, #24
 800fb1a:	4790      	blx	r2
 800fb1c:	9b03      	ldr	r3, [sp, #12]
 800fb1e:	6163      	str	r3, [r4, #20]
 800fb20:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 800fb24:	6823      	ldr	r3, [r4, #0]
 800fb26:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	4c10      	ldr	r4, [pc, #64]	; (800fb70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 800fb2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb30:	4652      	mov	r2, sl
 800fb32:	4649      	mov	r1, r9
 800fb34:	4798      	blx	r3
 800fb36:	6820      	ldr	r0, [r4, #0]
 800fb38:	9b02      	ldr	r3, [sp, #8]
 800fb3a:	9a00      	ldr	r2, [sp, #0]
 800fb3c:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 800fb40:	4b0c      	ldr	r3, [pc, #48]	; (800fb74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 800fb42:	801a      	strh	r2, [r3, #0]
 800fb44:	4b09      	ldr	r3, [pc, #36]	; (800fb6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 800fb46:	9a01      	ldr	r2, [sp, #4]
 800fb48:	801a      	strh	r2, [r3, #0]
 800fb4a:	6803      	ldr	r3, [r0, #0]
 800fb4c:	6a1b      	ldr	r3, [r3, #32]
 800fb4e:	4798      	blx	r3
 800fb50:	6820      	ldr	r0, [r4, #0]
 800fb52:	6803      	ldr	r3, [r0, #0]
 800fb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb56:	4798      	blx	r3
 800fb58:	b009      	add	sp, #36	; 0x24
 800fb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb5e:	6810      	ldr	r0, [r2, #0]
 800fb60:	6851      	ldr	r1, [r2, #4]
 800fb62:	ab06      	add	r3, sp, #24
 800fb64:	c303      	stmia	r3!, {r0, r1}
 800fb66:	e7b6      	b.n	800fad6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 800fb68:	2000      	movs	r0, #0
 800fb6a:	e7cc      	b.n	800fb06 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 800fb6c:	20005f20 	.word	0x20005f20
 800fb70:	20005f24 	.word	0x20005f24
 800fb74:	20005f1e 	.word	0x20005f1e

0800fb78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800fb78:	b510      	push	{r4, lr}
 800fb7a:	4b07      	ldr	r3, [pc, #28]	; (800fb98 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	4604      	mov	r4, r0
 800fb80:	b13b      	cbz	r3, 800fb92 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800fb82:	6803      	ldr	r3, [r0, #0]
 800fb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb86:	4798      	blx	r3
 800fb88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fb8a:	4283      	cmp	r3, r0
 800fb8c:	d101      	bne.n	800fb92 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800fb8e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800fb90:	bd10      	pop	{r4, pc}
 800fb92:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800fb94:	e7fc      	b.n	800fb90 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800fb96:	bf00      	nop
 800fb98:	20005f22 	.word	0x20005f22

0800fb9c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800fb9c:	b510      	push	{r4, lr}
 800fb9e:	4b0b      	ldr	r3, [pc, #44]	; (800fbcc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	4604      	mov	r4, r0
 800fba4:	b95b      	cbnz	r3, 800fbbe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fba6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800fbaa:	2b02      	cmp	r3, #2
 800fbac:	d007      	beq.n	800fbbe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fbae:	6840      	ldr	r0, [r0, #4]
 800fbb0:	f000 fbc8 	bl	8010344 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800fbb4:	b118      	cbz	r0, 800fbbe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fbb6:	6862      	ldr	r2, [r4, #4]
 800fbb8:	7a53      	ldrb	r3, [r2, #9]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d0fc      	beq.n	800fbb8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800fbbe:	f7fd ff97 	bl	800daf0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f7ff ffd8 	bl	800fb78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fbc8:	bd10      	pop	{r4, pc}
 800fbca:	bf00      	nop
 800fbcc:	20005f22 	.word	0x20005f22

0800fbd0 <_ZN8touchgfx3HAL10initializeEv>:
 800fbd0:	b510      	push	{r4, lr}
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	f7fd ff6c 	bl	800dab0 <_ZN8touchgfx10OSWrappers10initializeEv>
 800fbd8:	6860      	ldr	r0, [r4, #4]
 800fbda:	6803      	ldr	r3, [r0, #0]
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	4798      	blx	r3
 800fbe0:	68e0      	ldr	r0, [r4, #12]
 800fbe2:	6803      	ldr	r3, [r0, #0]
 800fbe4:	689b      	ldr	r3, [r3, #8]
 800fbe6:	4798      	blx	r3
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	4620      	mov	r0, r4
 800fbec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbf2:	4718      	bx	r3

0800fbf4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800fbf4:	b508      	push	{r3, lr}
 800fbf6:	290c      	cmp	r1, #12
 800fbf8:	d817      	bhi.n	800fc2a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800fbfa:	e8df f001 	tbb	[pc, r1]
 800fbfe:	090b      	.short	0x090b
 800fc00:	0d0d0d07 	.word	0x0d0d0d07
 800fc04:	1414140d 	.word	0x1414140d
 800fc08:	1414      	.short	0x1414
 800fc0a:	0d          	.byte	0x0d
 800fc0b:	00          	.byte	0x00
 800fc0c:	2020      	movs	r0, #32
 800fc0e:	bd08      	pop	{r3, pc}
 800fc10:	2018      	movs	r0, #24
 800fc12:	e7fc      	b.n	800fc0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800fc14:	2010      	movs	r0, #16
 800fc16:	e7fa      	b.n	800fc0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800fc18:	4b05      	ldr	r3, [pc, #20]	; (800fc30 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800fc1a:	4a06      	ldr	r2, [pc, #24]	; (800fc34 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800fc1c:	4806      	ldr	r0, [pc, #24]	; (800fc38 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800fc1e:	f44f 710c 	mov.w	r1, #560	; 0x230
 800fc22:	f00b feb7 	bl	801b994 <__assert_func>
 800fc26:	2008      	movs	r0, #8
 800fc28:	e7f1      	b.n	800fc0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	e7ef      	b.n	800fc0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800fc2e:	bf00      	nop
 800fc30:	0801e0f7 	.word	0x0801e0f7
 800fc34:	0801e48c 	.word	0x0801e48c
 800fc38:	0801dffe 	.word	0x0801dffe

0800fc3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800fc3c:	b570      	push	{r4, r5, r6, lr}
 800fc3e:	460d      	mov	r5, r1
 800fc40:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800fc44:	4616      	mov	r6, r2
 800fc46:	461c      	mov	r4, r3
 800fc48:	f7ff ffd4 	bl	800fbf4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800fc4c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800fc50:	10c0      	asrs	r0, r0, #3
 800fc52:	fb06 5101 	mla	r1, r6, r1, r5
 800fc56:	fb00 4001 	mla	r0, r0, r1, r4
 800fc5a:	bd70      	pop	{r4, r5, r6, pc}

0800fc5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 800fc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc60:	b08a      	sub	sp, #40	; 0x28
 800fc62:	f04f 0c00 	mov.w	ip, #0
 800fc66:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 800fc6a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800fc6e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800fc72:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800fc76:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 800fc7a:	f8cd c020 	str.w	ip, [sp, #32]
 800fc7e:	f1b8 0f02 	cmp.w	r8, #2
 800fc82:	4604      	mov	r4, r0
 800fc84:	469a      	mov	sl, r3
 800fc86:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800fc8a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800fc8e:	d030      	beq.n	800fcf2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 800fc90:	2bff      	cmp	r3, #255	; 0xff
 800fc92:	d12c      	bne.n	800fcee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 800fc94:	4560      	cmp	r0, ip
 800fc96:	bf14      	ite	ne
 800fc98:	2004      	movne	r0, #4
 800fc9a:	2001      	moveq	r0, #1
 800fc9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fca0:	9204      	str	r2, [sp, #16]
 800fca2:	4620      	mov	r0, r4
 800fca4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800fca8:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fcac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800fcb0:	f8ad 6018 	strh.w	r6, [sp, #24]
 800fcb4:	f8ad 501a 	strh.w	r5, [sp, #26]
 800fcb8:	f7ff ff5e 	bl	800fb78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fcbc:	e9cd 9700 	strd	r9, r7, [sp]
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800fcc6:	4651      	mov	r1, sl
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f7ff ffb7 	bl	800fc3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800fcce:	f8ad 901e 	strh.w	r9, [sp, #30]
 800fcd2:	9005      	str	r0, [sp, #20]
 800fcd4:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 800fcd8:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800fcdc:	b106      	cbz	r6, 800fce0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 800fcde:	b98d      	cbnz	r5, 800fd04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 800fce0:	4b12      	ldr	r3, [pc, #72]	; (800fd2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 800fce2:	4a13      	ldr	r2, [pc, #76]	; (800fd30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800fce4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800fce8:	4812      	ldr	r0, [pc, #72]	; (800fd34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 800fcea:	f00b fe53 	bl	801b994 <__assert_func>
 800fcee:	2004      	movs	r0, #4
 800fcf0:	e7d4      	b.n	800fc9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800fcf2:	2bff      	cmp	r3, #255	; 0xff
 800fcf4:	d104      	bne.n	800fd00 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	bf14      	ite	ne
 800fcfa:	2040      	movne	r0, #64	; 0x40
 800fcfc:	2020      	moveq	r0, #32
 800fcfe:	e7cd      	b.n	800fc9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800fd00:	2040      	movs	r0, #64	; 0x40
 800fd02:	e7cb      	b.n	800fc9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800fd04:	6823      	ldr	r3, [r4, #0]
 800fd06:	9d02      	ldr	r5, [sp, #8]
 800fd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	4798      	blx	r3
 800fd0e:	4228      	tst	r0, r5
 800fd10:	d104      	bne.n	800fd1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 800fd12:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 800fd14:	4a06      	ldr	r2, [pc, #24]	; (800fd30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800fd16:	f240 11b1 	movw	r1, #433	; 0x1b1
 800fd1a:	e7e5      	b.n	800fce8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 800fd1c:	6860      	ldr	r0, [r4, #4]
 800fd1e:	6803      	ldr	r3, [r0, #0]
 800fd20:	a902      	add	r1, sp, #8
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	4798      	blx	r3
 800fd26:	b00a      	add	sp, #40	; 0x28
 800fd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd2c:	0801e07a 	.word	0x0801e07a
 800fd30:	0801e32e 	.word	0x0801e32e
 800fd34:	0801dffe 	.word	0x0801dffe
 800fd38:	0801e0b2 	.word	0x0801e0b2

0800fd3c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 800fd3c:	b510      	push	{r4, lr}
 800fd3e:	b08a      	sub	sp, #40	; 0x28
 800fd40:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 800fd44:	9408      	str	r4, [sp, #32]
 800fd46:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 800fd4a:	9407      	str	r4, [sp, #28]
 800fd4c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 800fd50:	9406      	str	r4, [sp, #24]
 800fd52:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 800fd56:	9405      	str	r4, [sp, #20]
 800fd58:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 800fd5c:	9404      	str	r4, [sp, #16]
 800fd5e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800fd62:	9403      	str	r4, [sp, #12]
 800fd64:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 800fd68:	9402      	str	r4, [sp, #8]
 800fd6a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800fd6e:	e9cd 3400 	strd	r3, r4, [sp]
 800fd72:	4613      	mov	r3, r2
 800fd74:	2200      	movs	r2, #0
 800fd76:	f7ff ff71 	bl	800fc5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800fd7a:	b00a      	add	sp, #40	; 0x28
 800fd7c:	bd10      	pop	{r4, pc}
	...

0800fd80 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 800fd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd82:	b08b      	sub	sp, #44	; 0x2c
 800fd84:	4616      	mov	r6, r2
 800fd86:	460d      	mov	r5, r1
 800fd88:	461f      	mov	r7, r3
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	f7fb f9f2 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800fd90:	6803      	ldr	r3, [r0, #0]
 800fd92:	6a1b      	ldr	r3, [r3, #32]
 800fd94:	4798      	blx	r3
 800fd96:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800fd9a:	4b0d      	ldr	r3, [pc, #52]	; (800fdd0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 800fd9c:	881b      	ldrh	r3, [r3, #0]
 800fd9e:	9306      	str	r3, [sp, #24]
 800fda0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800fda4:	9305      	str	r3, [sp, #20]
 800fda6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800fdaa:	9304      	str	r3, [sp, #16]
 800fdac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800fdb0:	9303      	str	r3, [sp, #12]
 800fdb2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800fdb6:	9302      	str	r3, [sp, #8]
 800fdb8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	e9cd 7300 	strd	r7, r3, [sp]
 800fdc2:	4629      	mov	r1, r5
 800fdc4:	4633      	mov	r3, r6
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f7ff ff48 	bl	800fc5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800fdcc:	b00b      	add	sp, #44	; 0x2c
 800fdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdd0:	20005f1e 	.word	0x20005f1e

0800fdd4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800fdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd8:	461f      	mov	r7, r3
 800fdda:	4b14      	ldr	r3, [pc, #80]	; (800fe2c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 800fddc:	b08a      	sub	sp, #40	; 0x28
 800fdde:	4616      	mov	r6, r2
 800fde0:	f8b3 8000 	ldrh.w	r8, [r3]
 800fde4:	460d      	mov	r5, r1
 800fde6:	4604      	mov	r4, r0
 800fde8:	f7fb f9c4 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800fdec:	6803      	ldr	r3, [r0, #0]
 800fdee:	6a1b      	ldr	r3, [r3, #32]
 800fdf0:	4798      	blx	r3
 800fdf2:	2302      	movs	r3, #2
 800fdf4:	e9cd 8306 	strd	r8, r3, [sp, #24]
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	9305      	str	r3, [sp, #20]
 800fdfc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800fe00:	9304      	str	r3, [sp, #16]
 800fe02:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800fe06:	9303      	str	r3, [sp, #12]
 800fe08:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800fe0c:	9302      	str	r3, [sp, #8]
 800fe0e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800fe12:	9008      	str	r0, [sp, #32]
 800fe14:	e9cd 7300 	strd	r7, r3, [sp]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	4633      	mov	r3, r6
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f7ff ff1c 	bl	800fc5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800fe24:	b00a      	add	sp, #40	; 0x28
 800fe26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe2a:	bf00      	nop
 800fe2c:	20005f1e 	.word	0x20005f1e

0800fe30 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 800fe30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe34:	b08b      	sub	sp, #44	; 0x2c
 800fe36:	469b      	mov	fp, r3
 800fe38:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800fe3c:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800fe40:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800fe44:	2fff      	cmp	r7, #255	; 0xff
 800fe46:	bf14      	ite	ne
 800fe48:	2308      	movne	r3, #8
 800fe4a:	2302      	moveq	r3, #2
 800fe4c:	2600      	movs	r6, #0
 800fe4e:	4604      	mov	r4, r0
 800fe50:	4689      	mov	r9, r1
 800fe52:	4692      	mov	sl, r2
 800fe54:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800fe58:	9608      	str	r6, [sp, #32]
 800fe5a:	f7ff fe8d 	bl	800fb78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fe5e:	e9cd 8500 	strd	r8, r5, [sp]
 800fe62:	4603      	mov	r3, r0
 800fe64:	465a      	mov	r2, fp
 800fe66:	4651      	mov	r1, sl
 800fe68:	4620      	mov	r0, r4
 800fe6a:	f7ff fee7 	bl	800fc3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800fe6e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800fe72:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fe76:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800fe7a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fe7e:	6823      	ldr	r3, [r4, #0]
 800fe80:	9005      	str	r0, [sp, #20]
 800fe82:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800fe86:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800fe8a:	f8ad 601c 	strh.w	r6, [sp, #28]
 800fe8e:	f8ad 801e 	strh.w	r8, [sp, #30]
 800fe92:	f8cd 9020 	str.w	r9, [sp, #32]
 800fe96:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800fe9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9c:	9d02      	ldr	r5, [sp, #8]
 800fe9e:	4620      	mov	r0, r4
 800fea0:	4798      	blx	r3
 800fea2:	4228      	tst	r0, r5
 800fea4:	d106      	bne.n	800feb4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 800fea6:	4b07      	ldr	r3, [pc, #28]	; (800fec4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 800fea8:	4a07      	ldr	r2, [pc, #28]	; (800fec8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 800feaa:	4808      	ldr	r0, [pc, #32]	; (800fecc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 800feac:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800feb0:	f00b fd70 	bl	801b994 <__assert_func>
 800feb4:	6860      	ldr	r0, [r4, #4]
 800feb6:	6803      	ldr	r3, [r0, #0]
 800feb8:	a902      	add	r1, sp, #8
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	4798      	blx	r3
 800febe:	b00b      	add	sp, #44	; 0x2c
 800fec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec4:	0801e0b2 	.word	0x0801e0b2
 800fec8:	0801e3f7 	.word	0x0801e3f7
 800fecc:	0801dffe 	.word	0x0801dffe

0800fed0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800fed0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fed4:	461f      	mov	r7, r3
 800fed6:	4b0b      	ldr	r3, [pc, #44]	; (800ff04 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800fed8:	460d      	mov	r5, r1
 800feda:	f8b3 8000 	ldrh.w	r8, [r3]
 800fede:	4616      	mov	r6, r2
 800fee0:	4604      	mov	r4, r0
 800fee2:	f7fb f947 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800fee6:	6803      	ldr	r3, [r0, #0]
 800fee8:	6a1b      	ldr	r3, [r3, #32]
 800feea:	4798      	blx	r3
 800feec:	463b      	mov	r3, r7
 800feee:	e9cd 8000 	strd	r8, r0, [sp]
 800fef2:	4632      	mov	r2, r6
 800fef4:	4629      	mov	r1, r5
 800fef6:	4620      	mov	r0, r4
 800fef8:	f7ff fea0 	bl	800fc3c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800fefc:	b002      	add	sp, #8
 800fefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff02:	bf00      	nop
 800ff04:	20005f1e 	.word	0x20005f1e

0800ff08 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 800ff08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff0c:	b088      	sub	sp, #32
 800ff0e:	4698      	mov	r8, r3
 800ff10:	2300      	movs	r3, #0
 800ff12:	9306      	str	r3, [sp, #24]
 800ff14:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ff18:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800ff1c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800ff20:	f8ad 6010 	strh.w	r6, [sp, #16]
 800ff24:	e9cd 3100 	strd	r3, r1, [sp]
 800ff28:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ff2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ff30:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800ff34:	f88d 301c 	strb.w	r3, [sp, #28]
 800ff38:	4617      	mov	r7, r2
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	f8ad 5012 	strh.w	r5, [sp, #18]
 800ff40:	f7ff fe1a 	bl	800fb78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ff44:	4642      	mov	r2, r8
 800ff46:	4603      	mov	r3, r0
 800ff48:	4639      	mov	r1, r7
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f7ff ffc0 	bl	800fed0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ff50:	4b16      	ldr	r3, [pc, #88]	; (800ffac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 800ff52:	9003      	str	r0, [sp, #12]
 800ff54:	881b      	ldrh	r3, [r3, #0]
 800ff56:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ff5a:	f7fb f90b 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 800ff5e:	6803      	ldr	r3, [r0, #0]
 800ff60:	6a1b      	ldr	r3, [r3, #32]
 800ff62:	4798      	blx	r3
 800ff64:	f88d 001e 	strb.w	r0, [sp, #30]
 800ff68:	f88d 001d 	strb.w	r0, [sp, #29]
 800ff6c:	b106      	cbz	r6, 800ff70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 800ff6e:	b935      	cbnz	r5, 800ff7e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 800ff70:	4b0f      	ldr	r3, [pc, #60]	; (800ffb0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800ff72:	4a10      	ldr	r2, [pc, #64]	; (800ffb4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800ff74:	f240 11cd 	movw	r1, #461	; 0x1cd
 800ff78:	480f      	ldr	r0, [pc, #60]	; (800ffb8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 800ff7a:	f00b fd0b 	bl	801b994 <__assert_func>
 800ff7e:	6823      	ldr	r3, [r4, #0]
 800ff80:	9d00      	ldr	r5, [sp, #0]
 800ff82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff84:	4620      	mov	r0, r4
 800ff86:	4798      	blx	r3
 800ff88:	4228      	tst	r0, r5
 800ff8a:	d104      	bne.n	800ff96 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 800ff8c:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 800ff8e:	4a09      	ldr	r2, [pc, #36]	; (800ffb4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800ff90:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800ff94:	e7f0      	b.n	800ff78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 800ff96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff98:	6860      	ldr	r0, [r4, #4]
 800ff9a:	9306      	str	r3, [sp, #24]
 800ff9c:	6803      	ldr	r3, [r0, #0]
 800ff9e:	4669      	mov	r1, sp
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	4798      	blx	r3
 800ffa4:	b008      	add	sp, #32
 800ffa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffaa:	bf00      	nop
 800ffac:	20005f1e 	.word	0x20005f1e
 800ffb0:	0801e07a 	.word	0x0801e07a
 800ffb4:	0801e1e0 	.word	0x0801e1e0
 800ffb8:	0801dffe 	.word	0x0801dffe
 800ffbc:	0801e0b2 	.word	0x0801e0b2

0800ffc0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800ffc0:	b570      	push	{r4, r5, r6, lr}
 800ffc2:	b08a      	sub	sp, #40	; 0x28
 800ffc4:	466b      	mov	r3, sp
 800ffc6:	e883 0006 	stmia.w	r3, {r1, r2}
 800ffca:	4b20      	ldr	r3, [pc, #128]	; (801004c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	4604      	mov	r4, r0
 800ffd0:	b933      	cbnz	r3, 800ffe0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800ffd2:	4b1f      	ldr	r3, [pc, #124]	; (8010050 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800ffd4:	4a1f      	ldr	r2, [pc, #124]	; (8010054 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800ffd6:	4820      	ldr	r0, [pc, #128]	; (8010058 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800ffd8:	f240 11f9 	movw	r1, #505	; 0x1f9
 800ffdc:	f00b fcda 	bl	801b994 <__assert_func>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	9308      	str	r3, [sp, #32]
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	9302      	str	r3, [sp, #8]
 800ffe8:	6803      	ldr	r3, [r0, #0]
 800ffea:	f8bd 5000 	ldrh.w	r5, [sp]
 800ffee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fff0:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800fff4:	4798      	blx	r3
 800fff6:	4632      	mov	r2, r6
 800fff8:	4629      	mov	r1, r5
 800fffa:	4603      	mov	r3, r0
 800fffc:	4620      	mov	r0, r4
 800fffe:	f7ff ff67 	bl	800fed0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010002:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010004:	9305      	str	r3, [sp, #20]
 8010006:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801000a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801000e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010012:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010016:	4b11      	ldr	r3, [pc, #68]	; (801005c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8010018:	9003      	str	r0, [sp, #12]
 801001a:	881b      	ldrh	r3, [r3, #0]
 801001c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010020:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010024:	f7fb f8a6 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 8010028:	6803      	ldr	r3, [r0, #0]
 801002a:	6a1b      	ldr	r3, [r3, #32]
 801002c:	4798      	blx	r3
 801002e:	23ff      	movs	r3, #255	; 0xff
 8010030:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8010034:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8010038:	6860      	ldr	r0, [r4, #4]
 801003a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801003e:	6803      	ldr	r3, [r0, #0]
 8010040:	a902      	add	r1, sp, #8
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	4798      	blx	r3
 8010046:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010048:	b00a      	add	sp, #40	; 0x28
 801004a:	bd70      	pop	{r4, r5, r6, pc}
 801004c:	20005f23 	.word	0x20005f23
 8010050:	0801df4b 	.word	0x0801df4b
 8010054:	0801e284 	.word	0x0801e284
 8010058:	0801dffe 	.word	0x0801dffe
 801005c:	20005f1e 	.word	0x20005f1e

08010060 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010062:	b08b      	sub	sp, #44	; 0x2c
 8010064:	466d      	mov	r5, sp
 8010066:	e885 0006 	stmia.w	r5, {r1, r2}
 801006a:	461d      	mov	r5, r3
 801006c:	2300      	movs	r3, #0
 801006e:	9308      	str	r3, [sp, #32]
 8010070:	2301      	movs	r3, #1
 8010072:	9302      	str	r3, [sp, #8]
 8010074:	6803      	ldr	r3, [r0, #0]
 8010076:	f8bd 6000 	ldrh.w	r6, [sp]
 801007a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801007c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010080:	4604      	mov	r4, r0
 8010082:	4798      	blx	r3
 8010084:	463a      	mov	r2, r7
 8010086:	4631      	mov	r1, r6
 8010088:	4603      	mov	r3, r0
 801008a:	4620      	mov	r0, r4
 801008c:	f7ff ff20 	bl	800fed0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010090:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010094:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010098:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801009c:	f8ad 301a 	strh.w	r3, [sp, #26]
 80100a0:	4b0e      	ldr	r3, [pc, #56]	; (80100dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80100a2:	9003      	str	r0, [sp, #12]
 80100a4:	881b      	ldrh	r3, [r3, #0]
 80100a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80100aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80100b0:	9505      	str	r5, [sp, #20]
 80100b2:	f7fb f85f 	bl	800b174 <_ZN8touchgfx3HAL3lcdEv>
 80100b6:	6803      	ldr	r3, [r0, #0]
 80100b8:	6a1b      	ldr	r3, [r3, #32]
 80100ba:	4798      	blx	r3
 80100bc:	23ff      	movs	r3, #255	; 0xff
 80100be:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80100c2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80100c6:	6860      	ldr	r0, [r4, #4]
 80100c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80100cc:	6803      	ldr	r3, [r0, #0]
 80100ce:	a902      	add	r1, sp, #8
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	4798      	blx	r3
 80100d4:	4628      	mov	r0, r5
 80100d6:	b00b      	add	sp, #44	; 0x2c
 80100d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100da:	bf00      	nop
 80100dc:	20005f1e 	.word	0x20005f1e

080100e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80100e0:	b570      	push	{r4, r5, r6, lr}
 80100e2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80100e6:	4604      	mov	r4, r0
 80100e8:	b19b      	cbz	r3, 8010112 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80100ea:	2002      	movs	r0, #2
 80100ec:	f7fd fa4e 	bl	800d58c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80100f0:	2300      	movs	r3, #0
 80100f2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80100f6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80100fa:	6823      	ldr	r3, [r4, #0]
 80100fc:	4620      	mov	r0, r4
 80100fe:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8010102:	f7ff fd39 	bl	800fb78 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010106:	462b      	mov	r3, r5
 8010108:	4601      	mov	r1, r0
 801010a:	4620      	mov	r0, r4
 801010c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010110:	4718      	bx	r3
 8010112:	bd70      	pop	{r4, r5, r6, pc}

08010114 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8010114:	4770      	bx	lr

08010116 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8010116:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801011a:	1a13      	subs	r3, r2, r0
 801011c:	4258      	negs	r0, r3
 801011e:	4158      	adcs	r0, r3
 8010120:	4770      	bx	lr

08010122 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8010122:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8010126:	1a9b      	subs	r3, r3, r2
 8010128:	2b00      	cmp	r3, #0
 801012a:	bfdc      	itt	le
 801012c:	6882      	ldrle	r2, [r0, #8]
 801012e:	189b      	addle	r3, r3, r2
 8010130:	2b01      	cmp	r3, #1
 8010132:	bfcc      	ite	gt
 8010134:	2000      	movgt	r0, #0
 8010136:	2001      	movle	r0, #1
 8010138:	4770      	bx	lr

0801013a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801013a:	6902      	ldr	r2, [r0, #16]
 801013c:	6840      	ldr	r0, [r0, #4]
 801013e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8010142:	4770      	bx	lr

08010144 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8010144:	6803      	ldr	r3, [r0, #0]
 8010146:	691b      	ldr	r3, [r3, #16]
 8010148:	4718      	bx	r3

0801014a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801014a:	4770      	bx	lr

0801014c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801014c:	4770      	bx	lr
	...

08010150 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8010150:	b570      	push	{r4, r5, r6, lr}
 8010152:	2301      	movs	r3, #1
 8010154:	7203      	strb	r3, [r0, #8]
 8010156:	4604      	mov	r4, r0
 8010158:	6840      	ldr	r0, [r0, #4]
 801015a:	6803      	ldr	r3, [r0, #0]
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	4798      	blx	r3
 8010160:	6803      	ldr	r3, [r0, #0]
 8010162:	2b08      	cmp	r3, #8
 8010164:	4605      	mov	r5, r0
 8010166:	d01e      	beq.n	80101a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8010168:	d80b      	bhi.n	8010182 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801016a:	2b02      	cmp	r3, #2
 801016c:	d027      	beq.n	80101be <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801016e:	2b04      	cmp	r3, #4
 8010170:	d011      	beq.n	8010196 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8010172:	2b01      	cmp	r3, #1
 8010174:	d028      	beq.n	80101c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010176:	4b17      	ldr	r3, [pc, #92]	; (80101d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8010178:	4a17      	ldr	r2, [pc, #92]	; (80101d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801017a:	4818      	ldr	r0, [pc, #96]	; (80101dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801017c:	218b      	movs	r1, #139	; 0x8b
 801017e:	f00b fc09 	bl	801b994 <__assert_func>
 8010182:	2b40      	cmp	r3, #64	; 0x40
 8010184:	d020      	beq.n	80101c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010186:	d801      	bhi.n	801018c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8010188:	2b20      	cmp	r3, #32
 801018a:	e7f3      	b.n	8010174 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801018c:	2b80      	cmp	r3, #128	; 0x80
 801018e:	d01b      	beq.n	80101c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010194:	e7ee      	b.n	8010174 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8010196:	6823      	ldr	r3, [r4, #0]
 8010198:	7f01      	ldrb	r1, [r0, #28]
 801019a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801019c:	4620      	mov	r0, r4
 801019e:	4798      	blx	r3
 80101a0:	6823      	ldr	r3, [r4, #0]
 80101a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101a4:	e006      	b.n	80101b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80101a6:	6823      	ldr	r3, [r4, #0]
 80101a8:	7f01      	ldrb	r1, [r0, #28]
 80101aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ac:	4620      	mov	r0, r4
 80101ae:	4798      	blx	r3
 80101b0:	6823      	ldr	r3, [r4, #0]
 80101b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101b4:	4629      	mov	r1, r5
 80101b6:	4620      	mov	r0, r4
 80101b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101bc:	4718      	bx	r3
 80101be:	6823      	ldr	r3, [r4, #0]
 80101c0:	4620      	mov	r0, r4
 80101c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101c4:	4798      	blx	r3
 80101c6:	e7f3      	b.n	80101b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80101c8:	6823      	ldr	r3, [r4, #0]
 80101ca:	4620      	mov	r0, r4
 80101cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101ce:	4798      	blx	r3
 80101d0:	e7e6      	b.n	80101a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80101d2:	bf00      	nop
 80101d4:	0801e4d5 	.word	0x0801e4d5
 80101d8:	0801e5e4 	.word	0x0801e5e4
 80101dc:	0801e4fa 	.word	0x0801e4fa

080101e0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	4604      	mov	r4, r0
 80101e4:	460e      	mov	r6, r1
 80101e6:	6860      	ldr	r0, [r4, #4]
 80101e8:	6803      	ldr	r3, [r0, #0]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	4798      	blx	r3
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d1f9      	bne.n	80101e6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80101f2:	4d0b      	ldr	r5, [pc, #44]	; (8010220 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 80101f4:	6828      	ldr	r0, [r5, #0]
 80101f6:	6803      	ldr	r3, [r0, #0]
 80101f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101fa:	4798      	blx	r3
 80101fc:	f7fd fcb2 	bl	800db64 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8010200:	6860      	ldr	r0, [r4, #4]
 8010202:	6803      	ldr	r3, [r0, #0]
 8010204:	4631      	mov	r1, r6
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	4798      	blx	r3
 801020a:	6823      	ldr	r3, [r4, #0]
 801020c:	4620      	mov	r0, r4
 801020e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010210:	4798      	blx	r3
 8010212:	6828      	ldr	r0, [r5, #0]
 8010214:	6803      	ldr	r3, [r0, #0]
 8010216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801021a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801021c:	4718      	bx	r3
 801021e:	bf00      	nop
 8010220:	20005f24 	.word	0x20005f24

08010224 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8010224:	b508      	push	{r3, lr}
 8010226:	f7fd fc63 	bl	800daf0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801022a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801022e:	f7fd bc7d 	b.w	800db2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010232 <_ZN8touchgfx13DMA_Interface5startEv>:
 8010232:	b510      	push	{r4, lr}
 8010234:	4604      	mov	r4, r0
 8010236:	6840      	ldr	r0, [r0, #4]
 8010238:	6803      	ldr	r3, [r0, #0]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	4798      	blx	r3
 801023e:	b948      	cbnz	r0, 8010254 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010240:	7a63      	ldrb	r3, [r4, #9]
 8010242:	b13b      	cbz	r3, 8010254 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010244:	7a23      	ldrb	r3, [r4, #8]
 8010246:	b92b      	cbnz	r3, 8010254 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010248:	6823      	ldr	r3, [r4, #0]
 801024a:	4620      	mov	r0, r4
 801024c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010252:	4718      	bx	r3
 8010254:	bd10      	pop	{r4, pc}
	...

08010258 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8010258:	b510      	push	{r4, lr}
 801025a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801025e:	1b12      	subs	r2, r2, r4
 8010260:	2a00      	cmp	r2, #0
 8010262:	bfdc      	itt	le
 8010264:	6883      	ldrle	r3, [r0, #8]
 8010266:	18d2      	addle	r2, r2, r3
 8010268:	2a01      	cmp	r2, #1
 801026a:	dd18      	ble.n	801029e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801026c:	6843      	ldr	r3, [r0, #4]
 801026e:	f101 021c 	add.w	r2, r1, #28
 8010272:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8010276:	f851 4b04 	ldr.w	r4, [r1], #4
 801027a:	f843 4b04 	str.w	r4, [r3], #4
 801027e:	4291      	cmp	r1, r2
 8010280:	d1f9      	bne.n	8010276 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8010282:	880a      	ldrh	r2, [r1, #0]
 8010284:	801a      	strh	r2, [r3, #0]
 8010286:	788a      	ldrb	r2, [r1, #2]
 8010288:	709a      	strb	r2, [r3, #2]
 801028a:	68c3      	ldr	r3, [r0, #12]
 801028c:	6882      	ldr	r2, [r0, #8]
 801028e:	f3bf 8f5b 	dmb	ish
 8010292:	3301      	adds	r3, #1
 8010294:	429a      	cmp	r2, r3
 8010296:	bfd8      	it	le
 8010298:	1a9b      	suble	r3, r3, r2
 801029a:	60c3      	str	r3, [r0, #12]
 801029c:	bd10      	pop	{r4, pc}
 801029e:	4b03      	ldr	r3, [pc, #12]	; (80102ac <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80102a0:	4a03      	ldr	r2, [pc, #12]	; (80102b0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80102a2:	4804      	ldr	r0, [pc, #16]	; (80102b4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80102a4:	2139      	movs	r1, #57	; 0x39
 80102a6:	f00b fb75 	bl	801b994 <__assert_func>
 80102aa:	bf00      	nop
 80102ac:	0801e520 	.word	0x0801e520
 80102b0:	0801e614 	.word	0x0801e614
 80102b4:	0801e4fa 	.word	0x0801e4fa

080102b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80102b8:	b510      	push	{r4, lr}
 80102ba:	6803      	ldr	r3, [r0, #0]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4604      	mov	r4, r0
 80102c0:	4798      	blx	r3
 80102c2:	b128      	cbz	r0, 80102d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80102c4:	4b07      	ldr	r3, [pc, #28]	; (80102e4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80102c6:	4a08      	ldr	r2, [pc, #32]	; (80102e8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80102c8:	4808      	ldr	r0, [pc, #32]	; (80102ec <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80102ca:	213f      	movs	r1, #63	; 0x3f
 80102cc:	f00b fb62 	bl	801b994 <__assert_func>
 80102d0:	6923      	ldr	r3, [r4, #16]
 80102d2:	68a2      	ldr	r2, [r4, #8]
 80102d4:	f3bf 8f5b 	dmb	ish
 80102d8:	3301      	adds	r3, #1
 80102da:	429a      	cmp	r2, r3
 80102dc:	bfd8      	it	le
 80102de:	1a9b      	suble	r3, r3, r2
 80102e0:	6123      	str	r3, [r4, #16]
 80102e2:	bd10      	pop	{r4, pc}
 80102e4:	0801e543 	.word	0x0801e543
 80102e8:	0801e662 	.word	0x0801e662
 80102ec:	0801e4fa 	.word	0x0801e4fa

080102f0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80102f0:	b570      	push	{r4, r5, r6, lr}
 80102f2:	4604      	mov	r4, r0
 80102f4:	6840      	ldr	r0, [r0, #4]
 80102f6:	6803      	ldr	r3, [r0, #0]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4798      	blx	r3
 80102fc:	4605      	mov	r5, r0
 80102fe:	b930      	cbnz	r0, 801030e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010300:	7a23      	ldrb	r3, [r4, #8]
 8010302:	b123      	cbz	r3, 801030e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010304:	6860      	ldr	r0, [r4, #4]
 8010306:	6803      	ldr	r3, [r0, #0]
 8010308:	695b      	ldr	r3, [r3, #20]
 801030a:	4798      	blx	r3
 801030c:	7225      	strb	r5, [r4, #8]
 801030e:	6860      	ldr	r0, [r4, #4]
 8010310:	6803      	ldr	r3, [r0, #0]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	4798      	blx	r3
 8010316:	b928      	cbnz	r0, 8010324 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8010318:	6823      	ldr	r3, [r4, #0]
 801031a:	4620      	mov	r0, r4
 801031c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801031e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010322:	4718      	bx	r3
 8010324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010328:	f7fd bc38 	b.w	800db9c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801032c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801032c:	b510      	push	{r4, lr}
 801032e:	4c04      	ldr	r4, [pc, #16]	; (8010340 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8010330:	6082      	str	r2, [r0, #8]
 8010332:	2200      	movs	r2, #0
 8010334:	e9c0 4100 	strd	r4, r1, [r0]
 8010338:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801033c:	bd10      	pop	{r4, pc}
 801033e:	bf00      	nop
 8010340:	0801e5c8 	.word	0x0801e5c8

08010344 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8010344:	6840      	ldr	r0, [r0, #4]
 8010346:	6803      	ldr	r3, [r0, #0]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4718      	bx	r3

0801034c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801034c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8010350:	4770      	bx	lr

08010352 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8010352:	b570      	push	{r4, r5, r6, lr}
 8010354:	790b      	ldrb	r3, [r1, #4]
 8010356:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801035a:	2b00      	cmp	r3, #0
 801035c:	bf0c      	ite	eq
 801035e:	2301      	moveq	r3, #1
 8010360:	2300      	movne	r3, #0
 8010362:	4604      	mov	r4, r0
 8010364:	460e      	mov	r6, r1
 8010366:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801036a:	d110      	bne.n	801038e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801036c:	b185      	cbz	r5, 8010390 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801036e:	7933      	ldrb	r3, [r6, #4]
 8010370:	2b01      	cmp	r3, #1
 8010372:	d113      	bne.n	801039c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8010374:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010376:	b188      	cbz	r0, 801039c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8010378:	6803      	ldr	r3, [r0, #0]
 801037a:	68db      	ldr	r3, [r3, #12]
 801037c:	4798      	blx	r3
 801037e:	b168      	cbz	r0, 801039c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8010380:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010382:	6803      	ldr	r3, [r0, #0]
 8010384:	4621      	mov	r1, r4
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801038c:	4718      	bx	r3
 801038e:	b12d      	cbz	r5, 801039c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8010390:	6823      	ldr	r3, [r4, #0]
 8010392:	4620      	mov	r0, r4
 8010394:	695b      	ldr	r3, [r3, #20]
 8010396:	4798      	blx	r3
 8010398:	2d00      	cmp	r5, #0
 801039a:	d1e8      	bne.n	801036e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801039c:	bd70      	pop	{r4, r5, r6, pc}

0801039e <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 801039e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80103a2:	b133      	cbz	r3, 80103b2 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 80103a4:	790b      	ldrb	r3, [r1, #4]
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	bf01      	itttt	eq
 80103aa:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 80103ac:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 80103ae:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 80103b0:	8603      	strheq	r3, [r0, #48]	; 0x30
 80103b2:	f7ff bfce 	b.w	8010352 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

080103b6 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80103b6:	2300      	movs	r3, #0
 80103b8:	8003      	strh	r3, [r0, #0]
 80103ba:	8043      	strh	r3, [r0, #2]
 80103bc:	8083      	strh	r3, [r0, #4]
 80103be:	80c3      	strh	r3, [r0, #6]
 80103c0:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80103c4:	b91b      	cbnz	r3, 80103ce <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 80103c6:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80103ca:	2bff      	cmp	r3, #255	; 0xff
 80103cc:	d103      	bne.n	80103d6 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 80103ce:	890b      	ldrh	r3, [r1, #8]
 80103d0:	8083      	strh	r3, [r0, #4]
 80103d2:	894b      	ldrh	r3, [r1, #10]
 80103d4:	80c3      	strh	r3, [r0, #6]
 80103d6:	4770      	bx	lr

080103d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80103d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103da:	4604      	mov	r4, r0
 80103dc:	6808      	ldr	r0, [r1, #0]
 80103de:	6849      	ldr	r1, [r1, #4]
 80103e0:	466b      	mov	r3, sp
 80103e2:	c303      	stmia	r3!, {r0, r1}
 80103e4:	6823      	ldr	r3, [r4, #0]
 80103e6:	4669      	mov	r1, sp
 80103e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ea:	4620      	mov	r0, r4
 80103ec:	4798      	blx	r3
 80103ee:	4b08      	ldr	r3, [pc, #32]	; (8010410 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80103f6:	b10a      	cbz	r2, 80103fc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80103f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80103fa:	b900      	cbnz	r0, 80103fe <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80103fc:	6898      	ldr	r0, [r3, #8]
 80103fe:	6803      	ldr	r3, [r0, #0]
 8010400:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010402:	699d      	ldr	r5, [r3, #24]
 8010404:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8010408:	4669      	mov	r1, sp
 801040a:	47a8      	blx	r5
 801040c:	b003      	add	sp, #12
 801040e:	bd30      	pop	{r4, r5, pc}
 8010410:	20005f24 	.word	0x20005f24

08010414 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8010414:	b538      	push	{r3, r4, r5, lr}
 8010416:	880b      	ldrh	r3, [r1, #0]
 8010418:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801041a:	4605      	mov	r5, r0
 801041c:	8813      	ldrh	r3, [r2, #0]
 801041e:	f825 3f30 	strh.w	r3, [r5, #48]!
 8010422:	4604      	mov	r4, r0
 8010424:	4628      	mov	r0, r5
 8010426:	f003 f85f 	bl	80134e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801042a:	8120      	strh	r0, [r4, #8]
 801042c:	4628      	mov	r0, r5
 801042e:	f003 f895 	bl	801355c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010432:	8160      	strh	r0, [r4, #10]
 8010434:	bd38      	pop	{r3, r4, r5, pc}

08010436 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8010436:	b510      	push	{r4, lr}
 8010438:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801043c:	2bff      	cmp	r3, #255	; 0xff
 801043e:	4604      	mov	r4, r0
 8010440:	d006      	beq.n	8010450 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8010442:	2300      	movs	r3, #0
 8010444:	8003      	strh	r3, [r0, #0]
 8010446:	8043      	strh	r3, [r0, #2]
 8010448:	8083      	strh	r3, [r0, #4]
 801044a:	80c3      	strh	r3, [r0, #6]
 801044c:	4620      	mov	r0, r4
 801044e:	bd10      	pop	{r4, pc}
 8010450:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8010454:	b11b      	cbz	r3, 801045e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8010456:	3130      	adds	r1, #48	; 0x30
 8010458:	f003 f8ba 	bl	80135d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801045c:	e7f6      	b.n	801044c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801045e:	312e      	adds	r1, #46	; 0x2e
 8010460:	e7fa      	b.n	8010458 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08010464 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8010464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010468:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801046c:	b08a      	sub	sp, #40	; 0x28
 801046e:	4604      	mov	r4, r0
 8010470:	4688      	mov	r8, r1
 8010472:	2b00      	cmp	r3, #0
 8010474:	d044      	beq.n	8010500 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8010476:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8010478:	f8ad 3014 	strh.w	r3, [sp, #20]
 801047c:	a805      	add	r0, sp, #20
 801047e:	f003 f833 	bl	80134e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010482:	4605      	mov	r5, r0
 8010484:	b206      	sxth	r6, r0
 8010486:	a805      	add	r0, sp, #20
 8010488:	f003 f868 	bl	801355c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801048c:	f9b8 2000 	ldrsh.w	r2, [r8]
 8010490:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8010494:	4417      	add	r7, r2
 8010496:	b2bf      	uxth	r7, r7
 8010498:	2300      	movs	r3, #0
 801049a:	fa0f fe87 	sxth.w	lr, r7
 801049e:	459e      	cmp	lr, r3
 80104a0:	fa0f fc80 	sxth.w	ip, r0
 80104a4:	9306      	str	r3, [sp, #24]
 80104a6:	dd2d      	ble.n	8010504 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80104a8:	4296      	cmp	r6, r2
 80104aa:	dd2b      	ble.n	8010504 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80104ac:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80104b0:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80104b4:	4419      	add	r1, r3
 80104b6:	b289      	uxth	r1, r1
 80104b8:	fa0f f881 	sxth.w	r8, r1
 80104bc:	f1b8 0f00 	cmp.w	r8, #0
 80104c0:	dd20      	ble.n	8010504 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80104c2:	459c      	cmp	ip, r3
 80104c4:	dd1e      	ble.n	8010504 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80104c6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80104ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80104ce:	4576      	cmp	r6, lr
 80104d0:	bfa8      	it	ge
 80104d2:	463d      	movge	r5, r7
 80104d4:	45c4      	cmp	ip, r8
 80104d6:	bfa8      	it	ge
 80104d8:	4608      	movge	r0, r1
 80104da:	1aad      	subs	r5, r5, r2
 80104dc:	1ac0      	subs	r0, r0, r3
 80104de:	f8ad 501c 	strh.w	r5, [sp, #28]
 80104e2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80104e6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80104ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80104ee:	4b1f      	ldr	r3, [pc, #124]	; (801056c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	b953      	cbnz	r3, 801050a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 80104f4:	4b1e      	ldr	r3, [pc, #120]	; (8010570 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 80104f6:	4a1f      	ldr	r2, [pc, #124]	; (8010574 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80104f8:	481f      	ldr	r0, [pc, #124]	; (8010578 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 80104fa:	2189      	movs	r1, #137	; 0x89
 80104fc:	f00b fa4a 	bl	801b994 <__assert_func>
 8010500:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8010502:	e7b9      	b.n	8010478 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8010504:	2300      	movs	r3, #0
 8010506:	9307      	str	r3, [sp, #28]
 8010508:	e7f1      	b.n	80104ee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801050a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801050e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010512:	429a      	cmp	r2, r3
 8010514:	d026      	beq.n	8010564 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8010516:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801051a:	2b00      	cmp	r3, #0
 801051c:	dd22      	ble.n	8010564 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801051e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010522:	2b00      	cmp	r3, #0
 8010524:	dd1e      	ble.n	8010564 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8010526:	2300      	movs	r3, #0
 8010528:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801052c:	6823      	ldr	r3, [r4, #0]
 801052e:	a908      	add	r1, sp, #32
 8010530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010532:	4620      	mov	r0, r4
 8010534:	4798      	blx	r3
 8010536:	4b11      	ldr	r3, [pc, #68]	; (801057c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801053e:	b10a      	cbz	r2, 8010544 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8010540:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010542:	b900      	cbnz	r0, 8010546 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8010544:	6898      	ldr	r0, [r3, #8]
 8010546:	6801      	ldr	r1, [r0, #0]
 8010548:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801054c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8010550:	2501      	movs	r5, #1
 8010552:	9502      	str	r5, [sp, #8]
 8010554:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8010558:	9401      	str	r4, [sp, #4]
 801055a:	ac06      	add	r4, sp, #24
 801055c:	9400      	str	r4, [sp, #0]
 801055e:	688c      	ldr	r4, [r1, #8]
 8010560:	a905      	add	r1, sp, #20
 8010562:	47a0      	blx	r4
 8010564:	b00a      	add	sp, #40	; 0x28
 8010566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801056a:	bf00      	nop
 801056c:	20005fcc 	.word	0x20005fcc
 8010570:	0801e7d8 	.word	0x0801e7d8
 8010574:	0801e8ac 	.word	0x0801e8ac
 8010578:	0801e814 	.word	0x0801e814
 801057c:	20005f24 	.word	0x20005f24

08010580 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 8010580:	b510      	push	{r4, lr}
 8010582:	4604      	mov	r4, r0
 8010584:	f7ff ff57 	bl	8010436 <_ZNK8touchgfx6Button12getSolidRectEv>
 8010588:	4620      	mov	r0, r4
 801058a:	bd10      	pop	{r4, pc}

0801058c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 801058c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010590:	4604      	mov	r4, r0
 8010592:	b08c      	sub	sp, #48	; 0x30
 8010594:	4688      	mov	r8, r1
 8010596:	f7ff ff65 	bl	8010464 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801059a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801059c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105a0:	4293      	cmp	r3, r2
 80105a2:	f000 8099 	beq.w	80106d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 80105a6:	4e54      	ldr	r6, [pc, #336]	; (80106f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 80105a8:	6832      	ldr	r2, [r6, #0]
 80105aa:	b92a      	cbnz	r2, 80105b8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 80105ac:	4b53      	ldr	r3, [pc, #332]	; (80106fc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 80105ae:	4a54      	ldr	r2, [pc, #336]	; (8010700 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 80105b0:	21b1      	movs	r1, #177	; 0xb1
 80105b2:	4854      	ldr	r0, [pc, #336]	; (8010704 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 80105b4:	f00b f9ee 	bl	801b994 <__assert_func>
 80105b8:	4d53      	ldr	r5, [pc, #332]	; (8010708 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 80105ba:	8829      	ldrh	r1, [r5, #0]
 80105bc:	4299      	cmp	r1, r3
 80105be:	d803      	bhi.n	80105c8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 80105c0:	4b52      	ldr	r3, [pc, #328]	; (801070c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 80105c2:	4a4f      	ldr	r2, [pc, #316]	; (8010700 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 80105c4:	21b2      	movs	r1, #178	; 0xb2
 80105c6:	e7f4      	b.n	80105b2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 80105c8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80105cc:	4b50      	ldr	r3, [pc, #320]	; (8010710 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 80105ce:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105d8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80105dc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80105e0:	2300      	movs	r3, #0
 80105e2:	f1be 0f01 	cmp.w	lr, #1
 80105e6:	9303      	str	r3, [sp, #12]
 80105e8:	b208      	sxth	r0, r1
 80105ea:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80105ee:	f04f 0c02 	mov.w	ip, #2
 80105f2:	d074      	beq.n	80106de <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x152>
 80105f4:	f1be 0f03 	cmp.w	lr, #3
 80105f8:	d071      	beq.n	80106de <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x152>
 80105fa:	1a52      	subs	r2, r2, r1
 80105fc:	f8ad 3010 	strh.w	r3, [sp, #16]
 8010600:	fb92 f2fc 	sdiv	r2, r2, ip
 8010604:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010608:	f8ad 200e 	strh.w	r2, [sp, #14]
 801060c:	f10d 090c 	add.w	r9, sp, #12
 8010610:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010614:	f10d 0a14 	add.w	sl, sp, #20
 8010618:	e88a 0003 	stmia.w	sl, {r0, r1}
 801061c:	4641      	mov	r1, r8
 801061e:	4650      	mov	r0, sl
 8010620:	f7fe fed0 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 8010624:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010628:	2b00      	cmp	r3, #0
 801062a:	dd55      	ble.n	80106d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 801062c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8010630:	2b00      	cmp	r3, #0
 8010632:	dd51      	ble.n	80106d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>
 8010634:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010638:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801063c:	1a9b      	subs	r3, r3, r2
 801063e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010642:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8010646:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801064a:	1a9b      	subs	r3, r3, r2
 801064c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010650:	6823      	ldr	r3, [r4, #0]
 8010652:	4649      	mov	r1, r9
 8010654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010656:	4620      	mov	r0, r4
 8010658:	4798      	blx	r3
 801065a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801065e:	2b00      	cmp	r3, #0
 8010660:	d047      	beq.n	80106f2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x166>
 8010662:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8010666:	6833      	ldr	r3, [r6, #0]
 8010668:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 801066c:	2b00      	cmp	r3, #0
 801066e:	d09d      	beq.n	80105ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 8010670:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8010672:	8828      	ldrh	r0, [r5, #0]
 8010674:	4288      	cmp	r0, r1
 8010676:	d9a3      	bls.n	80105c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 8010678:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801067c:	6812      	ldr	r2, [r2, #0]
 801067e:	785b      	ldrb	r3, [r3, #1]
 8010680:	9209      	str	r2, [sp, #36]	; 0x24
 8010682:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8010686:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801068a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801068e:	2300      	movs	r3, #0
 8010690:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8010694:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8010698:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801069c:	4b1d      	ldr	r3, [pc, #116]	; (8010714 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801069e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	9707      	str	r7, [sp, #28]
 80106a6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80106aa:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80106ae:	f88d 5020 	strb.w	r5, [sp, #32]
 80106b2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80106b6:	b10a      	cbz	r2, 80106bc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x130>
 80106b8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80106ba:	b904      	cbnz	r4, 80106be <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 80106bc:	689c      	ldr	r4, [r3, #8]
 80106be:	4b16      	ldr	r3, [pc, #88]	; (8010718 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 80106c0:	6818      	ldr	r0, [r3, #0]
 80106c2:	f7fc fa1d 	bl	800cb00 <_ZNK8touchgfx5Texts7getTextEt>
 80106c6:	ab07      	add	r3, sp, #28
 80106c8:	9001      	str	r0, [sp, #4]
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	e899 0006 	ldmia.w	r9, {r1, r2}
 80106d0:	4653      	mov	r3, sl
 80106d2:	4620      	mov	r0, r4
 80106d4:	f7fc f9a5 	bl	800ca22 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80106d8:	b00c      	add	sp, #48	; 0x30
 80106da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106de:	1a5b      	subs	r3, r3, r1
 80106e0:	f8ad 0010 	strh.w	r0, [sp, #16]
 80106e4:	fb93 f3fc 	sdiv	r3, r3, ip
 80106e8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80106ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 80106f0:	e78c      	b.n	801060c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x80>
 80106f2:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80106f6:	e7b6      	b.n	8010666 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xda>
 80106f8:	20005f94 	.word	0x20005f94
 80106fc:	0801e8df 	.word	0x0801e8df
 8010700:	0801ea0c 	.word	0x0801ea0c
 8010704:	0801e921 	.word	0x0801e921
 8010708:	20005f98 	.word	0x20005f98
 801070c:	0801e94a 	.word	0x0801e94a
 8010710:	20005f9c 	.word	0x20005f9c
 8010714:	20005f24 	.word	0x20005f24
 8010718:	20005fa0 	.word	0x20005fa0

0801071c <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801071c:	b510      	push	{r4, lr}
 801071e:	2101      	movs	r1, #1
 8010720:	4c12      	ldr	r4, [pc, #72]	; (801076c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 8010722:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8010726:	2200      	movs	r2, #0
 8010728:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801072c:	6004      	str	r4, [r0, #0]
 801072e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010732:	4c0f      	ldr	r4, [pc, #60]	; (8010770 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8010734:	8082      	strh	r2, [r0, #4]
 8010736:	80c2      	strh	r2, [r0, #6]
 8010738:	8102      	strh	r2, [r0, #8]
 801073a:	8142      	strh	r2, [r0, #10]
 801073c:	8182      	strh	r2, [r0, #12]
 801073e:	81c2      	strh	r2, [r0, #14]
 8010740:	8202      	strh	r2, [r0, #16]
 8010742:	8242      	strh	r2, [r0, #18]
 8010744:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010748:	61c2      	str	r2, [r0, #28]
 801074a:	6282      	str	r2, [r0, #40]	; 0x28
 801074c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8010750:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8010752:	8601      	strh	r1, [r0, #48]	; 0x30
 8010754:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8010758:	6344      	str	r4, [r0, #52]	; 0x34
 801075a:	8701      	strh	r1, [r0, #56]	; 0x38
 801075c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8010760:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8010764:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 8010768:	bd10      	pop	{r4, pc}
 801076a:	bf00      	nop
 801076c:	0801e9a4 	.word	0x0801e9a4
 8010770:	0801cf94 	.word	0x0801cf94

08010774 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8010774:	2000      	movs	r0, #0
 8010776:	4770      	bx	lr

08010778 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8010778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801077c:	b091      	sub	sp, #68	; 0x44
 801077e:	4699      	mov	r9, r3
 8010780:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8010784:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8010786:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801078a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801078e:	4680      	mov	r8, r0
 8010790:	4617      	mov	r7, r2
 8010792:	a80e      	add	r0, sp, #56	; 0x38
 8010794:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8010798:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801079c:	2500      	movs	r5, #0
 801079e:	910d      	str	r1, [sp, #52]	; 0x34
 80107a0:	950e      	str	r5, [sp, #56]	; 0x38
 80107a2:	f000 fe15 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80107a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80107a8:	f8d9 6000 	ldr.w	r6, [r9]
 80107ac:	6818      	ldr	r0, [r3, #0]
 80107ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80107b0:	f9b4 b000 	ldrsh.w	fp, [r4]
 80107b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80107b8:	eb02 0c06 	add.w	ip, r2, r6
 80107bc:	1b80      	subs	r0, r0, r6
 80107be:	ebab 0e0c 	sub.w	lr, fp, ip
 80107c2:	4570      	cmp	r0, lr
 80107c4:	f340 80bd 	ble.w	8010942 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 80107c8:	88a1      	ldrh	r1, [r4, #4]
 80107ca:	4459      	add	r1, fp
 80107cc:	b209      	sxth	r1, r1
 80107ce:	458c      	cmp	ip, r1
 80107d0:	f300 80b7 	bgt.w	8010942 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 80107d4:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 80107d8:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 80107dc:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 80107e0:	edd9 6a07 	vldr	s13, [r9, #28]
 80107e4:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 80107e8:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 80107ec:	4283      	cmp	r3, r0
 80107ee:	bfa8      	it	ge
 80107f0:	4603      	movge	r3, r0
 80107f2:	ee07 3a90 	vmov	s15, r3
 80107f6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80107fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80107fe:	ee25 4a04 	vmul.f32	s8, s10, s8
 8010802:	ee65 4a24 	vmul.f32	s9, s10, s9
 8010806:	ee25 5a27 	vmul.f32	s10, s10, s15
 801080a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801080e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010812:	45e3      	cmp	fp, ip
 8010814:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8010818:	ee32 1a05 	vadd.f32	s2, s4, s10
 801081c:	ee36 0a84 	vadd.f32	s0, s13, s8
 8010820:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010824:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010828:	f340 808e 	ble.w	8010948 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 801082c:	fb9e f5f3 	sdiv	r5, lr, r3
 8010830:	ee07 5a10 	vmov	s14, r5
 8010834:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010838:	2d00      	cmp	r5, #0
 801083a:	fb03 e415 	mls	r4, r3, r5, lr
 801083e:	eea7 0a04 	vfma.f32	s0, s14, s8
 8010842:	eee7 0a24 	vfma.f32	s1, s14, s9
 8010846:	eea7 1a05 	vfma.f32	s2, s14, s10
 801084a:	dd13      	ble.n	8010874 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801084c:	ee70 6a44 	vsub.f32	s13, s0, s8
 8010850:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8010854:	eef5 6a40 	vcmp.f32	s13, #0.0
 8010858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085c:	bf18      	it	ne
 801085e:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8010862:	ee31 2a45 	vsub.f32	s4, s2, s10
 8010866:	bf08      	it	eq
 8010868:	eeb0 7a67 	vmoveq.f32	s14, s15
 801086c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010870:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010874:	fb05 f703 	mul.w	r7, r5, r3
 8010878:	1bc0      	subs	r0, r0, r7
 801087a:	443e      	add	r6, r7
 801087c:	1997      	adds	r7, r2, r6
 801087e:	4407      	add	r7, r0
 8010880:	42b9      	cmp	r1, r7
 8010882:	bfbc      	itt	lt
 8010884:	1a88      	sublt	r0, r1, r2
 8010886:	1b80      	sublt	r0, r0, r6
 8010888:	2800      	cmp	r0, #0
 801088a:	dd5a      	ble.n	8010942 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 801088c:	fb90 f1f3 	sdiv	r1, r0, r3
 8010890:	fb03 0211 	mls	r2, r3, r1, r0
 8010894:	b90a      	cbnz	r2, 801089a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 8010896:	3901      	subs	r1, #1
 8010898:	461a      	mov	r2, r3
 801089a:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801089e:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 80108a2:	44a4      	add	ip, r4
 80108a4:	fb03 c505 	mla	r5, r3, r5, ip
 80108a8:	2900      	cmp	r1, #0
 80108aa:	bfcc      	ite	gt
 80108ac:	469e      	movgt	lr, r3
 80108ae:	4696      	movle	lr, r2
 80108b0:	eef0 6a42 	vmov.f32	s13, s4
 80108b4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80108b8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80108bc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80108c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80108c4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80108c8:	eeb0 7a61 	vmov.f32	s14, s3
 80108cc:	ee17 0a90 	vmov	r0, s15
 80108d0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80108d4:	fb90 f6f3 	sdiv	r6, r0, r3
 80108d8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80108dc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80108e0:	ee17 0a90 	vmov	r0, s15
 80108e4:	fb90 f7f3 	sdiv	r7, r0, r3
 80108e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80108ec:	900c      	str	r0, [sp, #48]	; 0x30
 80108ee:	f8d0 8000 	ldr.w	r8, [r0]
 80108f2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80108f4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80108f8:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80108fc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010900:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8010904:	f8cd a020 	str.w	sl, [sp, #32]
 8010908:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801090c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801090e:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8010912:	9603      	str	r6, [sp, #12]
 8010914:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8010918:	ee16 0a90 	vmov	r0, s13
 801091c:	fb07 0704 	mla	r7, r7, r4, r0
 8010920:	ee17 0a10 	vmov	r0, s14
 8010924:	fb06 0604 	mla	r6, r6, r4, r0
 8010928:	e9cd 3600 	strd	r3, r6, [sp]
 801092c:	44ca      	add	sl, r9
 801092e:	f8cd a01c 	str.w	sl, [sp, #28]
 8010932:	9506      	str	r5, [sp, #24]
 8010934:	9702      	str	r7, [sp, #8]
 8010936:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801093a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801093c:	ebae 0304 	sub.w	r3, lr, r4
 8010940:	47a8      	blx	r5
 8010942:	b011      	add	sp, #68	; 0x44
 8010944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010948:	462c      	mov	r4, r5
 801094a:	e797      	b.n	801087c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

0801094c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801094c:	b570      	push	{r4, r5, r6, lr}
 801094e:	4604      	mov	r4, r0
 8010950:	2500      	movs	r5, #0
 8010952:	7223      	strb	r3, [r4, #8]
 8010954:	9804      	ldr	r0, [sp, #16]
 8010956:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801095a:	8025      	strh	r5, [r4, #0]
 801095c:	6061      	str	r1, [r4, #4]
 801095e:	7263      	strb	r3, [r4, #9]
 8010960:	60e0      	str	r0, [r4, #12]
 8010962:	8222      	strh	r2, [r4, #16]
 8010964:	8265      	strh	r5, [r4, #18]
 8010966:	82a5      	strh	r5, [r4, #20]
 8010968:	82e5      	strh	r5, [r4, #22]
 801096a:	8325      	strh	r5, [r4, #24]
 801096c:	8365      	strh	r5, [r4, #26]
 801096e:	83a5      	strh	r5, [r4, #28]
 8010970:	77a5      	strb	r5, [r4, #30]
 8010972:	6803      	ldr	r3, [r0, #0]
 8010974:	695b      	ldr	r3, [r3, #20]
 8010976:	4798      	blx	r3
 8010978:	4606      	mov	r6, r0
 801097a:	b1f8      	cbz	r0, 80109bc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801097c:	68e0      	ldr	r0, [r4, #12]
 801097e:	6803      	ldr	r3, [r0, #0]
 8010980:	4631      	mov	r1, r6
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	4798      	blx	r3
 8010986:	7b43      	ldrb	r3, [r0, #13]
 8010988:	7a82      	ldrb	r2, [r0, #10]
 801098a:	005b      	lsls	r3, r3, #1
 801098c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010990:	4313      	orrs	r3, r2
 8010992:	83a3      	strh	r3, [r4, #28]
 8010994:	7a63      	ldrb	r3, [r4, #9]
 8010996:	2b04      	cmp	r3, #4
 8010998:	4605      	mov	r5, r0
 801099a:	d10f      	bne.n	80109bc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801099c:	68e0      	ldr	r0, [r4, #12]
 801099e:	6803      	ldr	r3, [r0, #0]
 80109a0:	462a      	mov	r2, r5
 80109a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109a4:	4631      	mov	r1, r6
 80109a6:	4798      	blx	r3
 80109a8:	7b6b      	ldrb	r3, [r5, #13]
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80109b0:	7aab      	ldrb	r3, [r5, #10]
 80109b2:	4313      	orrs	r3, r2
 80109b4:	4418      	add	r0, r3
 80109b6:	8ba3      	ldrh	r3, [r4, #28]
 80109b8:	4418      	add	r0, r3
 80109ba:	83a0      	strh	r0, [r4, #28]
 80109bc:	4620      	mov	r0, r4
 80109be:	bd70      	pop	{r4, r5, r6, pc}

080109c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80109c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c4:	2400      	movs	r4, #0
 80109c6:	b085      	sub	sp, #20
 80109c8:	4681      	mov	r9, r0
 80109ca:	4688      	mov	r8, r1
 80109cc:	4692      	mov	sl, r2
 80109ce:	469b      	mov	fp, r3
 80109d0:	4627      	mov	r7, r4
 80109d2:	4625      	mov	r5, r4
 80109d4:	4626      	mov	r6, r4
 80109d6:	4554      	cmp	r4, sl
 80109d8:	da2a      	bge.n	8010a30 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80109da:	2300      	movs	r3, #0
 80109dc:	9303      	str	r3, [sp, #12]
 80109de:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80109e2:	429d      	cmp	r5, r3
 80109e4:	d004      	beq.n	80109f0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80109e6:	f242 030b 	movw	r3, #8203	; 0x200b
 80109ea:	429d      	cmp	r5, r3
 80109ec:	bf18      	it	ne
 80109ee:	462f      	movne	r7, r5
 80109f0:	ab03      	add	r3, sp, #12
 80109f2:	4642      	mov	r2, r8
 80109f4:	4659      	mov	r1, fp
 80109f6:	4648      	mov	r0, r9
 80109f8:	f002 fa70 	bl	8012edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80109fc:	4605      	mov	r5, r0
 80109fe:	b1b8      	cbz	r0, 8010a30 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8010a00:	280a      	cmp	r0, #10
 8010a02:	d015      	beq.n	8010a30 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8010a04:	9a03      	ldr	r2, [sp, #12]
 8010a06:	b18a      	cbz	r2, 8010a2c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8010a08:	7b50      	ldrb	r0, [r2, #13]
 8010a0a:	7a93      	ldrb	r3, [r2, #10]
 8010a0c:	8895      	ldrh	r5, [r2, #4]
 8010a0e:	0040      	lsls	r0, r0, #1
 8010a10:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8010a14:	4303      	orrs	r3, r0
 8010a16:	9301      	str	r3, [sp, #4]
 8010a18:	f8d8 3000 	ldr.w	r3, [r8]
 8010a1c:	4639      	mov	r1, r7
 8010a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a20:	4640      	mov	r0, r8
 8010a22:	4798      	blx	r3
 8010a24:	9b01      	ldr	r3, [sp, #4]
 8010a26:	4418      	add	r0, r3
 8010a28:	4406      	add	r6, r0
 8010a2a:	b2b6      	uxth	r6, r6
 8010a2c:	3401      	adds	r4, #1
 8010a2e:	e7d2      	b.n	80109d6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8010a30:	4630      	mov	r0, r6
 8010a32:	b005      	add	sp, #20
 8010a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a38 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8010a38:	2a02      	cmp	r2, #2
 8010a3a:	b530      	push	{r4, r5, lr}
 8010a3c:	d011      	beq.n	8010a62 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8010a3e:	2a03      	cmp	r2, #3
 8010a40:	d01c      	beq.n	8010a7c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8010a42:	2a01      	cmp	r2, #1
 8010a44:	d10c      	bne.n	8010a60 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8010a46:	888b      	ldrh	r3, [r1, #4]
 8010a48:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8010a4c:	8801      	ldrh	r1, [r0, #0]
 8010a4e:	8844      	ldrh	r4, [r0, #2]
 8010a50:	8004      	strh	r4, [r0, #0]
 8010a52:	1a9b      	subs	r3, r3, r2
 8010a54:	1a5b      	subs	r3, r3, r1
 8010a56:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8010a5a:	8043      	strh	r3, [r0, #2]
 8010a5c:	8081      	strh	r1, [r0, #4]
 8010a5e:	80c2      	strh	r2, [r0, #6]
 8010a60:	bd30      	pop	{r4, r5, pc}
 8010a62:	88cb      	ldrh	r3, [r1, #6]
 8010a64:	88c2      	ldrh	r2, [r0, #6]
 8010a66:	1a9b      	subs	r3, r3, r2
 8010a68:	8842      	ldrh	r2, [r0, #2]
 8010a6a:	1a9b      	subs	r3, r3, r2
 8010a6c:	888a      	ldrh	r2, [r1, #4]
 8010a6e:	8881      	ldrh	r1, [r0, #4]
 8010a70:	8043      	strh	r3, [r0, #2]
 8010a72:	1a52      	subs	r2, r2, r1
 8010a74:	8801      	ldrh	r1, [r0, #0]
 8010a76:	1a52      	subs	r2, r2, r1
 8010a78:	8002      	strh	r2, [r0, #0]
 8010a7a:	e7f1      	b.n	8010a60 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8010a7c:	88cb      	ldrh	r3, [r1, #6]
 8010a7e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8010a82:	8841      	ldrh	r1, [r0, #2]
 8010a84:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010a88:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8010a8c:	8045      	strh	r5, [r0, #2]
 8010a8e:	1a9b      	subs	r3, r3, r2
 8010a90:	1a5b      	subs	r3, r3, r1
 8010a92:	8003      	strh	r3, [r0, #0]
 8010a94:	8082      	strh	r2, [r0, #4]
 8010a96:	80c4      	strh	r4, [r0, #6]
 8010a98:	e7e2      	b.n	8010a60 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08010a9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8010a9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9e:	b09f      	sub	sp, #124	; 0x7c
 8010aa0:	9116      	str	r1, [sp, #88]	; 0x58
 8010aa2:	9317      	str	r3, [sp, #92]	; 0x5c
 8010aa4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010aa6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010aa8:	8809      	ldrh	r1, [r1, #0]
 8010aaa:	889b      	ldrh	r3, [r3, #4]
 8010aac:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8010ab0:	9212      	str	r2, [sp, #72]	; 0x48
 8010ab2:	440b      	add	r3, r1
 8010ab4:	b21b      	sxth	r3, r3
 8010ab6:	9310      	str	r3, [sp, #64]	; 0x40
 8010ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8010abc:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8010ac0:	7a59      	ldrb	r1, [r3, #9]
 8010ac2:	7a1b      	ldrb	r3, [r3, #8]
 8010ac4:	9315      	str	r3, [sp, #84]	; 0x54
 8010ac6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010ac8:	9011      	str	r0, [sp, #68]	; 0x44
 8010aca:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8010ace:	9114      	str	r1, [sp, #80]	; 0x50
 8010ad0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010ad4:	2a00      	cmp	r2, #0
 8010ad6:	d067      	beq.n	8010ba8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8010ad8:	f898 3010 	ldrb.w	r3, [r8, #16]
 8010adc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8010ade:	2b04      	cmp	r3, #4
 8010ae0:	bf14      	ite	ne
 8010ae2:	2301      	movne	r3, #1
 8010ae4:	2302      	moveq	r3, #2
 8010ae6:	4413      	add	r3, r2
 8010ae8:	f04f 0900 	mov.w	r9, #0
 8010aec:	930f      	str	r3, [sp, #60]	; 0x3c
 8010aee:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010af2:	464c      	mov	r4, r9
 8010af4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8010af8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8010afc:	4293      	cmp	r3, r2
 8010afe:	f280 808c 	bge.w	8010c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8010b02:	2300      	movs	r3, #0
 8010b04:	931c      	str	r3, [sp, #112]	; 0x70
 8010b06:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010b0a:	429c      	cmp	r4, r3
 8010b0c:	d006      	beq.n	8010b1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8010b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b10:	f242 020b 	movw	r2, #8203	; 0x200b
 8010b14:	4294      	cmp	r4, r2
 8010b16:	bf18      	it	ne
 8010b18:	4623      	movne	r3, r4
 8010b1a:	930d      	str	r3, [sp, #52]	; 0x34
 8010b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b1e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8010b20:	f8d8 2000 	ldr.w	r2, [r8]
 8010b24:	428b      	cmp	r3, r1
 8010b26:	db41      	blt.n	8010bac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8010b28:	6813      	ldr	r3, [r2, #0]
 8010b2a:	4610      	mov	r0, r2
 8010b2c:	695b      	ldr	r3, [r3, #20]
 8010b2e:	4798      	blx	r3
 8010b30:	4604      	mov	r4, r0
 8010b32:	f8d8 0000 	ldr.w	r0, [r8]
 8010b36:	6803      	ldr	r3, [r0, #0]
 8010b38:	aa1d      	add	r2, sp, #116	; 0x74
 8010b3a:	689e      	ldr	r6, [r3, #8]
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8010b42:	47b0      	blx	r6
 8010b44:	901c      	str	r0, [sp, #112]	; 0x70
 8010b46:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010b4a:	429c      	cmp	r4, r3
 8010b4c:	f000 80e9 	beq.w	8010d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8010b50:	f242 030b 	movw	r3, #8203	; 0x200b
 8010b54:	429c      	cmp	r4, r3
 8010b56:	f000 80e4 	beq.w	8010d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8010b5a:	2c00      	cmp	r4, #0
 8010b5c:	f000 80f6 	beq.w	8010d4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8010b60:	2c0a      	cmp	r4, #10
 8010b62:	d060      	beq.n	8010c26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8010b64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010b66:	b36a      	cbz	r2, 8010bc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8010b68:	8894      	ldrh	r4, [r2, #4]
 8010b6a:	f1bb 0f00 	cmp.w	fp, #0
 8010b6e:	d03b      	beq.n	8010be8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8010b70:	f892 900d 	ldrb.w	r9, [r2, #13]
 8010b74:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8010b78:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8010b7c:	f892 900a 	ldrb.w	r9, [r2, #10]
 8010b80:	f1bb 0f01 	cmp.w	fp, #1
 8010b84:	ea49 0903 	orr.w	r9, r9, r3
 8010b88:	d134      	bne.n	8010bf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8010b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b8c:	eba5 0509 	sub.w	r5, r5, r9
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d14f      	bne.n	8010c34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8010b94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b96:	eb09 0305 	add.w	r3, r9, r5
 8010b9a:	4413      	add	r3, r2
 8010b9c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010b9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	da51      	bge.n	8010c4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8010ba6:	e038      	b.n	8010c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8010ba8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8010baa:	e79d      	b.n	8010ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8010bac:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8010bb0:	9301      	str	r3, [sp, #4]
 8010bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	4659      	mov	r1, fp
 8010bb8:	ab1c      	add	r3, sp, #112	; 0x70
 8010bba:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8010bbc:	f002 f9e2 	bl	8012f84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8010bc0:	4604      	mov	r4, r0
 8010bc2:	e7c0      	b.n	8010b46 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8010bc4:	f8d8 0000 	ldr.w	r0, [r8]
 8010bc8:	6803      	ldr	r3, [r0, #0]
 8010bca:	691b      	ldr	r3, [r3, #16]
 8010bcc:	4798      	blx	r3
 8010bce:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010bd2:	4298      	cmp	r0, r3
 8010bd4:	f000 80a5 	beq.w	8010d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8010bd8:	f242 030b 	movw	r3, #8203	; 0x200b
 8010bdc:	4298      	cmp	r0, r3
 8010bde:	f000 80a0 	beq.w	8010d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8010be2:	f1bb 0f00 	cmp.w	fp, #0
 8010be6:	d100      	bne.n	8010bea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8010be8:	444d      	add	r5, r9
 8010bea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010bec:	2a00      	cmp	r2, #0
 8010bee:	d1bf      	bne.n	8010b70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8010bf0:	4691      	mov	r9, r2
 8010bf2:	e096      	b.n	8010d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8010bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f000 80aa 	beq.w	8010d50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8010bfc:	f1bb 0f00 	cmp.w	fp, #0
 8010c00:	d118      	bne.n	8010c34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8010c02:	f8d8 0000 	ldr.w	r0, [r8]
 8010c06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010c08:	6803      	ldr	r3, [r0, #0]
 8010c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c0c:	4798      	blx	r3
 8010c0e:	4405      	add	r5, r0
 8010c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010c14:	1aeb      	subs	r3, r5, r3
 8010c16:	4293      	cmp	r3, r2
 8010c18:	dd17      	ble.n	8010c4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8010c1a:	2c00      	cmp	r4, #0
 8010c1c:	f000 8096 	beq.w	8010d4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8010c20:	2c0a      	cmp	r4, #10
 8010c22:	f040 8084 	bne.w	8010d2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 8010c26:	240a      	movs	r4, #10
 8010c28:	fab4 f084 	clz	r0, r4
 8010c2c:	0940      	lsrs	r0, r0, #5
 8010c2e:	b01f      	add	sp, #124	; 0x7c
 8010c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c34:	f8d8 0000 	ldr.w	r0, [r8]
 8010c38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010c3a:	6803      	ldr	r3, [r0, #0]
 8010c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c3e:	4798      	blx	r3
 8010c40:	f1bb 0f01 	cmp.w	fp, #1
 8010c44:	eba5 0500 	sub.w	r5, r5, r0
 8010c48:	d0a4      	beq.n	8010b94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8010c4a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010c4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010c4e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8010c52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010c56:	7b43      	ldrb	r3, [r0, #13]
 8010c58:	015b      	lsls	r3, r3, #5
 8010c5a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010c5e:	7983      	ldrb	r3, [r0, #6]
 8010c60:	4429      	add	r1, r5
 8010c62:	4313      	orrs	r3, r2
 8010c64:	440b      	add	r3, r1
 8010c66:	42b3      	cmp	r3, r6
 8010c68:	db5b      	blt.n	8010d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8010c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c6c:	4299      	cmp	r1, r3
 8010c6e:	da58      	bge.n	8010d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8010c70:	f8d8 0000 	ldr.w	r0, [r8]
 8010c74:	6803      	ldr	r3, [r0, #0]
 8010c76:	42ae      	cmp	r6, r5
 8010c78:	bfc8      	it	gt
 8010c7a:	1b76      	subgt	r6, r6, r5
 8010c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c7e:	bfcc      	ite	gt
 8010c80:	b2b6      	uxthgt	r6, r6
 8010c82:	2600      	movle	r6, #0
 8010c84:	4798      	blx	r3
 8010c86:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010c88:	7b5a      	ldrb	r2, [r3, #13]
 8010c8a:	00d1      	lsls	r1, r2, #3
 8010c8c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8010c90:	7a19      	ldrb	r1, [r3, #8]
 8010c92:	4339      	orrs	r1, r7
 8010c94:	0657      	lsls	r7, r2, #25
 8010c96:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8010c98:	bf44      	itt	mi
 8010c9a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8010c9e:	b209      	sxthmi	r1, r1
 8010ca0:	19c7      	adds	r7, r0, r7
 8010ca2:	1a7f      	subs	r7, r7, r1
 8010ca4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010ca6:	b2bf      	uxth	r7, r7
 8010ca8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8010cac:	fa0f fa87 	sxth.w	sl, r7
 8010cb0:	4551      	cmp	r1, sl
 8010cb2:	dd3a      	ble.n	8010d2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8010cb4:	0112      	lsls	r2, r2, #4
 8010cb6:	79d8      	ldrb	r0, [r3, #7]
 8010cb8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8010cbc:	4302      	orrs	r2, r0
 8010cbe:	4492      	add	sl, r2
 8010cc0:	4551      	cmp	r1, sl
 8010cc2:	dc2e      	bgt.n	8010d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8010cc4:	1bcf      	subs	r7, r1, r7
 8010cc6:	b2bf      	uxth	r7, r7
 8010cc8:	468a      	mov	sl, r1
 8010cca:	9319      	str	r3, [sp, #100]	; 0x64
 8010ccc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cce:	f8d8 0000 	ldr.w	r0, [r8]
 8010cd2:	681a      	ldr	r2, [r3, #0]
 8010cd4:	6801      	ldr	r1, [r0, #0]
 8010cd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010cd8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010cda:	9313      	str	r3, [sp, #76]	; 0x4c
 8010cdc:	9218      	str	r2, [sp, #96]	; 0x60
 8010cde:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8010ce0:	4788      	blx	r1
 8010ce2:	f898 1006 	ldrb.w	r1, [r8, #6]
 8010ce6:	910b      	str	r1, [sp, #44]	; 0x2c
 8010ce8:	f898 100e 	ldrb.w	r1, [r8, #14]
 8010cec:	910a      	str	r1, [sp, #40]	; 0x28
 8010cee:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8010cf2:	9109      	str	r1, [sp, #36]	; 0x24
 8010cf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010cf6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010cfa:	9305      	str	r3, [sp, #20]
 8010cfc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010cfe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010d00:	9206      	str	r2, [sp, #24]
 8010d02:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8010d06:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8010d0a:	e9cd a601 	strd	sl, r6, [sp, #4]
 8010d0e:	442e      	add	r6, r5
 8010d10:	b236      	sxth	r6, r6
 8010d12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010d14:	9600      	str	r6, [sp, #0]
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010d1a:	685b      	ldr	r3, [r3, #4]
 8010d1c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010d1e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010d20:	47b0      	blx	r6
 8010d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d24:	3301      	adds	r3, #1
 8010d26:	930e      	str	r3, [sp, #56]	; 0x38
 8010d28:	e6e6      	b.n	8010af8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8010d2a:	2700      	movs	r7, #0
 8010d2c:	e7cd      	b.n	8010cca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 8010d2e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010d30:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8010d32:	3501      	adds	r5, #1
 8010d34:	429d      	cmp	r5, r3
 8010d36:	f6bf af77 	bge.w	8010c28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8010d3a:	4659      	mov	r1, fp
 8010d3c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8010d3e:	f7fb fdc1 	bl	800c8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8010d42:	4604      	mov	r4, r0
 8010d44:	b110      	cbz	r0, 8010d4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8010d46:	280a      	cmp	r0, #10
 8010d48:	d1f2      	bne.n	8010d30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8010d4a:	e76c      	b.n	8010c26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8010d4c:	2400      	movs	r4, #0
 8010d4e:	e76b      	b.n	8010c28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8010d50:	f1bb 0f00 	cmp.w	fp, #0
 8010d54:	f43f af5c 	beq.w	8010c10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8010d58:	e777      	b.n	8010c4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08010d5a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8010d5a:	b530      	push	{r4, r5, lr}
 8010d5c:	8a44      	ldrh	r4, [r0, #18]
 8010d5e:	8ac5      	ldrh	r5, [r0, #22]
 8010d60:	82c3      	strh	r3, [r0, #22]
 8010d62:	442c      	add	r4, r5
 8010d64:	1ae4      	subs	r4, r4, r3
 8010d66:	8244      	strh	r4, [r0, #18]
 8010d68:	8b03      	ldrh	r3, [r0, #24]
 8010d6a:	8a84      	ldrh	r4, [r0, #20]
 8010d6c:	4422      	add	r2, r4
 8010d6e:	440c      	add	r4, r1
 8010d70:	1a59      	subs	r1, r3, r1
 8010d72:	8342      	strh	r2, [r0, #26]
 8010d74:	8284      	strh	r4, [r0, #20]
 8010d76:	8301      	strh	r1, [r0, #24]
 8010d78:	bd30      	pop	{r4, r5, pc}

08010d7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8010d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d7e:	7a43      	ldrb	r3, [r0, #9]
 8010d80:	1eda      	subs	r2, r3, #3
 8010d82:	b087      	sub	sp, #28
 8010d84:	4604      	mov	r4, r0
 8010d86:	b2d2      	uxtb	r2, r2
 8010d88:	460f      	mov	r7, r1
 8010d8a:	2900      	cmp	r1, #0
 8010d8c:	d036      	beq.n	8010dfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8010d8e:	2a01      	cmp	r2, #1
 8010d90:	d932      	bls.n	8010df8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8010d92:	1e58      	subs	r0, r3, #1
 8010d94:	f1d0 0b00 	rsbs	fp, r0, #0
 8010d98:	eb4b 0b00 	adc.w	fp, fp, r0
 8010d9c:	1e99      	subs	r1, r3, #2
 8010d9e:	424b      	negs	r3, r1
 8010da0:	414b      	adcs	r3, r1
 8010da2:	9303      	str	r3, [sp, #12]
 8010da4:	2300      	movs	r3, #0
 8010da6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8010daa:	2500      	movs	r5, #0
 8010dac:	8265      	strh	r5, [r4, #18]
 8010dae:	82a5      	strh	r5, [r4, #20]
 8010db0:	46a9      	mov	r9, r5
 8010db2:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8010db6:	2300      	movs	r3, #0
 8010db8:	9305      	str	r3, [sp, #20]
 8010dba:	8823      	ldrh	r3, [r4, #0]
 8010dbc:	2b20      	cmp	r3, #32
 8010dbe:	d02b      	beq.n	8010e18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8010dc0:	eba3 020a 	sub.w	r2, r3, sl
 8010dc4:	4256      	negs	r6, r2
 8010dc6:	4156      	adcs	r6, r2
 8010dc8:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d004      	beq.n	8010dda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8010dd0:	4553      	cmp	r3, sl
 8010dd2:	bf16      	itet	ne
 8010dd4:	4699      	movne	r9, r3
 8010dd6:	2601      	moveq	r6, #1
 8010dd8:	2600      	movne	r6, #0
 8010dda:	ab05      	add	r3, sp, #20
 8010ddc:	68e2      	ldr	r2, [r4, #12]
 8010dde:	7a21      	ldrb	r1, [r4, #8]
 8010de0:	6860      	ldr	r0, [r4, #4]
 8010de2:	f002 f87b 	bl	8012edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010de6:	8020      	strh	r0, [r4, #0]
 8010de8:	b9c8      	cbnz	r0, 8010e1e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8010dea:	8b22      	ldrh	r2, [r4, #24]
 8010dec:	2300      	movs	r3, #0
 8010dee:	4611      	mov	r1, r2
 8010df0:	4620      	mov	r0, r4
 8010df2:	f7ff ffb2 	bl	8010d5a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8010df6:	e066      	b.n	8010ec6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8010df8:	468b      	mov	fp, r1
 8010dfa:	e7cf      	b.n	8010d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8010dfc:	3b01      	subs	r3, #1
 8010dfe:	2a01      	cmp	r2, #1
 8010e00:	bf8c      	ite	hi
 8010e02:	2200      	movhi	r2, #0
 8010e04:	2201      	movls	r2, #1
 8010e06:	2b01      	cmp	r3, #1
 8010e08:	bf8c      	ite	hi
 8010e0a:	2300      	movhi	r3, #0
 8010e0c:	2301      	movls	r3, #1
 8010e0e:	9202      	str	r2, [sp, #8]
 8010e10:	9301      	str	r3, [sp, #4]
 8010e12:	9103      	str	r1, [sp, #12]
 8010e14:	468b      	mov	fp, r1
 8010e16:	e7c8      	b.n	8010daa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8010e18:	4699      	mov	r9, r3
 8010e1a:	2601      	movs	r6, #1
 8010e1c:	e7dd      	b.n	8010dda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8010e1e:	8ae3      	ldrh	r3, [r4, #22]
 8010e20:	280a      	cmp	r0, #10
 8010e22:	f103 0301 	add.w	r3, r3, #1
 8010e26:	82e3      	strh	r3, [r4, #22]
 8010e28:	d0df      	beq.n	8010dea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8010e2a:	9a05      	ldr	r2, [sp, #20]
 8010e2c:	bb42      	cbnz	r2, 8010e80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8010e2e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010e32:	4298      	cmp	r0, r3
 8010e34:	d001      	beq.n	8010e3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8010e36:	4550      	cmp	r0, sl
 8010e38:	d1bd      	bne.n	8010db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010e3a:	8823      	ldrh	r3, [r4, #0]
 8010e3c:	8b21      	ldrh	r1, [r4, #24]
 8010e3e:	2b20      	cmp	r3, #32
 8010e40:	d001      	beq.n	8010e46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8010e42:	4553      	cmp	r3, sl
 8010e44:	d131      	bne.n	8010eaa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8010e46:	2e00      	cmp	r6, #0
 8010e48:	bf0a      	itet	eq
 8010e4a:	460d      	moveq	r5, r1
 8010e4c:	4630      	movne	r0, r6
 8010e4e:	2001      	moveq	r0, #1
 8010e50:	440a      	add	r2, r1
 8010e52:	8aa3      	ldrh	r3, [r4, #20]
 8010e54:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8010e58:	b292      	uxth	r2, r2
 8010e5a:	8322      	strh	r2, [r4, #24]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	2f00      	cmp	r7, #0
 8010e60:	d03a      	beq.n	8010ed8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8010e62:	f1bb 0f00 	cmp.w	fp, #0
 8010e66:	d102      	bne.n	8010e6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8010e68:	9903      	ldr	r1, [sp, #12]
 8010e6a:	b301      	cbz	r1, 8010eae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8010e6c:	b1f8      	cbz	r0, 8010eae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8010e6e:	8ba1      	ldrh	r1, [r4, #28]
 8010e70:	4419      	add	r1, r3
 8010e72:	458c      	cmp	ip, r1
 8010e74:	da2a      	bge.n	8010ecc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8010e76:	8a61      	ldrh	r1, [r4, #18]
 8010e78:	b341      	cbz	r1, 8010ecc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8010e7a:	4563      	cmp	r3, ip
 8010e7c:	dd9b      	ble.n	8010db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010e7e:	e01c      	b.n	8010eba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8010e80:	8893      	ldrh	r3, [r2, #4]
 8010e82:	8023      	strh	r3, [r4, #0]
 8010e84:	f892 800d 	ldrb.w	r8, [r2, #13]
 8010e88:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8010e8c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8010e90:	f892 800a 	ldrb.w	r8, [r2, #10]
 8010e94:	ea48 0800 	orr.w	r8, r8, r0
 8010e98:	68e0      	ldr	r0, [r4, #12]
 8010e9a:	6803      	ldr	r3, [r0, #0]
 8010e9c:	4649      	mov	r1, r9
 8010e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ea0:	4798      	blx	r3
 8010ea2:	eb08 0200 	add.w	r2, r8, r0
 8010ea6:	b292      	uxth	r2, r2
 8010ea8:	e7c7      	b.n	8010e3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8010eaa:	2000      	movs	r0, #0
 8010eac:	e7d0      	b.n	8010e50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8010eae:	4563      	cmp	r3, ip
 8010eb0:	dd81      	ble.n	8010db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010eb2:	8a63      	ldrh	r3, [r4, #18]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f43f af7e 	beq.w	8010db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010eba:	2301      	movs	r3, #1
 8010ebc:	77a3      	strb	r3, [r4, #30]
 8010ebe:	8ba2      	ldrh	r2, [r4, #28]
 8010ec0:	8b63      	ldrh	r3, [r4, #26]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	8363      	strh	r3, [r4, #26]
 8010ec6:	b007      	add	sp, #28
 8010ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ecc:	2300      	movs	r3, #0
 8010ece:	4611      	mov	r1, r2
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	f7ff ff42 	bl	8010d5a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8010ed6:	e76e      	b.n	8010db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010ed8:	4563      	cmp	r3, ip
 8010eda:	dd14      	ble.n	8010f06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8010edc:	9b02      	ldr	r3, [sp, #8]
 8010ede:	b113      	cbz	r3, 8010ee6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	460a      	mov	r2, r1
 8010ee4:	e783      	b.n	8010dee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8010ee6:	9b01      	ldr	r3, [sp, #4]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	f43f af64 	beq.w	8010db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	f47f af61 	bne.w	8010db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010ef4:	b116      	cbz	r6, 8010efc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	462a      	mov	r2, r5
 8010efa:	e779      	b.n	8010df0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8010efc:	8a63      	ldrh	r3, [r4, #18]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	f43f af59 	beq.w	8010db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010f04:	e7df      	b.n	8010ec6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8010f06:	2800      	cmp	r0, #0
 8010f08:	f47f af55 	bne.w	8010db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010f0c:	2e00      	cmp	r6, #0
 8010f0e:	f43f af52 	beq.w	8010db6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8010f12:	2301      	movs	r3, #1
 8010f14:	462a      	mov	r2, r5
 8010f16:	e7db      	b.n	8010ed0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08010f18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8010f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f1c:	b0db      	sub	sp, #364	; 0x16c
 8010f1e:	4689      	mov	r9, r1
 8010f20:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8010f24:	900a      	str	r0, [sp, #40]	; 0x28
 8010f26:	461c      	mov	r4, r3
 8010f28:	f1ba 0f00 	cmp.w	sl, #0
 8010f2c:	f000 80a5 	beq.w	801107a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	f000 80a1 	beq.w	801107a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8010f38:	7ba3      	ldrb	r3, [r4, #14]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f000 809d 	beq.w	801107a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8010f40:	6810      	ldr	r0, [r2, #0]
 8010f42:	6851      	ldr	r1, [r2, #4]
 8010f44:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8010f48:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8010f4c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010f50:	4643      	mov	r3, r8
 8010f52:	c303      	stmia	r3!, {r0, r1}
 8010f54:	2500      	movs	r5, #0
 8010f56:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8010f5a:	79a2      	ldrb	r2, [r4, #6]
 8010f5c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010f60:	a90e      	add	r1, sp, #56	; 0x38
 8010f62:	4640      	mov	r0, r8
 8010f64:	950e      	str	r5, [sp, #56]	; 0x38
 8010f66:	f7ff fd67 	bl	8010a38 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8010f6a:	a90e      	add	r1, sp, #56	; 0x38
 8010f6c:	4608      	mov	r0, r1
 8010f6e:	79a2      	ldrb	r2, [r4, #6]
 8010f70:	af18      	add	r7, sp, #96	; 0x60
 8010f72:	f7ff fd61 	bl	8010a38 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8010f76:	4638      	mov	r0, r7
 8010f78:	f001 fc72 	bl	8012860 <_ZN8touchgfx12TextProviderC1Ev>
 8010f7c:	6820      	ldr	r0, [r4, #0]
 8010f7e:	6803      	ldr	r3, [r0, #0]
 8010f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f82:	4798      	blx	r3
 8010f84:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8010f86:	4603      	mov	r3, r0
 8010f88:	4651      	mov	r1, sl
 8010f8a:	4638      	mov	r0, r7
 8010f8c:	f001 fcad 	bl	80128ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8010f90:	6820      	ldr	r0, [r4, #0]
 8010f92:	7923      	ldrb	r3, [r4, #4]
 8010f94:	9308      	str	r3, [sp, #32]
 8010f96:	6803      	ldr	r3, [r0, #0]
 8010f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f9a:	4798      	blx	r3
 8010f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fa0:	181e      	adds	r6, r3, r0
 8010fa2:	42ae      	cmp	r6, r5
 8010fa4:	dd06      	ble.n	8010fb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8010fa6:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8010faa:	4282      	cmp	r2, r0
 8010fac:	bfa4      	itt	ge
 8010fae:	189d      	addge	r5, r3, r2
 8010fb0:	fb95 f5f6 	sdivge	r5, r5, r6
 8010fb4:	a82e      	add	r0, sp, #184	; 0xb8
 8010fb6:	f001 fc53 	bl	8012860 <_ZN8touchgfx12TextProviderC1Ev>
 8010fba:	7c23      	ldrb	r3, [r4, #16]
 8010fbc:	b14b      	cbz	r3, 8010fd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8010fbe:	6820      	ldr	r0, [r4, #0]
 8010fc0:	6803      	ldr	r3, [r0, #0]
 8010fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fc4:	4798      	blx	r3
 8010fc6:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8010fc8:	4603      	mov	r3, r0
 8010fca:	4651      	mov	r1, sl
 8010fcc:	a82e      	add	r0, sp, #184	; 0xb8
 8010fce:	f001 fc8c 	bl	80128ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8010fd2:	7c21      	ldrb	r1, [r4, #16]
 8010fd4:	9101      	str	r1, [sp, #4]
 8010fd6:	6821      	ldr	r1, [r4, #0]
 8010fd8:	7963      	ldrb	r3, [r4, #5]
 8010fda:	9100      	str	r1, [sp, #0]
 8010fdc:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8010fe0:	a92e      	add	r1, sp, #184	; 0xb8
 8010fe2:	a810      	add	r0, sp, #64	; 0x40
 8010fe4:	f7ff fcb2 	bl	801094c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8010fe8:	7c23      	ldrb	r3, [r4, #16]
 8010fea:	b9bb      	cbnz	r3, 801101c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8010fec:	fa1f fa86 	uxth.w	sl, r6
 8010ff0:	2d00      	cmp	r5, #0
 8010ff2:	dd45      	ble.n	8011080 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8010ff4:	4638      	mov	r0, r7
 8010ff6:	f002 f863 	bl	80130c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	d03d      	beq.n	801107a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8010ffe:	280a      	cmp	r0, #10
 8011000:	d1f6      	bne.n	8010ff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8011002:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8011006:	4453      	add	r3, sl
 8011008:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801100c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011010:	eba3 030a 	sub.w	r3, r3, sl
 8011014:	3d01      	subs	r5, #1
 8011016:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801101a:	e7e9      	b.n	8010ff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801101c:	0073      	lsls	r3, r6, #1
 801101e:	9309      	str	r3, [sp, #36]	; 0x24
 8011020:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8011024:	fa1f fa86 	uxth.w	sl, r6
 8011028:	2d00      	cmp	r5, #0
 801102a:	dd29      	ble.n	8011080 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801102c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8011030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011032:	428b      	cmp	r3, r1
 8011034:	bfd4      	ite	le
 8011036:	2100      	movle	r1, #0
 8011038:	2101      	movgt	r1, #1
 801103a:	a810      	add	r0, sp, #64	; 0x40
 801103c:	f7ff fe9d 	bl	8010d7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8011040:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8011044:	3b01      	subs	r3, #1
 8011046:	b29b      	uxth	r3, r3
 8011048:	455b      	cmp	r3, fp
 801104a:	930b      	str	r3, [sp, #44]	; 0x2c
 801104c:	d005      	beq.n	801105a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801104e:	7961      	ldrb	r1, [r4, #5]
 8011050:	4638      	mov	r0, r7
 8011052:	f7fb fc37 	bl	800c8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011058:	e7f4      	b.n	8011044 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 801105a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801105e:	4453      	add	r3, sl
 8011060:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8011064:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011068:	eba3 030a 	sub.w	r3, r3, sl
 801106c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011070:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011074:	3d01      	subs	r5, #1
 8011076:	2b00      	cmp	r3, #0
 8011078:	d1d6      	bne.n	8011028 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 801107a:	b05b      	add	sp, #364	; 0x16c
 801107c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011080:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8011084:	ad44      	add	r5, sp, #272	; 0x110
 8011086:	f04f 0b00 	mov.w	fp, #0
 801108a:	7c23      	ldrb	r3, [r4, #16]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d067      	beq.n	8011160 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8011090:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8011094:	458a      	cmp	sl, r1
 8011096:	bfd4      	ite	le
 8011098:	2100      	movle	r1, #0
 801109a:	2101      	movgt	r1, #1
 801109c:	a810      	add	r0, sp, #64	; 0x40
 801109e:	f7ff fe6c 	bl	8010d7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80110a2:	9b08      	ldr	r3, [sp, #32]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d056      	beq.n	8011156 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80110a8:	7c23      	ldrb	r3, [r4, #16]
 80110aa:	9309      	str	r3, [sp, #36]	; 0x24
 80110ac:	2258      	movs	r2, #88	; 0x58
 80110ae:	4639      	mov	r1, r7
 80110b0:	4628      	mov	r0, r5
 80110b2:	f00a fced 	bl	801ba90 <memcpy>
 80110b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d059      	beq.n	8011170 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 80110bc:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80110c0:	7922      	ldrb	r2, [r4, #4]
 80110c2:	2a01      	cmp	r2, #1
 80110c4:	d13d      	bne.n	8011142 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 80110c6:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80110ca:	1ac0      	subs	r0, r0, r3
 80110cc:	2302      	movs	r3, #2
 80110ce:	fb90 f0f3 	sdiv	r0, r0, r3
 80110d2:	b200      	sxth	r0, r0
 80110d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80110d8:	4418      	add	r0, r3
 80110da:	7c23      	ldrb	r3, [r4, #16]
 80110dc:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d03a      	beq.n	801115a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80110e4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80110e8:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80110ec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80110f0:	9500      	str	r5, [sp, #0]
 80110f2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80110f6:	e9cd b703 	strd	fp, r7, [sp, #12]
 80110fa:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80110fe:	464a      	mov	r2, r9
 8011100:	2100      	movs	r1, #0
 8011102:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011104:	f7ff fcc9 	bl	8010a9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8011108:	2800      	cmp	r0, #0
 801110a:	d1b6      	bne.n	801107a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801110c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8011110:	b2b2      	uxth	r2, r6
 8011112:	4611      	mov	r1, r2
 8011114:	4413      	add	r3, r2
 8011116:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801111a:	1a52      	subs	r2, r2, r1
 801111c:	7c21      	ldrb	r1, [r4, #16]
 801111e:	b21b      	sxth	r3, r3
 8011120:	b212      	sxth	r2, r2
 8011122:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8011126:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801112a:	b109      	cbz	r1, 8011130 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801112c:	42b2      	cmp	r2, r6
 801112e:	dba4      	blt.n	801107a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8011130:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8011134:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8011138:	440a      	add	r2, r1
 801113a:	b212      	sxth	r2, r2
 801113c:	4293      	cmp	r3, r2
 801113e:	dda4      	ble.n	801108a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8011140:	e79b      	b.n	801107a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8011142:	2a02      	cmp	r2, #2
 8011144:	d105      	bne.n	8011152 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8011146:	7be2      	ldrb	r2, [r4, #15]
 8011148:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801114c:	1a80      	subs	r0, r0, r2
 801114e:	1ac0      	subs	r0, r0, r3
 8011150:	e7bf      	b.n	80110d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8011152:	2000      	movs	r0, #0
 8011154:	e7be      	b.n	80110d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8011156:	7be0      	ldrb	r0, [r4, #15]
 8011158:	e7bc      	b.n	80110d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801115a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801115e:	e7c3      	b.n	80110e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8011160:	9b08      	ldr	r3, [sp, #32]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d0f7      	beq.n	8011156 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8011166:	2258      	movs	r2, #88	; 0x58
 8011168:	4639      	mov	r1, r7
 801116a:	4628      	mov	r0, r5
 801116c:	f00a fc90 	bl	801ba90 <memcpy>
 8011170:	2300      	movs	r3, #0
 8011172:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011176:	6821      	ldr	r1, [r4, #0]
 8011178:	4628      	mov	r0, r5
 801117a:	f7ff fc21 	bl	80109c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801117e:	b203      	sxth	r3, r0
 8011180:	e79e      	b.n	80110c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08011182 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8011182:	b510      	push	{r4, lr}
 8011184:	2b02      	cmp	r3, #2
 8011186:	f9b0 4000 	ldrsh.w	r4, [r0]
 801118a:	d00b      	beq.n	80111a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801118c:	2b03      	cmp	r3, #3
 801118e:	d00e      	beq.n	80111ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8011190:	2b01      	cmp	r3, #1
 8011192:	d001      	beq.n	8011198 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8011194:	1860      	adds	r0, r4, r1
 8011196:	bd10      	pop	{r4, pc}
 8011198:	8880      	ldrh	r0, [r0, #4]
 801119a:	4420      	add	r0, r4
 801119c:	b200      	sxth	r0, r0
 801119e:	1a80      	subs	r0, r0, r2
 80111a0:	3801      	subs	r0, #1
 80111a2:	e7f8      	b.n	8011196 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80111a4:	8880      	ldrh	r0, [r0, #4]
 80111a6:	4420      	add	r0, r4
 80111a8:	b200      	sxth	r0, r0
 80111aa:	1a40      	subs	r0, r0, r1
 80111ac:	e7f8      	b.n	80111a0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80111ae:	18a0      	adds	r0, r4, r2
 80111b0:	e7f1      	b.n	8011196 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080111b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80111b2:	b510      	push	{r4, lr}
 80111b4:	2b02      	cmp	r3, #2
 80111b6:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80111ba:	d006      	beq.n	80111ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80111bc:	2b03      	cmp	r3, #3
 80111be:	d00a      	beq.n	80111d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	bf14      	ite	ne
 80111c4:	18a0      	addne	r0, r4, r2
 80111c6:	1860      	addeq	r0, r4, r1
 80111c8:	bd10      	pop	{r4, pc}
 80111ca:	88c0      	ldrh	r0, [r0, #6]
 80111cc:	4420      	add	r0, r4
 80111ce:	b200      	sxth	r0, r0
 80111d0:	1a80      	subs	r0, r0, r2
 80111d2:	3801      	subs	r0, #1
 80111d4:	e7f8      	b.n	80111c8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80111d6:	88c0      	ldrh	r0, [r0, #6]
 80111d8:	4420      	add	r0, r4
 80111da:	b200      	sxth	r0, r0
 80111dc:	1a40      	subs	r0, r0, r1
 80111de:	e7f8      	b.n	80111d2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

080111e0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80111e0:	4b01      	ldr	r3, [pc, #4]	; (80111e8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80111e2:	2200      	movs	r2, #0
 80111e4:	601a      	str	r2, [r3, #0]
 80111e6:	4770      	bx	lr
 80111e8:	20005f2c 	.word	0x20005f2c

080111ec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 80111ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111ee:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 80111f2:	1e05      	subs	r5, r0, #0
 80111f4:	bfba      	itte	lt
 80111f6:	f04f 37ff 	movlt.w	r7, #4294967295
 80111fa:	426d      	neglt	r5, r5
 80111fc:	2701      	movge	r7, #1
 80111fe:	f1be 0f00 	cmp.w	lr, #0
 8011202:	bfb8      	it	lt
 8011204:	f1ce 0e00 	rsblt	lr, lr, #0
 8011208:	f04f 0601 	mov.w	r6, #1
 801120c:	fa4e f001 	asr.w	r0, lr, r1
 8011210:	fa06 f101 	lsl.w	r1, r6, r1
 8011214:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8011218:	f101 31ff 	add.w	r1, r1, #4294967295
 801121c:	ea01 010e 	and.w	r1, r1, lr
 8011220:	bfb8      	it	lt
 8011222:	427f      	neglt	r7, r7
 8011224:	434d      	muls	r5, r1
 8011226:	2c00      	cmp	r4, #0
 8011228:	f8dc 1000 	ldr.w	r1, [ip]
 801122c:	bfb8      	it	lt
 801122e:	4264      	neglt	r4, r4
 8011230:	fb03 1300 	mla	r3, r3, r0, r1
 8011234:	fb95 f1f4 	sdiv	r1, r5, r4
 8011238:	fb04 5511 	mls	r5, r4, r1, r5
 801123c:	441d      	add	r5, r3
 801123e:	fb95 f3f4 	sdiv	r3, r5, r4
 8011242:	fb04 5413 	mls	r4, r4, r3, r5
 8011246:	4419      	add	r1, r3
 8011248:	bfb8      	it	lt
 801124a:	427f      	neglt	r7, r7
 801124c:	fb02 1000 	mla	r0, r2, r0, r1
 8011250:	f8cc 4000 	str.w	r4, [ip]
 8011254:	4378      	muls	r0, r7
 8011256:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011258 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8011258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801125c:	4c24      	ldr	r4, [pc, #144]	; (80112f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801125e:	6807      	ldr	r7, [r0, #0]
 8011260:	69a3      	ldr	r3, [r4, #24]
 8011262:	b086      	sub	sp, #24
 8011264:	4605      	mov	r5, r0
 8011266:	b92b      	cbnz	r3, 8011274 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8011268:	6840      	ldr	r0, [r0, #4]
 801126a:	e9c5 7000 	strd	r7, r0, [r5]
 801126e:	b006      	add	sp, #24
 8011270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011274:	68a2      	ldr	r2, [r4, #8]
 8011276:	6820      	ldr	r0, [r4, #0]
 8011278:	ae06      	add	r6, sp, #24
 801127a:	f04f 0802 	mov.w	r8, #2
 801127e:	fb93 f1f8 	sdiv	r1, r3, r8
 8011282:	440a      	add	r2, r1
 8011284:	f846 2d04 	str.w	r2, [r6, #-4]!
 8011288:	69e1      	ldr	r1, [r4, #28]
 801128a:	9700      	str	r7, [sp, #0]
 801128c:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8011290:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011292:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011294:	f7ff ffaa 	bl	80111ec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8011298:	69a3      	ldr	r3, [r4, #24]
 801129a:	9301      	str	r3, [sp, #4]
 801129c:	686b      	ldr	r3, [r5, #4]
 801129e:	9300      	str	r3, [sp, #0]
 80112a0:	4607      	mov	r7, r0
 80112a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80112a6:	6a21      	ldr	r1, [r4, #32]
 80112a8:	9602      	str	r6, [sp, #8]
 80112aa:	6860      	ldr	r0, [r4, #4]
 80112ac:	f7ff ff9e 	bl	80111ec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80112b0:	6963      	ldr	r3, [r4, #20]
 80112b2:	69a2      	ldr	r2, [r4, #24]
 80112b4:	fb92 f8f8 	sdiv	r8, r2, r8
 80112b8:	4443      	add	r3, r8
 80112ba:	9305      	str	r3, [sp, #20]
 80112bc:	682b      	ldr	r3, [r5, #0]
 80112be:	9300      	str	r3, [sp, #0]
 80112c0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80112c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80112c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80112c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80112ca:	4407      	add	r7, r0
 80112cc:	68e0      	ldr	r0, [r4, #12]
 80112ce:	f7ff ff8d 	bl	80111ec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80112d2:	69a3      	ldr	r3, [r4, #24]
 80112d4:	9301      	str	r3, [sp, #4]
 80112d6:	686b      	ldr	r3, [r5, #4]
 80112d8:	9300      	str	r3, [sp, #0]
 80112da:	4680      	mov	r8, r0
 80112dc:	9602      	str	r6, [sp, #8]
 80112de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80112e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80112e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80112e4:	6920      	ldr	r0, [r4, #16]
 80112e6:	f7ff ff81 	bl	80111ec <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80112ea:	4440      	add	r0, r8
 80112ec:	e7bd      	b.n	801126a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80112ee:	bf00      	nop
 80112f0:	20005f30 	.word	0x20005f30

080112f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80112f4:	b510      	push	{r4, lr}
 80112f6:	4b07      	ldr	r3, [pc, #28]	; (8011314 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	2b01      	cmp	r3, #1
 80112fc:	d108      	bne.n	8011310 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80112fe:	4b06      	ldr	r3, [pc, #24]	; (8011318 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8011300:	880c      	ldrh	r4, [r1, #0]
 8011302:	881b      	ldrh	r3, [r3, #0]
 8011304:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011308:	3b01      	subs	r3, #1
 801130a:	1b1b      	subs	r3, r3, r4
 801130c:	8003      	strh	r3, [r0, #0]
 801130e:	800a      	strh	r2, [r1, #0]
 8011310:	bd10      	pop	{r4, pc}
 8011312:	bf00      	nop
 8011314:	20005f1c 	.word	0x20005f1c
 8011318:	20005f20 	.word	0x20005f20

0801131c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801131c:	b510      	push	{r4, lr}
 801131e:	4b0a      	ldr	r3, [pc, #40]	; (8011348 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	2b01      	cmp	r3, #1
 8011324:	d10e      	bne.n	8011344 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8011326:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801132a:	8843      	ldrh	r3, [r0, #2]
 801132c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011330:	8044      	strh	r4, [r0, #2]
 8011332:	18ca      	adds	r2, r1, r3
 8011334:	4b05      	ldr	r3, [pc, #20]	; (801134c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8011336:	881b      	ldrh	r3, [r3, #0]
 8011338:	1a9b      	subs	r3, r3, r2
 801133a:	8003      	strh	r3, [r0, #0]
 801133c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011340:	80c3      	strh	r3, [r0, #6]
 8011342:	8081      	strh	r1, [r0, #4]
 8011344:	bd10      	pop	{r4, pc}
 8011346:	bf00      	nop
 8011348:	20005f1c 	.word	0x20005f1c
 801134c:	20005f18 	.word	0x20005f18

08011350 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8011350:	b510      	push	{r4, lr}
 8011352:	4b07      	ldr	r3, [pc, #28]	; (8011370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	2b01      	cmp	r3, #1
 8011358:	d108      	bne.n	801136c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801135a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801135e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011362:	8003      	strh	r3, [r0, #0]
 8011364:	8893      	ldrh	r3, [r2, #4]
 8011366:	3b01      	subs	r3, #1
 8011368:	1b1b      	subs	r3, r3, r4
 801136a:	800b      	strh	r3, [r1, #0]
 801136c:	bd10      	pop	{r4, pc}
 801136e:	bf00      	nop
 8011370:	20005f1c 	.word	0x20005f1c

08011374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8011374:	b513      	push	{r0, r1, r4, lr}
 8011376:	4b08      	ldr	r3, [pc, #32]	; (8011398 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8011378:	f9b3 2000 	ldrsh.w	r2, [r3]
 801137c:	4b07      	ldr	r3, [pc, #28]	; (801139c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801137e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011386:	f8ad 3006 	strh.w	r3, [sp, #6]
 801138a:	2400      	movs	r4, #0
 801138c:	466a      	mov	r2, sp
 801138e:	9400      	str	r4, [sp, #0]
 8011390:	f7ff ffde 	bl	8011350 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8011394:	b002      	add	sp, #8
 8011396:	bd10      	pop	{r4, pc}
 8011398:	20005f18 	.word	0x20005f18
 801139c:	20005f1a 	.word	0x20005f1a

080113a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80113a0:	b510      	push	{r4, lr}
 80113a2:	4b0a      	ldr	r3, [pc, #40]	; (80113cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	460a      	mov	r2, r1
 80113aa:	d10d      	bne.n	80113c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80113ac:	8881      	ldrh	r1, [r0, #4]
 80113ae:	8803      	ldrh	r3, [r0, #0]
 80113b0:	440b      	add	r3, r1
 80113b2:	4601      	mov	r1, r0
 80113b4:	3b01      	subs	r3, #1
 80113b6:	f821 3b02 	strh.w	r3, [r1], #2
 80113ba:	f7ff ffc9 	bl	8011350 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80113be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80113c2:	88c2      	ldrh	r2, [r0, #6]
 80113c4:	8082      	strh	r2, [r0, #4]
 80113c6:	80c3      	strh	r3, [r0, #6]
 80113c8:	bd10      	pop	{r4, pc}
 80113ca:	bf00      	nop
 80113cc:	20005f1c 	.word	0x20005f1c

080113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80113d0:	b507      	push	{r0, r1, r2, lr}
 80113d2:	4b09      	ldr	r3, [pc, #36]	; (80113f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80113d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80113d8:	4b08      	ldr	r3, [pc, #32]	; (80113fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80113da:	f8ad 2004 	strh.w	r2, [sp, #4]
 80113de:	2100      	movs	r1, #0
 80113e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80113e4:	9100      	str	r1, [sp, #0]
 80113e6:	4669      	mov	r1, sp
 80113e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80113ec:	f7ff ffd8 	bl	80113a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80113f0:	b003      	add	sp, #12
 80113f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80113f6:	bf00      	nop
 80113f8:	20005f18 	.word	0x20005f18
 80113fc:	20005f1a 	.word	0x20005f1a

08011400 <_ZN8touchgfx11Application13requestRedrawEv>:
 8011400:	4b06      	ldr	r3, [pc, #24]	; (801141c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8011402:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011406:	4b06      	ldr	r3, [pc, #24]	; (8011420 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8011408:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801140c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011410:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8011414:	2100      	movs	r1, #0
 8011416:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801141a:	4770      	bx	lr
 801141c:	20005f18 	.word	0x20005f18
 8011420:	20005f1a 	.word	0x20005f1a

08011424 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8011424:	4b03      	ldr	r3, [pc, #12]	; (8011434 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8011426:	6818      	ldr	r0, [r3, #0]
 8011428:	b110      	cbz	r0, 8011430 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801142a:	6803      	ldr	r3, [r0, #0]
 801142c:	699b      	ldr	r3, [r3, #24]
 801142e:	4718      	bx	r3
 8011430:	4770      	bx	lr
 8011432:	bf00      	nop
 8011434:	20005f80 	.word	0x20005f80

08011438 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8011438:	4770      	bx	lr
	...

0801143c <_ZN8touchgfx11Application4drawEv>:
 801143c:	b507      	push	{r0, r1, r2, lr}
 801143e:	4b09      	ldr	r3, [pc, #36]	; (8011464 <_ZN8touchgfx11Application4drawEv+0x28>)
 8011440:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011444:	4b08      	ldr	r3, [pc, #32]	; (8011468 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8011446:	f8ad 2004 	strh.w	r2, [sp, #4]
 801144a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801144e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011452:	6803      	ldr	r3, [r0, #0]
 8011454:	2100      	movs	r1, #0
 8011456:	9100      	str	r1, [sp, #0]
 8011458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801145a:	4669      	mov	r1, sp
 801145c:	4798      	blx	r3
 801145e:	b003      	add	sp, #12
 8011460:	f85d fb04 	ldr.w	pc, [sp], #4
 8011464:	20005f18 	.word	0x20005f18
 8011468:	20005f1a 	.word	0x20005f1a

0801146c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801146c:	4b03      	ldr	r3, [pc, #12]	; (801147c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801146e:	6818      	ldr	r0, [r3, #0]
 8011470:	b110      	cbz	r0, 8011478 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8011472:	6803      	ldr	r3, [r0, #0]
 8011474:	69db      	ldr	r3, [r3, #28]
 8011476:	4718      	bx	r3
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop
 801147c:	20005f80 	.word	0x20005f80

08011480 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8011480:	4b03      	ldr	r3, [pc, #12]	; (8011490 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8011482:	6818      	ldr	r0, [r3, #0]
 8011484:	b110      	cbz	r0, 801148c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8011486:	6803      	ldr	r3, [r0, #0]
 8011488:	6a1b      	ldr	r3, [r3, #32]
 801148a:	4718      	bx	r3
 801148c:	4770      	bx	lr
 801148e:	bf00      	nop
 8011490:	20005f80 	.word	0x20005f80

08011494 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8011494:	4b03      	ldr	r3, [pc, #12]	; (80114a4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8011496:	6818      	ldr	r0, [r3, #0]
 8011498:	b110      	cbz	r0, 80114a0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801149a:	6803      	ldr	r3, [r0, #0]
 801149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801149e:	4718      	bx	r3
 80114a0:	4770      	bx	lr
 80114a2:	bf00      	nop
 80114a4:	20005f80 	.word	0x20005f80

080114a8 <_ZN8touchgfx11Application15handleTickEventEv>:
 80114a8:	b570      	push	{r4, r5, r6, lr}
 80114aa:	4d34      	ldr	r5, [pc, #208]	; (801157c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 80114ac:	4604      	mov	r4, r0
 80114ae:	6828      	ldr	r0, [r5, #0]
 80114b0:	b140      	cbz	r0, 80114c4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80114b2:	7a03      	ldrb	r3, [r0, #8]
 80114b4:	b933      	cbnz	r3, 80114c4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80114b6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80114ba:	6803      	ldr	r3, [r0, #0]
 80114bc:	689b      	ldr	r3, [r3, #8]
 80114be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114c2:	4718      	bx	r3
 80114c4:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80114c8:	b97b      	cbnz	r3, 80114ea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80114ca:	b170      	cbz	r0, 80114ea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80114cc:	7a03      	ldrb	r3, [r0, #8]
 80114ce:	b163      	cbz	r3, 80114ea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80114d0:	4b2b      	ldr	r3, [pc, #172]	; (8011580 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 80114d2:	6818      	ldr	r0, [r3, #0]
 80114d4:	b110      	cbz	r0, 80114dc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80114d6:	6803      	ldr	r3, [r0, #0]
 80114d8:	691b      	ldr	r3, [r3, #16]
 80114da:	4798      	blx	r3
 80114dc:	6828      	ldr	r0, [r5, #0]
 80114de:	6803      	ldr	r3, [r0, #0]
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	4798      	blx	r3
 80114e4:	2301      	movs	r3, #1
 80114e6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80114ea:	2500      	movs	r5, #0
 80114ec:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80114f0:	42a8      	cmp	r0, r5
 80114f2:	dd0c      	ble.n	801150e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80114f4:	1963      	adds	r3, r4, r5
 80114f6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80114fa:	b132      	cbz	r2, 801150a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80114fc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8011500:	4413      	add	r3, r2
 8011502:	6858      	ldr	r0, [r3, #4]
 8011504:	6803      	ldr	r3, [r0, #0]
 8011506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011508:	4798      	blx	r3
 801150a:	3501      	adds	r5, #1
 801150c:	e7ee      	b.n	80114ec <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801150e:	2300      	movs	r3, #0
 8011510:	461a      	mov	r2, r3
 8011512:	4298      	cmp	r0, r3
 8011514:	d114      	bne.n	8011540 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8011516:	1d25      	adds	r5, r4, #4
 8011518:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801151c:	1e48      	subs	r0, r1, #1
 801151e:	b280      	uxth	r0, r0
 8011520:	4291      	cmp	r1, r2
 8011522:	dd24      	ble.n	801156e <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8011524:	4288      	cmp	r0, r1
 8011526:	d2fb      	bcs.n	8011520 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8011528:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801152c:	3304      	adds	r3, #4
 801152e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8011532:	428b      	cmp	r3, r1
 8011534:	d018      	beq.n	8011568 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8011536:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801153a:	f843 6c04 	str.w	r6, [r3, #-4]
 801153e:	e7f8      	b.n	8011532 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8011540:	18e1      	adds	r1, r4, r3
 8011542:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8011546:	b16d      	cbz	r5, 8011564 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8011548:	429a      	cmp	r2, r3
 801154a:	d00a      	beq.n	8011562 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801154c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8011550:	4431      	add	r1, r6
 8011552:	684e      	ldr	r6, [r1, #4]
 8011554:	b291      	uxth	r1, r2
 8011556:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801155a:	604e      	str	r6, [r1, #4]
 801155c:	18a1      	adds	r1, r4, r2
 801155e:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8011562:	3201      	adds	r2, #1
 8011564:	3301      	adds	r3, #1
 8011566:	e7d4      	b.n	8011512 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8011568:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801156c:	e7d4      	b.n	8011518 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801156e:	4b04      	ldr	r3, [pc, #16]	; (8011580 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8011570:	6818      	ldr	r0, [r3, #0]
 8011572:	b110      	cbz	r0, 801157a <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8011574:	6803      	ldr	r3, [r0, #0]
 8011576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011578:	e7a1      	b.n	80114be <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801157a:	bd70      	pop	{r4, r5, r6, pc}
 801157c:	20005f84 	.word	0x20005f84
 8011580:	20005f80 	.word	0x20005f80

08011584 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8011584:	b570      	push	{r4, r5, r6, lr}
 8011586:	4606      	mov	r6, r0
 8011588:	460c      	mov	r4, r1
 801158a:	b929      	cbnz	r1, 8011598 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801158c:	4b0c      	ldr	r3, [pc, #48]	; (80115c0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801158e:	4a0d      	ldr	r2, [pc, #52]	; (80115c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8011590:	480d      	ldr	r0, [pc, #52]	; (80115c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8011592:	2165      	movs	r1, #101	; 0x65
 8011594:	f00a f9fe 	bl	801b994 <__assert_func>
 8011598:	4d0c      	ldr	r5, [pc, #48]	; (80115cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801159a:	2300      	movs	r3, #0
 801159c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80115a0:	6828      	ldr	r0, [r5, #0]
 80115a2:	b110      	cbz	r0, 80115aa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80115a4:	6803      	ldr	r3, [r0, #0]
 80115a6:	695b      	ldr	r3, [r3, #20]
 80115a8:	4798      	blx	r3
 80115aa:	602c      	str	r4, [r5, #0]
 80115ac:	6823      	ldr	r3, [r4, #0]
 80115ae:	4620      	mov	r0, r4
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	4798      	blx	r3
 80115b4:	6833      	ldr	r3, [r6, #0]
 80115b6:	4630      	mov	r0, r6
 80115b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115be:	4718      	bx	r3
 80115c0:	0801ea88 	.word	0x0801ea88
 80115c4:	0801eb58 	.word	0x0801eb58
 80115c8:	0801ea92 	.word	0x0801ea92
 80115cc:	20005f80 	.word	0x20005f80

080115d0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80115d0:	b510      	push	{r4, lr}
 80115d2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80115d6:	888a      	ldrh	r2, [r1, #4]
 80115d8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80115dc:	4422      	add	r2, r4
 80115de:	b212      	sxth	r2, r2
 80115e0:	4293      	cmp	r3, r2
 80115e2:	da15      	bge.n	8011610 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80115e4:	8882      	ldrh	r2, [r0, #4]
 80115e6:	4413      	add	r3, r2
 80115e8:	b21b      	sxth	r3, r3
 80115ea:	429c      	cmp	r4, r3
 80115ec:	da10      	bge.n	8011610 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80115ee:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80115f2:	88c9      	ldrh	r1, [r1, #6]
 80115f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80115f8:	4419      	add	r1, r3
 80115fa:	b209      	sxth	r1, r1
 80115fc:	428a      	cmp	r2, r1
 80115fe:	da07      	bge.n	8011610 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011600:	88c0      	ldrh	r0, [r0, #6]
 8011602:	4410      	add	r0, r2
 8011604:	b200      	sxth	r0, r0
 8011606:	4283      	cmp	r3, r0
 8011608:	bfac      	ite	ge
 801160a:	2000      	movge	r0, #0
 801160c:	2001      	movlt	r0, #1
 801160e:	bd10      	pop	{r4, pc}
 8011610:	2000      	movs	r0, #0
 8011612:	e7fc      	b.n	801160e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08011614 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8011614:	b570      	push	{r4, r5, r6, lr}
 8011616:	f9b1 4000 	ldrsh.w	r4, [r1]
 801161a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801161e:	42ac      	cmp	r4, r5
 8011620:	db18      	blt.n	8011654 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8011622:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8011626:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801162a:	429a      	cmp	r2, r3
 801162c:	db12      	blt.n	8011654 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801162e:	8886      	ldrh	r6, [r0, #4]
 8011630:	4435      	add	r5, r6
 8011632:	888e      	ldrh	r6, [r1, #4]
 8011634:	4434      	add	r4, r6
 8011636:	b22d      	sxth	r5, r5
 8011638:	b224      	sxth	r4, r4
 801163a:	42a5      	cmp	r5, r4
 801163c:	db0a      	blt.n	8011654 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801163e:	88c0      	ldrh	r0, [r0, #6]
 8011640:	4418      	add	r0, r3
 8011642:	88cb      	ldrh	r3, [r1, #6]
 8011644:	441a      	add	r2, r3
 8011646:	b200      	sxth	r0, r0
 8011648:	b212      	sxth	r2, r2
 801164a:	4290      	cmp	r0, r2
 801164c:	bfb4      	ite	lt
 801164e:	2000      	movlt	r0, #0
 8011650:	2001      	movge	r0, #1
 8011652:	bd70      	pop	{r4, r5, r6, pc}
 8011654:	2000      	movs	r0, #0
 8011656:	e7fc      	b.n	8011652 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08011658 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8011658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165a:	4604      	mov	r4, r0
 801165c:	4608      	mov	r0, r1
 801165e:	460d      	mov	r5, r1
 8011660:	f7fd fef3 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011664:	b978      	cbnz	r0, 8011686 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8011666:	4620      	mov	r0, r4
 8011668:	f7fd feef 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 801166c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8011670:	b150      	cbz	r0, 8011688 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8011672:	8026      	strh	r6, [r4, #0]
 8011674:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8011678:	8063      	strh	r3, [r4, #2]
 801167a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801167e:	80a3      	strh	r3, [r4, #4]
 8011680:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011684:	80e3      	strh	r3, [r4, #6]
 8011686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011688:	f9b4 1000 	ldrsh.w	r1, [r4]
 801168c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011690:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8011694:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8011698:	88ed      	ldrh	r5, [r5, #6]
 801169a:	42b1      	cmp	r1, r6
 801169c:	460f      	mov	r7, r1
 801169e:	bfa8      	it	ge
 80116a0:	4637      	movge	r7, r6
 80116a2:	4293      	cmp	r3, r2
 80116a4:	4618      	mov	r0, r3
 80116a6:	4466      	add	r6, ip
 80116a8:	bfa8      	it	ge
 80116aa:	4610      	movge	r0, r2
 80116ac:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80116b0:	8027      	strh	r7, [r4, #0]
 80116b2:	442a      	add	r2, r5
 80116b4:	88e5      	ldrh	r5, [r4, #6]
 80116b6:	8060      	strh	r0, [r4, #2]
 80116b8:	4461      	add	r1, ip
 80116ba:	442b      	add	r3, r5
 80116bc:	b236      	sxth	r6, r6
 80116be:	b209      	sxth	r1, r1
 80116c0:	b212      	sxth	r2, r2
 80116c2:	b21b      	sxth	r3, r3
 80116c4:	428e      	cmp	r6, r1
 80116c6:	bfac      	ite	ge
 80116c8:	ebc7 0106 	rsbge	r1, r7, r6
 80116cc:	ebc7 0101 	rsblt	r1, r7, r1
 80116d0:	429a      	cmp	r2, r3
 80116d2:	bfac      	ite	ge
 80116d4:	ebc0 0202 	rsbge	r2, r0, r2
 80116d8:	ebc0 0203 	rsblt	r2, r0, r3
 80116dc:	80a1      	strh	r1, [r4, #4]
 80116de:	80e2      	strh	r2, [r4, #6]
 80116e0:	e7d1      	b.n	8011686 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080116e4 <_ZN8touchgfx11Application11getInstanceEv>:
 80116e4:	4b01      	ldr	r3, [pc, #4]	; (80116ec <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80116e6:	6818      	ldr	r0, [r3, #0]
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop
 80116ec:	20005f90 	.word	0x20005f90

080116f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80116f0:	2300      	movs	r3, #0
 80116f2:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80116f6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80116fa:	30a8      	adds	r0, #168	; 0xa8
 80116fc:	f802 3b01 	strb.w	r3, [r2], #1
 8011700:	4282      	cmp	r2, r0
 8011702:	d1fb      	bne.n	80116fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8011704:	4770      	bx	lr

08011706 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8011706:	4603      	mov	r3, r0
 8011708:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801170c:	2200      	movs	r2, #0
 801170e:	801a      	strh	r2, [r3, #0]
 8011710:	805a      	strh	r2, [r3, #2]
 8011712:	809a      	strh	r2, [r3, #4]
 8011714:	80da      	strh	r2, [r3, #6]
 8011716:	3308      	adds	r3, #8
 8011718:	428b      	cmp	r3, r1
 801171a:	d1f8      	bne.n	801170e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801171c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8011720:	4770      	bx	lr
	...

08011724 <_ZN8touchgfx11ApplicationC1Ev>:
 8011724:	b570      	push	{r4, r5, r6, lr}
 8011726:	4b1a      	ldr	r3, [pc, #104]	; (8011790 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8011728:	6003      	str	r3, [r0, #0]
 801172a:	2500      	movs	r5, #0
 801172c:	4604      	mov	r4, r0
 801172e:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8011732:	30a8      	adds	r0, #168	; 0xa8
 8011734:	f7ff ffe7 	bl	8011706 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011738:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801173c:	f7ff ffe3 	bl	8011706 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011740:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8011744:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8011748:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801174c:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8011750:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8011754:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8011758:	490e      	ldr	r1, [pc, #56]	; (8011794 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801175a:	480f      	ldr	r0, [pc, #60]	; (8011798 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801175c:	4e0f      	ldr	r6, [pc, #60]	; (801179c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801175e:	f009 ffe7 	bl	801b730 <CRC_Lock>
 8011762:	4b0f      	ldr	r3, [pc, #60]	; (80117a0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8011764:	b158      	cbz	r0, 801177e <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 8011766:	801d      	strh	r5, [r3, #0]
 8011768:	4a0e      	ldr	r2, [pc, #56]	; (80117a4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801176a:	2300      	movs	r3, #0
 801176c:	6013      	str	r3, [r2, #0]
 801176e:	4a0e      	ldr	r2, [pc, #56]	; (80117a8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8011770:	6033      	str	r3, [r6, #0]
 8011772:	4620      	mov	r0, r4
 8011774:	6013      	str	r3, [r2, #0]
 8011776:	f7ff ffbb 	bl	80116f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801177a:	4620      	mov	r0, r4
 801177c:	bd70      	pop	{r4, r5, r6, pc}
 801177e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011782:	2002      	movs	r0, #2
 8011784:	801a      	strh	r2, [r3, #0]
 8011786:	6030      	str	r0, [r6, #0]
 8011788:	f000 ff22 	bl	80125d0 <_ZN8touchgfx6Screen4drawEv>
 801178c:	e7ec      	b.n	8011768 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801178e:	bf00      	nop
 8011790:	0801eb1c 	.word	0x0801eb1c
 8011794:	b5e8b5cd 	.word	0xb5e8b5cd
 8011798:	f407a5c2 	.word	0xf407a5c2
 801179c:	20005f80 	.word	0x20005f80
 80117a0:	20000094 	.word	0x20000094
 80117a4:	20005f90 	.word	0x20005f90
 80117a8:	20005f84 	.word	0x20005f84

080117ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80117ac:	2300      	movs	r3, #0
 80117ae:	8003      	strh	r3, [r0, #0]
 80117b0:	8043      	strh	r3, [r0, #2]
 80117b2:	8083      	strh	r3, [r0, #4]
 80117b4:	80c3      	strh	r3, [r0, #6]
 80117b6:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80117ba:	4293      	cmp	r3, r2
 80117bc:	b530      	push	{r4, r5, lr}
 80117be:	d912      	bls.n	80117e6 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80117c0:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80117c4:	3b01      	subs	r3, #1
 80117c6:	6825      	ldr	r5, [r4, #0]
 80117c8:	6005      	str	r5, [r0, #0]
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	6865      	ldr	r5, [r4, #4]
 80117ce:	6045      	str	r5, [r0, #4]
 80117d0:	4293      	cmp	r3, r2
 80117d2:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 80117d6:	d906      	bls.n	80117e6 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80117d8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80117dc:	681d      	ldr	r5, [r3, #0]
 80117de:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 80117e2:	685d      	ldr	r5, [r3, #4]
 80117e4:	6065      	str	r5, [r4, #4]
 80117e6:	bd30      	pop	{r4, r5, pc}

080117e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80117e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80117ea:	466b      	mov	r3, sp
 80117ec:	e883 0006 	stmia.w	r3, {r1, r2}
 80117f0:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80117f4:	2a07      	cmp	r2, #7
 80117f6:	4604      	mov	r4, r0
 80117f8:	d906      	bls.n	8011808 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80117fa:	4b09      	ldr	r3, [pc, #36]	; (8011820 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80117fc:	4a09      	ldr	r2, [pc, #36]	; (8011824 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80117fe:	480a      	ldr	r0, [pc, #40]	; (8011828 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8011800:	f240 118f 	movw	r1, #399	; 0x18f
 8011804:	f00a f8c6 	bl	801b994 <__assert_func>
 8011808:	1c51      	adds	r1, r2, #1
 801180a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801180e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8011812:	cb03      	ldmia	r3!, {r0, r1}
 8011814:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8011818:	6069      	str	r1, [r5, #4]
 801181a:	b003      	add	sp, #12
 801181c:	bd30      	pop	{r4, r5, pc}
 801181e:	bf00      	nop
 8011820:	0801eabc 	.word	0x0801eabc
 8011824:	0801eb9c 	.word	0x0801eb9c
 8011828:	0801eaeb 	.word	0x0801eaeb

0801182c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801182c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011830:	b089      	sub	sp, #36	; 0x24
 8011832:	466c      	mov	r4, sp
 8011834:	4606      	mov	r6, r0
 8011836:	4620      	mov	r0, r4
 8011838:	e884 0006 	stmia.w	r4, {r1, r2}
 801183c:	f7fd fe05 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011840:	bbb0      	cbnz	r0, 80118b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8011842:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8011846:	b1fd      	cbz	r5, 8011888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8011848:	3d01      	subs	r5, #1
 801184a:	af04      	add	r7, sp, #16
 801184c:	f04f 090a 	mov.w	r9, #10
 8011850:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8011854:	ab02      	add	r3, sp, #8
 8011856:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801185a:	6851      	ldr	r1, [r2, #4]
 801185c:	c303      	stmia	r3!, {r0, r1}
 801185e:	4621      	mov	r1, r4
 8011860:	a802      	add	r0, sp, #8
 8011862:	fa1f f885 	uxth.w	r8, r5
 8011866:	f7ff fed5 	bl	8011614 <_ZNK8touchgfx4Rect8includesERKS0_>
 801186a:	bb08      	cbnz	r0, 80118b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801186c:	a902      	add	r1, sp, #8
 801186e:	4620      	mov	r0, r4
 8011870:	f7ff fed0 	bl	8011614 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011874:	b1f8      	cbz	r0, 80118b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8011876:	4642      	mov	r2, r8
 8011878:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801187c:	a806      	add	r0, sp, #24
 801187e:	f7ff ff95 	bl	80117ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011882:	f115 35ff 	adds.w	r5, r5, #4294967295
 8011886:	d2e3      	bcs.n	8011850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8011888:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801188c:	2b08      	cmp	r3, #8
 801188e:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8011892:	d108      	bne.n	80118a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8011894:	4629      	mov	r1, r5
 8011896:	a806      	add	r0, sp, #24
 8011898:	2207      	movs	r2, #7
 801189a:	f7ff ff87 	bl	80117ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801189e:	a906      	add	r1, sp, #24
 80118a0:	4620      	mov	r0, r4
 80118a2:	f7ff fed9 	bl	8011658 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80118a6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80118aa:	4628      	mov	r0, r5
 80118ac:	f7ff ff9c 	bl	80117e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80118b0:	b009      	add	sp, #36	; 0x24
 80118b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118b6:	4621      	mov	r1, r4
 80118b8:	a802      	add	r0, sp, #8
 80118ba:	f7ff fe89 	bl	80115d0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80118be:	b150      	cbz	r0, 80118d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80118c0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80118c4:	a806      	add	r0, sp, #24
 80118c6:	4642      	mov	r2, r8
 80118c8:	f7ff ff70 	bl	80117ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80118cc:	a902      	add	r1, sp, #8
 80118ce:	4620      	mov	r0, r4
 80118d0:	f7ff fec2 	bl	8011658 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80118d4:	e7d5      	b.n	8011882 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80118d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80118da:	e887 0003 	stmia.w	r7, {r0, r1}
 80118de:	a902      	add	r1, sp, #8
 80118e0:	4638      	mov	r0, r7
 80118e2:	f7ff feb9 	bl	8011658 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80118e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80118ea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80118ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80118f2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80118f6:	fb13 f302 	smulbb	r3, r3, r2
 80118fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80118fe:	fb11 f102 	smulbb	r1, r1, r2
 8011902:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011906:	fb12 1100 	smlabb	r1, r2, r0, r1
 801190a:	220b      	movs	r2, #11
 801190c:	fb09 f303 	mul.w	r3, r9, r3
 8011910:	434a      	muls	r2, r1
 8011912:	4293      	cmp	r3, r2
 8011914:	dab5      	bge.n	8011882 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8011916:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801191a:	a806      	add	r0, sp, #24
 801191c:	4642      	mov	r2, r8
 801191e:	f7ff ff45 	bl	80117ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011922:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011926:	e884 0003 	stmia.w	r4, {r0, r1}
 801192a:	e7aa      	b.n	8011882 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801192c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801192c:	b530      	push	{r4, r5, lr}
 801192e:	4b1d      	ldr	r3, [pc, #116]	; (80119a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8011930:	b085      	sub	sp, #20
 8011932:	460c      	mov	r4, r1
 8011934:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011938:	4b1b      	ldr	r3, [pc, #108]	; (80119a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801193a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801193e:	2100      	movs	r1, #0
 8011940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011944:	9100      	str	r1, [sp, #0]
 8011946:	4605      	mov	r5, r0
 8011948:	6861      	ldr	r1, [r4, #4]
 801194a:	6820      	ldr	r0, [r4, #0]
 801194c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011950:	ab02      	add	r3, sp, #8
 8011952:	c303      	stmia	r3!, {r0, r1}
 8011954:	4669      	mov	r1, sp
 8011956:	a802      	add	r0, sp, #8
 8011958:	f7fd fd34 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 801195c:	ab02      	add	r3, sp, #8
 801195e:	cb03      	ldmia	r3!, {r0, r1}
 8011960:	4b12      	ldr	r3, [pc, #72]	; (80119ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8011962:	6020      	str	r0, [r4, #0]
 8011964:	6818      	ldr	r0, [r3, #0]
 8011966:	6061      	str	r1, [r4, #4]
 8011968:	b138      	cbz	r0, 801197a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801196a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801196e:	b133      	cbz	r3, 801197e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8011970:	6821      	ldr	r1, [r4, #0]
 8011972:	6862      	ldr	r2, [r4, #4]
 8011974:	4628      	mov	r0, r5
 8011976:	f7ff ff59 	bl	801182c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801197a:	b005      	add	sp, #20
 801197c:	bd30      	pop	{r4, r5, pc}
 801197e:	6803      	ldr	r3, [r0, #0]
 8011980:	4621      	mov	r1, r4
 8011982:	689b      	ldr	r3, [r3, #8]
 8011984:	4798      	blx	r3
 8011986:	4b0a      	ldr	r3, [pc, #40]	; (80119b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8011988:	6818      	ldr	r0, [r3, #0]
 801198a:	b118      	cbz	r0, 8011994 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801198c:	6803      	ldr	r3, [r0, #0]
 801198e:	4621      	mov	r1, r4
 8011990:	689b      	ldr	r3, [r3, #8]
 8011992:	4798      	blx	r3
 8011994:	4b07      	ldr	r3, [pc, #28]	; (80119b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8011996:	6818      	ldr	r0, [r3, #0]
 8011998:	6803      	ldr	r3, [r0, #0]
 801199a:	4621      	mov	r1, r4
 801199c:	695b      	ldr	r3, [r3, #20]
 801199e:	4798      	blx	r3
 80119a0:	e7eb      	b.n	801197a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80119a2:	bf00      	nop
 80119a4:	20005f18 	.word	0x20005f18
 80119a8:	20005f1a 	.word	0x20005f1a
 80119ac:	20005f80 	.word	0x20005f80
 80119b0:	20005f7c 	.word	0x20005f7c
 80119b4:	20005f24 	.word	0x20005f24

080119b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80119b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119bc:	4604      	mov	r4, r0
 80119be:	b09b      	sub	sp, #108	; 0x6c
 80119c0:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80119c4:	b129      	cbz	r1, 80119d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80119c6:	2300      	movs	r3, #0
 80119c8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80119cc:	b01b      	add	sp, #108	; 0x6c
 80119ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d2:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80119d6:	4630      	mov	r0, r6
 80119d8:	f7fd fd37 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 80119dc:	4605      	mov	r5, r0
 80119de:	b940      	cbnz	r0, 80119f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 80119e0:	e896 0006 	ldmia.w	r6, {r1, r2}
 80119e4:	4620      	mov	r0, r4
 80119e6:	f7ff ff21 	bl	801182c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80119ea:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80119ee:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80119f2:	4baf      	ldr	r3, [pc, #700]	; (8011cb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	b33b      	cbz	r3, 8011a48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80119f8:	4dae      	ldr	r5, [pc, #696]	; (8011cb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fc>)
 80119fa:	4628      	mov	r0, r5
 80119fc:	f7fd fd25 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011a00:	4606      	mov	r6, r0
 8011a02:	bb08      	cbnz	r0, 8011a48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8011a04:	4628      	mov	r0, r5
 8011a06:	f7ff fc89 	bl	801131c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8011a0a:	6829      	ldr	r1, [r5, #0]
 8011a0c:	686a      	ldr	r2, [r5, #4]
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f7ff ff0c 	bl	801182c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8011a14:	802e      	strh	r6, [r5, #0]
 8011a16:	806e      	strh	r6, [r5, #2]
 8011a18:	80ae      	strh	r6, [r5, #4]
 8011a1a:	80ee      	strh	r6, [r5, #6]
 8011a1c:	4fa6      	ldr	r7, [pc, #664]	; (8011cb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>)
 8011a1e:	a809      	add	r0, sp, #36	; 0x24
 8011a20:	f7ff fe71 	bl	8011706 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011a24:	883d      	ldrh	r5, [r7, #0]
 8011a26:	462e      	mov	r6, r5
 8011a28:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011a2c:	42b3      	cmp	r3, r6
 8011a2e:	d910      	bls.n	8011a52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8011a30:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8011a34:	a809      	add	r0, sp, #36	; 0x24
 8011a36:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8011a3a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8011a3e:	3601      	adds	r6, #1
 8011a40:	f7ff fed2 	bl	80117e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8011a44:	b2b6      	uxth	r6, r6
 8011a46:	e7ef      	b.n	8011a28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8011a48:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1e5      	bne.n	8011a1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8011a50:	e7bc      	b.n	80119cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8011a52:	462e      	mov	r6, r5
 8011a54:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8011a58:	42b3      	cmp	r3, r6
 8011a5a:	d90b      	bls.n	8011a74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8011a5c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8011a60:	4620      	mov	r0, r4
 8011a62:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8011a66:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8011a6a:	3601      	adds	r6, #1
 8011a6c:	f7ff fede 	bl	801182c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8011a70:	b2b6      	uxth	r6, r6
 8011a72:	e7ef      	b.n	8011a54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8011a74:	4e91      	ldr	r6, [pc, #580]	; (8011cbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>)
 8011a76:	6833      	ldr	r3, [r6, #0]
 8011a78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a7c:	2b01      	cmp	r3, #1
 8011a7e:	f040 8092 	bne.w	8011ba6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ee>
 8011a82:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8011a86:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8011a8a:	33aa      	adds	r3, #170	; 0xaa
 8011a8c:	f04f 0900 	mov.w	r9, #0
 8011a90:	42a8      	cmp	r0, r5
 8011a92:	f103 0308 	add.w	r3, r3, #8
 8011a96:	dd0a      	ble.n	8011aae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf6>
 8011a98:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8011a9c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8011aa0:	440a      	add	r2, r1
 8011aa2:	b212      	sxth	r2, r2
 8011aa4:	4591      	cmp	r9, r2
 8011aa6:	bfb8      	it	lt
 8011aa8:	4691      	movlt	r9, r2
 8011aaa:	3501      	adds	r5, #1
 8011aac:	e7f0      	b.n	8011a90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd8>
 8011aae:	4b84      	ldr	r3, [pc, #528]	; (8011cc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x308>)
 8011ab0:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8011cc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x310>
 8011ab4:	881d      	ldrh	r5, [r3, #0]
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011abc:	2d0f      	cmp	r5, #15
 8011abe:	bf8c      	ite	hi
 8011ac0:	08ed      	lsrhi	r5, r5, #3
 8011ac2:	2501      	movls	r5, #1
 8011ac4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011ac8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8011acc:	6830      	ldr	r0, [r6, #0]
 8011ace:	440b      	add	r3, r1
 8011ad0:	b21b      	sxth	r3, r3
 8011ad2:	4599      	cmp	r9, r3
 8011ad4:	6802      	ldr	r2, [r0, #0]
 8011ad6:	dd49      	ble.n	8011b6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 8011ad8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8011adc:	4798      	blx	r3
 8011ade:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011ae2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011ae6:	4413      	add	r3, r2
 8011ae8:	b21b      	sxth	r3, r3
 8011aea:	195a      	adds	r2, r3, r5
 8011aec:	4290      	cmp	r0, r2
 8011aee:	da07      	bge.n	8011b00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 8011af0:	4581      	cmp	r9, r0
 8011af2:	dd05      	ble.n	8011b00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 8011af4:	4298      	cmp	r0, r3
 8011af6:	da33      	bge.n	8011b60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	dd31      	ble.n	8011b60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8011afc:	4648      	mov	r0, r9
 8011afe:	e004      	b.n	8011b0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x152>
 8011b00:	4298      	cmp	r0, r3
 8011b02:	dbfb      	blt.n	8011afc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x144>
 8011b04:	4548      	cmp	r0, r9
 8011b06:	bfa8      	it	ge
 8011b08:	4648      	movge	r0, r9
 8011b0a:	f9b8 2000 	ldrsh.w	r2, [r8]
 8011b0e:	f8b7 a000 	ldrh.w	sl, [r7]
 8011b12:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b16:	2100      	movs	r1, #0
 8011b18:	1ac0      	subs	r0, r0, r3
 8011b1a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011b1e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011b22:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011b26:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011b2a:	4553      	cmp	r3, sl
 8011b2c:	d9ca      	bls.n	8011ac4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8011b2e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8011b32:	ab07      	add	r3, sp, #28
 8011b34:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8011b38:	6851      	ldr	r1, [r2, #4]
 8011b3a:	c303      	stmia	r3!, {r0, r1}
 8011b3c:	a807      	add	r0, sp, #28
 8011b3e:	a905      	add	r1, sp, #20
 8011b40:	f7fd fc40 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 8011b44:	a807      	add	r0, sp, #28
 8011b46:	f7fd fc80 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011b4a:	b920      	cbnz	r0, 8011b56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x19e>
 8011b4c:	6823      	ldr	r3, [r4, #0]
 8011b4e:	a907      	add	r1, sp, #28
 8011b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b52:	4620      	mov	r0, r4
 8011b54:	4798      	blx	r3
 8011b56:	f10a 0a01 	add.w	sl, sl, #1
 8011b5a:	fa1f fa8a 	uxth.w	sl, sl
 8011b5e:	e7e2      	b.n	8011b26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16e>
 8011b60:	6830      	ldr	r0, [r6, #0]
 8011b62:	6803      	ldr	r3, [r0, #0]
 8011b64:	2101      	movs	r1, #1
 8011b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b68:	4798      	blx	r3
 8011b6a:	e7ab      	b.n	8011ac4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8011b6c:	69d3      	ldr	r3, [r2, #28]
 8011b6e:	4798      	blx	r3
 8011b70:	4b54      	ldr	r3, [pc, #336]	; (8011cc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>)
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	f43f af29 	beq.w	80119cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	883d      	ldrh	r5, [r7, #0]
 8011b7e:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8011b82:	34ea      	adds	r4, #234	; 0xea
 8011b84:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8011b88:	42ab      	cmp	r3, r5
 8011b8a:	f67f af1f 	bls.w	80119cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8011b8e:	ab1a      	add	r3, sp, #104	; 0x68
 8011b90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011b94:	3b44      	subs	r3, #68	; 0x44
 8011b96:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	3501      	adds	r5, #1
 8011b9e:	f7ff fe23 	bl	80117e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8011ba2:	b2ad      	uxth	r5, r5
 8011ba4:	e7ee      	b.n	8011b84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1cc>
 8011ba6:	2b02      	cmp	r3, #2
 8011ba8:	d16a      	bne.n	8011c80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 8011baa:	f8df a120 	ldr.w	sl, [pc, #288]	; 8011ccc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x314>
 8011bae:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011bb2:	42ab      	cmp	r3, r5
 8011bb4:	d9dc      	bls.n	8011b70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8011bb6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8011bba:	ab03      	add	r3, sp, #12
 8011bbc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8011bc0:	6851      	ldr	r1, [r2, #4]
 8011bc2:	c303      	stmia	r3!, {r0, r1}
 8011bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d102      	bne.n	8011bd2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21a>
 8011bcc:	a803      	add	r0, sp, #12
 8011bce:	f7ff fbff 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011bd2:	a803      	add	r0, sp, #12
 8011bd4:	f7fd fc39 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	d14a      	bne.n	8011c72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ba>
 8011bdc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011be0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011be4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8011be8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011bec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011bf0:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011bf4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011bf8:	f10d 0914 	add.w	r9, sp, #20
 8011bfc:	f10d 081c 	add.w	r8, sp, #28
 8011c00:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8011c04:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8011c08:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011c0c:	6830      	ldr	r0, [r6, #0]
 8011c0e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8011c12:	f8d0 e000 	ldr.w	lr, [r0]
 8011c16:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8011c1a:	44dc      	add	ip, fp
 8011c1c:	ebac 0c02 	sub.w	ip, ip, r2
 8011c20:	fa1f fc8c 	uxth.w	ip, ip
 8011c24:	f8cd c000 	str.w	ip, [sp]
 8011c28:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8011c2c:	47d8      	blx	fp
 8011c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8011c32:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d11e      	bne.n	8011c78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c0>
 8011c3a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011c3e:	e888 0003 	stmia.w	r8, {r0, r1}
 8011c42:	4640      	mov	r0, r8
 8011c44:	f7ff fb6a 	bl	801131c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8011c48:	6823      	ldr	r3, [r4, #0]
 8011c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c4c:	4641      	mov	r1, r8
 8011c4e:	4620      	mov	r0, r4
 8011c50:	4798      	blx	r3
 8011c52:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011c56:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011c5a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8011c5e:	4413      	add	r3, r2
 8011c60:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8011c64:	440a      	add	r2, r1
 8011c66:	b21b      	sxth	r3, r3
 8011c68:	b212      	sxth	r2, r2
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011c70:	dbc6      	blt.n	8011c00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 8011c72:	3501      	adds	r5, #1
 8011c74:	b2ad      	uxth	r5, r5
 8011c76:	e79a      	b.n	8011bae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	4649      	mov	r1, r9
 8011c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c7e:	e7e6      	b.n	8011c4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x296>
 8011c80:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011c84:	42ab      	cmp	r3, r5
 8011c86:	f67f af73 	bls.w	8011b70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8011c8a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8011c8e:	ab07      	add	r3, sp, #28
 8011c90:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8011c94:	6851      	ldr	r1, [r2, #4]
 8011c96:	c303      	stmia	r3!, {r0, r1}
 8011c98:	a807      	add	r0, sp, #28
 8011c9a:	f7fd fbd6 	bl	800f44a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011c9e:	b920      	cbnz	r0, 8011caa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f2>
 8011ca0:	6823      	ldr	r3, [r4, #0]
 8011ca2:	a907      	add	r1, sp, #28
 8011ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	4798      	blx	r3
 8011caa:	3501      	adds	r5, #1
 8011cac:	b2ad      	uxth	r5, r5
 8011cae:	e7e7      	b.n	8011c80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 8011cb0:	20005f7c 	.word	0x20005f7c
 8011cb4:	20005f88 	.word	0x20005f88
 8011cb8:	20000094 	.word	0x20000094
 8011cbc:	20005f24 	.word	0x20005f24
 8011cc0:	20005f1a 	.word	0x20005f1a
 8011cc4:	20005f22 	.word	0x20005f22
 8011cc8:	20005f18 	.word	0x20005f18
 8011ccc:	20005f1c 	.word	0x20005f1c

08011cd0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8011cd0:	4b03      	ldr	r3, [pc, #12]	; (8011ce0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	801a      	strh	r2, [r3, #0]
 8011cd6:	805a      	strh	r2, [r3, #2]
 8011cd8:	809a      	strh	r2, [r3, #4]
 8011cda:	80da      	strh	r2, [r3, #6]
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop
 8011ce0:	20005f88 	.word	0x20005f88

08011ce4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8011ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce8:	4607      	mov	r7, r0
 8011cea:	b099      	sub	sp, #100	; 0x64
 8011cec:	a802      	add	r0, sp, #8
 8011cee:	4614      	mov	r4, r2
 8011cf0:	461d      	mov	r5, r3
 8011cf2:	468a      	mov	sl, r1
 8011cf4:	f000 fdb4 	bl	8012860 <_ZN8touchgfx12TextProviderC1Ev>
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	4638      	mov	r0, r7
 8011cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cfe:	4798      	blx	r3
 8011d00:	462a      	mov	r2, r5
 8011d02:	4603      	mov	r3, r0
 8011d04:	4621      	mov	r1, r4
 8011d06:	a802      	add	r0, sp, #8
 8011d08:	f000 fdef 	bl	80128ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8011d0c:	2500      	movs	r5, #0
 8011d0e:	462c      	mov	r4, r5
 8011d10:	46a9      	mov	r9, r5
 8011d12:	46a8      	mov	r8, r5
 8011d14:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8011d18:	2300      	movs	r3, #0
 8011d1a:	9301      	str	r3, [sp, #4]
 8011d1c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011d20:	429c      	cmp	r4, r3
 8011d22:	d002      	beq.n	8011d2a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8011d24:	455c      	cmp	r4, fp
 8011d26:	bf18      	it	ne
 8011d28:	4625      	movne	r5, r4
 8011d2a:	ab01      	add	r3, sp, #4
 8011d2c:	463a      	mov	r2, r7
 8011d2e:	4651      	mov	r1, sl
 8011d30:	a802      	add	r0, sp, #8
 8011d32:	f001 f8d3 	bl	8012edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011d36:	4604      	mov	r4, r0
 8011d38:	b108      	cbz	r0, 8011d3e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8011d3a:	280a      	cmp	r0, #10
 8011d3c:	d10a      	bne.n	8011d54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8011d3e:	45c1      	cmp	r9, r8
 8011d40:	bf38      	it	cc
 8011d42:	46c1      	movcc	r9, r8
 8011d44:	f04f 0800 	mov.w	r8, #0
 8011d48:	2c00      	cmp	r4, #0
 8011d4a:	d1e5      	bne.n	8011d18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8011d4c:	4648      	mov	r0, r9
 8011d4e:	b019      	add	sp, #100	; 0x64
 8011d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d54:	9a01      	ldr	r2, [sp, #4]
 8011d56:	2a00      	cmp	r2, #0
 8011d58:	d0de      	beq.n	8011d18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8011d5a:	7b56      	ldrb	r6, [r2, #13]
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	8894      	ldrh	r4, [r2, #4]
 8011d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d62:	0076      	lsls	r6, r6, #1
 8011d64:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8011d68:	7a96      	ldrb	r6, [r2, #10]
 8011d6a:	4629      	mov	r1, r5
 8011d6c:	4306      	orrs	r6, r0
 8011d6e:	4638      	mov	r0, r7
 8011d70:	4798      	blx	r3
 8011d72:	4430      	add	r0, r6
 8011d74:	4480      	add	r8, r0
 8011d76:	fa1f f888 	uxth.w	r8, r8
 8011d7a:	e7e5      	b.n	8011d48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08011d7c <_ZNK8touchgfx4Font12getCharWidthEt>:
 8011d7c:	b508      	push	{r3, lr}
 8011d7e:	6803      	ldr	r3, [r0, #0]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	4798      	blx	r3
 8011d84:	b128      	cbz	r0, 8011d92 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8011d86:	7b43      	ldrb	r3, [r0, #13]
 8011d88:	7a80      	ldrb	r0, [r0, #10]
 8011d8a:	005b      	lsls	r3, r3, #1
 8011d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d90:	4318      	orrs	r0, r3
 8011d92:	bd08      	pop	{r3, pc}

08011d94 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8011d94:	b40e      	push	{r1, r2, r3}
 8011d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d98:	b098      	sub	sp, #96	; 0x60
 8011d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8011d9c:	4605      	mov	r5, r0
 8011d9e:	f853 4b04 	ldr.w	r4, [r3], #4
 8011da2:	9300      	str	r3, [sp, #0]
 8011da4:	a802      	add	r0, sp, #8
 8011da6:	f000 fd5b 	bl	8012860 <_ZN8touchgfx12TextProviderC1Ev>
 8011daa:	682b      	ldr	r3, [r5, #0]
 8011dac:	4628      	mov	r0, r5
 8011dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011db0:	4798      	blx	r3
 8011db2:	ae18      	add	r6, sp, #96	; 0x60
 8011db4:	4603      	mov	r3, r0
 8011db6:	4621      	mov	r1, r4
 8011db8:	9a00      	ldr	r2, [sp, #0]
 8011dba:	2400      	movs	r4, #0
 8011dbc:	a802      	add	r0, sp, #8
 8011dbe:	f000 fd94 	bl	80128ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8011dc2:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8011dc6:	462a      	mov	r2, r5
 8011dc8:	4633      	mov	r3, r6
 8011dca:	4621      	mov	r1, r4
 8011dcc:	a802      	add	r0, sp, #8
 8011dce:	f001 f885 	bl	8012edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011dd2:	b1f0      	cbz	r0, 8011e12 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7e>
 8011dd4:	280a      	cmp	r0, #10
 8011dd6:	d018      	beq.n	8011e0a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8011dd8:	9f01      	ldr	r7, [sp, #4]
 8011dda:	b1b7      	cbz	r7, 8011e0a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8011ddc:	7b78      	ldrb	r0, [r7, #13]
 8011dde:	7a3b      	ldrb	r3, [r7, #8]
 8011de0:	88aa      	ldrh	r2, [r5, #4]
 8011de2:	00c1      	lsls	r1, r0, #3
 8011de4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011de8:	4319      	orrs	r1, r3
 8011dea:	0643      	lsls	r3, r0, #25
 8011dec:	bf44      	itt	mi
 8011dee:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8011df2:	b219      	sxthmi	r1, r3
 8011df4:	0100      	lsls	r0, r0, #4
 8011df6:	79fb      	ldrb	r3, [r7, #7]
 8011df8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8011dfc:	4303      	orrs	r3, r0
 8011dfe:	4413      	add	r3, r2
 8011e00:	1a5b      	subs	r3, r3, r1
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	42a3      	cmp	r3, r4
 8011e06:	bfc8      	it	gt
 8011e08:	b21c      	sxthgt	r4, r3
 8011e0a:	4633      	mov	r3, r6
 8011e0c:	462a      	mov	r2, r5
 8011e0e:	2100      	movs	r1, #0
 8011e10:	e7dc      	b.n	8011dcc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8011e12:	b2a0      	uxth	r0, r4
 8011e14:	b018      	add	sp, #96	; 0x60
 8011e16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011e1a:	b003      	add	sp, #12
 8011e1c:	4770      	bx	lr

08011e1e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8011e1e:	b40e      	push	{r1, r2, r3}
 8011e20:	b530      	push	{r4, r5, lr}
 8011e22:	b098      	sub	sp, #96	; 0x60
 8011e24:	ab1b      	add	r3, sp, #108	; 0x6c
 8011e26:	4604      	mov	r4, r0
 8011e28:	f853 5b04 	ldr.w	r5, [r3], #4
 8011e2c:	9301      	str	r3, [sp, #4]
 8011e2e:	a802      	add	r0, sp, #8
 8011e30:	f000 fd16 	bl	8012860 <_ZN8touchgfx12TextProviderC1Ev>
 8011e34:	6823      	ldr	r3, [r4, #0]
 8011e36:	4620      	mov	r0, r4
 8011e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e3a:	4798      	blx	r3
 8011e3c:	9a01      	ldr	r2, [sp, #4]
 8011e3e:	4603      	mov	r3, r0
 8011e40:	4629      	mov	r1, r5
 8011e42:	a802      	add	r0, sp, #8
 8011e44:	f000 fd51 	bl	80128ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8011e48:	a802      	add	r0, sp, #8
 8011e4a:	f001 f939 	bl	80130c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011e4e:	2401      	movs	r4, #1
 8011e50:	b2a3      	uxth	r3, r4
 8011e52:	b140      	cbz	r0, 8011e66 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 8011e54:	280a      	cmp	r0, #10
 8011e56:	bf08      	it	eq
 8011e58:	3301      	addeq	r3, #1
 8011e5a:	a802      	add	r0, sp, #8
 8011e5c:	bf08      	it	eq
 8011e5e:	b21c      	sxtheq	r4, r3
 8011e60:	f001 f92e 	bl	80130c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011e64:	e7f4      	b.n	8011e50 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8011e66:	4618      	mov	r0, r3
 8011e68:	b018      	add	sp, #96	; 0x60
 8011e6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e6e:	b003      	add	sp, #12
 8011e70:	4770      	bx	lr

08011e72 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8011e72:	b40e      	push	{r1, r2, r3}
 8011e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e76:	b098      	sub	sp, #96	; 0x60
 8011e78:	ab1d      	add	r3, sp, #116	; 0x74
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011e80:	9300      	str	r3, [sp, #0]
 8011e82:	a802      	add	r0, sp, #8
 8011e84:	f000 fcec 	bl	8012860 <_ZN8touchgfx12TextProviderC1Ev>
 8011e88:	6823      	ldr	r3, [r4, #0]
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e8e:	4798      	blx	r3
 8011e90:	4629      	mov	r1, r5
 8011e92:	4603      	mov	r3, r0
 8011e94:	9a00      	ldr	r2, [sp, #0]
 8011e96:	a802      	add	r0, sp, #8
 8011e98:	ad18      	add	r5, sp, #96	; 0x60
 8011e9a:	f000 fd26 	bl	80128ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8011e9e:	2100      	movs	r1, #0
 8011ea0:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8011ea4:	4622      	mov	r2, r4
 8011ea6:	462b      	mov	r3, r5
 8011ea8:	a802      	add	r0, sp, #8
 8011eaa:	f001 f817 	bl	8012edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011eae:	26ff      	movs	r6, #255	; 0xff
 8011eb0:	b1d8      	cbz	r0, 8011eea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8011eb2:	280a      	cmp	r0, #10
 8011eb4:	d012      	beq.n	8011edc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8011eb6:	9801      	ldr	r0, [sp, #4]
 8011eb8:	b180      	cbz	r0, 8011edc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8011eba:	7b47      	ldrb	r7, [r0, #13]
 8011ebc:	7922      	ldrb	r2, [r4, #4]
 8011ebe:	00fb      	lsls	r3, r7, #3
 8011ec0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8011ec4:	7a03      	ldrb	r3, [r0, #8]
 8011ec6:	430b      	orrs	r3, r1
 8011ec8:	0679      	lsls	r1, r7, #25
 8011eca:	bf44      	itt	mi
 8011ecc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011ed0:	b21b      	sxthmi	r3, r3
 8011ed2:	1ad3      	subs	r3, r2, r3
 8011ed4:	b2db      	uxtb	r3, r3
 8011ed6:	429e      	cmp	r6, r3
 8011ed8:	bf28      	it	cs
 8011eda:	461e      	movcs	r6, r3
 8011edc:	462b      	mov	r3, r5
 8011ede:	4622      	mov	r2, r4
 8011ee0:	2100      	movs	r1, #0
 8011ee2:	a802      	add	r0, sp, #8
 8011ee4:	f000 fffa 	bl	8012edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011ee8:	e7e2      	b.n	8011eb0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8011eea:	4630      	mov	r0, r6
 8011eec:	b018      	add	sp, #96	; 0x60
 8011eee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011ef2:	b003      	add	sp, #12
 8011ef4:	4770      	bx	lr

08011ef6 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8011ef6:	b513      	push	{r0, r1, r4, lr}
 8011ef8:	1d01      	adds	r1, r0, #4
 8011efa:	4603      	mov	r3, r0
 8011efc:	c903      	ldmia	r1, {r0, r1}
 8011efe:	466a      	mov	r2, sp
 8011f00:	e882 0003 	stmia.w	r2, {r0, r1}
 8011f04:	2100      	movs	r1, #0
 8011f06:	9100      	str	r1, [sp, #0]
 8011f08:	6819      	ldr	r1, [r3, #0]
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	690c      	ldr	r4, [r1, #16]
 8011f0e:	4611      	mov	r1, r2
 8011f10:	47a0      	blx	r4
 8011f12:	b002      	add	sp, #8
 8011f14:	bd10      	pop	{r4, pc}

08011f16 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8011f16:	b538      	push	{r3, r4, r5, lr}
 8011f18:	680b      	ldr	r3, [r1, #0]
 8011f1a:	460c      	mov	r4, r1
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	4605      	mov	r5, r0
 8011f20:	4798      	blx	r3
 8011f22:	6823      	ldr	r3, [r4, #0]
 8011f24:	4620      	mov	r0, r4
 8011f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f28:	4629      	mov	r1, r5
 8011f2a:	4798      	blx	r3
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	bd38      	pop	{r3, r4, r5, pc}

08011f30 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8011f30:	b410      	push	{r4}
 8011f32:	880a      	ldrh	r2, [r1, #0]
 8011f34:	8884      	ldrh	r4, [r0, #4]
 8011f36:	4422      	add	r2, r4
 8011f38:	800a      	strh	r2, [r1, #0]
 8011f3a:	88c4      	ldrh	r4, [r0, #6]
 8011f3c:	884a      	ldrh	r2, [r1, #2]
 8011f3e:	4422      	add	r2, r4
 8011f40:	804a      	strh	r2, [r1, #2]
 8011f42:	6940      	ldr	r0, [r0, #20]
 8011f44:	b120      	cbz	r0, 8011f50 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8011f46:	6803      	ldr	r3, [r0, #0]
 8011f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f4e:	4718      	bx	r3
 8011f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f54:	4770      	bx	lr

08011f56 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8011f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f58:	460b      	mov	r3, r1
 8011f5a:	b085      	sub	sp, #20
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	b901      	cbnz	r1, 8011f62 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8011f60:	b1fa      	cbz	r2, 8011fa2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8011f62:	1d27      	adds	r7, r4, #4
 8011f64:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011f68:	466e      	mov	r6, sp
 8011f6a:	e886 0003 	stmia.w	r6, {r0, r1}
 8011f6e:	88e1      	ldrh	r1, [r4, #6]
 8011f70:	440a      	add	r2, r1
 8011f72:	88a1      	ldrh	r1, [r4, #4]
 8011f74:	4419      	add	r1, r3
 8011f76:	6823      	ldr	r3, [r4, #0]
 8011f78:	b209      	sxth	r1, r1
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f7e:	b212      	sxth	r2, r2
 8011f80:	4798      	blx	r3
 8011f82:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011f86:	ad02      	add	r5, sp, #8
 8011f88:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f8c:	6960      	ldr	r0, [r4, #20]
 8011f8e:	b150      	cbz	r0, 8011fa6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8011f90:	6803      	ldr	r3, [r0, #0]
 8011f92:	4631      	mov	r1, r6
 8011f94:	691b      	ldr	r3, [r3, #16]
 8011f96:	4798      	blx	r3
 8011f98:	6960      	ldr	r0, [r4, #20]
 8011f9a:	6803      	ldr	r3, [r0, #0]
 8011f9c:	691b      	ldr	r3, [r3, #16]
 8011f9e:	4629      	mov	r1, r5
 8011fa0:	4798      	blx	r3
 8011fa2:	b005      	add	sp, #20
 8011fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fa6:	f7ff fb9d 	bl	80116e4 <_ZN8touchgfx11Application11getInstanceEv>
 8011faa:	6803      	ldr	r3, [r0, #0]
 8011fac:	4631      	mov	r1, r6
 8011fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fb0:	4798      	blx	r3
 8011fb2:	f7ff fb97 	bl	80116e4 <_ZN8touchgfx11Application11getInstanceEv>
 8011fb6:	6803      	ldr	r3, [r0, #0]
 8011fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fba:	e7f0      	b.n	8011f9e <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08011fbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8011fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fbe:	8882      	ldrh	r2, [r0, #4]
 8011fc0:	880b      	ldrh	r3, [r1, #0]
 8011fc2:	4413      	add	r3, r2
 8011fc4:	800b      	strh	r3, [r1, #0]
 8011fc6:	88c2      	ldrh	r2, [r0, #6]
 8011fc8:	884b      	ldrh	r3, [r1, #2]
 8011fca:	4413      	add	r3, r2
 8011fcc:	4602      	mov	r2, r0
 8011fce:	804b      	strh	r3, [r1, #2]
 8011fd0:	4605      	mov	r5, r0
 8011fd2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011fd6:	460c      	mov	r4, r1
 8011fd8:	6851      	ldr	r1, [r2, #4]
 8011fda:	466b      	mov	r3, sp
 8011fdc:	c303      	stmia	r3!, {r0, r1}
 8011fde:	4621      	mov	r1, r4
 8011fe0:	4668      	mov	r0, sp
 8011fe2:	f7fd f9ef 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 8011fe6:	466b      	mov	r3, sp
 8011fe8:	cb03      	ldmia	r3!, {r0, r1}
 8011fea:	6020      	str	r0, [r4, #0]
 8011fec:	6061      	str	r1, [r4, #4]
 8011fee:	6968      	ldr	r0, [r5, #20]
 8011ff0:	b128      	cbz	r0, 8011ffe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8011ff2:	6803      	ldr	r3, [r0, #0]
 8011ff4:	691b      	ldr	r3, [r3, #16]
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	4798      	blx	r3
 8011ffa:	b003      	add	sp, #12
 8011ffc:	bd30      	pop	{r4, r5, pc}
 8011ffe:	f7ff fb71 	bl	80116e4 <_ZN8touchgfx11Application11getInstanceEv>
 8012002:	6803      	ldr	r3, [r0, #0]
 8012004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012006:	e7f6      	b.n	8011ff6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08012008 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8012008:	b570      	push	{r4, r5, r6, lr}
 801200a:	8882      	ldrh	r2, [r0, #4]
 801200c:	880b      	ldrh	r3, [r1, #0]
 801200e:	4413      	add	r3, r2
 8012010:	800b      	strh	r3, [r1, #0]
 8012012:	88c2      	ldrh	r2, [r0, #6]
 8012014:	884b      	ldrh	r3, [r1, #2]
 8012016:	460c      	mov	r4, r1
 8012018:	4413      	add	r3, r2
 801201a:	804b      	strh	r3, [r1, #2]
 801201c:	4605      	mov	r5, r0
 801201e:	1d01      	adds	r1, r0, #4
 8012020:	4620      	mov	r0, r4
 8012022:	f7fd f9cf 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 8012026:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801202a:	2b00      	cmp	r3, #0
 801202c:	dd0b      	ble.n	8012046 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801202e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012032:	2b00      	cmp	r3, #0
 8012034:	dd07      	ble.n	8012046 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012036:	6968      	ldr	r0, [r5, #20]
 8012038:	b128      	cbz	r0, 8012046 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801203a:	6803      	ldr	r3, [r0, #0]
 801203c:	4621      	mov	r1, r4
 801203e:	6a1b      	ldr	r3, [r3, #32]
 8012040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012044:	4718      	bx	r3
 8012046:	bd70      	pop	{r4, r5, r6, pc}

08012048 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8012048:	b510      	push	{r4, lr}
 801204a:	4604      	mov	r4, r0
 801204c:	4608      	mov	r0, r1
 801204e:	2300      	movs	r3, #0
 8012050:	8023      	strh	r3, [r4, #0]
 8012052:	8063      	strh	r3, [r4, #2]
 8012054:	6803      	ldr	r3, [r0, #0]
 8012056:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801205a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801205e:	80a1      	strh	r1, [r4, #4]
 8012060:	80e2      	strh	r2, [r4, #6]
 8012062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012064:	4621      	mov	r1, r4
 8012066:	4798      	blx	r3
 8012068:	4620      	mov	r0, r4
 801206a:	bd10      	pop	{r4, pc}

0801206c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801206c:	b530      	push	{r4, r5, lr}
 801206e:	8083      	strh	r3, [r0, #4]
 8012070:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012074:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8012078:	7183      	strb	r3, [r0, #6]
 801207a:	79c3      	ldrb	r3, [r0, #7]
 801207c:	6101      	str	r1, [r0, #16]
 801207e:	f365 0306 	bfi	r3, r5, #0, #7
 8012082:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8012086:	8282      	strh	r2, [r0, #20]
 8012088:	f365 13c7 	bfi	r3, r5, #7, #1
 801208c:	71c3      	strb	r3, [r0, #7]
 801208e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8012092:	7203      	strb	r3, [r0, #8]
 8012094:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8012098:	7243      	strb	r3, [r0, #9]
 801209a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801209e:	8143      	strh	r3, [r0, #10]
 80120a0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80120a4:	8183      	strh	r3, [r0, #12]
 80120a6:	4b01      	ldr	r3, [pc, #4]	; (80120ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80120a8:	6003      	str	r3, [r0, #0]
 80120aa:	bd30      	pop	{r4, r5, pc}
 80120ac:	0801ec74 	.word	0x0801ec74

080120b0 <_ZNK8touchgfx9ConstFont4findEt>:
 80120b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120b2:	6904      	ldr	r4, [r0, #16]
 80120b4:	8a82      	ldrh	r2, [r0, #20]
 80120b6:	88a3      	ldrh	r3, [r4, #4]
 80120b8:	1acb      	subs	r3, r1, r3
 80120ba:	f102 32ff 	add.w	r2, r2, #4294967295
 80120be:	d431      	bmi.n	8012124 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 80120c0:	4293      	cmp	r3, r2
 80120c2:	dd0c      	ble.n	80120de <_ZNK8touchgfx9ConstFont4findEt+0x2e>
 80120c4:	230e      	movs	r3, #14
 80120c6:	fb03 4302 	mla	r3, r3, r2, r4
 80120ca:	889b      	ldrh	r3, [r3, #4]
 80120cc:	1a5b      	subs	r3, r3, r1
 80120ce:	1ad3      	subs	r3, r2, r3
 80120d0:	429a      	cmp	r2, r3
 80120d2:	db27      	blt.n	8012124 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	bfbc      	itt	lt
 80120d8:	2302      	movlt	r3, #2
 80120da:	fb92 f3f3 	sdivlt	r3, r2, r3
 80120de:	2500      	movs	r5, #0
 80120e0:	260e      	movs	r6, #14
 80120e2:	4295      	cmp	r5, r2
 80120e4:	dc1e      	bgt.n	8012124 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 80120e6:	fb06 4003 	mla	r0, r6, r3, r4
 80120ea:	8887      	ldrh	r7, [r0, #4]
 80120ec:	428f      	cmp	r7, r1
 80120ee:	d01a      	beq.n	8012126 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80120f0:	d90d      	bls.n	801210e <_ZNK8touchgfx9ConstFont4findEt+0x5e>
 80120f2:	1e5a      	subs	r2, r3, #1
 80120f4:	4295      	cmp	r5, r2
 80120f6:	dc15      	bgt.n	8012124 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 80120f8:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80120fc:	1a5b      	subs	r3, r3, r1
 80120fe:	1ad3      	subs	r3, r2, r3
 8012100:	429a      	cmp	r2, r3
 8012102:	db0f      	blt.n	8012124 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8012104:	429d      	cmp	r5, r3
 8012106:	ddec      	ble.n	80120e2 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 8012108:	1953      	adds	r3, r2, r5
 801210a:	105b      	asrs	r3, r3, #1
 801210c:	e7e9      	b.n	80120e2 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 801210e:	1c5d      	adds	r5, r3, #1
 8012110:	42aa      	cmp	r2, r5
 8012112:	db07      	blt.n	8012124 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8012114:	8a43      	ldrh	r3, [r0, #18]
 8012116:	1acb      	subs	r3, r1, r3
 8012118:	442b      	add	r3, r5
 801211a:	429d      	cmp	r5, r3
 801211c:	dc02      	bgt.n	8012124 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801211e:	429a      	cmp	r2, r3
 8012120:	dadf      	bge.n	80120e2 <_ZNK8touchgfx9ConstFont4findEt+0x32>
 8012122:	e7f1      	b.n	8012108 <_ZNK8touchgfx9ConstFont4findEt+0x58>
 8012124:	2000      	movs	r0, #0
 8012126:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012128 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8012128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801212a:	4604      	mov	r4, r0
 801212c:	4617      	mov	r7, r2
 801212e:	461e      	mov	r6, r3
 8012130:	b911      	cbnz	r1, 8012138 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8012132:	2500      	movs	r5, #0
 8012134:	4628      	mov	r0, r5
 8012136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012138:	290a      	cmp	r1, #10
 801213a:	d0fa      	beq.n	8012132 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801213c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8012140:	4291      	cmp	r1, r2
 8012142:	d0f6      	beq.n	8012132 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012144:	f242 020b 	movw	r2, #8203	; 0x200b
 8012148:	4291      	cmp	r1, r2
 801214a:	d0f2      	beq.n	8012132 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801214c:	f7ff ffb0 	bl	80120b0 <_ZNK8touchgfx9ConstFont4findEt>
 8012150:	4605      	mov	r5, r0
 8012152:	b950      	cbnz	r0, 801216a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8012154:	6823      	ldr	r3, [r4, #0]
 8012156:	4620      	mov	r0, r4
 8012158:	691b      	ldr	r3, [r3, #16]
 801215a:	4798      	blx	r3
 801215c:	4601      	mov	r1, r0
 801215e:	4620      	mov	r0, r4
 8012160:	f7ff ffa6 	bl	80120b0 <_ZNK8touchgfx9ConstFont4findEt>
 8012164:	4605      	mov	r5, r0
 8012166:	2800      	cmp	r0, #0
 8012168:	d0e3      	beq.n	8012132 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801216a:	6823      	ldr	r3, [r4, #0]
 801216c:	4629      	mov	r1, r5
 801216e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012170:	4620      	mov	r0, r4
 8012172:	4798      	blx	r3
 8012174:	6038      	str	r0, [r7, #0]
 8012176:	6823      	ldr	r3, [r4, #0]
 8012178:	4620      	mov	r0, r4
 801217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801217c:	4798      	blx	r3
 801217e:	7030      	strb	r0, [r6, #0]
 8012180:	e7d8      	b.n	8012134 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08012182 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8012182:	2000      	movs	r0, #0
 8012184:	4770      	bx	lr

08012186 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8012186:	2001      	movs	r0, #1
 8012188:	4770      	bx	lr

0801218a <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801218a:	2002      	movs	r0, #2
 801218c:	4770      	bx	lr

0801218e <_ZN8touchgfx12GestureEventD1Ev>:
 801218e:	4770      	bx	lr

08012190 <_ZN8touchgfx9DragEventD1Ev>:
 8012190:	4770      	bx	lr

08012192 <_ZN8touchgfx10ClickEventD1Ev>:
 8012192:	4770      	bx	lr

08012194 <_ZN8touchgfx10ClickEventD0Ev>:
 8012194:	b510      	push	{r4, lr}
 8012196:	210c      	movs	r1, #12
 8012198:	4604      	mov	r4, r0
 801219a:	f009 fbcf 	bl	801b93c <_ZdlPvj>
 801219e:	4620      	mov	r0, r4
 80121a0:	bd10      	pop	{r4, pc}

080121a2 <_ZN8touchgfx9DragEventD0Ev>:
 80121a2:	b510      	push	{r4, lr}
 80121a4:	2110      	movs	r1, #16
 80121a6:	4604      	mov	r4, r0
 80121a8:	f009 fbc8 	bl	801b93c <_ZdlPvj>
 80121ac:	4620      	mov	r0, r4
 80121ae:	bd10      	pop	{r4, pc}

080121b0 <_ZN8touchgfx12GestureEventD0Ev>:
 80121b0:	b510      	push	{r4, lr}
 80121b2:	210c      	movs	r1, #12
 80121b4:	4604      	mov	r4, r0
 80121b6:	f009 fbc1 	bl	801b93c <_ZdlPvj>
 80121ba:	4620      	mov	r0, r4
 80121bc:	bd10      	pop	{r4, pc}
	...

080121c0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80121c0:	b530      	push	{r4, r5, lr}
 80121c2:	460d      	mov	r5, r1
 80121c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80121c6:	b087      	sub	sp, #28
 80121c8:	4604      	mov	r4, r0
 80121ca:	b301      	cbz	r1, 801220e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80121cc:	a801      	add	r0, sp, #4
 80121ce:	f7ff ff3b 	bl	8012048 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80121d2:	892a      	ldrh	r2, [r5, #8]
 80121d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80121d8:	7928      	ldrb	r0, [r5, #4]
 80121da:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80121de:	f88d 0010 	strb.w	r0, [sp, #16]
 80121e2:	1ad2      	subs	r2, r2, r3
 80121e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80121e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80121e8:	f8ad 1012 	strh.w	r1, [sp, #18]
 80121ec:	441a      	add	r2, r3
 80121ee:	896b      	ldrh	r3, [r5, #10]
 80121f0:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80121f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80121f8:	1b5b      	subs	r3, r3, r5
 80121fa:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80121fc:	442b      	add	r3, r5
 80121fe:	4d05      	ldr	r5, [pc, #20]	; (8012214 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8012200:	9503      	str	r5, [sp, #12]
 8012202:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012206:	6803      	ldr	r3, [r0, #0]
 8012208:	a903      	add	r1, sp, #12
 801220a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801220c:	4798      	blx	r3
 801220e:	b007      	add	sp, #28
 8012210:	bd30      	pop	{r4, r5, pc}
 8012212:	bf00      	nop
 8012214:	0801ecf0 	.word	0x0801ecf0

08012218 <_ZNK8touchgfx4Rect9intersectEss>:
 8012218:	b510      	push	{r4, lr}
 801221a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801221e:	428b      	cmp	r3, r1
 8012220:	dc10      	bgt.n	8012244 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8012222:	8884      	ldrh	r4, [r0, #4]
 8012224:	4423      	add	r3, r4
 8012226:	b21b      	sxth	r3, r3
 8012228:	4299      	cmp	r1, r3
 801222a:	da0b      	bge.n	8012244 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801222c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012230:	4293      	cmp	r3, r2
 8012232:	dc07      	bgt.n	8012244 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8012234:	88c0      	ldrh	r0, [r0, #6]
 8012236:	4418      	add	r0, r3
 8012238:	b200      	sxth	r0, r0
 801223a:	4282      	cmp	r2, r0
 801223c:	bfac      	ite	ge
 801223e:	2000      	movge	r0, #0
 8012240:	2001      	movlt	r0, #1
 8012242:	bd10      	pop	{r4, pc}
 8012244:	2000      	movs	r0, #0
 8012246:	e7fc      	b.n	8012242 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08012248 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8012248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801224a:	460c      	mov	r4, r1
 801224c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801224e:	b089      	sub	sp, #36	; 0x24
 8012250:	4605      	mov	r5, r0
 8012252:	2900      	cmp	r1, #0
 8012254:	d054      	beq.n	8012300 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8012256:	4668      	mov	r0, sp
 8012258:	f7ff fef6 	bl	8012048 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801225c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801225e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8012260:	8922      	ldrh	r2, [r4, #8]
 8012262:	88e1      	ldrh	r1, [r4, #6]
 8012264:	443a      	add	r2, r7
 8012266:	4431      	add	r1, r6
 8012268:	b212      	sxth	r2, r2
 801226a:	b209      	sxth	r1, r1
 801226c:	4668      	mov	r0, sp
 801226e:	f7ff ffd3 	bl	8012218 <_ZNK8touchgfx4Rect9intersectEss>
 8012272:	b1d0      	cbz	r0, 80122aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8012274:	89a2      	ldrh	r2, [r4, #12]
 8012276:	8961      	ldrh	r1, [r4, #10]
 8012278:	443a      	add	r2, r7
 801227a:	4431      	add	r1, r6
 801227c:	b212      	sxth	r2, r2
 801227e:	b209      	sxth	r1, r1
 8012280:	4668      	mov	r0, sp
 8012282:	f7ff ffc9 	bl	8012218 <_ZNK8touchgfx4Rect9intersectEss>
 8012286:	4603      	mov	r3, r0
 8012288:	b978      	cbnz	r0, 80122aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801228a:	4a1e      	ldr	r2, [pc, #120]	; (8012304 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801228c:	9204      	str	r2, [sp, #16]
 801228e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8012290:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012294:	2202      	movs	r2, #2
 8012296:	f88d 2014 	strb.w	r2, [sp, #20]
 801229a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801229e:	f8ad 301a 	strh.w	r3, [sp, #26]
 80122a2:	6803      	ldr	r3, [r0, #0]
 80122a4:	a904      	add	r1, sp, #16
 80122a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122a8:	4798      	blx	r3
 80122aa:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80122ac:	a802      	add	r0, sp, #8
 80122ae:	f7ff fecb 	bl	8012048 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80122b2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80122b6:	88e0      	ldrh	r0, [r4, #6]
 80122b8:	8961      	ldrh	r1, [r4, #10]
 80122ba:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80122be:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80122c2:	8923      	ldrh	r3, [r4, #8]
 80122c4:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80122c6:	7927      	ldrb	r7, [r4, #4]
 80122c8:	f88d 7014 	strb.w	r7, [sp, #20]
 80122cc:	1a80      	subs	r0, r0, r2
 80122ce:	1a89      	subs	r1, r1, r2
 80122d0:	89a2      	ldrh	r2, [r4, #12]
 80122d2:	4c0d      	ldr	r4, [pc, #52]	; (8012308 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80122d4:	9404      	str	r4, [sp, #16]
 80122d6:	4460      	add	r0, ip
 80122d8:	eba3 030e 	sub.w	r3, r3, lr
 80122dc:	eba2 020e 	sub.w	r2, r2, lr
 80122e0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80122e4:	4433      	add	r3, r6
 80122e6:	4461      	add	r1, ip
 80122e8:	4432      	add	r2, r6
 80122ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80122ec:	f8ad 101a 	strh.w	r1, [sp, #26]
 80122f0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80122f4:	f8ad 201c 	strh.w	r2, [sp, #28]
 80122f8:	6803      	ldr	r3, [r0, #0]
 80122fa:	a904      	add	r1, sp, #16
 80122fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122fe:	4798      	blx	r3
 8012300:	b009      	add	sp, #36	; 0x24
 8012302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012304:	0801ecc8 	.word	0x0801ecc8
 8012308:	0801ecdc 	.word	0x0801ecdc

0801230c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012310:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8012314:	790b      	ldrb	r3, [r1, #4]
 8012316:	b0a1      	sub	sp, #132	; 0x84
 8012318:	4604      	mov	r4, r0
 801231a:	460d      	mov	r5, r1
 801231c:	f1b9 0f00 	cmp.w	r9, #0
 8012320:	d00f      	beq.n	8012342 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8012322:	2b00      	cmp	r3, #0
 8012324:	f040 80a0 	bne.w	8012468 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8012328:	b021      	add	sp, #132	; 0x84
 801232a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801232e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8012332:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8012336:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801233a:	1d20      	adds	r0, r4, #4
 801233c:	f7fc ff90 	bl	800f260 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012340:	e092      	b.n	8012468 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8012342:	2b00      	cmp	r3, #0
 8012344:	d1f0      	bne.n	8012328 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8012346:	4b5e      	ldr	r3, [pc, #376]	; (80124c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801234e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8012352:	f1ba 0f03 	cmp.w	sl, #3
 8012356:	ddea      	ble.n	801232e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8012358:	f1ba 0f0c 	cmp.w	sl, #12
 801235c:	f04f 0303 	mov.w	r3, #3
 8012360:	bfdc      	itt	le
 8012362:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8012366:	fb92 f3f3 	sdivle	r3, r2, r3
 801236a:	9301      	str	r3, [sp, #4]
 801236c:	4b55      	ldr	r3, [pc, #340]	; (80124c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801236e:	4956      	ldr	r1, [pc, #344]	; (80124c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8012370:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012374:	4b55      	ldr	r3, [pc, #340]	; (80124cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8012376:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801237a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801237e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8012382:	ab0e      	add	r3, sp, #56	; 0x38
 8012384:	2248      	movs	r2, #72	; 0x48
 8012386:	2600      	movs	r6, #0
 8012388:	4618      	mov	r0, r3
 801238a:	960a      	str	r6, [sp, #40]	; 0x28
 801238c:	f009 fb80 	bl	801ba90 <memcpy>
 8012390:	f04f 32ff 	mov.w	r2, #4294967295
 8012394:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8012398:	f8cd a008 	str.w	sl, [sp, #8]
 801239c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80123a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	46b3      	mov	fp, r6
 80123a8:	9303      	str	r3, [sp, #12]
 80123aa:	2300      	movs	r3, #0
 80123ac:	9309      	str	r3, [sp, #36]	; 0x24
 80123ae:	9b07      	ldr	r3, [sp, #28]
 80123b0:	9a03      	ldr	r2, [sp, #12]
 80123b2:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80123b6:	88ef      	ldrh	r7, [r5, #6]
 80123b8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80123bc:	fb13 f302 	smulbb	r3, r3, r2
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	9304      	str	r3, [sp, #16]
 80123c4:	9b07      	ldr	r3, [sp, #28]
 80123c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80123ca:	a80a      	add	r0, sp, #40	; 0x28
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	fb13 f302 	smulbb	r3, r3, r2
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	9305      	str	r3, [sp, #20]
 80123d6:	9b04      	ldr	r3, [sp, #16]
 80123d8:	441f      	add	r7, r3
 80123da:	9b05      	ldr	r3, [sp, #20]
 80123dc:	4498      	add	r8, r3
 80123de:	b23f      	sxth	r7, r7
 80123e0:	fa0f f888 	sxth.w	r8, r8
 80123e4:	4642      	mov	r2, r8
 80123e6:	4639      	mov	r1, r7
 80123e8:	f7ff ff16 	bl	8012218 <_ZNK8touchgfx4Rect9intersectEss>
 80123ec:	b380      	cbz	r0, 8012450 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80123ee:	4639      	mov	r1, r7
 80123f0:	ab09      	add	r3, sp, #36	; 0x24
 80123f2:	4642      	mov	r2, r8
 80123f4:	1d20      	adds	r0, r4, #4
 80123f6:	f7fc ff33 	bl	800f260 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80123fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123fc:	b341      	cbz	r1, 8012450 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80123fe:	4549      	cmp	r1, r9
 8012400:	d026      	beq.n	8012450 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8012402:	a80c      	add	r0, sp, #48	; 0x30
 8012404:	f7ff fe20 	bl	8012048 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012408:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801240c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012410:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8012414:	2002      	movs	r0, #2
 8012416:	fb92 f2f0 	sdiv	r2, r2, r0
 801241a:	440a      	add	r2, r1
 801241c:	1a99      	subs	r1, r3, r2
 801241e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8012422:	fb93 f3f0 	sdiv	r3, r3, r0
 8012426:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801242a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801242e:	4403      	add	r3, r0
 8012430:	1ad3      	subs	r3, r2, r3
 8012432:	435b      	muls	r3, r3
 8012434:	9a06      	ldr	r2, [sp, #24]
 8012436:	fb01 3301 	mla	r3, r1, r1, r3
 801243a:	4293      	cmp	r3, r2
 801243c:	d208      	bcs.n	8012450 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801243e:	9a04      	ldr	r2, [sp, #16]
 8012440:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012444:	86a2      	strh	r2, [r4, #52]	; 0x34
 8012446:	9a05      	ldr	r2, [sp, #20]
 8012448:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801244c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801244e:	9306      	str	r3, [sp, #24]
 8012450:	f10b 0b02 	add.w	fp, fp, #2
 8012454:	f1bb 0f08 	cmp.w	fp, #8
 8012458:	dda7      	ble.n	80123aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801245a:	9b02      	ldr	r3, [sp, #8]
 801245c:	4453      	add	r3, sl
 801245e:	9302      	str	r3, [sp, #8]
 8012460:	9b01      	ldr	r3, [sp, #4]
 8012462:	3601      	adds	r6, #1
 8012464:	42b3      	cmp	r3, r6
 8012466:	d199      	bne.n	801239c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 8012468:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801246a:	2900      	cmp	r1, #0
 801246c:	f43f af5c 	beq.w	8012328 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8012470:	a80c      	add	r0, sp, #48	; 0x30
 8012472:	f7ff fde9 	bl	8012048 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012476:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801247a:	88ea      	ldrh	r2, [r5, #6]
 801247c:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8012480:	7929      	ldrb	r1, [r5, #4]
 8012482:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8012486:	1ad2      	subs	r2, r2, r3
 8012488:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801248a:	441a      	add	r2, r3
 801248c:	892b      	ldrh	r3, [r5, #8]
 801248e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8012492:	1a1b      	subs	r3, r3, r0
 8012494:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8012496:	4403      	add	r3, r0
 8012498:	480d      	ldr	r0, [pc, #52]	; (80124d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801249a:	900e      	str	r0, [sp, #56]	; 0x38
 801249c:	2600      	movs	r6, #0
 801249e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80124a0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80124a4:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80124a8:	6803      	ldr	r3, [r0, #0]
 80124aa:	a90e      	add	r1, sp, #56	; 0x38
 80124ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124ae:	4798      	blx	r3
 80124b0:	792b      	ldrb	r3, [r5, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	f43f af38 	beq.w	8012328 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80124b8:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80124bc:	e734      	b.n	8012328 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80124be:	bf00      	nop
 80124c0:	20005f24 	.word	0x20005f24
 80124c4:	20005f18 	.word	0x20005f18
 80124c8:	0801cee0 	.word	0x0801cee0
 80124cc:	20005f1a 	.word	0x20005f1a
 80124d0:	0801ecc8 	.word	0x0801ecc8

080124d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80124d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124d6:	4604      	mov	r4, r0
 80124d8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80124dc:	3201      	adds	r2, #1
 80124de:	d112      	bne.n	8012506 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80124e0:	6803      	ldr	r3, [r0, #0]
 80124e2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80124e6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80124ea:	f8ad 1004 	strh.w	r1, [sp, #4]
 80124ee:	2500      	movs	r5, #0
 80124f0:	9500      	str	r5, [sp, #0]
 80124f2:	466d      	mov	r5, sp
 80124f4:	4629      	mov	r1, r5
 80124f6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80124fa:	6a1b      	ldr	r3, [r3, #32]
 80124fc:	4798      	blx	r3
 80124fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012502:	e884 0003 	stmia.w	r4, {r0, r1}
 8012506:	4620      	mov	r0, r4
 8012508:	b003      	add	sp, #12
 801250a:	bd30      	pop	{r4, r5, pc}

0801250c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801250c:	b513      	push	{r0, r1, r4, lr}
 801250e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8012512:	3301      	adds	r3, #1
 8012514:	4604      	mov	r4, r0
 8012516:	d109      	bne.n	801252c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8012518:	4601      	mov	r1, r0
 801251a:	4668      	mov	r0, sp
 801251c:	f7ff fd94 	bl	8012048 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012520:	f8bd 3000 	ldrh.w	r3, [sp]
 8012524:	8423      	strh	r3, [r4, #32]
 8012526:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801252a:	8463      	strh	r3, [r4, #34]	; 0x22
 801252c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8012530:	b002      	add	sp, #8
 8012532:	bd10      	pop	{r4, pc}

08012534 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8012534:	b513      	push	{r0, r1, r4, lr}
 8012536:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801253a:	3301      	adds	r3, #1
 801253c:	4604      	mov	r4, r0
 801253e:	d109      	bne.n	8012554 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8012540:	4601      	mov	r1, r0
 8012542:	4668      	mov	r0, sp
 8012544:	f7ff fd80 	bl	8012048 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012548:	f8bd 3000 	ldrh.w	r3, [sp]
 801254c:	8423      	strh	r3, [r4, #32]
 801254e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012552:	8463      	strh	r3, [r4, #34]	; 0x22
 8012554:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012558:	b002      	add	sp, #8
 801255a:	bd10      	pop	{r4, pc}

0801255c <_ZN8touchgfx6ScreenC1Ev>:
 801255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801255e:	4605      	mov	r5, r0
 8012560:	4b17      	ldr	r3, [pc, #92]	; (80125c0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8012562:	f845 3b04 	str.w	r3, [r5], #4
 8012566:	2301      	movs	r3, #1
 8012568:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801256c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8012570:	4b14      	ldr	r3, [pc, #80]	; (80125c4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8012572:	4915      	ldr	r1, [pc, #84]	; (80125c8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8012574:	f9b3 7000 	ldrsh.w	r7, [r3]
 8012578:	4b14      	ldr	r3, [pc, #80]	; (80125cc <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801257a:	6041      	str	r1, [r0, #4]
 801257c:	2200      	movs	r2, #0
 801257e:	8102      	strh	r2, [r0, #8]
 8012580:	8142      	strh	r2, [r0, #10]
 8012582:	8182      	strh	r2, [r0, #12]
 8012584:	81c2      	strh	r2, [r0, #14]
 8012586:	8202      	strh	r2, [r0, #16]
 8012588:	8242      	strh	r2, [r0, #18]
 801258a:	8282      	strh	r2, [r0, #20]
 801258c:	82c2      	strh	r2, [r0, #22]
 801258e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012592:	6202      	str	r2, [r0, #32]
 8012594:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8012598:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801259c:	6342      	str	r2, [r0, #52]	; 0x34
 801259e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80125a2:	4611      	mov	r1, r2
 80125a4:	4604      	mov	r4, r0
 80125a6:	4628      	mov	r0, r5
 80125a8:	f7f9 fadf 	bl	800bb6a <_ZN8touchgfx8Drawable5setXYEss>
 80125ac:	4639      	mov	r1, r7
 80125ae:	4628      	mov	r0, r5
 80125b0:	f7f9 faf9 	bl	800bba6 <_ZN8touchgfx8Drawable8setWidthEs>
 80125b4:	4628      	mov	r0, r5
 80125b6:	4631      	mov	r1, r6
 80125b8:	f7f9 fb04 	bl	800bbc4 <_ZN8touchgfx8Drawable9setHeightEs>
 80125bc:	4620      	mov	r0, r4
 80125be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125c0:	0801ed04 	.word	0x0801ed04
 80125c4:	20005f18 	.word	0x20005f18
 80125c8:	0801de8c 	.word	0x0801de8c
 80125cc:	20005f1a 	.word	0x20005f1a

080125d0 <_ZN8touchgfx6Screen4drawEv>:
 80125d0:	b507      	push	{r0, r1, r2, lr}
 80125d2:	4b09      	ldr	r3, [pc, #36]	; (80125f8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80125d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125d8:	4b08      	ldr	r3, [pc, #32]	; (80125fc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80125da:	f8ad 2004 	strh.w	r2, [sp, #4]
 80125de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125e2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80125e6:	6803      	ldr	r3, [r0, #0]
 80125e8:	2100      	movs	r1, #0
 80125ea:	9100      	str	r1, [sp, #0]
 80125ec:	689b      	ldr	r3, [r3, #8]
 80125ee:	4669      	mov	r1, sp
 80125f0:	4798      	blx	r3
 80125f2:	b003      	add	sp, #12
 80125f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80125f8:	20005f18 	.word	0x20005f18
 80125fc:	20005f1a 	.word	0x20005f1a

08012600 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8012600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012604:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012608:	2b00      	cmp	r3, #0
 801260a:	b089      	sub	sp, #36	; 0x24
 801260c:	4680      	mov	r8, r0
 801260e:	460c      	mov	r4, r1
 8012610:	4615      	mov	r5, r2
 8012612:	dd0e      	ble.n	8012632 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012614:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012618:	2b00      	cmp	r3, #0
 801261a:	dd0a      	ble.n	8012632 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801261c:	4628      	mov	r0, r5
 801261e:	f7ff ff59 	bl	80124d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012622:	4621      	mov	r1, r4
 8012624:	f7fe ffd4 	bl	80115d0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012628:	69eb      	ldr	r3, [r5, #28]
 801262a:	b928      	cbnz	r0, 8012638 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801262c:	461d      	mov	r5, r3
 801262e:	2b00      	cmp	r3, #0
 8012630:	d1f4      	bne.n	801261c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8012632:	b009      	add	sp, #36	; 0x24
 8012634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012638:	ae04      	add	r6, sp, #16
 801263a:	2b00      	cmp	r3, #0
 801263c:	d051      	beq.n	80126e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801263e:	682b      	ldr	r3, [r5, #0]
 8012640:	4629      	mov	r1, r5
 8012642:	68db      	ldr	r3, [r3, #12]
 8012644:	a802      	add	r0, sp, #8
 8012646:	4798      	blx	r3
 8012648:	4628      	mov	r0, r5
 801264a:	f7ff ff5f 	bl	801250c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801264e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8012652:	4407      	add	r7, r0
 8012654:	4628      	mov	r0, r5
 8012656:	f7ff ff6d 	bl	8012534 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801265a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801265e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012662:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012666:	4418      	add	r0, r3
 8012668:	4621      	mov	r1, r4
 801266a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801266e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8012672:	b23f      	sxth	r7, r7
 8012674:	4630      	mov	r0, r6
 8012676:	f8ad 3016 	strh.w	r3, [sp, #22]
 801267a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801267e:	f7fc fea1 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 8012682:	4628      	mov	r0, r5
 8012684:	f7ff ff26 	bl	80124d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012688:	4602      	mov	r2, r0
 801268a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801268e:	ab06      	add	r3, sp, #24
 8012690:	e883 0003 	stmia.w	r3, {r0, r1}
 8012694:	4611      	mov	r1, r2
 8012696:	4618      	mov	r0, r3
 8012698:	f7fc fe94 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 801269c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80126a0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80126a4:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80126a8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80126ac:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80126b0:	4299      	cmp	r1, r3
 80126b2:	d10b      	bne.n	80126cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 80126b4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80126b8:	4552      	cmp	r2, sl
 80126ba:	d107      	bne.n	80126cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 80126bc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80126c0:	455a      	cmp	r2, fp
 80126c2:	d103      	bne.n	80126cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 80126c4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80126c8:	454a      	cmp	r2, r9
 80126ca:	d00a      	beq.n	80126e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 80126cc:	f1bb 0f00 	cmp.w	fp, #0
 80126d0:	d002      	beq.n	80126d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 80126d2:	f1b9 0f00 	cmp.w	r9, #0
 80126d6:	d12e      	bne.n	8012736 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 80126d8:	69ea      	ldr	r2, [r5, #28]
 80126da:	4621      	mov	r1, r4
 80126dc:	4640      	mov	r0, r8
 80126de:	f7ff ff8f 	bl	8012600 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80126e2:	4628      	mov	r0, r5
 80126e4:	f7ff fef6 	bl	80124d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80126e8:	6861      	ldr	r1, [r4, #4]
 80126ea:	4602      	mov	r2, r0
 80126ec:	6820      	ldr	r0, [r4, #0]
 80126ee:	4633      	mov	r3, r6
 80126f0:	c303      	stmia	r3!, {r0, r1}
 80126f2:	4611      	mov	r1, r2
 80126f4:	4630      	mov	r0, r6
 80126f6:	f7fc fe65 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 80126fa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	dd97      	ble.n	8012632 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012702:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012706:	2b00      	cmp	r3, #0
 8012708:	dd93      	ble.n	8012632 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801270a:	4628      	mov	r0, r5
 801270c:	f7ff fefe 	bl	801250c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8012710:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8012714:	1a18      	subs	r0, r3, r0
 8012716:	f8ad 0010 	strh.w	r0, [sp, #16]
 801271a:	4628      	mov	r0, r5
 801271c:	f7ff ff0a 	bl	8012534 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012720:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012724:	1a18      	subs	r0, r3, r0
 8012726:	f8ad 0012 	strh.w	r0, [sp, #18]
 801272a:	682b      	ldr	r3, [r5, #0]
 801272c:	4631      	mov	r1, r6
 801272e:	689b      	ldr	r3, [r3, #8]
 8012730:	4628      	mov	r0, r5
 8012732:	4798      	blx	r3
 8012734:	e77d      	b.n	8012632 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012736:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801273a:	fa1f f08a 	uxth.w	r0, sl
 801273e:	4552      	cmp	r2, sl
 8012740:	9000      	str	r0, [sp, #0]
 8012742:	da12      	bge.n	801276a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 8012744:	9301      	str	r3, [sp, #4]
 8012746:	9b00      	ldr	r3, [sp, #0]
 8012748:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801274c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8012750:	1a9a      	subs	r2, r3, r2
 8012752:	f8ad 1010 	strh.w	r1, [sp, #16]
 8012756:	f8ad 0014 	strh.w	r0, [sp, #20]
 801275a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801275e:	69ea      	ldr	r2, [r5, #28]
 8012760:	4631      	mov	r1, r6
 8012762:	4640      	mov	r0, r8
 8012764:	f7ff ff4c 	bl	8012600 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012768:	9b01      	ldr	r3, [sp, #4]
 801276a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801276e:	429a      	cmp	r2, r3
 8012770:	b29f      	uxth	r7, r3
 8012772:	da0d      	bge.n	8012790 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 8012774:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012778:	1aba      	subs	r2, r7, r2
 801277a:	f8ad a012 	strh.w	sl, [sp, #18]
 801277e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012782:	f8ad 9016 	strh.w	r9, [sp, #22]
 8012786:	69ea      	ldr	r2, [r5, #28]
 8012788:	4631      	mov	r1, r6
 801278a:	4640      	mov	r0, r8
 801278c:	f7ff ff38 	bl	8012600 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012790:	8822      	ldrh	r2, [r4, #0]
 8012792:	88a3      	ldrh	r3, [r4, #4]
 8012794:	445f      	add	r7, fp
 8012796:	4413      	add	r3, r2
 8012798:	b29b      	uxth	r3, r3
 801279a:	b2bf      	uxth	r7, r7
 801279c:	b23a      	sxth	r2, r7
 801279e:	b219      	sxth	r1, r3
 80127a0:	4291      	cmp	r1, r2
 80127a2:	dd0d      	ble.n	80127c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 80127a4:	1bdb      	subs	r3, r3, r7
 80127a6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80127aa:	f8ad a012 	strh.w	sl, [sp, #18]
 80127ae:	f8ad 3014 	strh.w	r3, [sp, #20]
 80127b2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80127b6:	69ea      	ldr	r2, [r5, #28]
 80127b8:	4631      	mov	r1, r6
 80127ba:	4640      	mov	r0, r8
 80127bc:	f7ff ff20 	bl	8012600 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80127c0:	88e2      	ldrh	r2, [r4, #6]
 80127c2:	8863      	ldrh	r3, [r4, #2]
 80127c4:	4413      	add	r3, r2
 80127c6:	9a00      	ldr	r2, [sp, #0]
 80127c8:	444a      	add	r2, r9
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	fa1f f982 	uxth.w	r9, r2
 80127d0:	fa0f f289 	sxth.w	r2, r9
 80127d4:	b219      	sxth	r1, r3
 80127d6:	428a      	cmp	r2, r1
 80127d8:	da83      	bge.n	80126e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 80127da:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80127de:	f9b4 0000 	ldrsh.w	r0, [r4]
 80127e2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80127e6:	eba3 0309 	sub.w	r3, r3, r9
 80127ea:	f8ad 0010 	strh.w	r0, [sp, #16]
 80127ee:	f8ad 2012 	strh.w	r2, [sp, #18]
 80127f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80127f6:	69ea      	ldr	r2, [r5, #28]
 80127f8:	4631      	mov	r1, r6
 80127fa:	e76f      	b.n	80126dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

080127fc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80127fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127fe:	aa02      	add	r2, sp, #8
 8012800:	2300      	movs	r3, #0
 8012802:	f842 3d04 	str.w	r3, [r2, #-4]!
 8012806:	4604      	mov	r4, r0
 8012808:	3004      	adds	r0, #4
 801280a:	460d      	mov	r5, r1
 801280c:	f7fc feb2 	bl	800f574 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8012810:	9a01      	ldr	r2, [sp, #4]
 8012812:	b11a      	cbz	r2, 801281c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8012814:	4629      	mov	r1, r5
 8012816:	4620      	mov	r0, r4
 8012818:	f7ff fef2 	bl	8012600 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801281c:	b003      	add	sp, #12
 801281e:	bd30      	pop	{r4, r5, pc}

08012820 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8012820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012822:	4602      	mov	r2, r0
 8012824:	4604      	mov	r4, r0
 8012826:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801282a:	460d      	mov	r5, r1
 801282c:	6851      	ldr	r1, [r2, #4]
 801282e:	466b      	mov	r3, sp
 8012830:	c303      	stmia	r3!, {r0, r1}
 8012832:	4629      	mov	r1, r5
 8012834:	4668      	mov	r0, sp
 8012836:	f7fc fdc5 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 801283a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801283e:	4669      	mov	r1, sp
 8012840:	b123      	cbz	r3, 801284c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8012842:	4620      	mov	r0, r4
 8012844:	f7ff ffda 	bl	80127fc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8012848:	b003      	add	sp, #12
 801284a:	bd30      	pop	{r4, r5, pc}
 801284c:	1d20      	adds	r0, r4, #4
 801284e:	f7fc fe58 	bl	800f502 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8012852:	e7f9      	b.n	8012848 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08012854 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8012854:	680a      	ldr	r2, [r1, #0]
 8012856:	460b      	mov	r3, r1
 8012858:	6952      	ldr	r2, [r2, #20]
 801285a:	1d01      	adds	r1, r0, #4
 801285c:	4618      	mov	r0, r3
 801285e:	4710      	bx	r2

08012860 <_ZN8touchgfx12TextProviderC1Ev>:
 8012860:	b510      	push	{r4, lr}
 8012862:	2300      	movs	r3, #0
 8012864:	2201      	movs	r2, #1
 8012866:	4604      	mov	r4, r0
 8012868:	e9c0 3300 	strd	r3, r3, [r0]
 801286c:	60c3      	str	r3, [r0, #12]
 801286e:	7403      	strb	r3, [r0, #16]
 8012870:	82c3      	strh	r3, [r0, #22]
 8012872:	8303      	strh	r3, [r0, #24]
 8012874:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8012876:	8603      	strh	r3, [r0, #48]	; 0x30
 8012878:	86c3      	strh	r3, [r0, #54]	; 0x36
 801287a:	8703      	strh	r3, [r0, #56]	; 0x38
 801287c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801287e:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8012882:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8012886:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801288a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801288e:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8012892:	f7fa f8bb 	bl	800ca0c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8012896:	4620      	mov	r0, r4
 8012898:	bd10      	pop	{r4, pc}

0801289a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801289a:	b530      	push	{r4, r5, lr}
 801289c:	2500      	movs	r5, #0
 801289e:	2401      	movs	r4, #1
 80128a0:	6843      	ldr	r3, [r0, #4]
 80128a2:	b913      	cbnz	r3, 80128aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80128a4:	6803      	ldr	r3, [r0, #0]
 80128a6:	b1f3      	cbz	r3, 80128e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80128a8:	6043      	str	r3, [r0, #4]
 80128aa:	7c03      	ldrb	r3, [r0, #16]
 80128ac:	b143      	cbz	r3, 80128c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80128ae:	68c3      	ldr	r3, [r0, #12]
 80128b0:	b12b      	cbz	r3, 80128be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80128b2:	881a      	ldrh	r2, [r3, #0]
 80128b4:	b11a      	cbz	r2, 80128be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80128b6:	1c9a      	adds	r2, r3, #2
 80128b8:	60c2      	str	r2, [r0, #12]
 80128ba:	8818      	ldrh	r0, [r3, #0]
 80128bc:	bd30      	pop	{r4, r5, pc}
 80128be:	7405      	strb	r5, [r0, #16]
 80128c0:	6843      	ldr	r3, [r0, #4]
 80128c2:	8819      	ldrh	r1, [r3, #0]
 80128c4:	b179      	cbz	r1, 80128e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80128c6:	1c9a      	adds	r2, r3, #2
 80128c8:	2902      	cmp	r1, #2
 80128ca:	6042      	str	r2, [r0, #4]
 80128cc:	d1f5      	bne.n	80128ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80128ce:	6883      	ldr	r3, [r0, #8]
 80128d0:	1d1a      	adds	r2, r3, #4
 80128d2:	6082      	str	r2, [r0, #8]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	60c3      	str	r3, [r0, #12]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d0e1      	beq.n	80128a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80128dc:	881b      	ldrh	r3, [r3, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d0de      	beq.n	80128a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80128e2:	7404      	strb	r4, [r0, #16]
 80128e4:	e7dc      	b.n	80128a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80128e6:	2000      	movs	r0, #0
 80128e8:	e7e8      	b.n	80128bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080128ea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80128ea:	b410      	push	{r4}
 80128ec:	63c3      	str	r3, [r0, #60]	; 0x3c
 80128ee:	2300      	movs	r3, #0
 80128f0:	6082      	str	r2, [r0, #8]
 80128f2:	6001      	str	r1, [r0, #0]
 80128f4:	6043      	str	r3, [r0, #4]
 80128f6:	60c3      	str	r3, [r0, #12]
 80128f8:	7403      	strb	r3, [r0, #16]
 80128fa:	8603      	strh	r3, [r0, #48]	; 0x30
 80128fc:	8303      	strh	r3, [r0, #24]
 80128fe:	8703      	strh	r3, [r0, #56]	; 0x38
 8012900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012904:	f7fa b882 	b.w	800ca0c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08012908 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8012908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801290a:	4605      	mov	r5, r0
 801290c:	4608      	mov	r0, r1
 801290e:	b1e9      	cbz	r1, 801294c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8012910:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8012914:	460b      	mov	r3, r1
 8012916:	f101 0708 	add.w	r7, r1, #8
 801291a:	4622      	mov	r2, r4
 801291c:	6818      	ldr	r0, [r3, #0]
 801291e:	6859      	ldr	r1, [r3, #4]
 8012920:	4626      	mov	r6, r4
 8012922:	c603      	stmia	r6!, {r0, r1}
 8012924:	3308      	adds	r3, #8
 8012926:	42bb      	cmp	r3, r7
 8012928:	4634      	mov	r4, r6
 801292a:	d1f7      	bne.n	801291c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801292c:	6818      	ldr	r0, [r3, #0]
 801292e:	6030      	str	r0, [r6, #0]
 8012930:	889b      	ldrh	r3, [r3, #4]
 8012932:	80b3      	strh	r3, [r6, #4]
 8012934:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8012938:	015b      	lsls	r3, r3, #5
 801293a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801293e:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8012942:	430b      	orrs	r3, r1
 8012944:	425b      	negs	r3, r3
 8012946:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801294a:	4610      	mov	r0, r2
 801294c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801294e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801294e:	b538      	push	{r3, r4, r5, lr}
 8012950:	460c      	mov	r4, r1
 8012952:	6811      	ldr	r1, [r2, #0]
 8012954:	4610      	mov	r0, r2
 8012956:	68cd      	ldr	r5, [r1, #12]
 8012958:	4619      	mov	r1, r3
 801295a:	47a8      	blx	r5
 801295c:	2800      	cmp	r0, #0
 801295e:	bf08      	it	eq
 8012960:	4620      	moveq	r0, r4
 8012962:	bd38      	pop	{r3, r4, r5, pc}

08012964 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8012964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012966:	4604      	mov	r4, r0
 8012968:	4615      	mov	r5, r2
 801296a:	4608      	mov	r0, r1
 801296c:	b93a      	cbnz	r2, 801297e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801296e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8012972:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8012976:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801297a:	4628      	mov	r0, r5
 801297c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801297e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8012982:	8893      	ldrh	r3, [r2, #4]
 8012984:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8012988:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801298c:	79ee      	ldrb	r6, [r5, #7]
 801298e:	4316      	orrs	r6, r2
 8012990:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8012994:	189a      	adds	r2, r3, r2
 8012996:	b291      	uxth	r1, r2
 8012998:	291d      	cmp	r1, #29
 801299a:	b2b7      	uxth	r7, r6
 801299c:	f200 8083 	bhi.w	8012aa6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 80129a0:	2201      	movs	r2, #1
 80129a2:	408a      	lsls	r2, r1
 80129a4:	4978      	ldr	r1, [pc, #480]	; (8012b88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 80129a6:	420a      	tst	r2, r1
 80129a8:	ea4f 06e6 	mov.w	r6, r6, asr #3
 80129ac:	d12d      	bne.n	8012a0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80129ae:	f412 7f60 	tst.w	r2, #896	; 0x380
 80129b2:	d078      	beq.n	8012aa6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 80129b4:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80129b8:	462b      	mov	r3, r5
 80129ba:	f105 0e08 	add.w	lr, r5, #8
 80129be:	4615      	mov	r5, r2
 80129c0:	6818      	ldr	r0, [r3, #0]
 80129c2:	6859      	ldr	r1, [r3, #4]
 80129c4:	4694      	mov	ip, r2
 80129c6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80129ca:	3308      	adds	r3, #8
 80129cc:	4573      	cmp	r3, lr
 80129ce:	4662      	mov	r2, ip
 80129d0:	d1f6      	bne.n	80129c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 80129d2:	6818      	ldr	r0, [r3, #0]
 80129d4:	f8cc 0000 	str.w	r0, [ip]
 80129d8:	889b      	ldrh	r3, [r3, #4]
 80129da:	f8ac 3004 	strh.w	r3, [ip, #4]
 80129de:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80129e2:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80129e6:	b2b3      	uxth	r3, r6
 80129e8:	1aca      	subs	r2, r1, r3
 80129ea:	b292      	uxth	r2, r2
 80129ec:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 80129f0:	10d2      	asrs	r2, r2, #3
 80129f2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80129f6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80129fa:	4302      	orrs	r2, r0
 80129fc:	1bcf      	subs	r7, r1, r7
 80129fe:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8012a02:	1afb      	subs	r3, r7, r3
 8012a04:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8012a08:	e7b7      	b.n	801297a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8012a0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012a0c:	b92b      	cbnz	r3, 8012a1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8012a0e:	4b5f      	ldr	r3, [pc, #380]	; (8012b8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8012a10:	4a5f      	ldr	r2, [pc, #380]	; (8012b90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8012a12:	4860      	ldr	r0, [pc, #384]	; (8012b94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8012a14:	21c0      	movs	r1, #192	; 0xc0
 8012a16:	f008 ffbd 	bl	801b994 <__assert_func>
 8012a1a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8012a1c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012a20:	8b59      	ldrh	r1, [r3, #26]
 8012a22:	f640 6333 	movw	r3, #3635	; 0xe33
 8012a26:	4299      	cmp	r1, r3
 8012a28:	d110      	bne.n	8012a4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8012a2a:	6803      	ldr	r3, [r0, #0]
 8012a2c:	68db      	ldr	r3, [r3, #12]
 8012a2e:	4798      	blx	r3
 8012a30:	7b41      	ldrb	r1, [r0, #13]
 8012a32:	00cb      	lsls	r3, r1, #3
 8012a34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012a38:	7a03      	ldrb	r3, [r0, #8]
 8012a3a:	0648      	lsls	r0, r1, #25
 8012a3c:	ea43 0302 	orr.w	r3, r3, r2
 8012a40:	bf44      	itt	mi
 8012a42:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012a46:	b21b      	sxthmi	r3, r3
 8012a48:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8012a4c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8012a50:	443b      	add	r3, r7
 8012a52:	4433      	add	r3, r6
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8012a5a:	462a      	mov	r2, r5
 8012a5c:	f105 0c08 	add.w	ip, r5, #8
 8012a60:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8012a64:	4635      	mov	r5, r6
 8012a66:	6810      	ldr	r0, [r2, #0]
 8012a68:	6851      	ldr	r1, [r2, #4]
 8012a6a:	4637      	mov	r7, r6
 8012a6c:	c703      	stmia	r7!, {r0, r1}
 8012a6e:	3208      	adds	r2, #8
 8012a70:	4562      	cmp	r2, ip
 8012a72:	463e      	mov	r6, r7
 8012a74:	d1f7      	bne.n	8012a66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8012a76:	6810      	ldr	r0, [r2, #0]
 8012a78:	6038      	str	r0, [r7, #0]
 8012a7a:	8892      	ldrh	r2, [r2, #4]
 8012a7c:	80ba      	strh	r2, [r7, #4]
 8012a7e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8012a82:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8012a86:	10db      	asrs	r3, r3, #3
 8012a88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012a8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012a90:	4313      	orrs	r3, r2
 8012a92:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8012a96:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8012a9a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8012a9e:	1a9b      	subs	r3, r3, r2
 8012aa0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8012aa4:	e769      	b.n	801297a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8012aa6:	f023 0204 	bic.w	r2, r3, #4
 8012aaa:	f640 611b 	movw	r1, #3611	; 0xe1b
 8012aae:	428a      	cmp	r2, r1
 8012ab0:	d003      	beq.n	8012aba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 8012ab2:	f640 621d 	movw	r2, #3613	; 0xe1d
 8012ab6:	4293      	cmp	r3, r2
 8012ab8:	d120      	bne.n	8012afc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 8012aba:	3b01      	subs	r3, #1
 8012abc:	4602      	mov	r2, r0
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	f7ff ff43 	bl	801294e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8012ac8:	7b41      	ldrb	r1, [r0, #13]
 8012aca:	00cb      	lsls	r3, r1, #3
 8012acc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012ad0:	7a03      	ldrb	r3, [r0, #8]
 8012ad2:	0649      	lsls	r1, r1, #25
 8012ad4:	ea43 0302 	orr.w	r3, r3, r2
 8012ad8:	bf44      	itt	mi
 8012ada:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012ade:	b21b      	sxthmi	r3, r3
 8012ae0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8012ae4:	7b6b      	ldrb	r3, [r5, #13]
 8012ae6:	7aaa      	ldrb	r2, [r5, #10]
 8012ae8:	005b      	lsls	r3, r3, #1
 8012aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012aee:	4313      	orrs	r3, r2
 8012af0:	115a      	asrs	r2, r3, #5
 8012af2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8012af6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8012afa:	e036      	b.n	8012b6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8012afc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8012b00:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8012b04:	7a2a      	ldrb	r2, [r5, #8]
 8012b06:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8012b0a:	ea42 0201 	orr.w	r2, r2, r1
 8012b0e:	bf1c      	itt	ne
 8012b10:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8012b14:	b212      	sxthne	r2, r2
 8012b16:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8012b1a:	f640 6109 	movw	r1, #3593	; 0xe09
 8012b1e:	f023 0210 	bic.w	r2, r3, #16
 8012b22:	428a      	cmp	r2, r1
 8012b24:	d003      	beq.n	8012b2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 8012b26:	f640 6213 	movw	r2, #3603	; 0xe13
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d12a      	bne.n	8012b84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8012b2e:	7b6e      	ldrb	r6, [r5, #13]
 8012b30:	0076      	lsls	r6, r6, #1
 8012b32:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8012b36:	7aae      	ldrb	r6, [r5, #10]
 8012b38:	4316      	orrs	r6, r2
 8012b3a:	f640 6213 	movw	r2, #3603	; 0xe13
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	bf18      	it	ne
 8012b42:	f103 33ff 	addne.w	r3, r3, #4294967295
 8012b46:	4602      	mov	r2, r0
 8012b48:	bf14      	ite	ne
 8012b4a:	b29b      	uxthne	r3, r3
 8012b4c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8012b50:	4629      	mov	r1, r5
 8012b52:	4620      	mov	r0, r4
 8012b54:	f7ff fefb 	bl	801294e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8012b58:	7b43      	ldrb	r3, [r0, #13]
 8012b5a:	7a82      	ldrb	r2, [r0, #10]
 8012b5c:	005b      	lsls	r3, r3, #1
 8012b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b62:	4313      	orrs	r3, r2
 8012b64:	1af6      	subs	r6, r6, r3
 8012b66:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 8012b6a:	7b69      	ldrb	r1, [r5, #13]
 8012b6c:	00cb      	lsls	r3, r1, #3
 8012b6e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012b72:	7a2b      	ldrb	r3, [r5, #8]
 8012b74:	4313      	orrs	r3, r2
 8012b76:	064a      	lsls	r2, r1, #25
 8012b78:	bf44      	itt	mi
 8012b7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012b7e:	b21b      	sxthmi	r3, r3
 8012b80:	1bdb      	subs	r3, r3, r7
 8012b82:	e73f      	b.n	8012a04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8012b84:	2300      	movs	r3, #0
 8012b86:	e7b6      	b.n	8012af6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 8012b88:	3fc00079 	.word	0x3fc00079
 8012b8c:	0801ed30 	.word	0x0801ed30
 8012b90:	0801efa2 	.word	0x0801efa2
 8012b94:	0801ed39 	.word	0x0801ed39

08012b98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8012b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	b942      	cbnz	r2, 8012bb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8012ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012ba4:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8012ba8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8012bac:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8012bb0:	e046      	b.n	8012c40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8012bb2:	7b51      	ldrb	r1, [r2, #13]
 8012bb4:	8893      	ldrh	r3, [r2, #4]
 8012bb6:	010f      	lsls	r7, r1, #4
 8012bb8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8012bbc:	79d7      	ldrb	r7, [r2, #7]
 8012bbe:	4307      	orrs	r7, r0
 8012bc0:	2f04      	cmp	r7, #4
 8012bc2:	b2bd      	uxth	r5, r7
 8012bc4:	bfcc      	ite	gt
 8012bc6:	08bf      	lsrgt	r7, r7, #2
 8012bc8:	2701      	movle	r7, #1
 8012bca:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8012bce:	f200 80ab 	bhi.w	8012d28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8012bd2:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8012bd6:	4283      	cmp	r3, r0
 8012bd8:	d216      	bcs.n	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012bda:	f240 605b 	movw	r0, #1627	; 0x65b
 8012bde:	4283      	cmp	r3, r0
 8012be0:	d859      	bhi.n	8012c96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8012be2:	f240 6057 	movw	r0, #1623	; 0x657
 8012be6:	4283      	cmp	r3, r0
 8012be8:	d20e      	bcs.n	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012bea:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8012bee:	d24a      	bcs.n	8012c86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8012bf0:	f240 604e 	movw	r0, #1614	; 0x64e
 8012bf4:	4283      	cmp	r3, r0
 8012bf6:	d207      	bcs.n	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012bf8:	f240 601a 	movw	r0, #1562	; 0x61a
 8012bfc:	4283      	cmp	r3, r0
 8012bfe:	d02a      	beq.n	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012c00:	d821      	bhi.n	8012c46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8012c02:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8012c06:	d35b      	bcc.n	8012cc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012c08:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 8012c0c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012c10:	f040 80d0 	bne.w	8012db4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8012c14:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 8012c18:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012c1c:	f040 80ca 	bne.w	8012db4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8012c20:	00cb      	lsls	r3, r1, #3
 8012c22:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012c26:	7a13      	ldrb	r3, [r2, #8]
 8012c28:	0649      	lsls	r1, r1, #25
 8012c2a:	ea43 0300 	orr.w	r3, r3, r0
 8012c2e:	bf44      	itt	mi
 8012c30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012c34:	b21b      	sxthmi	r3, r3
 8012c36:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8012c3a:	1b5d      	subs	r5, r3, r5
 8012c3c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8012c40:	4610      	mov	r0, r2
 8012c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c46:	f240 604b 	movw	r0, #1611	; 0x64b
 8012c4a:	4283      	cmp	r3, r0
 8012c4c:	d338      	bcc.n	8012cc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012c4e:	f240 604c 	movw	r0, #1612	; 0x64c
 8012c52:	4283      	cmp	r3, r0
 8012c54:	d9d8      	bls.n	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012c56:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 8012c5a:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8012c5e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012c62:	f040 80f1 	bne.w	8012e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8012c66:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012c6a:	f040 80ed 	bne.w	8012e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8012c6e:	00cb      	lsls	r3, r1, #3
 8012c70:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012c74:	7a13      	ldrb	r3, [r2, #8]
 8012c76:	064e      	lsls	r6, r1, #25
 8012c78:	ea43 0300 	orr.w	r3, r3, r0
 8012c7c:	bf44      	itt	mi
 8012c7e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012c82:	b21b      	sxthmi	r3, r3
 8012c84:	e7d9      	b.n	8012c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8012c86:	f240 6054 	movw	r0, #1620	; 0x654
 8012c8a:	4283      	cmp	r3, r0
 8012c8c:	d8e3      	bhi.n	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012c8e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8012c92:	d9e0      	bls.n	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012c94:	e7b8      	b.n	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012c96:	f240 6074 	movw	r0, #1652	; 0x674
 8012c9a:	4283      	cmp	r3, r0
 8012c9c:	d0b4      	beq.n	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012c9e:	d82d      	bhi.n	8012cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8012ca0:	f240 605e 	movw	r0, #1630	; 0x65e
 8012ca4:	4283      	cmp	r3, r0
 8012ca6:	d804      	bhi.n	8012cb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8012ca8:	f240 605d 	movw	r0, #1629	; 0x65d
 8012cac:	4283      	cmp	r3, r0
 8012cae:	d3d2      	bcc.n	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012cb0:	e7aa      	b.n	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012cb2:	f240 605f 	movw	r0, #1631	; 0x65f
 8012cb6:	4283      	cmp	r3, r0
 8012cb8:	d0cd      	beq.n	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012cba:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8012cbe:	d0a3      	beq.n	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012cc0:	00cb      	lsls	r3, r1, #3
 8012cc2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012cc6:	7a13      	ldrb	r3, [r2, #8]
 8012cc8:	0649      	lsls	r1, r1, #25
 8012cca:	ea43 0300 	orr.w	r3, r3, r0
 8012cce:	bf44      	itt	mi
 8012cd0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012cd4:	b21b      	sxthmi	r3, r3
 8012cd6:	1b5d      	subs	r5, r3, r5
 8012cd8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8012cdc:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8012ce0:	7b53      	ldrb	r3, [r2, #13]
 8012ce2:	015b      	lsls	r3, r3, #5
 8012ce4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8012ce8:	7993      	ldrb	r3, [r2, #6]
 8012cea:	430b      	orrs	r3, r1
 8012cec:	005b      	lsls	r3, r3, #1
 8012cee:	2105      	movs	r1, #5
 8012cf0:	fb93 f3f1 	sdiv	r3, r3, r1
 8012cf4:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8012cf8:	440b      	add	r3, r1
 8012cfa:	e757      	b.n	8012bac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8012cfc:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8012d00:	4283      	cmp	r3, r0
 8012d02:	d809      	bhi.n	8012d18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8012d04:	f240 60df 	movw	r0, #1759	; 0x6df
 8012d08:	4283      	cmp	r3, r0
 8012d0a:	f4bf af7d 	bcs.w	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012d0e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8012d12:	2b05      	cmp	r3, #5
 8012d14:	d8d4      	bhi.n	8012cc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012d16:	e777      	b.n	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012d18:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8012d1c:	4283      	cmp	r3, r0
 8012d1e:	d09a      	beq.n	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012d20:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8012d24:	4283      	cmp	r3, r0
 8012d26:	e7ca      	b.n	8012cbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8012d28:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8012d2c:	d22b      	bcs.n	8012d86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8012d2e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8012d32:	4283      	cmp	r3, r0
 8012d34:	d28f      	bcs.n	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012d36:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012d3a:	4283      	cmp	r3, r0
 8012d3c:	d816      	bhi.n	8012d6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8012d3e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8012d42:	4283      	cmp	r3, r0
 8012d44:	f4bf af60 	bcs.w	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012d48:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8012d4c:	4283      	cmp	r3, r0
 8012d4e:	d80a      	bhi.n	8012d66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8012d50:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8012d54:	4283      	cmp	r3, r0
 8012d56:	f4bf af57 	bcs.w	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012d5a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8012d5e:	4283      	cmp	r3, r0
 8012d60:	f43f af79 	beq.w	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012d64:	e7ac      	b.n	8012cc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012d66:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8012d6a:	e7f8      	b.n	8012d5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8012d6c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8012d70:	4283      	cmp	r3, r0
 8012d72:	d802      	bhi.n	8012d7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8012d74:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012d78:	e798      	b.n	8012cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8012d7a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8012d7e:	4283      	cmp	r3, r0
 8012d80:	f47f af42 	bne.w	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012d84:	e767      	b.n	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012d86:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8012d8a:	4283      	cmp	r3, r0
 8012d8c:	f43f af63 	beq.w	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012d90:	d802      	bhi.n	8012d98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8012d92:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8012d96:	e7f2      	b.n	8012d7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8012d98:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8012d9c:	4283      	cmp	r3, r0
 8012d9e:	d805      	bhi.n	8012dac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8012da0:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8012da4:	4283      	cmp	r3, r0
 8012da6:	f4ff af2f 	bcc.w	8012c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012daa:	e754      	b.n	8012c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012dac:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8012db0:	4283      	cmp	r3, r0
 8012db2:	e7af      	b.n	8012d14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8012db4:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8012db8:	4617      	mov	r7, r2
 8012dba:	f102 0808 	add.w	r8, r2, #8
 8012dbe:	4666      	mov	r6, ip
 8012dc0:	6838      	ldr	r0, [r7, #0]
 8012dc2:	6879      	ldr	r1, [r7, #4]
 8012dc4:	46e6      	mov	lr, ip
 8012dc6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8012dca:	3708      	adds	r7, #8
 8012dcc:	4547      	cmp	r7, r8
 8012dce:	46f4      	mov	ip, lr
 8012dd0:	d1f6      	bne.n	8012dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8012dd2:	6838      	ldr	r0, [r7, #0]
 8012dd4:	f8ce 0000 	str.w	r0, [lr]
 8012dd8:	88b9      	ldrh	r1, [r7, #4]
 8012dda:	f8ae 1004 	strh.w	r1, [lr, #4]
 8012dde:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8012de2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012de6:	d009      	beq.n	8012dfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 8012de8:	7b51      	ldrb	r1, [r2, #13]
 8012dea:	7992      	ldrb	r2, [r2, #6]
 8012dec:	0149      	lsls	r1, r1, #5
 8012dee:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012df2:	4311      	orrs	r1, r2
 8012df4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8012df8:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8012dfc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012e00:	d00d      	beq.n	8012e1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 8012e02:	442b      	add	r3, r5
 8012e04:	b29b      	uxth	r3, r3
 8012e06:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8012e0a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8012e0e:	10db      	asrs	r3, r3, #3
 8012e10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012e14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012e18:	4313      	orrs	r3, r2
 8012e1a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8012e1e:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8012e22:	00cb      	lsls	r3, r1, #3
 8012e24:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012e28:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012e2c:	064f      	lsls	r7, r1, #25
 8012e2e:	ea43 0302 	orr.w	r3, r3, r2
 8012e32:	bf44      	itt	mi
 8012e34:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012e38:	b21b      	sxthmi	r3, r3
 8012e3a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8012e3e:	1b5d      	subs	r5, r3, r5
 8012e40:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8012e44:	4632      	mov	r2, r6
 8012e46:	e6fb      	b.n	8012c40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8012e48:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8012e4c:	4694      	mov	ip, r2
 8012e4e:	f102 0908 	add.w	r9, r2, #8
 8012e52:	4676      	mov	r6, lr
 8012e54:	f8dc 0000 	ldr.w	r0, [ip]
 8012e58:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8012e5c:	46f0      	mov	r8, lr
 8012e5e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8012e62:	f10c 0c08 	add.w	ip, ip, #8
 8012e66:	45cc      	cmp	ip, r9
 8012e68:	46c6      	mov	lr, r8
 8012e6a:	d1f3      	bne.n	8012e54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 8012e6c:	f8dc 0000 	ldr.w	r0, [ip]
 8012e70:	f8c8 0000 	str.w	r0, [r8]
 8012e74:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8012e78:	f8a8 1004 	strh.w	r1, [r8, #4]
 8012e7c:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8012e80:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012e84:	d009      	beq.n	8012e9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 8012e86:	7b51      	ldrb	r1, [r2, #13]
 8012e88:	7992      	ldrb	r2, [r2, #6]
 8012e8a:	0149      	lsls	r1, r1, #5
 8012e8c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012e90:	4311      	orrs	r1, r2
 8012e92:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8012e96:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8012e9a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012e9e:	d00d      	beq.n	8012ebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8012ea0:	1bdb      	subs	r3, r3, r7
 8012ea2:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8012eac:	10db      	asrs	r3, r3, #3
 8012eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012eb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012eb6:	4313      	orrs	r3, r2
 8012eb8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8012ebc:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8012ec0:	00cb      	lsls	r3, r1, #3
 8012ec2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012ec6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012eca:	0648      	lsls	r0, r1, #25
 8012ecc:	ea43 0302 	orr.w	r3, r3, r2
 8012ed0:	bf44      	itt	mi
 8012ed2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012ed6:	b21b      	sxthmi	r3, r3
 8012ed8:	e7b1      	b.n	8012e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

08012edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8012edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee0:	461d      	mov	r5, r3
 8012ee2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	4617      	mov	r7, r2
 8012ee8:	b92b      	cbnz	r3, 8012ef6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8012eea:	4b23      	ldr	r3, [pc, #140]	; (8012f78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 8012eec:	4a23      	ldr	r2, [pc, #140]	; (8012f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 8012eee:	4824      	ldr	r0, [pc, #144]	; (8012f80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8012ef0:	21c0      	movs	r1, #192	; 0xc0
 8012ef2:	f008 fd4f 	bl	801b994 <__assert_func>
 8012ef6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8012ef8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012efc:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8012f00:	f7f9 fce0 	bl	800c8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	4601      	mov	r1, r0
 8012f08:	68db      	ldr	r3, [r3, #12]
 8012f0a:	4606      	mov	r6, r0
 8012f0c:	4638      	mov	r0, r7
 8012f0e:	4798      	blx	r3
 8012f10:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8012f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012f18:	4602      	mov	r2, r0
 8012f1a:	6028      	str	r0, [r5, #0]
 8012f1c:	d215      	bcs.n	8012f4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8012f1e:	4643      	mov	r3, r8
 8012f20:	4639      	mov	r1, r7
 8012f22:	4620      	mov	r0, r4
 8012f24:	f7ff fe38 	bl	8012b98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8012f28:	6028      	str	r0, [r5, #0]
 8012f2a:	682b      	ldr	r3, [r5, #0]
 8012f2c:	b143      	cbz	r3, 8012f40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8012f2e:	7b5a      	ldrb	r2, [r3, #13]
 8012f30:	7a9b      	ldrb	r3, [r3, #10]
 8012f32:	0052      	lsls	r2, r2, #1
 8012f34:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012f38:	4313      	orrs	r3, r2
 8012f3a:	bf0c      	ite	eq
 8012f3c:	2301      	moveq	r3, #1
 8012f3e:	2300      	movne	r3, #0
 8012f40:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8012f44:	4630      	mov	r0, r6
 8012f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f4a:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	2b7f      	cmp	r3, #127	; 0x7f
 8012f52:	d804      	bhi.n	8012f5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 8012f54:	4639      	mov	r1, r7
 8012f56:	4620      	mov	r0, r4
 8012f58:	f7ff fd04 	bl	8012964 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8012f5c:	e7e4      	b.n	8012f28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 8012f5e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d0e1      	beq.n	8012f2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8012f66:	f640 1302 	movw	r3, #2306	; 0x902
 8012f6a:	429e      	cmp	r6, r3
 8012f6c:	d1dd      	bne.n	8012f2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8012f6e:	4601      	mov	r1, r0
 8012f70:	4620      	mov	r0, r4
 8012f72:	f7ff fcc9 	bl	8012908 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8012f76:	e7d7      	b.n	8012f28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 8012f78:	0801ed30 	.word	0x0801ed30
 8012f7c:	0801efa2 	.word	0x0801efa2
 8012f80:	0801ed39 	.word	0x0801ed39

08012f84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8012f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f88:	461d      	mov	r5, r3
 8012f8a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8012f8c:	4604      	mov	r4, r0
 8012f8e:	4617      	mov	r7, r2
 8012f90:	b92b      	cbnz	r3, 8012f9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8012f92:	4b25      	ldr	r3, [pc, #148]	; (8013028 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa4>)
 8012f94:	4a25      	ldr	r2, [pc, #148]	; (801302c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8012f96:	4826      	ldr	r0, [pc, #152]	; (8013030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8012f98:	21c0      	movs	r1, #192	; 0xc0
 8012f9a:	f008 fcfb 	bl	801b994 <__assert_func>
 8012f9e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8012fa0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012fa4:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8012fa8:	f7f9 fc8c 	bl	800c8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	4601      	mov	r1, r0
 8012fb0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8012fb4:	4606      	mov	r6, r0
 8012fb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012fba:	4638      	mov	r0, r7
 8012fbc:	47c8      	blx	r9
 8012fbe:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8012fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	6028      	str	r0, [r5, #0]
 8012fca:	d215      	bcs.n	8012ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8012fcc:	4643      	mov	r3, r8
 8012fce:	4639      	mov	r1, r7
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f7ff fde1 	bl	8012b98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8012fd6:	6028      	str	r0, [r5, #0]
 8012fd8:	682b      	ldr	r3, [r5, #0]
 8012fda:	b143      	cbz	r3, 8012fee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8012fdc:	7b5a      	ldrb	r2, [r3, #13]
 8012fde:	7a9b      	ldrb	r3, [r3, #10]
 8012fe0:	0052      	lsls	r2, r2, #1
 8012fe2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012fe6:	4313      	orrs	r3, r2
 8012fe8:	bf0c      	ite	eq
 8012fea:	2301      	moveq	r3, #1
 8012fec:	2300      	movne	r3, #0
 8012fee:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8012ff2:	4630      	mov	r0, r6
 8012ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ff8:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8013000:	d804      	bhi.n	801300c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 8013002:	4639      	mov	r1, r7
 8013004:	4620      	mov	r0, r4
 8013006:	f7ff fcad 	bl	8012964 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801300a:	e7e4      	b.n	8012fd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801300c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8013010:	2b00      	cmp	r3, #0
 8013012:	d0e1      	beq.n	8012fd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 8013014:	f640 1302 	movw	r3, #2306	; 0x902
 8013018:	429e      	cmp	r6, r3
 801301a:	d1dd      	bne.n	8012fd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801301c:	4601      	mov	r1, r0
 801301e:	4620      	mov	r0, r4
 8013020:	f7ff fc72 	bl	8012908 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013024:	e7d7      	b.n	8012fd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 8013026:	bf00      	nop
 8013028:	0801ed30 	.word	0x0801ed30
 801302c:	0801efa2 	.word	0x0801efa2
 8013030:	0801ed39 	.word	0x0801ed39

08013034 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8013034:	b510      	push	{r4, lr}
 8013036:	4604      	mov	r4, r0
 8013038:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801303a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801303c:	b9d9      	cbnz	r1, 8013076 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801303e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013040:	2b0a      	cmp	r3, #10
 8013042:	d036      	beq.n	80130b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8013044:	4620      	mov	r0, r4
 8013046:	f7ff fc28 	bl	801289a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801304a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801304c:	2b09      	cmp	r3, #9
 801304e:	d906      	bls.n	801305e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8013050:	4b18      	ldr	r3, [pc, #96]	; (80130b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8013052:	4a19      	ldr	r2, [pc, #100]	; (80130b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8013054:	4819      	ldr	r0, [pc, #100]	; (80130bc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8013056:	f44f 7182 	mov.w	r1, #260	; 0x104
 801305a:	f008 fc9b 	bl	801b994 <__assert_func>
 801305e:	1c5a      	adds	r2, r3, #1
 8013060:	8622      	strh	r2, [r4, #48]	; 0x30
 8013062:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8013064:	4413      	add	r3, r2
 8013066:	b29b      	uxth	r3, r3
 8013068:	2b09      	cmp	r3, #9
 801306a:	bf88      	it	hi
 801306c:	3b0a      	subhi	r3, #10
 801306e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013072:	8358      	strh	r0, [r3, #26]
 8013074:	e7e3      	b.n	801303e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8013076:	2b0a      	cmp	r3, #10
 8013078:	d01b      	beq.n	80130b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801307a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801307c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8013080:	3901      	subs	r1, #1
 8013082:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8013084:	8721      	strh	r1, [r4, #56]	; 0x38
 8013086:	1c51      	adds	r1, r2, #1
 8013088:	b289      	uxth	r1, r1
 801308a:	2901      	cmp	r1, #1
 801308c:	bf8a      	itet	hi
 801308e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013092:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8013094:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8013096:	2b09      	cmp	r3, #9
 8013098:	d8da      	bhi.n	8013050 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801309a:	1c5a      	adds	r2, r3, #1
 801309c:	8622      	strh	r2, [r4, #48]	; 0x30
 801309e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80130a0:	4413      	add	r3, r2
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	2b09      	cmp	r3, #9
 80130a6:	bf88      	it	hi
 80130a8:	3b0a      	subhi	r3, #10
 80130aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80130ae:	8358      	strh	r0, [r3, #26]
 80130b0:	e7c2      	b.n	8013038 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80130b2:	bd10      	pop	{r4, pc}
 80130b4:	0801ed65 	.word	0x0801ed65
 80130b8:	0801f0f8 	.word	0x0801f0f8
 80130bc:	0801ed39 	.word	0x0801ed39

080130c0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80130c0:	b538      	push	{r3, r4, r5, lr}
 80130c2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80130c4:	4604      	mov	r4, r0
 80130c6:	b92a      	cbnz	r2, 80130d4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80130c8:	4b13      	ldr	r3, [pc, #76]	; (8013118 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80130ca:	4a14      	ldr	r2, [pc, #80]	; (801311c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80130cc:	4814      	ldr	r0, [pc, #80]	; (8013120 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80130ce:	21d5      	movs	r1, #213	; 0xd5
 80130d0:	f008 fc60 	bl	801b994 <__assert_func>
 80130d4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80130d6:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80130da:	3a01      	subs	r2, #1
 80130dc:	8b4d      	ldrh	r5, [r1, #26]
 80130de:	8602      	strh	r2, [r0, #48]	; 0x30
 80130e0:	1c5a      	adds	r2, r3, #1
 80130e2:	b292      	uxth	r2, r2
 80130e4:	2a09      	cmp	r2, #9
 80130e6:	bf86      	itte	hi
 80130e8:	3b09      	subhi	r3, #9
 80130ea:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 80130ec:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 80130ee:	f7ff ffa1 	bl	8013034 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80130f2:	8b23      	ldrh	r3, [r4, #24]
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	bf9c      	itt	ls
 80130f8:	3301      	addls	r3, #1
 80130fa:	8323      	strhls	r3, [r4, #24]
 80130fc:	8ae3      	ldrh	r3, [r4, #22]
 80130fe:	b90b      	cbnz	r3, 8013104 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8013100:	2302      	movs	r3, #2
 8013102:	82e3      	strh	r3, [r4, #22]
 8013104:	8ae3      	ldrh	r3, [r4, #22]
 8013106:	3b01      	subs	r3, #1
 8013108:	b29b      	uxth	r3, r3
 801310a:	82e3      	strh	r3, [r4, #22]
 801310c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013110:	4628      	mov	r0, r5
 8013112:	8265      	strh	r5, [r4, #18]
 8013114:	bd38      	pop	{r3, r4, r5, pc}
 8013116:	bf00      	nop
 8013118:	0801ed30 	.word	0x0801ed30
 801311c:	0801f04d 	.word	0x0801f04d
 8013120:	0801ed39 	.word	0x0801ed39

08013124 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8013124:	b538      	push	{r3, r4, r5, lr}
 8013126:	428a      	cmp	r2, r1
 8013128:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801312a:	d90c      	bls.n	8013146 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801312c:	b92c      	cbnz	r4, 801313a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801312e:	4b1c      	ldr	r3, [pc, #112]	; (80131a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8013130:	4a1c      	ldr	r2, [pc, #112]	; (80131a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8013132:	21e1      	movs	r1, #225	; 0xe1
 8013134:	481c      	ldr	r0, [pc, #112]	; (80131a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8013136:	f008 fc2d 	bl	801b994 <__assert_func>
 801313a:	3c01      	subs	r4, #1
 801313c:	8604      	strh	r4, [r0, #48]	; 0x30
 801313e:	4b1b      	ldr	r3, [pc, #108]	; (80131ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8013140:	4a1b      	ldr	r2, [pc, #108]	; (80131b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8013142:	21c5      	movs	r1, #197	; 0xc5
 8013144:	e7f6      	b.n	8013134 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8013146:	428c      	cmp	r4, r1
 8013148:	d203      	bcs.n	8013152 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801314a:	4b1a      	ldr	r3, [pc, #104]	; (80131b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801314c:	4a1a      	ldr	r2, [pc, #104]	; (80131b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801314e:	21cb      	movs	r1, #203	; 0xcb
 8013150:	e7f0      	b.n	8013134 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8013152:	1a64      	subs	r4, r4, r1
 8013154:	8604      	strh	r4, [r0, #48]	; 0x30
 8013156:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8013158:	4421      	add	r1, r4
 801315a:	b289      	uxth	r1, r1
 801315c:	2909      	cmp	r1, #9
 801315e:	bf88      	it	hi
 8013160:	390a      	subhi	r1, #10
 8013162:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8013164:	250a      	movs	r5, #10
 8013166:	b1ba      	cbz	r2, 8013198 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8013168:	3a01      	subs	r2, #1
 801316a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801316c:	b292      	uxth	r2, r2
 801316e:	2909      	cmp	r1, #9
 8013170:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8013174:	d903      	bls.n	801317e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8013176:	4b11      	ldr	r3, [pc, #68]	; (80131bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8013178:	4a11      	ldr	r2, [pc, #68]	; (80131c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801317a:	21e6      	movs	r1, #230	; 0xe6
 801317c:	e7da      	b.n	8013134 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801317e:	3101      	adds	r1, #1
 8013180:	8601      	strh	r1, [r0, #48]	; 0x30
 8013182:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8013184:	b901      	cbnz	r1, 8013188 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8013186:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8013188:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801318a:	3901      	subs	r1, #1
 801318c:	b289      	uxth	r1, r1
 801318e:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8013190:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8013194:	834c      	strh	r4, [r1, #26]
 8013196:	e7e6      	b.n	8013166 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8013198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801319c:	f7ff bf4a 	b.w	8013034 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80131a0:	0801ed30 	.word	0x0801ed30
 80131a4:	0801ee26 	.word	0x0801ee26
 80131a8:	0801ed39 	.word	0x0801ed39
 80131ac:	0801ed71 	.word	0x0801ed71
 80131b0:	0801eed0 	.word	0x0801eed0
 80131b4:	0801ed7f 	.word	0x0801ed7f
 80131b8:	0801f1a7 	.word	0x0801f1a7
 80131bc:	0801ed8b 	.word	0x0801ed8b
 80131c0:	0801ed9e 	.word	0x0801ed9e

080131c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80131c4:	3a01      	subs	r2, #1
 80131c6:	b570      	push	{r4, r5, r6, lr}
 80131c8:	b292      	uxth	r2, r2
 80131ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80131ce:	42b2      	cmp	r2, r6
 80131d0:	d019      	beq.n	8013206 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 80131d2:	8b04      	ldrh	r4, [r0, #24]
 80131d4:	f831 5b02 	ldrh.w	r5, [r1], #2
 80131d8:	4294      	cmp	r4, r2
 80131da:	d805      	bhi.n	80131e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 80131dc:	4b19      	ldr	r3, [pc, #100]	; (8013244 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80131de:	4a1a      	ldr	r2, [pc, #104]	; (8013248 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 80131e0:	481a      	ldr	r0, [pc, #104]	; (801324c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 80131e2:	21c5      	movs	r1, #197	; 0xc5
 80131e4:	f008 fbd6 	bl	801b994 <__assert_func>
 80131e8:	8ac4      	ldrh	r4, [r0, #22]
 80131ea:	4414      	add	r4, r2
 80131ec:	b2a4      	uxth	r4, r4
 80131ee:	2c01      	cmp	r4, #1
 80131f0:	bf88      	it	hi
 80131f2:	3c02      	subhi	r4, #2
 80131f4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80131f8:	3a01      	subs	r2, #1
 80131fa:	8a64      	ldrh	r4, [r4, #18]
 80131fc:	42ac      	cmp	r4, r5
 80131fe:	b292      	uxth	r2, r2
 8013200:	d0e5      	beq.n	80131ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8013202:	2000      	movs	r0, #0
 8013204:	bd70      	pop	{r4, r5, r6, pc}
 8013206:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801320a:	2400      	movs	r4, #0
 801320c:	4413      	add	r3, r2
 801320e:	b2a2      	uxth	r2, r4
 8013210:	429a      	cmp	r2, r3
 8013212:	da14      	bge.n	801323e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8013214:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8013216:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801321a:	4296      	cmp	r6, r2
 801321c:	d802      	bhi.n	8013224 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801321e:	4b09      	ldr	r3, [pc, #36]	; (8013244 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8013220:	4a0b      	ldr	r2, [pc, #44]	; (8013250 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8013222:	e7dd      	b.n	80131e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8013224:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8013226:	4432      	add	r2, r6
 8013228:	b292      	uxth	r2, r2
 801322a:	2a09      	cmp	r2, #9
 801322c:	bf88      	it	hi
 801322e:	3a0a      	subhi	r2, #10
 8013230:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8013234:	3401      	adds	r4, #1
 8013236:	8b52      	ldrh	r2, [r2, #26]
 8013238:	42aa      	cmp	r2, r5
 801323a:	d0e8      	beq.n	801320e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801323c:	e7e1      	b.n	8013202 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801323e:	2001      	movs	r0, #1
 8013240:	e7e0      	b.n	8013204 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8013242:	bf00      	nop
 8013244:	0801ed71 	.word	0x0801ed71
 8013248:	0801f22b 	.word	0x0801f22b
 801324c:	0801ed39 	.word	0x0801ed39
 8013250:	0801eed0 	.word	0x0801eed0

08013254 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8013254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013258:	4605      	mov	r5, r0
 801325a:	4616      	mov	r6, r2
 801325c:	1c8c      	adds	r4, r1, #2
 801325e:	8809      	ldrh	r1, [r1, #0]
 8013260:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8013264:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8013268:	42b3      	cmp	r3, r6
 801326a:	d124      	bne.n	80132b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801326c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8013270:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8013274:	f001 070f 	and.w	r7, r1, #15
 8013278:	f8cd 8000 	str.w	r8, [sp]
 801327c:	464b      	mov	r3, r9
 801327e:	4652      	mov	r2, sl
 8013280:	4621      	mov	r1, r4
 8013282:	4628      	mov	r0, r5
 8013284:	f7ff ff9e 	bl	80131c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8013288:	4683      	mov	fp, r0
 801328a:	b168      	cbz	r0, 80132a8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801328c:	eb0a 0109 	add.w	r1, sl, r9
 8013290:	4441      	add	r1, r8
 8013292:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8013296:	463a      	mov	r2, r7
 8013298:	4649      	mov	r1, r9
 801329a:	4628      	mov	r0, r5
 801329c:	f7ff ff42 	bl	8013124 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80132a0:	4658      	mov	r0, fp
 80132a2:	b003      	add	sp, #12
 80132a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a8:	eb07 010a 	add.w	r1, r7, sl
 80132ac:	4449      	add	r1, r9
 80132ae:	4441      	add	r1, r8
 80132b0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80132b4:	e7d2      	b.n	801325c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80132b6:	f04f 0b00 	mov.w	fp, #0
 80132ba:	e7f1      	b.n	80132a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080132bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80132bc:	b570      	push	{r4, r5, r6, lr}
 80132be:	8810      	ldrh	r0, [r2, #0]
 80132c0:	4298      	cmp	r0, r3
 80132c2:	d817      	bhi.n	80132f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80132c4:	1e48      	subs	r0, r1, #1
 80132c6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80132ca:	4298      	cmp	r0, r3
 80132cc:	d312      	bcc.n	80132f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80132ce:	2400      	movs	r4, #0
 80132d0:	428c      	cmp	r4, r1
 80132d2:	d20f      	bcs.n	80132f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80132d4:	1860      	adds	r0, r4, r1
 80132d6:	1040      	asrs	r0, r0, #1
 80132d8:	0085      	lsls	r5, r0, #2
 80132da:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80132de:	42b3      	cmp	r3, r6
 80132e0:	d902      	bls.n	80132e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80132e2:	3001      	adds	r0, #1
 80132e4:	b284      	uxth	r4, r0
 80132e6:	e7f3      	b.n	80132d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80132e8:	d201      	bcs.n	80132ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80132ea:	b281      	uxth	r1, r0
 80132ec:	e7f0      	b.n	80132d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80132ee:	442a      	add	r2, r5
 80132f0:	8850      	ldrh	r0, [r2, #2]
 80132f2:	bd70      	pop	{r4, r5, r6, pc}
 80132f4:	2000      	movs	r0, #0
 80132f6:	e7fc      	b.n	80132f2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080132f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80132f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132fc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80132fe:	886f      	ldrh	r7, [r5, #2]
 8013300:	4604      	mov	r4, r0
 8013302:	087f      	lsrs	r7, r7, #1
 8013304:	260b      	movs	r6, #11
 8013306:	3e01      	subs	r6, #1
 8013308:	d01b      	beq.n	8013342 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801330a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801330c:	b92b      	cbnz	r3, 801331a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801330e:	4b0e      	ldr	r3, [pc, #56]	; (8013348 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8013310:	4a0e      	ldr	r2, [pc, #56]	; (801334c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8013312:	480f      	ldr	r0, [pc, #60]	; (8013350 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8013314:	21c0      	movs	r1, #192	; 0xc0
 8013316:	f008 fb3d 	bl	801b994 <__assert_func>
 801331a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801331c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013320:	462a      	mov	r2, r5
 8013322:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8013326:	4639      	mov	r1, r7
 8013328:	4643      	mov	r3, r8
 801332a:	4620      	mov	r0, r4
 801332c:	f7ff ffc6 	bl	80132bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8013330:	b138      	cbz	r0, 8013342 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8013332:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8013336:	4642      	mov	r2, r8
 8013338:	4620      	mov	r0, r4
 801333a:	f7ff ff8b 	bl	8013254 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801333e:	2800      	cmp	r0, #0
 8013340:	d1e1      	bne.n	8013306 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8013342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013346:	bf00      	nop
 8013348:	0801ed30 	.word	0x0801ed30
 801334c:	0801efa2 	.word	0x0801efa2
 8013350:	0801ed39 	.word	0x0801ed39

08013354 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8013354:	4b01      	ldr	r3, [pc, #4]	; (801335c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8013356:	6018      	str	r0, [r3, #0]
 8013358:	4770      	bx	lr
 801335a:	bf00      	nop
 801335c:	20005fa4 	.word	0x20005fa4

08013360 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8013360:	4b07      	ldr	r3, [pc, #28]	; (8013380 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8013362:	881a      	ldrh	r2, [r3, #0]
 8013364:	4282      	cmp	r2, r0
 8013366:	d809      	bhi.n	801337c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8013368:	4b06      	ldr	r3, [pc, #24]	; (8013384 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801336a:	881b      	ldrh	r3, [r3, #0]
 801336c:	4413      	add	r3, r2
 801336e:	4298      	cmp	r0, r3
 8013370:	da04      	bge.n	801337c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8013372:	4b05      	ldr	r3, [pc, #20]	; (8013388 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801337a:	4770      	bx	lr
 801337c:	2000      	movs	r0, #0
 801337e:	4770      	bx	lr
 8013380:	20005fc4 	.word	0x20005fc4
 8013384:	20005fc8 	.word	0x20005fc8
 8013388:	20005fa8 	.word	0x20005fa8

0801338c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013390:	4d28      	ldr	r5, [pc, #160]	; (8013434 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8013392:	682b      	ldr	r3, [r5, #0]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d04a      	beq.n	801342e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8013398:	4a27      	ldr	r2, [pc, #156]	; (8013438 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801339a:	4e28      	ldr	r6, [pc, #160]	; (801343c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801339c:	8810      	ldrh	r0, [r2, #0]
 801339e:	f8b6 8000 	ldrh.w	r8, [r6]
 80133a2:	4c27      	ldr	r4, [pc, #156]	; (8013440 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80133a4:	4f27      	ldr	r7, [pc, #156]	; (8013444 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80133a6:	4440      	add	r0, r8
 80133a8:	1c41      	adds	r1, r0, #1
 80133aa:	f021 0101 	bic.w	r1, r1, #1
 80133ae:	0409      	lsls	r1, r1, #16
 80133b0:	0c09      	lsrs	r1, r1, #16
 80133b2:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 80133b6:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80133ba:	eb03 020e 	add.w	r2, r3, lr
 80133be:	eb0e 010c 	add.w	r1, lr, ip
 80133c2:	6022      	str	r2, [r4, #0]
 80133c4:	185a      	adds	r2, r3, r1
 80133c6:	603a      	str	r2, [r7, #0]
 80133c8:	220e      	movs	r2, #14
 80133ca:	fb02 f208 	mul.w	r2, r2, r8
 80133ce:	3203      	adds	r2, #3
 80133d0:	f022 0203 	bic.w	r2, r2, #3
 80133d4:	4411      	add	r1, r2
 80133d6:	440b      	add	r3, r1
 80133d8:	491b      	ldr	r1, [pc, #108]	; (8013448 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80133da:	600b      	str	r3, [r1, #0]
 80133dc:	491b      	ldr	r1, [pc, #108]	; (801344c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 80133de:	2300      	movs	r3, #0
 80133e0:	800b      	strh	r3, [r1, #0]
 80133e2:	491b      	ldr	r1, [pc, #108]	; (8013450 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80133e4:	6809      	ldr	r1, [r1, #0]
 80133e6:	eba1 010e 	sub.w	r1, r1, lr
 80133ea:	eba1 010c 	sub.w	r1, r1, ip
 80133ee:	1a8a      	subs	r2, r1, r2
 80133f0:	4918      	ldr	r1, [pc, #96]	; (8013454 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 80133f2:	600a      	str	r2, [r1, #0]
 80133f4:	4a18      	ldr	r2, [pc, #96]	; (8013458 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 80133f6:	469c      	mov	ip, r3
 80133f8:	8013      	strh	r3, [r2, #0]
 80133fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80133fe:	4283      	cmp	r3, r0
 8013400:	d10d      	bne.n	801341e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8013402:	8835      	ldrh	r5, [r6, #0]
 8013404:	6838      	ldr	r0, [r7, #0]
 8013406:	2300      	movs	r3, #0
 8013408:	240e      	movs	r4, #14
 801340a:	429d      	cmp	r5, r3
 801340c:	d90f      	bls.n	801342e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801340e:	fb04 0203 	mla	r2, r4, r3, r0
 8013412:	3301      	adds	r3, #1
 8013414:	7b11      	ldrb	r1, [r2, #12]
 8013416:	f36f 1145 	bfc	r1, #5, #1
 801341a:	7311      	strb	r1, [r2, #12]
 801341c:	e7f5      	b.n	801340a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801341e:	682a      	ldr	r2, [r5, #0]
 8013420:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8013424:	6822      	ldr	r2, [r4, #0]
 8013426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801342a:	3301      	adds	r3, #1
 801342c:	e7e7      	b.n	80133fe <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801342e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013432:	bf00      	nop
 8013434:	20005fa8 	.word	0x20005fa8
 8013438:	20005fc4 	.word	0x20005fc4
 801343c:	20005fc8 	.word	0x20005fc8
 8013440:	20005fbc 	.word	0x20005fbc
 8013444:	20005fac 	.word	0x20005fac
 8013448:	20005fb4 	.word	0x20005fb4
 801344c:	20005fc6 	.word	0x20005fc6
 8013450:	20005fb0 	.word	0x20005fb0
 8013454:	20005fc0 	.word	0x20005fc0
 8013458:	20005fb8 	.word	0x20005fb8

0801345c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801345c:	b510      	push	{r4, lr}
 801345e:	4b10      	ldr	r3, [pc, #64]	; (80134a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	b9db      	cbnz	r3, 801349c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8013464:	b1d1      	cbz	r1, 801349c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8013466:	4b0f      	ldr	r3, [pc, #60]	; (80134a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8013468:	801a      	strh	r2, [r3, #0]
 801346a:	4b0f      	ldr	r3, [pc, #60]	; (80134a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801346c:	881b      	ldrh	r3, [r3, #0]
 801346e:	b292      	uxth	r2, r2
 8013470:	240e      	movs	r4, #14
 8013472:	4413      	add	r3, r2
 8013474:	4362      	muls	r2, r4
 8013476:	2406      	movs	r4, #6
 8013478:	fb04 2203 	mla	r2, r4, r3, r2
 801347c:	428a      	cmp	r2, r1
 801347e:	d305      	bcc.n	801348c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8013480:	4b0a      	ldr	r3, [pc, #40]	; (80134ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8013482:	4a0b      	ldr	r2, [pc, #44]	; (80134b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8013484:	480b      	ldr	r0, [pc, #44]	; (80134b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8013486:	2137      	movs	r1, #55	; 0x37
 8013488:	f008 fa84 	bl	801b994 <__assert_func>
 801348c:	4b0a      	ldr	r3, [pc, #40]	; (80134b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801348e:	6019      	str	r1, [r3, #0]
 8013490:	4b0a      	ldr	r3, [pc, #40]	; (80134bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8013492:	6018      	str	r0, [r3, #0]
 8013494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013498:	f7ff bf78 	b.w	801338c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801349c:	bd10      	pop	{r4, pc}
 801349e:	bf00      	nop
 80134a0:	20005fb4 	.word	0x20005fb4
 80134a4:	20005fc8 	.word	0x20005fc8
 80134a8:	20005fc4 	.word	0x20005fc4
 80134ac:	0801f359 	.word	0x0801f359
 80134b0:	0801f3b2 	.word	0x0801f3b2
 80134b4:	0801f334 	.word	0x0801f334
 80134b8:	20005fb0 	.word	0x20005fb0
 80134bc:	20005fa8 	.word	0x20005fa8

080134c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80134c0:	b470      	push	{r4, r5, r6}
 80134c2:	4c07      	ldr	r4, [pc, #28]	; (80134e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80134c4:	6826      	ldr	r6, [r4, #0]
 80134c6:	4605      	mov	r5, r0
 80134c8:	4610      	mov	r0, r2
 80134ca:	9a03      	ldr	r2, [sp, #12]
 80134cc:	b936      	cbnz	r6, 80134dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80134ce:	6025      	str	r5, [r4, #0]
 80134d0:	4c04      	ldr	r4, [pc, #16]	; (80134e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80134d2:	8021      	strh	r1, [r4, #0]
 80134d4:	bc70      	pop	{r4, r5, r6}
 80134d6:	4619      	mov	r1, r3
 80134d8:	f7ff bfc0 	b.w	801345c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80134dc:	bc70      	pop	{r4, r5, r6}
 80134de:	4770      	bx	lr
 80134e0:	20005fcc 	.word	0x20005fcc
 80134e4:	20005fc4 	.word	0x20005fc4

080134e8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80134e8:	b508      	push	{r3, lr}
 80134ea:	4b14      	ldr	r3, [pc, #80]	; (801353c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80134ec:	6819      	ldr	r1, [r3, #0]
 80134ee:	b931      	cbnz	r1, 80134fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80134f0:	4b13      	ldr	r3, [pc, #76]	; (8013540 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80134f2:	4a14      	ldr	r2, [pc, #80]	; (8013544 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80134f4:	4814      	ldr	r0, [pc, #80]	; (8013548 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80134f6:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80134fa:	f008 fa4b 	bl	801b994 <__assert_func>
 80134fe:	4a13      	ldr	r2, [pc, #76]	; (801354c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8013500:	8803      	ldrh	r3, [r0, #0]
 8013502:	8812      	ldrh	r2, [r2, #0]
 8013504:	4293      	cmp	r3, r2
 8013506:	d204      	bcs.n	8013512 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8013508:	2214      	movs	r2, #20
 801350a:	fb02 1303 	mla	r3, r2, r3, r1
 801350e:	8918      	ldrh	r0, [r3, #8]
 8013510:	bd08      	pop	{r3, pc}
 8013512:	490f      	ldr	r1, [pc, #60]	; (8013550 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8013514:	8809      	ldrh	r1, [r1, #0]
 8013516:	4411      	add	r1, r2
 8013518:	428b      	cmp	r3, r1
 801351a:	da06      	bge.n	801352a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801351c:	1a9b      	subs	r3, r3, r2
 801351e:	4a0d      	ldr	r2, [pc, #52]	; (8013554 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8013520:	6812      	ldr	r2, [r2, #0]
 8013522:	210e      	movs	r1, #14
 8013524:	fb01 2303 	mla	r3, r1, r3, r2
 8013528:	e7f1      	b.n	801350e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801352a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801352e:	4293      	cmp	r3, r2
 8013530:	bf0a      	itet	eq
 8013532:	4b09      	ldreq	r3, [pc, #36]	; (8013558 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8013534:	2000      	movne	r0, #0
 8013536:	8818      	ldrheq	r0, [r3, #0]
 8013538:	e7ea      	b.n	8013510 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801353a:	bf00      	nop
 801353c:	20005fcc 	.word	0x20005fcc
 8013540:	0801e7d8 	.word	0x0801e7d8
 8013544:	0801f45f 	.word	0x0801f45f
 8013548:	0801f334 	.word	0x0801f334
 801354c:	20005fc4 	.word	0x20005fc4
 8013550:	20005fc8 	.word	0x20005fc8
 8013554:	20005fac 	.word	0x20005fac
 8013558:	20005f18 	.word	0x20005f18

0801355c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801355c:	b508      	push	{r3, lr}
 801355e:	4b14      	ldr	r3, [pc, #80]	; (80135b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8013560:	6819      	ldr	r1, [r3, #0]
 8013562:	b931      	cbnz	r1, 8013572 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8013564:	4b13      	ldr	r3, [pc, #76]	; (80135b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8013566:	4a14      	ldr	r2, [pc, #80]	; (80135b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8013568:	4814      	ldr	r0, [pc, #80]	; (80135bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801356a:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801356e:	f008 fa11 	bl	801b994 <__assert_func>
 8013572:	4a13      	ldr	r2, [pc, #76]	; (80135c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8013574:	8803      	ldrh	r3, [r0, #0]
 8013576:	8812      	ldrh	r2, [r2, #0]
 8013578:	4293      	cmp	r3, r2
 801357a:	d204      	bcs.n	8013586 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801357c:	2214      	movs	r2, #20
 801357e:	fb02 1303 	mla	r3, r2, r3, r1
 8013582:	8958      	ldrh	r0, [r3, #10]
 8013584:	bd08      	pop	{r3, pc}
 8013586:	490f      	ldr	r1, [pc, #60]	; (80135c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8013588:	8809      	ldrh	r1, [r1, #0]
 801358a:	4411      	add	r1, r2
 801358c:	428b      	cmp	r3, r1
 801358e:	da06      	bge.n	801359e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8013590:	1a9b      	subs	r3, r3, r2
 8013592:	4a0d      	ldr	r2, [pc, #52]	; (80135c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8013594:	6812      	ldr	r2, [r2, #0]
 8013596:	210e      	movs	r1, #14
 8013598:	fb01 2303 	mla	r3, r1, r3, r2
 801359c:	e7f1      	b.n	8013582 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801359e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80135a2:	4293      	cmp	r3, r2
 80135a4:	bf0a      	itet	eq
 80135a6:	4b09      	ldreq	r3, [pc, #36]	; (80135cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80135a8:	2000      	movne	r0, #0
 80135aa:	8818      	ldrheq	r0, [r3, #0]
 80135ac:	e7ea      	b.n	8013584 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80135ae:	bf00      	nop
 80135b0:	20005fcc 	.word	0x20005fcc
 80135b4:	0801e7d8 	.word	0x0801e7d8
 80135b8:	0801f48b 	.word	0x0801f48b
 80135bc:	0801f334 	.word	0x0801f334
 80135c0:	20005fc4 	.word	0x20005fc4
 80135c4:	20005fc8 	.word	0x20005fc8
 80135c8:	20005fac 	.word	0x20005fac
 80135cc:	20005f1a 	.word	0x20005f1a

080135d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80135d0:	b510      	push	{r4, lr}
 80135d2:	4b23      	ldr	r3, [pc, #140]	; (8013660 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80135d4:	681c      	ldr	r4, [r3, #0]
 80135d6:	b934      	cbnz	r4, 80135e6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80135d8:	4b22      	ldr	r3, [pc, #136]	; (8013664 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80135da:	4a23      	ldr	r2, [pc, #140]	; (8013668 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80135dc:	4823      	ldr	r0, [pc, #140]	; (801366c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80135de:	f44f 7148 	mov.w	r1, #800	; 0x320
 80135e2:	f008 f9d7 	bl	801b994 <__assert_func>
 80135e6:	4a22      	ldr	r2, [pc, #136]	; (8013670 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80135e8:	880b      	ldrh	r3, [r1, #0]
 80135ea:	8812      	ldrh	r2, [r2, #0]
 80135ec:	4293      	cmp	r3, r2
 80135ee:	d211      	bcs.n	8013614 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 80135f0:	2214      	movs	r2, #20
 80135f2:	fb02 4303 	mla	r3, r2, r3, r4
 80135f6:	8a1a      	ldrh	r2, [r3, #16]
 80135f8:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80135fc:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8013600:	8a5b      	ldrh	r3, [r3, #18]
 8013602:	8004      	strh	r4, [r0, #0]
 8013604:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8013608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801360c:	8041      	strh	r1, [r0, #2]
 801360e:	8082      	strh	r2, [r0, #4]
 8013610:	80c3      	strh	r3, [r0, #6]
 8013612:	e00e      	b.n	8013632 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013614:	4917      	ldr	r1, [pc, #92]	; (8013674 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8013616:	8809      	ldrh	r1, [r1, #0]
 8013618:	4411      	add	r1, r2
 801361a:	428b      	cmp	r3, r1
 801361c:	da0a      	bge.n	8013634 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801361e:	1a9b      	subs	r3, r3, r2
 8013620:	4a15      	ldr	r2, [pc, #84]	; (8013678 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8013622:	6812      	ldr	r2, [r2, #0]
 8013624:	210e      	movs	r1, #14
 8013626:	fb01 2303 	mla	r3, r1, r3, r2
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	6002      	str	r2, [r0, #0]
 801362e:	685a      	ldr	r2, [r3, #4]
 8013630:	6042      	str	r2, [r0, #4]
 8013632:	bd10      	pop	{r4, pc}
 8013634:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013638:	4293      	cmp	r3, r2
 801363a:	d10b      	bne.n	8013654 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801363c:	4b0f      	ldr	r3, [pc, #60]	; (801367c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801363e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013642:	4b0f      	ldr	r3, [pc, #60]	; (8013680 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8013644:	8081      	strh	r1, [r0, #4]
 8013646:	f9b3 2000 	ldrsh.w	r2, [r3]
 801364a:	80c2      	strh	r2, [r0, #6]
 801364c:	2300      	movs	r3, #0
 801364e:	8003      	strh	r3, [r0, #0]
 8013650:	8043      	strh	r3, [r0, #2]
 8013652:	e7ee      	b.n	8013632 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013654:	2300      	movs	r3, #0
 8013656:	8003      	strh	r3, [r0, #0]
 8013658:	8043      	strh	r3, [r0, #2]
 801365a:	8083      	strh	r3, [r0, #4]
 801365c:	e7d8      	b.n	8013610 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801365e:	bf00      	nop
 8013660:	20005fcc 	.word	0x20005fcc
 8013664:	0801e7d8 	.word	0x0801e7d8
 8013668:	0801f3f8 	.word	0x0801f3f8
 801366c:	0801f334 	.word	0x0801f334
 8013670:	20005fc4 	.word	0x20005fc4
 8013674:	20005fc8 	.word	0x20005fc8
 8013678:	20005fac 	.word	0x20005fac
 801367c:	20005f18 	.word	0x20005f18
 8013680:	20005f1a 	.word	0x20005f1a

08013684 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8013684:	b508      	push	{r3, lr}
 8013686:	4b12      	ldr	r3, [pc, #72]	; (80136d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8013688:	6819      	ldr	r1, [r3, #0]
 801368a:	b931      	cbnz	r1, 801369a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801368c:	4b11      	ldr	r3, [pc, #68]	; (80136d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801368e:	4a12      	ldr	r2, [pc, #72]	; (80136d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8013690:	4812      	ldr	r0, [pc, #72]	; (80136dc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8013692:	f44f 7151 	mov.w	r1, #836	; 0x344
 8013696:	f008 f97d 	bl	801b994 <__assert_func>
 801369a:	8803      	ldrh	r3, [r0, #0]
 801369c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136a0:	4293      	cmp	r3, r2
 80136a2:	d012      	beq.n	80136ca <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80136a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80136a8:	4293      	cmp	r3, r2
 80136aa:	d103      	bne.n	80136b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 80136ac:	4b0c      	ldr	r3, [pc, #48]	; (80136e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80136b2:	bd08      	pop	{r3, pc}
 80136b4:	4a0b      	ldr	r2, [pc, #44]	; (80136e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 80136b6:	6812      	ldr	r2, [r2, #0]
 80136b8:	b11a      	cbz	r2, 80136c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 80136ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80136be:	2800      	cmp	r0, #0
 80136c0:	d1f7      	bne.n	80136b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80136c2:	2214      	movs	r2, #20
 80136c4:	4353      	muls	r3, r2
 80136c6:	58c8      	ldr	r0, [r1, r3]
 80136c8:	e7f3      	b.n	80136b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80136ca:	2000      	movs	r0, #0
 80136cc:	e7f1      	b.n	80136b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80136ce:	bf00      	nop
 80136d0:	20005fcc 	.word	0x20005fcc
 80136d4:	0801e7d8 	.word	0x0801e7d8
 80136d8:	0801f42e 	.word	0x0801f42e
 80136dc:	0801f334 	.word	0x0801f334
 80136e0:	20005f24 	.word	0x20005f24
 80136e4:	20005fa8 	.word	0x20005fa8

080136e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80136e8:	8802      	ldrh	r2, [r0, #0]
 80136ea:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d840      	bhi.n	8013774 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80136f2:	4b21      	ldr	r3, [pc, #132]	; (8013778 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 80136f4:	881b      	ldrh	r3, [r3, #0]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d220      	bcs.n	801373c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 80136fa:	4b20      	ldr	r3, [pc, #128]	; (801377c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80136fc:	6819      	ldr	r1, [r3, #0]
 80136fe:	2314      	movs	r3, #20
 8013700:	fb03 1302 	mla	r3, r3, r2, r1
 8013704:	6858      	ldr	r0, [r3, #4]
 8013706:	2800      	cmp	r0, #0
 8013708:	d035      	beq.n	8013776 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801370a:	491d      	ldr	r1, [pc, #116]	; (8013780 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801370c:	6809      	ldr	r1, [r1, #0]
 801370e:	2900      	cmp	r1, #0
 8013710:	d031      	beq.n	8013776 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8013712:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013716:	b371      	cbz	r1, 8013776 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8013718:	895a      	ldrh	r2, [r3, #10]
 801371a:	8918      	ldrh	r0, [r3, #8]
 801371c:	4350      	muls	r0, r2
 801371e:	7c5a      	ldrb	r2, [r3, #17]
 8013720:	7cdb      	ldrb	r3, [r3, #19]
 8013722:	0952      	lsrs	r2, r2, #5
 8013724:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013728:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801372c:	2b0b      	cmp	r3, #11
 801372e:	bf18      	it	ne
 8013730:	0040      	lslne	r0, r0, #1
 8013732:	3003      	adds	r0, #3
 8013734:	f020 0003 	bic.w	r0, r0, #3
 8013738:	4408      	add	r0, r1
 801373a:	4770      	bx	lr
 801373c:	4911      	ldr	r1, [pc, #68]	; (8013784 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801373e:	8809      	ldrh	r1, [r1, #0]
 8013740:	4419      	add	r1, r3
 8013742:	428a      	cmp	r2, r1
 8013744:	da16      	bge.n	8013774 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8013746:	4910      	ldr	r1, [pc, #64]	; (8013788 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8013748:	6809      	ldr	r1, [r1, #0]
 801374a:	1ad3      	subs	r3, r2, r3
 801374c:	200e      	movs	r0, #14
 801374e:	fb00 1303 	mla	r3, r0, r3, r1
 8013752:	7b19      	ldrb	r1, [r3, #12]
 8013754:	f001 011f 	and.w	r1, r1, #31
 8013758:	290b      	cmp	r1, #11
 801375a:	d10b      	bne.n	8013774 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801375c:	8919      	ldrh	r1, [r3, #8]
 801375e:	8958      	ldrh	r0, [r3, #10]
 8013760:	4b07      	ldr	r3, [pc, #28]	; (8013780 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8013762:	4348      	muls	r0, r1
 8013764:	6819      	ldr	r1, [r3, #0]
 8013766:	3003      	adds	r0, #3
 8013768:	f020 0303 	bic.w	r3, r0, #3
 801376c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8013770:	4418      	add	r0, r3
 8013772:	4770      	bx	lr
 8013774:	2000      	movs	r0, #0
 8013776:	4770      	bx	lr
 8013778:	20005fc4 	.word	0x20005fc4
 801377c:	20005fcc 	.word	0x20005fcc
 8013780:	20005fa8 	.word	0x20005fa8
 8013784:	20005fc8 	.word	0x20005fc8
 8013788:	20005fac 	.word	0x20005fac

0801378c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801378c:	4b19      	ldr	r3, [pc, #100]	; (80137f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801378e:	6819      	ldr	r1, [r3, #0]
 8013790:	8803      	ldrh	r3, [r0, #0]
 8013792:	b1e9      	cbz	r1, 80137d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8013794:	4a18      	ldr	r2, [pc, #96]	; (80137f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8013796:	8812      	ldrh	r2, [r2, #0]
 8013798:	429a      	cmp	r2, r3
 801379a:	d90a      	bls.n	80137b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801379c:	2214      	movs	r2, #20
 801379e:	fb02 1303 	mla	r3, r2, r3, r1
 80137a2:	7c58      	ldrb	r0, [r3, #17]
 80137a4:	0942      	lsrs	r2, r0, #5
 80137a6:	7cd8      	ldrb	r0, [r3, #19]
 80137a8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80137ac:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80137b0:	4770      	bx	lr
 80137b2:	4912      	ldr	r1, [pc, #72]	; (80137fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 80137b4:	8809      	ldrh	r1, [r1, #0]
 80137b6:	4411      	add	r1, r2
 80137b8:	428b      	cmp	r3, r1
 80137ba:	da09      	bge.n	80137d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80137bc:	1a9b      	subs	r3, r3, r2
 80137be:	4a10      	ldr	r2, [pc, #64]	; (8013800 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 80137c0:	6812      	ldr	r2, [r2, #0]
 80137c2:	210e      	movs	r1, #14
 80137c4:	fb01 2303 	mla	r3, r1, r3, r2
 80137c8:	7b18      	ldrb	r0, [r3, #12]
 80137ca:	f000 001f 	and.w	r0, r0, #31
 80137ce:	4770      	bx	lr
 80137d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80137d4:	4293      	cmp	r3, r2
 80137d6:	d10a      	bne.n	80137ee <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 80137d8:	4b0a      	ldr	r3, [pc, #40]	; (8013804 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80137e0:	b10a      	cbz	r2, 80137e6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80137e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80137e4:	b900      	cbnz	r0, 80137e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80137e6:	6898      	ldr	r0, [r3, #8]
 80137e8:	6803      	ldr	r3, [r0, #0]
 80137ea:	6a1b      	ldr	r3, [r3, #32]
 80137ec:	4718      	bx	r3
 80137ee:	2000      	movs	r0, #0
 80137f0:	4770      	bx	lr
 80137f2:	bf00      	nop
 80137f4:	20005fcc 	.word	0x20005fcc
 80137f8:	20005fc4 	.word	0x20005fc4
 80137fc:	20005fc8 	.word	0x20005fc8
 8013800:	20005fac 	.word	0x20005fac
 8013804:	20005f24 	.word	0x20005f24

08013808 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8013808:	2018      	movs	r0, #24
 801380a:	4770      	bx	lr

0801380c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801380c:	2001      	movs	r0, #1
 801380e:	4770      	bx	lr

08013810 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 8013810:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013814:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 8013818:	4770      	bx	lr

0801381a <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801381a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801381e:	4770      	bx	lr

08013820 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 8013820:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8013824:	4770      	bx	lr

08013826 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 8013826:	b2c8      	uxtb	r0, r1
 8013828:	4770      	bx	lr

0801382a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801382a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801382e:	b085      	sub	sp, #20
 8013830:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8013832:	9203      	str	r2, [sp, #12]
 8013834:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8013838:	9201      	str	r2, [sp, #4]
 801383a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8013842:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8013846:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801384a:	9100      	str	r1, [sp, #0]
 801384c:	fb00 2505 	mla	r5, r0, r5, r2
 8013850:	683a      	ldr	r2, [r7, #0]
 8013852:	6877      	ldr	r7, [r6, #4]
 8013854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013858:	4415      	add	r5, r2
 801385a:	fa1f fc84 	uxth.w	ip, r4
 801385e:	6832      	ldr	r2, [r6, #0]
 8013860:	9202      	str	r2, [sp, #8]
 8013862:	43e4      	mvns	r4, r4
 8013864:	3704      	adds	r7, #4
 8013866:	b2e4      	uxtb	r4, r4
 8013868:	9a00      	ldr	r2, [sp, #0]
 801386a:	2a00      	cmp	r2, #0
 801386c:	dc03      	bgt.n	8013876 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801386e:	9a03      	ldr	r2, [sp, #12]
 8013870:	2a00      	cmp	r2, #0
 8013872:	f340 8116 	ble.w	8013aa2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8013876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013878:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801387c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801387e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013882:	2b00      	cmp	r3, #0
 8013884:	dd0f      	ble.n	80138a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8013886:	1406      	asrs	r6, r0, #16
 8013888:	d406      	bmi.n	8013898 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801388a:	4546      	cmp	r6, r8
 801388c:	da04      	bge.n	8013898 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801388e:	1416      	asrs	r6, r2, #16
 8013890:	d402      	bmi.n	8013898 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8013892:	9901      	ldr	r1, [sp, #4]
 8013894:	428e      	cmp	r6, r1
 8013896:	db07      	blt.n	80138a8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8013898:	9911      	ldr	r1, [sp, #68]	; 0x44
 801389a:	4408      	add	r0, r1
 801389c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801389e:	3b01      	subs	r3, #1
 80138a0:	440a      	add	r2, r1
 80138a2:	3503      	adds	r5, #3
 80138a4:	e7ed      	b.n	8013882 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 80138a6:	d011      	beq.n	80138cc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80138a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80138aa:	1e5e      	subs	r6, r3, #1
 80138ac:	fb01 0e06 	mla	lr, r1, r6, r0
 80138b0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80138b4:	d548      	bpl.n	8013948 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80138b6:	4699      	mov	r9, r3
 80138b8:	462e      	mov	r6, r5
 80138ba:	f1b9 0f00 	cmp.w	r9, #0
 80138be:	f300 809e 	bgt.w	80139fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 80138c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80138c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80138ca:	441d      	add	r5, r3
 80138cc:	9b00      	ldr	r3, [sp, #0]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	f340 80e7 	ble.w	8013aa2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80138d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80138d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80138dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80138e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80138e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80138ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80138ee:	eef0 6a62 	vmov.f32	s13, s5
 80138f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80138f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80138fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80138fe:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8013902:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013906:	eef0 6a43 	vmov.f32	s13, s6
 801390a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801390e:	ee12 2a90 	vmov	r2, s5
 8013912:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013916:	fb92 f3f3 	sdiv	r3, r2, r3
 801391a:	ee13 2a10 	vmov	r2, s6
 801391e:	9311      	str	r3, [sp, #68]	; 0x44
 8013920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013922:	fb92 f3f3 	sdiv	r3, r2, r3
 8013926:	9312      	str	r3, [sp, #72]	; 0x48
 8013928:	9b00      	ldr	r3, [sp, #0]
 801392a:	9a03      	ldr	r2, [sp, #12]
 801392c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013930:	3b01      	subs	r3, #1
 8013932:	9300      	str	r3, [sp, #0]
 8013934:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8013938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801393a:	eeb0 3a67 	vmov.f32	s6, s15
 801393e:	bf08      	it	eq
 8013940:	4613      	moveq	r3, r2
 8013942:	eef0 2a47 	vmov.f32	s5, s14
 8013946:	e78f      	b.n	8013868 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8013948:	45c6      	cmp	lr, r8
 801394a:	dab4      	bge.n	80138b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801394c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801394e:	fb01 2606 	mla	r6, r1, r6, r2
 8013952:	1436      	asrs	r6, r6, #16
 8013954:	d4af      	bmi.n	80138b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8013956:	9901      	ldr	r1, [sp, #4]
 8013958:	428e      	cmp	r6, r1
 801395a:	daac      	bge.n	80138b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801395c:	1cee      	adds	r6, r5, #3
 801395e:	4699      	mov	r9, r3
 8013960:	f1b9 0f00 	cmp.w	r9, #0
 8013964:	f106 0603 	add.w	r6, r6, #3
 8013968:	ddab      	ble.n	80138c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801396a:	9902      	ldr	r1, [sp, #8]
 801396c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8013970:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013974:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013978:	fb08 1e0e 	mla	lr, r8, lr, r1
 801397c:	fb1b fb04 	smulbb	fp, fp, r4
 8013980:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8013984:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013986:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801398a:	eb07 0a0e 	add.w	sl, r7, lr
 801398e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8013992:	fb0e be0c 	mla	lr, lr, ip, fp
 8013996:	fa1f fe8e 	uxth.w	lr, lr
 801399a:	f10e 0b01 	add.w	fp, lr, #1
 801399e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80139a2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80139a6:	f806 ec06 	strb.w	lr, [r6, #-6]
 80139aa:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80139ae:	f89a e001 	ldrb.w	lr, [sl, #1]
 80139b2:	fb1b fb04 	smulbb	fp, fp, r4
 80139b6:	fb0e be0c 	mla	lr, lr, ip, fp
 80139ba:	fa1f fe8e 	uxth.w	lr, lr
 80139be:	f10e 0b01 	add.w	fp, lr, #1
 80139c2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80139c6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80139ca:	f806 ec05 	strb.w	lr, [r6, #-5]
 80139ce:	f89a e002 	ldrb.w	lr, [sl, #2]
 80139d2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80139d6:	fb1a fa04 	smulbb	sl, sl, r4
 80139da:	fb0e ae0c 	mla	lr, lr, ip, sl
 80139de:	fa1f fe8e 	uxth.w	lr, lr
 80139e2:	f10e 0a01 	add.w	sl, lr, #1
 80139e6:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 80139ea:	4408      	add	r0, r1
 80139ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 80139ee:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80139f2:	f806 ec04 	strb.w	lr, [r6, #-4]
 80139f6:	440a      	add	r2, r1
 80139f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80139fc:	e7b0      	b.n	8013960 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 80139fe:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8013a02:	d446      	bmi.n	8013a92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8013a04:	45c2      	cmp	sl, r8
 8013a06:	da44      	bge.n	8013a92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8013a08:	ea5f 4e22 	movs.w	lr, r2, asr #16
 8013a0c:	d441      	bmi.n	8013a92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8013a0e:	9901      	ldr	r1, [sp, #4]
 8013a10:	458e      	cmp	lr, r1
 8013a12:	da3e      	bge.n	8013a92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8013a14:	9902      	ldr	r1, [sp, #8]
 8013a16:	f896 b000 	ldrb.w	fp, [r6]
 8013a1a:	fb08 1e0e 	mla	lr, r8, lr, r1
 8013a1e:	fb1b fb04 	smulbb	fp, fp, r4
 8013a22:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8013a26:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8013a2a:	eb07 0a0e 	add.w	sl, r7, lr
 8013a2e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8013a32:	fb0e be0c 	mla	lr, lr, ip, fp
 8013a36:	fa1f fe8e 	uxth.w	lr, lr
 8013a3a:	f10e 0b01 	add.w	fp, lr, #1
 8013a3e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8013a42:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013a46:	f886 e000 	strb.w	lr, [r6]
 8013a4a:	f896 b001 	ldrb.w	fp, [r6, #1]
 8013a4e:	f89a e001 	ldrb.w	lr, [sl, #1]
 8013a52:	fb1b fb04 	smulbb	fp, fp, r4
 8013a56:	fb0e be0c 	mla	lr, lr, ip, fp
 8013a5a:	fa1f fe8e 	uxth.w	lr, lr
 8013a5e:	f10e 0b01 	add.w	fp, lr, #1
 8013a62:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8013a66:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013a6a:	f886 e001 	strb.w	lr, [r6, #1]
 8013a6e:	f89a e002 	ldrb.w	lr, [sl, #2]
 8013a72:	f896 a002 	ldrb.w	sl, [r6, #2]
 8013a76:	fb1a fa04 	smulbb	sl, sl, r4
 8013a7a:	fb0e ae0c 	mla	lr, lr, ip, sl
 8013a7e:	fa1f fe8e 	uxth.w	lr, lr
 8013a82:	f10e 0a01 	add.w	sl, lr, #1
 8013a86:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8013a8a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013a8e:	f886 e002 	strb.w	lr, [r6, #2]
 8013a92:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013a94:	4408      	add	r0, r1
 8013a96:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013a98:	3603      	adds	r6, #3
 8013a9a:	440a      	add	r2, r1
 8013a9c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013aa0:	e70b      	b.n	80138ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8013aa2:	b005      	add	sp, #20
 8013aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013aa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aac:	b085      	sub	sp, #20
 8013aae:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 8013ab2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013ab4:	9203      	str	r2, [sp, #12]
 8013ab6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013aba:	6870      	ldr	r0, [r6, #4]
 8013abc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8013abe:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8013ac2:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8013ac6:	9101      	str	r1, [sp, #4]
 8013ac8:	fb00 2404 	mla	r4, r0, r4, r2
 8013acc:	6832      	ldr	r2, [r6, #0]
 8013ace:	686e      	ldr	r6, [r5, #4]
 8013ad0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013ad4:	4414      	add	r4, r2
 8013ad6:	682a      	ldr	r2, [r5, #0]
 8013ad8:	9202      	str	r2, [sp, #8]
 8013ada:	3604      	adds	r6, #4
 8013adc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013ae0:	9a01      	ldr	r2, [sp, #4]
 8013ae2:	2a00      	cmp	r2, #0
 8013ae4:	dc03      	bgt.n	8013aee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8013ae6:	9a03      	ldr	r2, [sp, #12]
 8013ae8:	2a00      	cmp	r2, #0
 8013aea:	f340 80b2 	ble.w	8013c52 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8013aee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013af0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013af6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	dd0c      	ble.n	8013b18 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8013afe:	1405      	asrs	r5, r0, #16
 8013b00:	d405      	bmi.n	8013b0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013b02:	4575      	cmp	r5, lr
 8013b04:	da03      	bge.n	8013b0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013b06:	1415      	asrs	r5, r2, #16
 8013b08:	d401      	bmi.n	8013b0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013b0a:	4545      	cmp	r5, r8
 8013b0c:	db05      	blt.n	8013b1a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8013b0e:	4460      	add	r0, ip
 8013b10:	443a      	add	r2, r7
 8013b12:	3b01      	subs	r3, #1
 8013b14:	3403      	adds	r4, #3
 8013b16:	e7f0      	b.n	8013afa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 8013b18:	d03d      	beq.n	8013b96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8013b1a:	1e5d      	subs	r5, r3, #1
 8013b1c:	fb0c 0905 	mla	r9, ip, r5, r0
 8013b20:	ea5f 4929 	movs.w	r9, r9, asr #16
 8013b24:	d42c      	bmi.n	8013b80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8013b26:	45f1      	cmp	r9, lr
 8013b28:	da2a      	bge.n	8013b80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8013b2a:	fb07 2505 	mla	r5, r7, r5, r2
 8013b2e:	142d      	asrs	r5, r5, #16
 8013b30:	d426      	bmi.n	8013b80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8013b32:	4545      	cmp	r5, r8
 8013b34:	da24      	bge.n	8013b80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8013b36:	1ce5      	adds	r5, r4, #3
 8013b38:	469a      	mov	sl, r3
 8013b3a:	f1ba 0f00 	cmp.w	sl, #0
 8013b3e:	f105 0503 	add.w	r5, r5, #3
 8013b42:	dd23      	ble.n	8013b8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8013b44:	9902      	ldr	r1, [sp, #8]
 8013b46:	ea4f 4922 	mov.w	r9, r2, asr #16
 8013b4a:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8013b4e:	fb0e 1909 	mla	r9, lr, r9, r1
 8013b52:	4460      	add	r0, ip
 8013b54:	f819 900b 	ldrb.w	r9, [r9, fp]
 8013b58:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8013b5c:	eb06 0b09 	add.w	fp, r6, r9
 8013b60:	f816 9009 	ldrb.w	r9, [r6, r9]
 8013b64:	f805 9c06 	strb.w	r9, [r5, #-6]
 8013b68:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8013b6c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8013b70:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8013b74:	f805 9c04 	strb.w	r9, [r5, #-4]
 8013b78:	443a      	add	r2, r7
 8013b7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b7e:	e7dc      	b.n	8013b3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8013b80:	2500      	movs	r5, #0
 8013b82:	eba3 0905 	sub.w	r9, r3, r5
 8013b86:	f1b9 0f00 	cmp.w	r9, #0
 8013b8a:	dc3c      	bgt.n	8013c06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 8013b8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013b90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013b94:	441c      	add	r4, r3
 8013b96:	9b01      	ldr	r3, [sp, #4]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	dd5a      	ble.n	8013c52 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8013b9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013ba0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013ba4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013baa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013bae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013bb2:	eeb0 6a62 	vmov.f32	s12, s5
 8013bb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013bba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013bbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013bc2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013bc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013bca:	eeb0 6a43 	vmov.f32	s12, s6
 8013bce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013bd2:	ee12 2a90 	vmov	r2, s5
 8013bd6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013bda:	fb92 fcf3 	sdiv	ip, r2, r3
 8013bde:	ee13 2a10 	vmov	r2, s6
 8013be2:	fb92 f7f3 	sdiv	r7, r2, r3
 8013be6:	9b01      	ldr	r3, [sp, #4]
 8013be8:	9a03      	ldr	r2, [sp, #12]
 8013bea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013bee:	3b01      	subs	r3, #1
 8013bf0:	9301      	str	r3, [sp, #4]
 8013bf2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bf8:	eeb0 3a67 	vmov.f32	s6, s15
 8013bfc:	bf08      	it	eq
 8013bfe:	4613      	moveq	r3, r2
 8013c00:	eef0 2a47 	vmov.f32	s5, s14
 8013c04:	e76c      	b.n	8013ae0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8013c06:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8013c0a:	d41e      	bmi.n	8013c4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8013c0c:	45f2      	cmp	sl, lr
 8013c0e:	da1c      	bge.n	8013c4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8013c10:	ea5f 4922 	movs.w	r9, r2, asr #16
 8013c14:	d419      	bmi.n	8013c4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8013c16:	45c1      	cmp	r9, r8
 8013c18:	da17      	bge.n	8013c4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8013c1a:	9902      	ldr	r1, [sp, #8]
 8013c1c:	fb0e 1909 	mla	r9, lr, r9, r1
 8013c20:	f819 900a 	ldrb.w	r9, [r9, sl]
 8013c24:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8013c28:	eb06 0a09 	add.w	sl, r6, r9
 8013c2c:	f816 b009 	ldrb.w	fp, [r6, r9]
 8013c30:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 8013c34:	f804 b009 	strb.w	fp, [r4, r9]
 8013c38:	44a1      	add	r9, r4
 8013c3a:	f89a b001 	ldrb.w	fp, [sl, #1]
 8013c3e:	f889 b001 	strb.w	fp, [r9, #1]
 8013c42:	f89a a002 	ldrb.w	sl, [sl, #2]
 8013c46:	f889 a002 	strb.w	sl, [r9, #2]
 8013c4a:	4460      	add	r0, ip
 8013c4c:	443a      	add	r2, r7
 8013c4e:	3501      	adds	r5, #1
 8013c50:	e797      	b.n	8013b82 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8013c52:	b005      	add	sp, #20
 8013c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013c58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c5c:	b087      	sub	sp, #28
 8013c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c62:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8013c64:	9204      	str	r2, [sp, #16]
 8013c66:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8013c6a:	9205      	str	r2, [sp, #20]
 8013c6c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8013c70:	6870      	ldr	r0, [r6, #4]
 8013c72:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8013c74:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8013c78:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8013c7c:	9101      	str	r1, [sp, #4]
 8013c7e:	fb00 2505 	mla	r5, r0, r5, r2
 8013c82:	6832      	ldr	r2, [r6, #0]
 8013c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c88:	4415      	add	r5, r2
 8013c8a:	6822      	ldr	r2, [r4, #0]
 8013c8c:	9202      	str	r2, [sp, #8]
 8013c8e:	6862      	ldr	r2, [r4, #4]
 8013c90:	3204      	adds	r2, #4
 8013c92:	9203      	str	r2, [sp, #12]
 8013c94:	9a01      	ldr	r2, [sp, #4]
 8013c96:	2a00      	cmp	r2, #0
 8013c98:	dc03      	bgt.n	8013ca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8013c9a:	9a04      	ldr	r2, [sp, #16]
 8013c9c:	2a00      	cmp	r2, #0
 8013c9e:	f340 8124 	ble.w	8013eea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8013ca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013ca4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013ca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013caa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	dd0e      	ble.n	8013cd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8013cb2:	1422      	asrs	r2, r4, #16
 8013cb4:	d405      	bmi.n	8013cc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013cb6:	4572      	cmp	r2, lr
 8013cb8:	da03      	bge.n	8013cc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013cba:	1402      	asrs	r2, r0, #16
 8013cbc:	d401      	bmi.n	8013cc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013cbe:	4542      	cmp	r2, r8
 8013cc0:	db07      	blt.n	8013cd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8013cc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013cc4:	4414      	add	r4, r2
 8013cc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013cc8:	3b01      	subs	r3, #1
 8013cca:	4410      	add	r0, r2
 8013ccc:	3503      	adds	r5, #3
 8013cce:	e7ee      	b.n	8013cae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8013cd0:	d010      	beq.n	8013cf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8013cd2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013cd4:	1e5a      	subs	r2, r3, #1
 8013cd6:	fb06 4602 	mla	r6, r6, r2, r4
 8013cda:	1436      	asrs	r6, r6, #16
 8013cdc:	d546      	bpl.n	8013d6c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8013cde:	4699      	mov	r9, r3
 8013ce0:	462f      	mov	r7, r5
 8013ce2:	f1b9 0f00 	cmp.w	r9, #0
 8013ce6:	f300 80a5 	bgt.w	8013e34 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8013cea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013cee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013cf2:	441d      	add	r5, r3
 8013cf4:	9b01      	ldr	r3, [sp, #4]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	f340 80f7 	ble.w	8013eea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8013cfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013d00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013d04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013d0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013d12:	eeb0 6a62 	vmov.f32	s12, s5
 8013d16:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013d1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013d1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013d22:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013d26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013d2a:	eeb0 6a43 	vmov.f32	s12, s6
 8013d2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013d32:	ee12 2a90 	vmov	r2, s5
 8013d36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013d3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d3e:	ee13 2a10 	vmov	r2, s6
 8013d42:	9313      	str	r3, [sp, #76]	; 0x4c
 8013d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d4a:	9314      	str	r3, [sp, #80]	; 0x50
 8013d4c:	9b01      	ldr	r3, [sp, #4]
 8013d4e:	9a04      	ldr	r2, [sp, #16]
 8013d50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013d54:	3b01      	subs	r3, #1
 8013d56:	9301      	str	r3, [sp, #4]
 8013d58:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d5e:	eeb0 3a67 	vmov.f32	s6, s15
 8013d62:	bf08      	it	eq
 8013d64:	4613      	moveq	r3, r2
 8013d66:	eef0 2a47 	vmov.f32	s5, s14
 8013d6a:	e793      	b.n	8013c94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8013d6c:	4576      	cmp	r6, lr
 8013d6e:	dab6      	bge.n	8013cde <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8013d70:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013d72:	fb06 0202 	mla	r2, r6, r2, r0
 8013d76:	1412      	asrs	r2, r2, #16
 8013d78:	d4b1      	bmi.n	8013cde <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8013d7a:	4542      	cmp	r2, r8
 8013d7c:	daaf      	bge.n	8013cde <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8013d7e:	1cef      	adds	r7, r5, #3
 8013d80:	4699      	mov	r9, r3
 8013d82:	f1b9 0f00 	cmp.w	r9, #0
 8013d86:	ddb0      	ble.n	8013cea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8013d88:	9902      	ldr	r1, [sp, #8]
 8013d8a:	1402      	asrs	r2, r0, #16
 8013d8c:	1426      	asrs	r6, r4, #16
 8013d8e:	fb0e 1202 	mla	r2, lr, r2, r1
 8013d92:	9903      	ldr	r1, [sp, #12]
 8013d94:	5d92      	ldrb	r2, [r2, r6]
 8013d96:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8013d9a:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8013d9e:	d041      	beq.n	8013e24 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 8013da0:	9a05      	ldr	r2, [sp, #20]
 8013da2:	fb02 fc0c 	mul.w	ip, r2, ip
 8013da6:	f10c 0201 	add.w	r2, ip, #1
 8013daa:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8013dae:	1212      	asrs	r2, r2, #8
 8013db0:	fa1f fa82 	uxth.w	sl, r2
 8013db4:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8013db8:	fa5f fb86 	uxtb.w	fp, r6
 8013dbc:	43d2      	mvns	r2, r2
 8013dbe:	b2d2      	uxtb	r2, r2
 8013dc0:	fb1b fb0a 	smulbb	fp, fp, sl
 8013dc4:	fb0c bc02 	mla	ip, ip, r2, fp
 8013dc8:	fa1f fc8c 	uxth.w	ip, ip
 8013dcc:	f10c 0b01 	add.w	fp, ip, #1
 8013dd0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8013dd4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013dd8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013ddc:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013de0:	fb1b fb0a 	smulbb	fp, fp, sl
 8013de4:	f807 cc03 	strb.w	ip, [r7, #-3]
 8013de8:	fb16 fa0a 	smulbb	sl, r6, sl
 8013dec:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8013df0:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8013df4:	fb0c bc02 	mla	ip, ip, r2, fp
 8013df8:	fb06 aa02 	mla	sl, r6, r2, sl
 8013dfc:	fa1f fc8c 	uxth.w	ip, ip
 8013e00:	fa1f fa8a 	uxth.w	sl, sl
 8013e04:	f10c 0b01 	add.w	fp, ip, #1
 8013e08:	f10a 0601 	add.w	r6, sl, #1
 8013e0c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8013e10:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8013e14:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013e18:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013e1c:	f807 cc02 	strb.w	ip, [r7, #-2]
 8013e20:	f807 ac01 	strb.w	sl, [r7, #-1]
 8013e24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013e26:	4414      	add	r4, r2
 8013e28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e2a:	3703      	adds	r7, #3
 8013e2c:	4410      	add	r0, r2
 8013e2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013e32:	e7a6      	b.n	8013d82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8013e34:	1426      	asrs	r6, r4, #16
 8013e36:	d450      	bmi.n	8013eda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8013e38:	4576      	cmp	r6, lr
 8013e3a:	da4e      	bge.n	8013eda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8013e3c:	1402      	asrs	r2, r0, #16
 8013e3e:	d44c      	bmi.n	8013eda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8013e40:	4542      	cmp	r2, r8
 8013e42:	da4a      	bge.n	8013eda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8013e44:	9902      	ldr	r1, [sp, #8]
 8013e46:	fb0e 1202 	mla	r2, lr, r2, r1
 8013e4a:	9903      	ldr	r1, [sp, #12]
 8013e4c:	5d92      	ldrb	r2, [r2, r6]
 8013e4e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8013e52:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8013e56:	d040      	beq.n	8013eda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8013e58:	9a05      	ldr	r2, [sp, #20]
 8013e5a:	fb02 fc0c 	mul.w	ip, r2, ip
 8013e5e:	f10c 0201 	add.w	r2, ip, #1
 8013e62:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8013e66:	1212      	asrs	r2, r2, #8
 8013e68:	fa1f fa82 	uxth.w	sl, r2
 8013e6c:	f897 c000 	ldrb.w	ip, [r7]
 8013e70:	fa5f fb86 	uxtb.w	fp, r6
 8013e74:	43d2      	mvns	r2, r2
 8013e76:	b2d2      	uxtb	r2, r2
 8013e78:	fb1b fb0a 	smulbb	fp, fp, sl
 8013e7c:	fb0c bc02 	mla	ip, ip, r2, fp
 8013e80:	fa1f fc8c 	uxth.w	ip, ip
 8013e84:	f10c 0b01 	add.w	fp, ip, #1
 8013e88:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8013e8c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013e90:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013e94:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013e98:	fb1b fb0a 	smulbb	fp, fp, sl
 8013e9c:	f887 c000 	strb.w	ip, [r7]
 8013ea0:	fb16 fa0a 	smulbb	sl, r6, sl
 8013ea4:	f897 c001 	ldrb.w	ip, [r7, #1]
 8013ea8:	78be      	ldrb	r6, [r7, #2]
 8013eaa:	fb0c bc02 	mla	ip, ip, r2, fp
 8013eae:	fb06 aa02 	mla	sl, r6, r2, sl
 8013eb2:	fa1f fc8c 	uxth.w	ip, ip
 8013eb6:	fa1f fa8a 	uxth.w	sl, sl
 8013eba:	f10c 0b01 	add.w	fp, ip, #1
 8013ebe:	f10a 0601 	add.w	r6, sl, #1
 8013ec2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8013ec6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8013eca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013ece:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013ed2:	f887 c001 	strb.w	ip, [r7, #1]
 8013ed6:	f887 a002 	strb.w	sl, [r7, #2]
 8013eda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013edc:	4414      	add	r4, r2
 8013ede:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ee0:	3703      	adds	r7, #3
 8013ee2:	4410      	add	r0, r2
 8013ee4:	f109 39ff 	add.w	r9, r9, #4294967295
 8013ee8:	e6fb      	b.n	8013ce2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8013eea:	b007      	add	sp, #28
 8013eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ef0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef4:	b085      	sub	sp, #20
 8013ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013efa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013efc:	9203      	str	r2, [sp, #12]
 8013efe:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013f02:	6870      	ldr	r0, [r6, #4]
 8013f04:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8013f06:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8013f0a:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8013f0e:	9100      	str	r1, [sp, #0]
 8013f10:	fb00 2404 	mla	r4, r0, r4, r2
 8013f14:	6832      	ldr	r2, [r6, #0]
 8013f16:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013f1a:	4414      	add	r4, r2
 8013f1c:	682a      	ldr	r2, [r5, #0]
 8013f1e:	9201      	str	r2, [sp, #4]
 8013f20:	686a      	ldr	r2, [r5, #4]
 8013f22:	3204      	adds	r2, #4
 8013f24:	9202      	str	r2, [sp, #8]
 8013f26:	9a00      	ldr	r2, [sp, #0]
 8013f28:	2a00      	cmp	r2, #0
 8013f2a:	dc03      	bgt.n	8013f34 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8013f2c:	9a03      	ldr	r2, [sp, #12]
 8013f2e:	2a00      	cmp	r2, #0
 8013f30:	f340 8131 	ble.w	8014196 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8013f34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f36:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013f3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013f3c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	dd0e      	ble.n	8013f62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8013f44:	1405      	asrs	r5, r0, #16
 8013f46:	d405      	bmi.n	8013f54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8013f48:	4575      	cmp	r5, lr
 8013f4a:	da03      	bge.n	8013f54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8013f4c:	1415      	asrs	r5, r2, #16
 8013f4e:	d401      	bmi.n	8013f54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8013f50:	4545      	cmp	r5, r8
 8013f52:	db07      	blt.n	8013f64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8013f54:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8013f56:	4428      	add	r0, r5
 8013f58:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013f5a:	3b01      	subs	r3, #1
 8013f5c:	442a      	add	r2, r5
 8013f5e:	3403      	adds	r4, #3
 8013f60:	e7ee      	b.n	8013f40 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8013f62:	d06f      	beq.n	8014044 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8013f64:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013f66:	1e5d      	subs	r5, r3, #1
 8013f68:	fb06 0605 	mla	r6, r6, r5, r0
 8013f6c:	1436      	asrs	r6, r6, #16
 8013f6e:	d460      	bmi.n	8014032 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8013f70:	4576      	cmp	r6, lr
 8013f72:	da5e      	bge.n	8014032 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8013f74:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013f76:	fb06 2505 	mla	r5, r6, r5, r2
 8013f7a:	142d      	asrs	r5, r5, #16
 8013f7c:	d459      	bmi.n	8014032 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8013f7e:	4545      	cmp	r5, r8
 8013f80:	da57      	bge.n	8014032 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8013f82:	1ce5      	adds	r5, r4, #3
 8013f84:	469a      	mov	sl, r3
 8013f86:	f1ba 0f00 	cmp.w	sl, #0
 8013f8a:	dd56      	ble.n	801403a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 8013f8c:	9901      	ldr	r1, [sp, #4]
 8013f8e:	1416      	asrs	r6, r2, #16
 8013f90:	1407      	asrs	r7, r0, #16
 8013f92:	fb0e 1606 	mla	r6, lr, r6, r1
 8013f96:	9902      	ldr	r1, [sp, #8]
 8013f98:	5df6      	ldrb	r6, [r6, r7]
 8013f9a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8013f9e:	0e37      	lsrs	r7, r6, #24
 8013fa0:	2fff      	cmp	r7, #255	; 0xff
 8013fa2:	f000 80ef 	beq.w	8014184 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8013fa6:	fa5f fc87 	uxtb.w	ip, r7
 8013faa:	b3d7      	cbz	r7, 8014022 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8013fac:	fa1f f78c 	uxth.w	r7, ip
 8013fb0:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8013fb4:	fa5f fb86 	uxtb.w	fp, r6
 8013fb8:	ea6f 0c0c 	mvn.w	ip, ip
 8013fbc:	fa5f fc8c 	uxtb.w	ip, ip
 8013fc0:	fb1b fb07 	smulbb	fp, fp, r7
 8013fc4:	fb09 b90c 	mla	r9, r9, ip, fp
 8013fc8:	fa1f f989 	uxth.w	r9, r9
 8013fcc:	f109 0b01 	add.w	fp, r9, #1
 8013fd0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013fd4:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8013fd8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013fdc:	fb1b fb0c 	smulbb	fp, fp, ip
 8013fe0:	f805 9c03 	strb.w	r9, [r5, #-3]
 8013fe4:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8013fe8:	fb09 b907 	mla	r9, r9, r7, fp
 8013fec:	fa1f f989 	uxth.w	r9, r9
 8013ff0:	f109 0b01 	add.w	fp, r9, #1
 8013ff4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013ff8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013ffc:	f805 9c02 	strb.w	r9, [r5, #-2]
 8014000:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8014004:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014008:	fb19 fc0c 	smulbb	ip, r9, ip
 801400c:	fb06 c607 	mla	r6, r6, r7, ip
 8014010:	b2b6      	uxth	r6, r6
 8014012:	f106 0c01 	add.w	ip, r6, #1
 8014016:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801401a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801401e:	f805 cc01 	strb.w	ip, [r5, #-1]
 8014022:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014024:	4408      	add	r0, r1
 8014026:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014028:	3503      	adds	r5, #3
 801402a:	440a      	add	r2, r1
 801402c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014030:	e7a9      	b.n	8013f86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8014032:	2600      	movs	r6, #0
 8014034:	1b9d      	subs	r5, r3, r6
 8014036:	2d00      	cmp	r5, #0
 8014038:	dc40      	bgt.n	80140bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801403a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801403e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014042:	441c      	add	r4, r3
 8014044:	9b00      	ldr	r3, [sp, #0]
 8014046:	2b00      	cmp	r3, #0
 8014048:	f340 80a5 	ble.w	8014196 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801404c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014050:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014054:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801405a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801405e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014062:	eeb0 6a62 	vmov.f32	s12, s5
 8014066:	ee61 7a27 	vmul.f32	s15, s2, s15
 801406a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801406e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014072:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014076:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801407a:	eeb0 6a43 	vmov.f32	s12, s6
 801407e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014082:	ee12 2a90 	vmov	r2, s5
 8014086:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801408a:	fb92 f3f3 	sdiv	r3, r2, r3
 801408e:	ee13 2a10 	vmov	r2, s6
 8014092:	9311      	str	r3, [sp, #68]	; 0x44
 8014094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014096:	fb92 f3f3 	sdiv	r3, r2, r3
 801409a:	9312      	str	r3, [sp, #72]	; 0x48
 801409c:	9b00      	ldr	r3, [sp, #0]
 801409e:	9a03      	ldr	r2, [sp, #12]
 80140a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80140a4:	3b01      	subs	r3, #1
 80140a6:	9300      	str	r3, [sp, #0]
 80140a8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80140ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140ae:	eeb0 3a67 	vmov.f32	s6, s15
 80140b2:	bf08      	it	eq
 80140b4:	4613      	moveq	r3, r2
 80140b6:	eef0 2a47 	vmov.f32	s5, s14
 80140ba:	e734      	b.n	8013f26 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 80140bc:	1407      	asrs	r7, r0, #16
 80140be:	d450      	bmi.n	8014162 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 80140c0:	4577      	cmp	r7, lr
 80140c2:	da4e      	bge.n	8014162 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 80140c4:	1415      	asrs	r5, r2, #16
 80140c6:	d44c      	bmi.n	8014162 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 80140c8:	4545      	cmp	r5, r8
 80140ca:	da4a      	bge.n	8014162 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 80140cc:	9901      	ldr	r1, [sp, #4]
 80140ce:	fb0e 1505 	mla	r5, lr, r5, r1
 80140d2:	9902      	ldr	r1, [sp, #8]
 80140d4:	5ded      	ldrb	r5, [r5, r7]
 80140d6:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 80140da:	0e2f      	lsrs	r7, r5, #24
 80140dc:	2fff      	cmp	r7, #255	; 0xff
 80140de:	d046      	beq.n	801416e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 80140e0:	fa5f f987 	uxtb.w	r9, r7
 80140e4:	b3ef      	cbz	r7, 8014162 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 80140e6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80140ea:	fa1f fc89 	uxth.w	ip, r9
 80140ee:	f814 a007 	ldrb.w	sl, [r4, r7]
 80140f2:	fa5f fb85 	uxtb.w	fp, r5
 80140f6:	ea6f 0909 	mvn.w	r9, r9
 80140fa:	fa5f f989 	uxtb.w	r9, r9
 80140fe:	fb1b fb0c 	smulbb	fp, fp, ip
 8014102:	fb0a ba09 	mla	sl, sl, r9, fp
 8014106:	fa1f fa8a 	uxth.w	sl, sl
 801410a:	f10a 0b01 	add.w	fp, sl, #1
 801410e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014112:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014116:	f804 a007 	strb.w	sl, [r4, r7]
 801411a:	4427      	add	r7, r4
 801411c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014120:	f897 b001 	ldrb.w	fp, [r7, #1]
 8014124:	fb1b fb09 	smulbb	fp, fp, r9
 8014128:	fb0a ba0c 	mla	sl, sl, ip, fp
 801412c:	fa1f fa8a 	uxth.w	sl, sl
 8014130:	f10a 0b01 	add.w	fp, sl, #1
 8014134:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014138:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801413c:	f887 a001 	strb.w	sl, [r7, #1]
 8014140:	f897 a002 	ldrb.w	sl, [r7, #2]
 8014144:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8014148:	fb1a f909 	smulbb	r9, sl, r9
 801414c:	fb05 950c 	mla	r5, r5, ip, r9
 8014150:	b2ad      	uxth	r5, r5
 8014152:	f105 0901 	add.w	r9, r5, #1
 8014156:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801415a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801415e:	f887 9002 	strb.w	r9, [r7, #2]
 8014162:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014164:	4408      	add	r0, r1
 8014166:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014168:	3601      	adds	r6, #1
 801416a:	440a      	add	r2, r1
 801416c:	e762      	b.n	8014034 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801416e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014172:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8014176:	55e5      	strb	r5, [r4, r7]
 8014178:	4427      	add	r7, r4
 801417a:	0c2d      	lsrs	r5, r5, #16
 801417c:	f887 c001 	strb.w	ip, [r7, #1]
 8014180:	70bd      	strb	r5, [r7, #2]
 8014182:	e7ee      	b.n	8014162 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8014184:	0a37      	lsrs	r7, r6, #8
 8014186:	f805 6c03 	strb.w	r6, [r5, #-3]
 801418a:	0c36      	lsrs	r6, r6, #16
 801418c:	f805 7c02 	strb.w	r7, [r5, #-2]
 8014190:	f805 6c01 	strb.w	r6, [r5, #-1]
 8014194:	e745      	b.n	8014022 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8014196:	b005      	add	sp, #20
 8014198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801419c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801419c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80141a2:	9201      	str	r2, [sp, #4]
 80141a4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80141a8:	9200      	str	r2, [sp, #0]
 80141aa:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80141ae:	6870      	ldr	r0, [r6, #4]
 80141b0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80141b4:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 80141b8:	fb00 2404 	mla	r4, r0, r4, r2
 80141bc:	6832      	ldr	r2, [r6, #0]
 80141be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80141c2:	4414      	add	r4, r2
 80141c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80141c6:	fa1f fc85 	uxth.w	ip, r5
 80141ca:	f8d2 8000 	ldr.w	r8, [r2]
 80141ce:	43ed      	mvns	r5, r5
 80141d0:	b2ed      	uxtb	r5, r5
 80141d2:	2900      	cmp	r1, #0
 80141d4:	dc03      	bgt.n	80141de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 80141d6:	9a01      	ldr	r2, [sp, #4]
 80141d8:	2a00      	cmp	r2, #0
 80141da:	f340 8104 	ble.w	80143e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 80141de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80141e0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80141e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80141e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	dd0f      	ble.n	801420e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80141ee:	1406      	asrs	r6, r0, #16
 80141f0:	d406      	bmi.n	8014200 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80141f2:	4576      	cmp	r6, lr
 80141f4:	da04      	bge.n	8014200 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80141f6:	1416      	asrs	r6, r2, #16
 80141f8:	d402      	bmi.n	8014200 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80141fa:	9f00      	ldr	r7, [sp, #0]
 80141fc:	42be      	cmp	r6, r7
 80141fe:	db07      	blt.n	8014210 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8014200:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014202:	4430      	add	r0, r6
 8014204:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014206:	3b01      	subs	r3, #1
 8014208:	4432      	add	r2, r6
 801420a:	3403      	adds	r4, #3
 801420c:	e7ed      	b.n	80141ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801420e:	d05f      	beq.n	80142d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 8014210:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014212:	1e5e      	subs	r6, r3, #1
 8014214:	fb07 0706 	mla	r7, r7, r6, r0
 8014218:	143f      	asrs	r7, r7, #16
 801421a:	d450      	bmi.n	80142be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801421c:	4577      	cmp	r7, lr
 801421e:	da4e      	bge.n	80142be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8014220:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014222:	fb07 2606 	mla	r6, r7, r6, r2
 8014226:	1436      	asrs	r6, r6, #16
 8014228:	d449      	bmi.n	80142be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801422a:	9f00      	ldr	r7, [sp, #0]
 801422c:	42be      	cmp	r6, r7
 801422e:	da46      	bge.n	80142be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8014230:	1ce6      	adds	r6, r4, #3
 8014232:	4699      	mov	r9, r3
 8014234:	f1b9 0f00 	cmp.w	r9, #0
 8014238:	f106 0603 	add.w	r6, r6, #3
 801423c:	dd43      	ble.n	80142c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801423e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014242:	1417      	asrs	r7, r2, #16
 8014244:	fb0e a707 	mla	r7, lr, r7, sl
 8014248:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801424c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8014250:	eb08 0a07 	add.w	sl, r8, r7
 8014254:	f818 7007 	ldrb.w	r7, [r8, r7]
 8014258:	fb1b fb05 	smulbb	fp, fp, r5
 801425c:	fb07 b70c 	mla	r7, r7, ip, fp
 8014260:	b2bf      	uxth	r7, r7
 8014262:	f107 0b01 	add.w	fp, r7, #1
 8014266:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801426a:	123f      	asrs	r7, r7, #8
 801426c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8014270:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8014274:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8014278:	fb1b fb05 	smulbb	fp, fp, r5
 801427c:	fb07 b70c 	mla	r7, r7, ip, fp
 8014280:	b2bf      	uxth	r7, r7
 8014282:	f107 0b01 	add.w	fp, r7, #1
 8014286:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801428a:	123f      	asrs	r7, r7, #8
 801428c:	f806 7c05 	strb.w	r7, [r6, #-5]
 8014290:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8014294:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8014298:	fb1a fa05 	smulbb	sl, sl, r5
 801429c:	fb07 a70c 	mla	r7, r7, ip, sl
 80142a0:	b2bf      	uxth	r7, r7
 80142a2:	f107 0a01 	add.w	sl, r7, #1
 80142a6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80142aa:	123f      	asrs	r7, r7, #8
 80142ac:	f806 7c04 	strb.w	r7, [r6, #-4]
 80142b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80142b2:	4438      	add	r0, r7
 80142b4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80142b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80142ba:	443a      	add	r2, r7
 80142bc:	e7ba      	b.n	8014234 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80142be:	2700      	movs	r7, #0
 80142c0:	1bde      	subs	r6, r3, r7
 80142c2:	2e00      	cmp	r6, #0
 80142c4:	dc3f      	bgt.n	8014346 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 80142c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80142ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80142ce:	441c      	add	r4, r3
 80142d0:	2900      	cmp	r1, #0
 80142d2:	f340 8088 	ble.w	80143e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 80142d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80142da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80142de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80142e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142e4:	3901      	subs	r1, #1
 80142e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80142ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80142ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80142f2:	eef0 6a62 	vmov.f32	s13, s5
 80142f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80142fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80142fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014302:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014306:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801430a:	eef0 6a43 	vmov.f32	s13, s6
 801430e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014312:	ee12 2a90 	vmov	r2, s5
 8014316:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801431a:	fb92 f3f3 	sdiv	r3, r2, r3
 801431e:	ee13 2a10 	vmov	r2, s6
 8014322:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014326:	930f      	str	r3, [sp, #60]	; 0x3c
 8014328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801432a:	fb92 f3f3 	sdiv	r3, r2, r3
 801432e:	9a01      	ldr	r2, [sp, #4]
 8014330:	9310      	str	r3, [sp, #64]	; 0x40
 8014332:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8014336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014338:	eeb0 3a67 	vmov.f32	s6, s15
 801433c:	bf08      	it	eq
 801433e:	4613      	moveq	r3, r2
 8014340:	eef0 2a47 	vmov.f32	s5, s14
 8014344:	e745      	b.n	80141d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8014346:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801434a:	d446      	bmi.n	80143da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801434c:	45f2      	cmp	sl, lr
 801434e:	da44      	bge.n	80143da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8014350:	ea5f 4922 	movs.w	r9, r2, asr #16
 8014354:	d441      	bmi.n	80143da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8014356:	9e00      	ldr	r6, [sp, #0]
 8014358:	45b1      	cmp	r9, r6
 801435a:	da3e      	bge.n	80143da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801435c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8014360:	fb0e a909 	mla	r9, lr, r9, sl
 8014364:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014368:	f814 b006 	ldrb.w	fp, [r4, r6]
 801436c:	eb08 0a09 	add.w	sl, r8, r9
 8014370:	f818 9009 	ldrb.w	r9, [r8, r9]
 8014374:	fb1b fb05 	smulbb	fp, fp, r5
 8014378:	fb09 b90c 	mla	r9, r9, ip, fp
 801437c:	fa1f f989 	uxth.w	r9, r9
 8014380:	f109 0b01 	add.w	fp, r9, #1
 8014384:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014388:	ea4f 2929 	mov.w	r9, r9, asr #8
 801438c:	f804 9006 	strb.w	r9, [r4, r6]
 8014390:	4426      	add	r6, r4
 8014392:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8014396:	f896 b001 	ldrb.w	fp, [r6, #1]
 801439a:	fb1b fb05 	smulbb	fp, fp, r5
 801439e:	fb09 b90c 	mla	r9, r9, ip, fp
 80143a2:	fa1f f989 	uxth.w	r9, r9
 80143a6:	f109 0b01 	add.w	fp, r9, #1
 80143aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80143ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 80143b2:	f886 9001 	strb.w	r9, [r6, #1]
 80143b6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80143ba:	f896 a002 	ldrb.w	sl, [r6, #2]
 80143be:	fb1a fa05 	smulbb	sl, sl, r5
 80143c2:	fb09 a90c 	mla	r9, r9, ip, sl
 80143c6:	fa1f f989 	uxth.w	r9, r9
 80143ca:	f109 0a01 	add.w	sl, r9, #1
 80143ce:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80143d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80143d6:	f886 9002 	strb.w	r9, [r6, #2]
 80143da:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80143dc:	4430      	add	r0, r6
 80143de:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80143e0:	3701      	adds	r7, #1
 80143e2:	4432      	add	r2, r6
 80143e4:	e76c      	b.n	80142c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 80143e6:	b003      	add	sp, #12
 80143e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080143ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80143ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80143f2:	9201      	str	r2, [sp, #4]
 80143f4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80143f8:	6868      	ldr	r0, [r5, #4]
 80143fa:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 80143fe:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8014402:	fb00 2404 	mla	r4, r0, r4, r2
 8014406:	682a      	ldr	r2, [r5, #0]
 8014408:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801440c:	4414      	add	r4, r2
 801440e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014410:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8014414:	f8d2 9000 	ldr.w	r9, [r2]
 8014418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801441c:	2900      	cmp	r1, #0
 801441e:	dc03      	bgt.n	8014428 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8014420:	9a01      	ldr	r2, [sp, #4]
 8014422:	2a00      	cmp	r2, #0
 8014424:	f340 80a8 	ble.w	8014578 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8014428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801442a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801442e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014430:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014434:	2b00      	cmp	r3, #0
 8014436:	dd0c      	ble.n	8014452 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8014438:	1405      	asrs	r5, r0, #16
 801443a:	d405      	bmi.n	8014448 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801443c:	4565      	cmp	r5, ip
 801443e:	da03      	bge.n	8014448 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8014440:	1415      	asrs	r5, r2, #16
 8014442:	d401      	bmi.n	8014448 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8014444:	4575      	cmp	r5, lr
 8014446:	db05      	blt.n	8014454 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8014448:	4438      	add	r0, r7
 801444a:	4432      	add	r2, r6
 801444c:	3b01      	subs	r3, #1
 801444e:	3403      	adds	r4, #3
 8014450:	e7f0      	b.n	8014434 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8014452:	d03a      	beq.n	80144ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8014454:	1e5d      	subs	r5, r3, #1
 8014456:	fb07 0805 	mla	r8, r7, r5, r0
 801445a:	ea5f 4828 	movs.w	r8, r8, asr #16
 801445e:	d429      	bmi.n	80144b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8014460:	45e0      	cmp	r8, ip
 8014462:	da27      	bge.n	80144b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8014464:	fb06 2505 	mla	r5, r6, r5, r2
 8014468:	142d      	asrs	r5, r5, #16
 801446a:	d423      	bmi.n	80144b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801446c:	4575      	cmp	r5, lr
 801446e:	da21      	bge.n	80144b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8014470:	f104 0803 	add.w	r8, r4, #3
 8014474:	469a      	mov	sl, r3
 8014476:	f1ba 0f00 	cmp.w	sl, #0
 801447a:	f108 0803 	add.w	r8, r8, #3
 801447e:	dd1f      	ble.n	80144c0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8014480:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8014484:	1415      	asrs	r5, r2, #16
 8014486:	fb0c b505 	mla	r5, ip, r5, fp
 801448a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801448e:	eb09 0b05 	add.w	fp, r9, r5
 8014492:	f819 5005 	ldrb.w	r5, [r9, r5]
 8014496:	f808 5c06 	strb.w	r5, [r8, #-6]
 801449a:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801449e:	f808 5c05 	strb.w	r5, [r8, #-5]
 80144a2:	f89b 5002 	ldrb.w	r5, [fp, #2]
 80144a6:	f808 5c04 	strb.w	r5, [r8, #-4]
 80144aa:	4438      	add	r0, r7
 80144ac:	4432      	add	r2, r6
 80144ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144b2:	e7e0      	b.n	8014476 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80144b4:	2500      	movs	r5, #0
 80144b6:	eba3 0805 	sub.w	r8, r3, r5
 80144ba:	f1b8 0f00 	cmp.w	r8, #0
 80144be:	dc38      	bgt.n	8014532 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 80144c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80144c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80144c8:	441c      	add	r4, r3
 80144ca:	2900      	cmp	r1, #0
 80144cc:	dd54      	ble.n	8014578 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80144ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80144d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80144d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80144da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144dc:	3901      	subs	r1, #1
 80144de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80144e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80144e6:	eeb0 6a62 	vmov.f32	s12, s5
 80144ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80144ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80144f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80144f6:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80144fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80144fe:	eeb0 6a43 	vmov.f32	s12, s6
 8014502:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014506:	ee12 2a90 	vmov	r2, s5
 801450a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801450e:	fb92 f7f3 	sdiv	r7, r2, r3
 8014512:	ee13 2a10 	vmov	r2, s6
 8014516:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801451a:	fb92 f6f3 	sdiv	r6, r2, r3
 801451e:	9a01      	ldr	r2, [sp, #4]
 8014520:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014524:	bf08      	it	eq
 8014526:	4613      	moveq	r3, r2
 8014528:	eeb0 3a67 	vmov.f32	s6, s15
 801452c:	eef0 2a47 	vmov.f32	s5, s14
 8014530:	e774      	b.n	801441c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8014532:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8014536:	d41b      	bmi.n	8014570 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8014538:	45e2      	cmp	sl, ip
 801453a:	da19      	bge.n	8014570 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801453c:	ea5f 4822 	movs.w	r8, r2, asr #16
 8014540:	d416      	bmi.n	8014570 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8014542:	45f0      	cmp	r8, lr
 8014544:	da14      	bge.n	8014570 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8014546:	fb0c a808 	mla	r8, ip, r8, sl
 801454a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801454e:	eb09 0a08 	add.w	sl, r9, r8
 8014552:	f819 b008 	ldrb.w	fp, [r9, r8]
 8014556:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801455a:	f804 b008 	strb.w	fp, [r4, r8]
 801455e:	44a0      	add	r8, r4
 8014560:	f89a b001 	ldrb.w	fp, [sl, #1]
 8014564:	f888 b001 	strb.w	fp, [r8, #1]
 8014568:	f89a a002 	ldrb.w	sl, [sl, #2]
 801456c:	f888 a002 	strb.w	sl, [r8, #2]
 8014570:	4438      	add	r0, r7
 8014572:	4432      	add	r2, r6
 8014574:	3501      	adds	r5, #1
 8014576:	e79e      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8014578:	b003      	add	sp, #12
 801457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801457e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801457e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014582:	b085      	sub	sp, #20
 8014584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014588:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801458a:	9202      	str	r2, [sp, #8]
 801458c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014590:	9203      	str	r2, [sp, #12]
 8014592:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8014596:	6860      	ldr	r0, [r4, #4]
 8014598:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801459c:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 80145a0:	fb00 2505 	mla	r5, r0, r5, r2
 80145a4:	6822      	ldr	r2, [r4, #0]
 80145a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80145aa:	4415      	add	r5, r2
 80145ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80145ae:	6812      	ldr	r2, [r2, #0]
 80145b0:	9201      	str	r2, [sp, #4]
 80145b2:	2900      	cmp	r1, #0
 80145b4:	dc03      	bgt.n	80145be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 80145b6:	9a02      	ldr	r2, [sp, #8]
 80145b8:	2a00      	cmp	r2, #0
 80145ba:	f340 811c 	ble.w	80147f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80145be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145c0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80145c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80145c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	dd0e      	ble.n	80145ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80145ce:	1422      	asrs	r2, r4, #16
 80145d0:	d405      	bmi.n	80145de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80145d2:	4572      	cmp	r2, lr
 80145d4:	da03      	bge.n	80145de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80145d6:	1402      	asrs	r2, r0, #16
 80145d8:	d401      	bmi.n	80145de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80145da:	4542      	cmp	r2, r8
 80145dc:	db07      	blt.n	80145ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80145de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80145e0:	4414      	add	r4, r2
 80145e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80145e4:	3b01      	subs	r3, #1
 80145e6:	4410      	add	r0, r2
 80145e8:	3503      	adds	r5, #3
 80145ea:	e7ee      	b.n	80145ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 80145ec:	d072      	beq.n	80146d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 80145ee:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80145f0:	1e5a      	subs	r2, r3, #1
 80145f2:	fb06 4602 	mla	r6, r6, r2, r4
 80145f6:	1436      	asrs	r6, r6, #16
 80145f8:	d461      	bmi.n	80146be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80145fa:	4576      	cmp	r6, lr
 80145fc:	da5f      	bge.n	80146be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80145fe:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014600:	fb06 0202 	mla	r2, r6, r2, r0
 8014604:	1412      	asrs	r2, r2, #16
 8014606:	d45a      	bmi.n	80146be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8014608:	4542      	cmp	r2, r8
 801460a:	da58      	bge.n	80146be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801460c:	1cef      	adds	r7, r5, #3
 801460e:	4699      	mov	r9, r3
 8014610:	f1b9 0f00 	cmp.w	r9, #0
 8014614:	dd59      	ble.n	80146ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8014616:	1426      	asrs	r6, r4, #16
 8014618:	1402      	asrs	r2, r0, #16
 801461a:	fb0e 6202 	mla	r2, lr, r2, r6
 801461e:	9e01      	ldr	r6, [sp, #4]
 8014620:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8014624:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8014628:	d041      	beq.n	80146ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801462a:	9a03      	ldr	r2, [sp, #12]
 801462c:	fb02 fc0c 	mul.w	ip, r2, ip
 8014630:	f10c 0201 	add.w	r2, ip, #1
 8014634:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8014638:	1212      	asrs	r2, r2, #8
 801463a:	fa1f fa82 	uxth.w	sl, r2
 801463e:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8014642:	fa5f fb86 	uxtb.w	fp, r6
 8014646:	43d2      	mvns	r2, r2
 8014648:	b2d2      	uxtb	r2, r2
 801464a:	fb1b fb0a 	smulbb	fp, fp, sl
 801464e:	fb0c bc02 	mla	ip, ip, r2, fp
 8014652:	fa1f fc8c 	uxth.w	ip, ip
 8014656:	f10c 0b01 	add.w	fp, ip, #1
 801465a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801465e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014662:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014666:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801466a:	fb1b fb0a 	smulbb	fp, fp, sl
 801466e:	f807 cc03 	strb.w	ip, [r7, #-3]
 8014672:	fb16 fa0a 	smulbb	sl, r6, sl
 8014676:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801467a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801467e:	fb0c bc02 	mla	ip, ip, r2, fp
 8014682:	fb06 aa02 	mla	sl, r6, r2, sl
 8014686:	fa1f fc8c 	uxth.w	ip, ip
 801468a:	fa1f fa8a 	uxth.w	sl, sl
 801468e:	f10c 0b01 	add.w	fp, ip, #1
 8014692:	f10a 0601 	add.w	r6, sl, #1
 8014696:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801469a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801469e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80146a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80146a6:	f807 cc02 	strb.w	ip, [r7, #-2]
 80146aa:	f807 ac01 	strb.w	sl, [r7, #-1]
 80146ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80146b0:	4414      	add	r4, r2
 80146b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80146b4:	3703      	adds	r7, #3
 80146b6:	4410      	add	r0, r2
 80146b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80146bc:	e7a8      	b.n	8014610 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80146be:	f04f 0c00 	mov.w	ip, #0
 80146c2:	eba3 020c 	sub.w	r2, r3, ip
 80146c6:	2a00      	cmp	r2, #0
 80146c8:	dc3d      	bgt.n	8014746 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 80146ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80146ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80146d2:	441d      	add	r5, r3
 80146d4:	2900      	cmp	r1, #0
 80146d6:	f340 808e 	ble.w	80147f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80146da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80146de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80146e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80146e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146e8:	3901      	subs	r1, #1
 80146ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80146ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80146f2:	eeb0 6a62 	vmov.f32	s12, s5
 80146f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80146fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80146fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014702:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014706:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801470a:	eeb0 6a43 	vmov.f32	s12, s6
 801470e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014712:	ee12 2a90 	vmov	r2, s5
 8014716:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801471a:	fb92 f3f3 	sdiv	r3, r2, r3
 801471e:	ee13 2a10 	vmov	r2, s6
 8014722:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014726:	9311      	str	r3, [sp, #68]	; 0x44
 8014728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801472a:	fb92 f3f3 	sdiv	r3, r2, r3
 801472e:	9a02      	ldr	r2, [sp, #8]
 8014730:	9312      	str	r3, [sp, #72]	; 0x48
 8014732:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014738:	eeb0 3a67 	vmov.f32	s6, s15
 801473c:	bf08      	it	eq
 801473e:	4613      	moveq	r3, r2
 8014740:	eef0 2a47 	vmov.f32	s5, s14
 8014744:	e735      	b.n	80145b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 8014746:	1426      	asrs	r6, r4, #16
 8014748:	d44e      	bmi.n	80147e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801474a:	4576      	cmp	r6, lr
 801474c:	da4c      	bge.n	80147e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801474e:	1402      	asrs	r2, r0, #16
 8014750:	d44a      	bmi.n	80147e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8014752:	4542      	cmp	r2, r8
 8014754:	da48      	bge.n	80147e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8014756:	fb0e 6202 	mla	r2, lr, r2, r6
 801475a:	9e01      	ldr	r6, [sp, #4]
 801475c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8014760:	0e3a      	lsrs	r2, r7, #24
 8014762:	d041      	beq.n	80147e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8014764:	9e03      	ldr	r6, [sp, #12]
 8014766:	4372      	muls	r2, r6
 8014768:	1c56      	adds	r6, r2, #1
 801476a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801476e:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8014772:	1212      	asrs	r2, r2, #8
 8014774:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014778:	fa1f fa82 	uxth.w	sl, r2
 801477c:	fa5f fb87 	uxtb.w	fp, r7
 8014780:	43d2      	mvns	r2, r2
 8014782:	b2d2      	uxtb	r2, r2
 8014784:	fb1b fb0a 	smulbb	fp, fp, sl
 8014788:	fb09 b902 	mla	r9, r9, r2, fp
 801478c:	fa1f f989 	uxth.w	r9, r9
 8014790:	f109 0b01 	add.w	fp, r9, #1
 8014794:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014798:	ea4f 2929 	mov.w	r9, r9, asr #8
 801479c:	f805 9006 	strb.w	r9, [r5, r6]
 80147a0:	442e      	add	r6, r5
 80147a2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80147a6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80147aa:	fb1b fb0a 	smulbb	fp, fp, sl
 80147ae:	f896 9001 	ldrb.w	r9, [r6, #1]
 80147b2:	fb17 fa0a 	smulbb	sl, r7, sl
 80147b6:	78b7      	ldrb	r7, [r6, #2]
 80147b8:	fb09 b902 	mla	r9, r9, r2, fp
 80147bc:	fb07 aa02 	mla	sl, r7, r2, sl
 80147c0:	fa1f f989 	uxth.w	r9, r9
 80147c4:	fa1f fa8a 	uxth.w	sl, sl
 80147c8:	f109 0b01 	add.w	fp, r9, #1
 80147cc:	f10a 0701 	add.w	r7, sl, #1
 80147d0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80147d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80147d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80147dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80147e0:	f886 9001 	strb.w	r9, [r6, #1]
 80147e4:	f886 a002 	strb.w	sl, [r6, #2]
 80147e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80147ea:	4414      	add	r4, r2
 80147ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80147ee:	f10c 0c01 	add.w	ip, ip, #1
 80147f2:	4410      	add	r0, r2
 80147f4:	e765      	b.n	80146c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 80147f6:	b005      	add	sp, #20
 80147f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080147fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80147fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014800:	b085      	sub	sp, #20
 8014802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014806:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014808:	9203      	str	r2, [sp, #12]
 801480a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801480e:	9201      	str	r2, [sp, #4]
 8014810:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8014814:	6860      	ldr	r0, [r4, #4]
 8014816:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801481a:	fb00 2505 	mla	r5, r0, r5, r2
 801481e:	6822      	ldr	r2, [r4, #0]
 8014820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014824:	4415      	add	r5, r2
 8014826:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014828:	6812      	ldr	r2, [r2, #0]
 801482a:	9202      	str	r2, [sp, #8]
 801482c:	2900      	cmp	r1, #0
 801482e:	dc03      	bgt.n	8014838 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8014830:	9a03      	ldr	r2, [sp, #12]
 8014832:	2a00      	cmp	r2, #0
 8014834:	f340 8122 	ble.w	8014a7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 8014838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801483a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801483e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014840:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014844:	2b00      	cmp	r3, #0
 8014846:	dd0f      	ble.n	8014868 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8014848:	1422      	asrs	r2, r4, #16
 801484a:	d406      	bmi.n	801485a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801484c:	4572      	cmp	r2, lr
 801484e:	da04      	bge.n	801485a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8014850:	1402      	asrs	r2, r0, #16
 8014852:	d402      	bmi.n	801485a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8014854:	9e01      	ldr	r6, [sp, #4]
 8014856:	42b2      	cmp	r2, r6
 8014858:	db07      	blt.n	801486a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801485a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801485c:	4414      	add	r4, r2
 801485e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014860:	3b01      	subs	r3, #1
 8014862:	4410      	add	r0, r2
 8014864:	3503      	adds	r5, #3
 8014866:	e7ed      	b.n	8014844 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8014868:	d06e      	beq.n	8014948 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801486a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801486c:	1e5a      	subs	r2, r3, #1
 801486e:	fb06 4602 	mla	r6, r6, r2, r4
 8014872:	1436      	asrs	r6, r6, #16
 8014874:	d45d      	bmi.n	8014932 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8014876:	4576      	cmp	r6, lr
 8014878:	da5b      	bge.n	8014932 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801487a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801487c:	fb06 0202 	mla	r2, r6, r2, r0
 8014880:	1412      	asrs	r2, r2, #16
 8014882:	d456      	bmi.n	8014932 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8014884:	9e01      	ldr	r6, [sp, #4]
 8014886:	42b2      	cmp	r2, r6
 8014888:	da53      	bge.n	8014932 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801488a:	1cee      	adds	r6, r5, #3
 801488c:	469a      	mov	sl, r3
 801488e:	f1ba 0f00 	cmp.w	sl, #0
 8014892:	dd54      	ble.n	801493e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8014894:	1427      	asrs	r7, r4, #16
 8014896:	1402      	asrs	r2, r0, #16
 8014898:	fb0e 7202 	mla	r2, lr, r2, r7
 801489c:	9f02      	ldr	r7, [sp, #8]
 801489e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80148a2:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 80148a6:	d03c      	beq.n	8014922 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 80148a8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80148ac:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80148b0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80148b4:	fa5f f28c 	uxtb.w	r2, ip
 80148b8:	b2ff      	uxtb	r7, r7
 80148ba:	f000 80d8 	beq.w	8014a6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 80148be:	fa1f f882 	uxth.w	r8, r2
 80148c2:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 80148c6:	43d2      	mvns	r2, r2
 80148c8:	b2d2      	uxtb	r2, r2
 80148ca:	fb17 f708 	smulbb	r7, r7, r8
 80148ce:	fb0c 7702 	mla	r7, ip, r2, r7
 80148d2:	b2bf      	uxth	r7, r7
 80148d4:	f107 0c01 	add.w	ip, r7, #1
 80148d8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80148dc:	123f      	asrs	r7, r7, #8
 80148de:	f806 7c03 	strb.w	r7, [r6, #-3]
 80148e2:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80148e6:	fb19 f908 	smulbb	r9, r9, r8
 80148ea:	fb07 9902 	mla	r9, r7, r2, r9
 80148ee:	fa1f f989 	uxth.w	r9, r9
 80148f2:	f109 0701 	add.w	r7, r9, #1
 80148f6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80148fa:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80148fe:	fb1b f808 	smulbb	r8, fp, r8
 8014902:	fb07 8802 	mla	r8, r7, r2, r8
 8014906:	fa1f f888 	uxth.w	r8, r8
 801490a:	f108 0201 	add.w	r2, r8, #1
 801490e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8014912:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014916:	ea4f 2828 	mov.w	r8, r8, asr #8
 801491a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801491e:	f806 8c01 	strb.w	r8, [r6, #-1]
 8014922:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014924:	4414      	add	r4, r2
 8014926:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014928:	3603      	adds	r6, #3
 801492a:	4410      	add	r0, r2
 801492c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014930:	e7ad      	b.n	801488e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8014932:	f04f 0c00 	mov.w	ip, #0
 8014936:	eba3 020c 	sub.w	r2, r3, ip
 801493a:	2a00      	cmp	r2, #0
 801493c:	dc3d      	bgt.n	80149ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801493e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014942:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014946:	441d      	add	r5, r3
 8014948:	2900      	cmp	r1, #0
 801494a:	f340 8097 	ble.w	8014a7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801494e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014952:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014956:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801495a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801495c:	3901      	subs	r1, #1
 801495e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014962:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014966:	eeb0 6a62 	vmov.f32	s12, s5
 801496a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801496e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014972:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014976:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801497a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801497e:	eeb0 6a43 	vmov.f32	s12, s6
 8014982:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014986:	ee12 2a90 	vmov	r2, s5
 801498a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801498e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014992:	ee13 2a10 	vmov	r2, s6
 8014996:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801499a:	9311      	str	r3, [sp, #68]	; 0x44
 801499c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801499e:	fb92 f3f3 	sdiv	r3, r2, r3
 80149a2:	9a03      	ldr	r2, [sp, #12]
 80149a4:	9312      	str	r3, [sp, #72]	; 0x48
 80149a6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80149aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149ac:	eeb0 3a67 	vmov.f32	s6, s15
 80149b0:	bf08      	it	eq
 80149b2:	4613      	moveq	r3, r2
 80149b4:	eef0 2a47 	vmov.f32	s5, s14
 80149b8:	e738      	b.n	801482c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 80149ba:	1426      	asrs	r6, r4, #16
 80149bc:	d448      	bmi.n	8014a50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80149be:	4576      	cmp	r6, lr
 80149c0:	da46      	bge.n	8014a50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80149c2:	1402      	asrs	r2, r0, #16
 80149c4:	d444      	bmi.n	8014a50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80149c6:	9f01      	ldr	r7, [sp, #4]
 80149c8:	42ba      	cmp	r2, r7
 80149ca:	da41      	bge.n	8014a50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80149cc:	fb0e 6202 	mla	r2, lr, r2, r6
 80149d0:	9e02      	ldr	r6, [sp, #8]
 80149d2:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80149d6:	0e3a      	lsrs	r2, r7, #24
 80149d8:	d03a      	beq.n	8014a50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80149da:	2aff      	cmp	r2, #255	; 0xff
 80149dc:	b2d6      	uxtb	r6, r2
 80149de:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80149e2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80149e6:	ea4f 024c 	mov.w	r2, ip, lsl #1
 80149ea:	b2ff      	uxtb	r7, r7
 80149ec:	d037      	beq.n	8014a5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 80149ee:	4462      	add	r2, ip
 80149f0:	fa1f f986 	uxth.w	r9, r6
 80149f4:	f815 8002 	ldrb.w	r8, [r5, r2]
 80149f8:	43f6      	mvns	r6, r6
 80149fa:	b2f6      	uxtb	r6, r6
 80149fc:	fb17 f709 	smulbb	r7, r7, r9
 8014a00:	fb08 7706 	mla	r7, r8, r6, r7
 8014a04:	b2bf      	uxth	r7, r7
 8014a06:	f107 0801 	add.w	r8, r7, #1
 8014a0a:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8014a0e:	123f      	asrs	r7, r7, #8
 8014a10:	54af      	strb	r7, [r5, r2]
 8014a12:	442a      	add	r2, r5
 8014a14:	fb1a fa09 	smulbb	sl, sl, r9
 8014a18:	7857      	ldrb	r7, [r2, #1]
 8014a1a:	fb07 aa06 	mla	sl, r7, r6, sl
 8014a1e:	fa1f fa8a 	uxth.w	sl, sl
 8014a22:	f10a 0701 	add.w	r7, sl, #1
 8014a26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014a2a:	7897      	ldrb	r7, [r2, #2]
 8014a2c:	fb1b f909 	smulbb	r9, fp, r9
 8014a30:	fb07 9906 	mla	r9, r7, r6, r9
 8014a34:	fa1f f989 	uxth.w	r9, r9
 8014a38:	f109 0601 	add.w	r6, r9, #1
 8014a3c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8014a40:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014a44:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014a48:	f882 a001 	strb.w	sl, [r2, #1]
 8014a4c:	f882 9002 	strb.w	r9, [r2, #2]
 8014a50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a52:	4414      	add	r4, r2
 8014a54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a56:	f10c 0c01 	add.w	ip, ip, #1
 8014a5a:	4410      	add	r0, r2
 8014a5c:	e76b      	b.n	8014936 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 8014a5e:	4462      	add	r2, ip
 8014a60:	54af      	strb	r7, [r5, r2]
 8014a62:	442a      	add	r2, r5
 8014a64:	f882 a001 	strb.w	sl, [r2, #1]
 8014a68:	f882 b002 	strb.w	fp, [r2, #2]
 8014a6c:	e7f0      	b.n	8014a50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8014a6e:	f806 7c03 	strb.w	r7, [r6, #-3]
 8014a72:	f806 9c02 	strb.w	r9, [r6, #-2]
 8014a76:	f806 bc01 	strb.w	fp, [r6, #-1]
 8014a7a:	e752      	b.n	8014922 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 8014a7c:	b005      	add	sp, #20
 8014a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014a84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8014a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a88:	b087      	sub	sp, #28
 8014a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014a8e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014a90:	9204      	str	r2, [sp, #16]
 8014a92:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8014a96:	9205      	str	r2, [sp, #20]
 8014a98:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8014a9c:	6860      	ldr	r0, [r4, #4]
 8014a9e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8014aa2:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8014aa6:	9101      	str	r1, [sp, #4]
 8014aa8:	fb00 2505 	mla	r5, r0, r5, r2
 8014aac:	6822      	ldr	r2, [r4, #0]
 8014aae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ab2:	4415      	add	r5, r2
 8014ab4:	f10e 0201 	add.w	r2, lr, #1
 8014ab8:	f022 0201 	bic.w	r2, r2, #1
 8014abc:	9202      	str	r2, [sp, #8]
 8014abe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014ac0:	6812      	ldr	r2, [r2, #0]
 8014ac2:	9203      	str	r2, [sp, #12]
 8014ac4:	9a01      	ldr	r2, [sp, #4]
 8014ac6:	2a00      	cmp	r2, #0
 8014ac8:	dc03      	bgt.n	8014ad2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8014aca:	9a04      	ldr	r2, [sp, #16]
 8014acc:	2a00      	cmp	r2, #0
 8014ace:	f340 8132 	ble.w	8014d36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 8014ad2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014ad4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014ad8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ada:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	dd0e      	ble.n	8014b00 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8014ae2:	1422      	asrs	r2, r4, #16
 8014ae4:	d405      	bmi.n	8014af2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8014ae6:	4596      	cmp	lr, r2
 8014ae8:	dd03      	ble.n	8014af2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8014aea:	1402      	asrs	r2, r0, #16
 8014aec:	d401      	bmi.n	8014af2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8014aee:	4542      	cmp	r2, r8
 8014af0:	db07      	blt.n	8014b02 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8014af2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014af4:	4414      	add	r4, r2
 8014af6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014af8:	3b01      	subs	r3, #1
 8014afa:	4410      	add	r0, r2
 8014afc:	3503      	adds	r5, #3
 8014afe:	e7ee      	b.n	8014ade <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 8014b00:	d010      	beq.n	8014b24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8014b02:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014b04:	1e5a      	subs	r2, r3, #1
 8014b06:	fb06 4602 	mla	r6, r6, r2, r4
 8014b0a:	1436      	asrs	r6, r6, #16
 8014b0c:	d546      	bpl.n	8014b9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8014b0e:	4699      	mov	r9, r3
 8014b10:	462e      	mov	r6, r5
 8014b12:	f1b9 0f00 	cmp.w	r9, #0
 8014b16:	f300 80ac 	bgt.w	8014c72 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 8014b1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014b1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014b22:	441d      	add	r5, r3
 8014b24:	9b01      	ldr	r3, [sp, #4]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	f340 8105 	ble.w	8014d36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 8014b2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014b30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014b34:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014b38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014b3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014b42:	eeb0 6a62 	vmov.f32	s12, s5
 8014b46:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014b4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014b52:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014b56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014b5a:	eeb0 6a43 	vmov.f32	s12, s6
 8014b5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014b62:	ee12 2a90 	vmov	r2, s5
 8014b66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014b6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b6e:	ee13 2a10 	vmov	r2, s6
 8014b72:	9313      	str	r3, [sp, #76]	; 0x4c
 8014b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b7a:	9314      	str	r3, [sp, #80]	; 0x50
 8014b7c:	9b01      	ldr	r3, [sp, #4]
 8014b7e:	9a04      	ldr	r2, [sp, #16]
 8014b80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b84:	3b01      	subs	r3, #1
 8014b86:	9301      	str	r3, [sp, #4]
 8014b88:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b8e:	eeb0 3a67 	vmov.f32	s6, s15
 8014b92:	bf08      	it	eq
 8014b94:	4613      	moveq	r3, r2
 8014b96:	eef0 2a47 	vmov.f32	s5, s14
 8014b9a:	e793      	b.n	8014ac4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8014b9c:	45b6      	cmp	lr, r6
 8014b9e:	ddb6      	ble.n	8014b0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8014ba0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8014ba2:	fb06 0202 	mla	r2, r6, r2, r0
 8014ba6:	1412      	asrs	r2, r2, #16
 8014ba8:	d4b1      	bmi.n	8014b0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8014baa:	4542      	cmp	r2, r8
 8014bac:	daaf      	bge.n	8014b0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8014bae:	1cee      	adds	r6, r5, #3
 8014bb0:	4699      	mov	r9, r3
 8014bb2:	f1b9 0f00 	cmp.w	r9, #0
 8014bb6:	ddb0      	ble.n	8014b1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8014bb8:	9902      	ldr	r1, [sp, #8]
 8014bba:	1422      	asrs	r2, r4, #16
 8014bbc:	1407      	asrs	r7, r0, #16
 8014bbe:	fb01 2707 	mla	r7, r1, r7, r2
 8014bc2:	087a      	lsrs	r2, r7, #1
 8014bc4:	9903      	ldr	r1, [sp, #12]
 8014bc6:	5c8a      	ldrb	r2, [r1, r2]
 8014bc8:	07f9      	lsls	r1, r7, #31
 8014bca:	bf54      	ite	pl
 8014bcc:	f002 020f 	andpl.w	r2, r2, #15
 8014bd0:	1112      	asrmi	r2, r2, #4
 8014bd2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014bd6:	b2d2      	uxtb	r2, r2
 8014bd8:	2a00      	cmp	r2, #0
 8014bda:	d042      	beq.n	8014c62 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 8014bdc:	4957      	ldr	r1, [pc, #348]	; (8014d3c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8014bde:	680f      	ldr	r7, [r1, #0]
 8014be0:	9905      	ldr	r1, [sp, #20]
 8014be2:	434a      	muls	r2, r1
 8014be4:	f102 0c01 	add.w	ip, r2, #1
 8014be8:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8014bec:	1212      	asrs	r2, r2, #8
 8014bee:	fa1f fa82 	uxth.w	sl, r2
 8014bf2:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8014bf6:	fa5f fb87 	uxtb.w	fp, r7
 8014bfa:	43d2      	mvns	r2, r2
 8014bfc:	b2d2      	uxtb	r2, r2
 8014bfe:	fb1b fb0a 	smulbb	fp, fp, sl
 8014c02:	fb0c bc02 	mla	ip, ip, r2, fp
 8014c06:	fa1f fc8c 	uxth.w	ip, ip
 8014c0a:	f10c 0b01 	add.w	fp, ip, #1
 8014c0e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8014c12:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014c16:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014c1a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8014c1e:	fb1b fb0a 	smulbb	fp, fp, sl
 8014c22:	f806 cc03 	strb.w	ip, [r6, #-3]
 8014c26:	fb17 fa0a 	smulbb	sl, r7, sl
 8014c2a:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 8014c2e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8014c32:	fb0c bc02 	mla	ip, ip, r2, fp
 8014c36:	fb07 aa02 	mla	sl, r7, r2, sl
 8014c3a:	fa1f fc8c 	uxth.w	ip, ip
 8014c3e:	fa1f fa8a 	uxth.w	sl, sl
 8014c42:	f10c 0b01 	add.w	fp, ip, #1
 8014c46:	f10a 0701 	add.w	r7, sl, #1
 8014c4a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8014c4e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014c52:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014c56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014c5a:	f806 cc02 	strb.w	ip, [r6, #-2]
 8014c5e:	f806 ac01 	strb.w	sl, [r6, #-1]
 8014c62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014c64:	4414      	add	r4, r2
 8014c66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c68:	3603      	adds	r6, #3
 8014c6a:	4410      	add	r0, r2
 8014c6c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014c70:	e79f      	b.n	8014bb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 8014c72:	1422      	asrs	r2, r4, #16
 8014c74:	d457      	bmi.n	8014d26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8014c76:	4596      	cmp	lr, r2
 8014c78:	dd55      	ble.n	8014d26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8014c7a:	1407      	asrs	r7, r0, #16
 8014c7c:	d453      	bmi.n	8014d26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8014c7e:	4547      	cmp	r7, r8
 8014c80:	da51      	bge.n	8014d26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8014c82:	9902      	ldr	r1, [sp, #8]
 8014c84:	fb07 2701 	mla	r7, r7, r1, r2
 8014c88:	087a      	lsrs	r2, r7, #1
 8014c8a:	9903      	ldr	r1, [sp, #12]
 8014c8c:	5c8a      	ldrb	r2, [r1, r2]
 8014c8e:	07ff      	lsls	r7, r7, #31
 8014c90:	bf54      	ite	pl
 8014c92:	f002 020f 	andpl.w	r2, r2, #15
 8014c96:	1112      	asrmi	r2, r2, #4
 8014c98:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014c9c:	b2d2      	uxtb	r2, r2
 8014c9e:	2a00      	cmp	r2, #0
 8014ca0:	d041      	beq.n	8014d26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8014ca2:	4926      	ldr	r1, [pc, #152]	; (8014d3c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8014ca4:	680f      	ldr	r7, [r1, #0]
 8014ca6:	9905      	ldr	r1, [sp, #20]
 8014ca8:	434a      	muls	r2, r1
 8014caa:	f102 0c01 	add.w	ip, r2, #1
 8014cae:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8014cb2:	1212      	asrs	r2, r2, #8
 8014cb4:	fa1f fa82 	uxth.w	sl, r2
 8014cb8:	f896 c000 	ldrb.w	ip, [r6]
 8014cbc:	fa5f fb87 	uxtb.w	fp, r7
 8014cc0:	43d2      	mvns	r2, r2
 8014cc2:	b2d2      	uxtb	r2, r2
 8014cc4:	fb1b fb0a 	smulbb	fp, fp, sl
 8014cc8:	fb0c bc02 	mla	ip, ip, r2, fp
 8014ccc:	fa1f fc8c 	uxth.w	ip, ip
 8014cd0:	f10c 0b01 	add.w	fp, ip, #1
 8014cd4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8014cd8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014cdc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014ce0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8014ce4:	fb1b fb0a 	smulbb	fp, fp, sl
 8014ce8:	f886 c000 	strb.w	ip, [r6]
 8014cec:	fb17 fa0a 	smulbb	sl, r7, sl
 8014cf0:	f896 c001 	ldrb.w	ip, [r6, #1]
 8014cf4:	78b7      	ldrb	r7, [r6, #2]
 8014cf6:	fb0c bc02 	mla	ip, ip, r2, fp
 8014cfa:	fb07 aa02 	mla	sl, r7, r2, sl
 8014cfe:	fa1f fc8c 	uxth.w	ip, ip
 8014d02:	fa1f fa8a 	uxth.w	sl, sl
 8014d06:	f10c 0b01 	add.w	fp, ip, #1
 8014d0a:	f10a 0701 	add.w	r7, sl, #1
 8014d0e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8014d12:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014d16:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014d1a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014d1e:	f886 c001 	strb.w	ip, [r6, #1]
 8014d22:	f886 a002 	strb.w	sl, [r6, #2]
 8014d26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d28:	4414      	add	r4, r2
 8014d2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014d2c:	3603      	adds	r6, #3
 8014d2e:	4410      	add	r0, r2
 8014d30:	f109 39ff 	add.w	r9, r9, #4294967295
 8014d34:	e6ed      	b.n	8014b12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8014d36:	b007      	add	sp, #28
 8014d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d3c:	20005f2c 	.word	0x20005f2c

08014d40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8014d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d44:	b087      	sub	sp, #28
 8014d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014d4a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d4c:	9205      	str	r2, [sp, #20]
 8014d4e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8014d52:	9202      	str	r2, [sp, #8]
 8014d54:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 8014d58:	6860      	ldr	r0, [r4, #4]
 8014d5a:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8014d5e:	9101      	str	r1, [sp, #4]
 8014d60:	fb00 2606 	mla	r6, r0, r6, r2
 8014d64:	6822      	ldr	r2, [r4, #0]
 8014d66:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014d6a:	4416      	add	r6, r2
 8014d6c:	f108 0201 	add.w	r2, r8, #1
 8014d70:	f022 0201 	bic.w	r2, r2, #1
 8014d74:	9203      	str	r2, [sp, #12]
 8014d76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014d78:	6812      	ldr	r2, [r2, #0]
 8014d7a:	9204      	str	r2, [sp, #16]
 8014d7c:	9a01      	ldr	r2, [sp, #4]
 8014d7e:	2a00      	cmp	r2, #0
 8014d80:	dc03      	bgt.n	8014d8a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8014d82:	9a05      	ldr	r2, [sp, #20]
 8014d84:	2a00      	cmp	r2, #0
 8014d86:	f340 813a 	ble.w	8014ffe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8014d8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014d8c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8014d90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d92:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	dd0f      	ble.n	8014dba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8014d9a:	142a      	asrs	r2, r5, #16
 8014d9c:	d406      	bmi.n	8014dac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8014d9e:	4590      	cmp	r8, r2
 8014da0:	dd04      	ble.n	8014dac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8014da2:	1422      	asrs	r2, r4, #16
 8014da4:	d402      	bmi.n	8014dac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8014da6:	9802      	ldr	r0, [sp, #8]
 8014da8:	4282      	cmp	r2, r0
 8014daa:	db07      	blt.n	8014dbc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8014dac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014dae:	4415      	add	r5, r2
 8014db0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014db2:	3b01      	subs	r3, #1
 8014db4:	4414      	add	r4, r2
 8014db6:	3603      	adds	r6, #3
 8014db8:	e7ed      	b.n	8014d96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8014dba:	d073      	beq.n	8014ea4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8014dbc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014dbe:	1e5a      	subs	r2, r3, #1
 8014dc0:	fb00 5002 	mla	r0, r0, r2, r5
 8014dc4:	1400      	asrs	r0, r0, #16
 8014dc6:	d464      	bmi.n	8014e92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8014dc8:	4580      	cmp	r8, r0
 8014dca:	dd62      	ble.n	8014e92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8014dcc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014dce:	fb00 4202 	mla	r2, r0, r2, r4
 8014dd2:	1412      	asrs	r2, r2, #16
 8014dd4:	d45d      	bmi.n	8014e92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8014dd6:	9802      	ldr	r0, [sp, #8]
 8014dd8:	4282      	cmp	r2, r0
 8014dda:	da5a      	bge.n	8014e92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8014ddc:	1cf0      	adds	r0, r6, #3
 8014dde:	469a      	mov	sl, r3
 8014de0:	f1ba 0f00 	cmp.w	sl, #0
 8014de4:	dd59      	ble.n	8014e9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8014de6:	9903      	ldr	r1, [sp, #12]
 8014de8:	142a      	asrs	r2, r5, #16
 8014dea:	1427      	asrs	r7, r4, #16
 8014dec:	fb01 2707 	mla	r7, r1, r7, r2
 8014df0:	087a      	lsrs	r2, r7, #1
 8014df2:	9904      	ldr	r1, [sp, #16]
 8014df4:	5c8a      	ldrb	r2, [r1, r2]
 8014df6:	07f9      	lsls	r1, r7, #31
 8014df8:	bf54      	ite	pl
 8014dfa:	f002 020f 	andpl.w	r2, r2, #15
 8014dfe:	1112      	asrmi	r2, r2, #4
 8014e00:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014e04:	b2d2      	uxtb	r2, r2
 8014e06:	2a00      	cmp	r2, #0
 8014e08:	d03b      	beq.n	8014e82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8014e0a:	497e      	ldr	r1, [pc, #504]	; (8015004 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8014e0c:	680f      	ldr	r7, [r1, #0]
 8014e0e:	2aff      	cmp	r2, #255	; 0xff
 8014e10:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014e14:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8014e18:	b2ff      	uxtb	r7, r7
 8014e1a:	f000 80e9 	beq.w	8014ff0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8014e1e:	fa1f fe82 	uxth.w	lr, r2
 8014e22:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8014e26:	43d2      	mvns	r2, r2
 8014e28:	b2d2      	uxtb	r2, r2
 8014e2a:	fb17 f70e 	smulbb	r7, r7, lr
 8014e2e:	fb0c 7702 	mla	r7, ip, r2, r7
 8014e32:	b2bf      	uxth	r7, r7
 8014e34:	f107 0c01 	add.w	ip, r7, #1
 8014e38:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8014e3c:	123f      	asrs	r7, r7, #8
 8014e3e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8014e42:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8014e46:	fb19 f90e 	smulbb	r9, r9, lr
 8014e4a:	fb07 9902 	mla	r9, r7, r2, r9
 8014e4e:	fa1f f989 	uxth.w	r9, r9
 8014e52:	f109 0701 	add.w	r7, r9, #1
 8014e56:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8014e5a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8014e5e:	fb1b fe0e 	smulbb	lr, fp, lr
 8014e62:	fb07 ee02 	mla	lr, r7, r2, lr
 8014e66:	fa1f fe8e 	uxth.w	lr, lr
 8014e6a:	f10e 0201 	add.w	r2, lr, #1
 8014e6e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8014e72:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e76:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014e7a:	f800 9c02 	strb.w	r9, [r0, #-2]
 8014e7e:	f800 ec01 	strb.w	lr, [r0, #-1]
 8014e82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e84:	4415      	add	r5, r2
 8014e86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e88:	3003      	adds	r0, #3
 8014e8a:	4414      	add	r4, r2
 8014e8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014e90:	e7a6      	b.n	8014de0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8014e92:	2700      	movs	r7, #0
 8014e94:	1bda      	subs	r2, r3, r7
 8014e96:	2a00      	cmp	r2, #0
 8014e98:	dc40      	bgt.n	8014f1c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8014e9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014e9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014ea2:	441e      	add	r6, r3
 8014ea4:	9b01      	ldr	r3, [sp, #4]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	f340 80a9 	ble.w	8014ffe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8014eac:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014eb0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014eb4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014eb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014eba:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014ebe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014ec2:	eeb0 6a62 	vmov.f32	s12, s5
 8014ec6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014eca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014ece:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014ed2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014ed6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014eda:	eeb0 6a43 	vmov.f32	s12, s6
 8014ede:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014ee2:	ee12 2a90 	vmov	r2, s5
 8014ee6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014eea:	fb92 f3f3 	sdiv	r3, r2, r3
 8014eee:	ee13 2a10 	vmov	r2, s6
 8014ef2:	9313      	str	r3, [sp, #76]	; 0x4c
 8014ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ef6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014efa:	9314      	str	r3, [sp, #80]	; 0x50
 8014efc:	9b01      	ldr	r3, [sp, #4]
 8014efe:	9a05      	ldr	r2, [sp, #20]
 8014f00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014f04:	3b01      	subs	r3, #1
 8014f06:	9301      	str	r3, [sp, #4]
 8014f08:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f0e:	eeb0 3a67 	vmov.f32	s6, s15
 8014f12:	bf08      	it	eq
 8014f14:	4613      	moveq	r3, r2
 8014f16:	eef0 2a47 	vmov.f32	s5, s14
 8014f1a:	e72f      	b.n	8014d7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8014f1c:	142a      	asrs	r2, r5, #16
 8014f1e:	d458      	bmi.n	8014fd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8014f20:	4590      	cmp	r8, r2
 8014f22:	dd56      	ble.n	8014fd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8014f24:	1420      	asrs	r0, r4, #16
 8014f26:	d454      	bmi.n	8014fd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8014f28:	9902      	ldr	r1, [sp, #8]
 8014f2a:	4288      	cmp	r0, r1
 8014f2c:	da51      	bge.n	8014fd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8014f2e:	9903      	ldr	r1, [sp, #12]
 8014f30:	fb00 2001 	mla	r0, r0, r1, r2
 8014f34:	0842      	lsrs	r2, r0, #1
 8014f36:	9904      	ldr	r1, [sp, #16]
 8014f38:	5c8a      	ldrb	r2, [r1, r2]
 8014f3a:	07c0      	lsls	r0, r0, #31
 8014f3c:	bf54      	ite	pl
 8014f3e:	f002 020f 	andpl.w	r2, r2, #15
 8014f42:	1112      	asrmi	r2, r2, #4
 8014f44:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014f48:	b2d2      	uxtb	r2, r2
 8014f4a:	2a00      	cmp	r2, #0
 8014f4c:	d041      	beq.n	8014fd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8014f4e:	492d      	ldr	r1, [pc, #180]	; (8015004 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8014f50:	6808      	ldr	r0, [r1, #0]
 8014f52:	2aff      	cmp	r2, #255	; 0xff
 8014f54:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8014f58:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8014f5c:	fa5f fc80 	uxtb.w	ip, r0
 8014f60:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8014f64:	d03b      	beq.n	8014fde <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 8014f66:	4438      	add	r0, r7
 8014f68:	fa1f f982 	uxth.w	r9, r2
 8014f6c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8014f70:	43d2      	mvns	r2, r2
 8014f72:	b2d2      	uxtb	r2, r2
 8014f74:	fb1c fc09 	smulbb	ip, ip, r9
 8014f78:	fb0e cc02 	mla	ip, lr, r2, ip
 8014f7c:	fa1f fc8c 	uxth.w	ip, ip
 8014f80:	f10c 0e01 	add.w	lr, ip, #1
 8014f84:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8014f88:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014f8c:	f806 c000 	strb.w	ip, [r6, r0]
 8014f90:	4430      	add	r0, r6
 8014f92:	fb1a fa09 	smulbb	sl, sl, r9
 8014f96:	f890 c001 	ldrb.w	ip, [r0, #1]
 8014f9a:	fb0c aa02 	mla	sl, ip, r2, sl
 8014f9e:	fa1f fa8a 	uxth.w	sl, sl
 8014fa2:	f10a 0c01 	add.w	ip, sl, #1
 8014fa6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014faa:	f890 c002 	ldrb.w	ip, [r0, #2]
 8014fae:	fb1b f909 	smulbb	r9, fp, r9
 8014fb2:	fb0c 9902 	mla	r9, ip, r2, r9
 8014fb6:	fa1f f989 	uxth.w	r9, r9
 8014fba:	f109 0201 	add.w	r2, r9, #1
 8014fbe:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8014fc2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014fc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014fca:	f880 a001 	strb.w	sl, [r0, #1]
 8014fce:	f880 9002 	strb.w	r9, [r0, #2]
 8014fd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014fd4:	4415      	add	r5, r2
 8014fd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fd8:	3701      	adds	r7, #1
 8014fda:	4414      	add	r4, r2
 8014fdc:	e75a      	b.n	8014e94 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8014fde:	4438      	add	r0, r7
 8014fe0:	f806 c000 	strb.w	ip, [r6, r0]
 8014fe4:	4430      	add	r0, r6
 8014fe6:	f880 a001 	strb.w	sl, [r0, #1]
 8014fea:	f880 b002 	strb.w	fp, [r0, #2]
 8014fee:	e7f0      	b.n	8014fd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8014ff0:	f800 7c03 	strb.w	r7, [r0, #-3]
 8014ff4:	f800 9c02 	strb.w	r9, [r0, #-2]
 8014ff8:	f800 bc01 	strb.w	fp, [r0, #-1]
 8014ffc:	e741      	b.n	8014e82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8014ffe:	b007      	add	sp, #28
 8015000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015004:	20005f2c 	.word	0x20005f2c

08015008 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8015008:	4770      	bx	lr

0801500a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801500a:	4770      	bx	lr

0801500c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801500c:	4770      	bx	lr

0801500e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801500e:	4770      	bx	lr

08015010 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015010:	4770      	bx	lr

08015012 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015012:	4770      	bx	lr

08015014 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015014:	4770      	bx	lr

08015016 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015016:	4770      	bx	lr

08015018 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015018:	4770      	bx	lr

0801501a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801501a:	4770      	bx	lr

0801501c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801501c:	4770      	bx	lr

0801501e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801501e:	4770      	bx	lr

08015020 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015020:	4770      	bx	lr

08015022 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015022:	4770      	bx	lr

08015024 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015024:	4770      	bx	lr

08015026 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015026:	4770      	bx	lr

08015028 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015028:	4770      	bx	lr

0801502a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801502a:	4770      	bx	lr

0801502c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801502c:	4770      	bx	lr

0801502e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801502e:	4770      	bx	lr

08015030 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015030:	2bff      	cmp	r3, #255	; 0xff
 8015032:	b508      	push	{r3, lr}
 8015034:	d04f      	beq.n	80150d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8015036:	2a2c      	cmp	r2, #44	; 0x2c
 8015038:	d032      	beq.n	80150a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801503a:	d80f      	bhi.n	801505c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801503c:	2a08      	cmp	r2, #8
 801503e:	d046      	beq.n	80150ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8015040:	d805      	bhi.n	801504e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 8015042:	2a04      	cmp	r2, #4
 8015044:	d041      	beq.n	80150ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8015046:	2a05      	cmp	r2, #5
 8015048:	d03d      	beq.n	80150c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801504a:	2000      	movs	r0, #0
 801504c:	e027      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801504e:	2a0a      	cmp	r2, #10
 8015050:	d03d      	beq.n	80150ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8015052:	d301      	bcc.n	8015058 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8015054:	2a0b      	cmp	r2, #11
 8015056:	d1f8      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015058:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801505a:	e020      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801505c:	2a30      	cmp	r2, #48	; 0x30
 801505e:	d038      	beq.n	80150d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8015060:	d808      	bhi.n	8015074 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8015062:	2a2e      	cmp	r2, #46	; 0x2e
 8015064:	684b      	ldr	r3, [r1, #4]
 8015066:	d029      	beq.n	80150bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8015068:	d90b      	bls.n	8015082 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d1ec      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015070:	6a00      	ldr	r0, [r0, #32]
 8015072:	e014      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015074:	2a32      	cmp	r2, #50	; 0x32
 8015076:	d02c      	beq.n	80150d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8015078:	d301      	bcc.n	801507e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801507a:	2a33      	cmp	r2, #51	; 0x33
 801507c:	d1e5      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801507e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8015080:	e00d      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015082:	781b      	ldrb	r3, [r3, #0]
 8015084:	2b01      	cmp	r3, #1
 8015086:	d009      	beq.n	801509c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8015088:	d3f2      	bcc.n	8015070 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801508a:	2b02      	cmp	r3, #2
 801508c:	d1dd      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801508e:	4b39      	ldr	r3, [pc, #228]	; (8015174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8015090:	4a39      	ldr	r2, [pc, #228]	; (8015178 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8015092:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8015096:	4839      	ldr	r0, [pc, #228]	; (801517c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8015098:	f006 fc7c 	bl	801b994 <__assert_func>
 801509c:	6900      	ldr	r0, [r0, #16]
 801509e:	bd08      	pop	{r3, pc}
 80150a0:	684b      	ldr	r3, [r1, #4]
 80150a2:	781b      	ldrb	r3, [r3, #0]
 80150a4:	2b01      	cmp	r3, #1
 80150a6:	d007      	beq.n	80150b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80150a8:	d30b      	bcc.n	80150c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80150aa:	2b02      	cmp	r3, #2
 80150ac:	d1cd      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80150ae:	4b31      	ldr	r3, [pc, #196]	; (8015174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80150b0:	4a31      	ldr	r2, [pc, #196]	; (8015178 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80150b2:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80150b6:	e7ee      	b.n	8015096 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80150b8:	6880      	ldr	r0, [r0, #8]
 80150ba:	e7f0      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80150bc:	781b      	ldrb	r3, [r3, #0]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d1c3      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80150c2:	6980      	ldr	r0, [r0, #24]
 80150c4:	e7eb      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80150c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80150c8:	e7e9      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80150ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80150cc:	e7e7      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80150ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80150d0:	e7e5      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80150d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80150d4:	e7e3      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80150d6:	2a2c      	cmp	r2, #44	; 0x2c
 80150d8:	d030      	beq.n	801513c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 80150da:	d80f      	bhi.n	80150fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 80150dc:	2a08      	cmp	r2, #8
 80150de:	d044      	beq.n	801516a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80150e0:	d805      	bhi.n	80150ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80150e2:	2a04      	cmp	r2, #4
 80150e4:	d03f      	beq.n	8015166 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80150e6:	2a05      	cmp	r2, #5
 80150e8:	d1af      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80150ea:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80150ec:	e7d7      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80150ee:	2a0a      	cmp	r2, #10
 80150f0:	d03b      	beq.n	801516a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80150f2:	d301      	bcc.n	80150f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80150f4:	2a0b      	cmp	r2, #11
 80150f6:	d1a8      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80150f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80150fa:	e7d0      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80150fc:	2a30      	cmp	r2, #48	; 0x30
 80150fe:	d036      	beq.n	801516e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8015100:	d808      	bhi.n	8015114 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8015102:	2a2e      	cmp	r2, #46	; 0x2e
 8015104:	684b      	ldr	r3, [r1, #4]
 8015106:	d028      	beq.n	801515a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8015108:	d90b      	bls.n	8015122 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801510a:	781b      	ldrb	r3, [r3, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d19c      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015110:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015112:	e7c4      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015114:	2a32      	cmp	r2, #50	; 0x32
 8015116:	d02a      	beq.n	801516e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8015118:	d301      	bcc.n	801511e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801511a:	2a33      	cmp	r2, #51	; 0x33
 801511c:	d195      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801511e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8015120:	e7bd      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015122:	781b      	ldrb	r3, [r3, #0]
 8015124:	2b01      	cmp	r3, #1
 8015126:	d007      	beq.n	8015138 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8015128:	d3f2      	bcc.n	8015110 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801512a:	2b02      	cmp	r3, #2
 801512c:	d18d      	bne.n	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801512e:	4b11      	ldr	r3, [pc, #68]	; (8015174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8015130:	4a11      	ldr	r2, [pc, #68]	; (8015178 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8015132:	f240 4139 	movw	r1, #1081	; 0x439
 8015136:	e7ae      	b.n	8015096 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015138:	6940      	ldr	r0, [r0, #20]
 801513a:	e7b0      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801513c:	684b      	ldr	r3, [r1, #4]
 801513e:	781b      	ldrb	r3, [r3, #0]
 8015140:	2b01      	cmp	r3, #1
 8015142:	d008      	beq.n	8015156 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8015144:	d30d      	bcc.n	8015162 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8015146:	2b02      	cmp	r3, #2
 8015148:	f47f af7f 	bne.w	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801514c:	4b09      	ldr	r3, [pc, #36]	; (8015174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801514e:	4a0a      	ldr	r2, [pc, #40]	; (8015178 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8015150:	f240 4145 	movw	r1, #1093	; 0x445
 8015154:	e79f      	b.n	8015096 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015156:	68c0      	ldr	r0, [r0, #12]
 8015158:	e7a1      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	2b00      	cmp	r3, #0
 801515e:	f47f af74 	bne.w	801504a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015162:	69c0      	ldr	r0, [r0, #28]
 8015164:	e79b      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015166:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8015168:	e799      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801516a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801516c:	e797      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801516e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8015170:	e795      	b.n	801509e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015172:	bf00      	nop
 8015174:	0801f66f 	.word	0x0801f66f
 8015178:	0801fe1f 	.word	0x0801fe1f
 801517c:	0801f6bb 	.word	0x0801f6bb

08015180 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8015180:	b508      	push	{r3, lr}
 8015182:	4b06      	ldr	r3, [pc, #24]	; (801519c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8015184:	8818      	ldrh	r0, [r3, #0]
 8015186:	b928      	cbnz	r0, 8015194 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8015188:	4b05      	ldr	r3, [pc, #20]	; (80151a0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801518a:	4a06      	ldr	r2, [pc, #24]	; (80151a4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801518c:	4806      	ldr	r0, [pc, #24]	; (80151a8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801518e:	2155      	movs	r1, #85	; 0x55
 8015190:	f006 fc00 	bl	801b994 <__assert_func>
 8015194:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015198:	b280      	uxth	r0, r0
 801519a:	bd08      	pop	{r3, pc}
 801519c:	20005f1e 	.word	0x20005f1e
 80151a0:	0801f908 	.word	0x0801f908
 80151a4:	0801fde4 	.word	0x0801fde4
 80151a8:	0801f94a 	.word	0x0801f94a

080151ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80151ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151b0:	4616      	mov	r6, r2
 80151b2:	b087      	sub	sp, #28
 80151b4:	461f      	mov	r7, r3
 80151b6:	b34b      	cbz	r3, 801520c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80151b8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	dd25      	ble.n	801520c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80151c0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	dd21      	ble.n	801520c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80151c8:	6808      	ldr	r0, [r1, #0]
 80151ca:	6849      	ldr	r1, [r1, #4]
 80151cc:	4c5a      	ldr	r4, [pc, #360]	; (8015338 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 80151ce:	ab04      	add	r3, sp, #16
 80151d0:	c303      	stmia	r3!, {r0, r1}
 80151d2:	a804      	add	r0, sp, #16
 80151d4:	f7fc f8fc 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80151d8:	6820      	ldr	r0, [r4, #0]
 80151da:	6803      	ldr	r3, [r0, #0]
 80151dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151de:	4798      	blx	r3
 80151e0:	2fff      	cmp	r7, #255	; 0xff
 80151e2:	4623      	mov	r3, r4
 80151e4:	d015      	beq.n	8015212 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80151e6:	f010 0f08 	tst.w	r0, #8
 80151ea:	d015      	beq.n	8015218 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80151ec:	6818      	ldr	r0, [r3, #0]
 80151ee:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80151f2:	6801      	ldr	r1, [r0, #0]
 80151f4:	9401      	str	r4, [sp, #4]
 80151f6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80151fa:	9702      	str	r7, [sp, #8]
 80151fc:	9400      	str	r4, [sp, #0]
 80151fe:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8015200:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015204:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015208:	4631      	mov	r1, r6
 801520a:	47a0      	blx	r4
 801520c:	b007      	add	sp, #28
 801520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015212:	f010 0f02 	tst.w	r0, #2
 8015216:	e7e8      	b.n	80151ea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 8015218:	6818      	ldr	r0, [r3, #0]
 801521a:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801521e:	6803      	ldr	r3, [r0, #0]
 8015220:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8015224:	6a1b      	ldr	r3, [r3, #32]
 8015226:	4798      	blx	r3
 8015228:	4944      	ldr	r1, [pc, #272]	; (801533c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 801522a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801522e:	f8b1 c000 	ldrh.w	ip, [r1]
 8015232:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015236:	fb0c 2303 	mla	r3, ip, r3, r2
 801523a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801523e:	2fff      	cmp	r7, #255	; 0xff
 8015240:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8015244:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8015248:	b2f2      	uxtb	r2, r6
 801524a:	4418      	add	r0, r3
 801524c:	4688      	mov	r8, r1
 801524e:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8015252:	d112      	bne.n	801527a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 8015254:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015258:	2100      	movs	r1, #0
 801525a:	42a9      	cmp	r1, r5
 801525c:	da66      	bge.n	801532c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801525e:	4603      	mov	r3, r0
 8015260:	2700      	movs	r7, #0
 8015262:	42a7      	cmp	r7, r4
 8015264:	f103 0303 	add.w	r3, r3, #3
 8015268:	da57      	bge.n	801531a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801526a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801526e:	f803 ec02 	strb.w	lr, [r3, #-2]
 8015272:	f803 cc01 	strb.w	ip, [r3, #-1]
 8015276:	3701      	adds	r7, #1
 8015278:	e7f3      	b.n	8015262 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801527a:	b2bb      	uxth	r3, r7
 801527c:	fb0c fc03 	mul.w	ip, ip, r3
 8015280:	fb0e fe03 	mul.w	lr, lr, r3
 8015284:	435a      	muls	r2, r3
 8015286:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801528a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801528e:	f04f 0800 	mov.w	r8, #0
 8015292:	b29b      	uxth	r3, r3
 8015294:	460f      	mov	r7, r1
 8015296:	45a8      	cmp	r8, r5
 8015298:	da48      	bge.n	801532c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801529a:	4601      	mov	r1, r0
 801529c:	f04f 0a00 	mov.w	sl, #0
 80152a0:	45a2      	cmp	sl, r4
 80152a2:	f101 0103 	add.w	r1, r1, #3
 80152a6:	da2f      	bge.n	8015308 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 80152a8:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 80152ac:	fb19 f903 	smulbb	r9, r9, r3
 80152b0:	4491      	add	r9, r2
 80152b2:	fa1f f989 	uxth.w	r9, r9
 80152b6:	f109 0b01 	add.w	fp, r9, #1
 80152ba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80152be:	ea4f 2929 	mov.w	r9, r9, asr #8
 80152c2:	f801 9c03 	strb.w	r9, [r1, #-3]
 80152c6:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 80152ca:	fb19 f903 	smulbb	r9, r9, r3
 80152ce:	44f1      	add	r9, lr
 80152d0:	fa1f f989 	uxth.w	r9, r9
 80152d4:	f109 0b01 	add.w	fp, r9, #1
 80152d8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80152dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80152e0:	f801 9c02 	strb.w	r9, [r1, #-2]
 80152e4:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 80152e8:	fb19 f903 	smulbb	r9, r9, r3
 80152ec:	44e1      	add	r9, ip
 80152ee:	fa1f f989 	uxth.w	r9, r9
 80152f2:	f109 0b01 	add.w	fp, r9, #1
 80152f6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80152fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80152fe:	f801 9c01 	strb.w	r9, [r1, #-1]
 8015302:	f10a 0a01 	add.w	sl, sl, #1
 8015306:	e7cb      	b.n	80152a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 8015308:	8839      	ldrh	r1, [r7, #0]
 801530a:	1b09      	subs	r1, r1, r4
 801530c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015310:	4431      	add	r1, r6
 8015312:	4408      	add	r0, r1
 8015314:	f108 0801 	add.w	r8, r8, #1
 8015318:	e7bd      	b.n	8015296 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 801531a:	f8b8 3000 	ldrh.w	r3, [r8]
 801531e:	1b1b      	subs	r3, r3, r4
 8015320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015324:	4433      	add	r3, r6
 8015326:	4418      	add	r0, r3
 8015328:	3101      	adds	r1, #1
 801532a:	e796      	b.n	801525a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 801532c:	4b02      	ldr	r3, [pc, #8]	; (8015338 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801532e:	6818      	ldr	r0, [r3, #0]
 8015330:	6803      	ldr	r3, [r0, #0]
 8015332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015334:	4798      	blx	r3
 8015336:	e769      	b.n	801520c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8015338:	20005f24 	.word	0x20005f24
 801533c:	20005f1e 	.word	0x20005f1e

08015340 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8015340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015344:	b08d      	sub	sp, #52	; 0x34
 8015346:	460c      	mov	r4, r1
 8015348:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801534c:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8015350:	4617      	mov	r7, r2
 8015352:	2e00      	cmp	r6, #0
 8015354:	d04a      	beq.n	80153ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8015356:	6810      	ldr	r0, [r2, #0]
 8015358:	6851      	ldr	r1, [r2, #4]
 801535a:	ad08      	add	r5, sp, #32
 801535c:	c503      	stmia	r5!, {r0, r1}
 801535e:	6818      	ldr	r0, [r3, #0]
 8015360:	6859      	ldr	r1, [r3, #4]
 8015362:	ad0a      	add	r5, sp, #40	; 0x28
 8015364:	c503      	stmia	r5!, {r0, r1}
 8015366:	a808      	add	r0, sp, #32
 8015368:	f7fc f832 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801536c:	4639      	mov	r1, r7
 801536e:	a80a      	add	r0, sp, #40	; 0x28
 8015370:	f7fc f816 	bl	80113a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015374:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8015378:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801537c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8015380:	4f55      	ldr	r7, [pc, #340]	; (80154d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 8015382:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8015386:	6838      	ldr	r0, [r7, #0]
 8015388:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801538c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015390:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015394:	440c      	add	r4, r1
 8015396:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801539a:	440a      	add	r2, r1
 801539c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80153a0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80153a4:	4413      	add	r3, r2
 80153a6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80153aa:	6803      	ldr	r3, [r0, #0]
 80153ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153ae:	4798      	blx	r3
 80153b0:	2eff      	cmp	r6, #255	; 0xff
 80153b2:	f000 8089 	beq.w	80154c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 80153b6:	0743      	lsls	r3, r0, #29
 80153b8:	d405      	bmi.n	80153c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 80153ba:	f1b9 0f00 	cmp.w	r9, #0
 80153be:	d018      	beq.n	80153f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80153c0:	f010 0f10 	tst.w	r0, #16
 80153c4:	d015      	beq.n	80153f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80153c6:	6838      	ldr	r0, [r7, #0]
 80153c8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80153cc:	6801      	ldr	r1, [r0, #0]
 80153ce:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80153d2:	e9cd 6903 	strd	r6, r9, [sp, #12]
 80153d6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80153da:	9602      	str	r6, [sp, #8]
 80153dc:	b2ad      	uxth	r5, r5
 80153de:	fa1f f688 	uxth.w	r6, r8
 80153e2:	9601      	str	r6, [sp, #4]
 80153e4:	9500      	str	r5, [sp, #0]
 80153e6:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 80153e8:	4621      	mov	r1, r4
 80153ea:	47a8      	blx	r5
 80153ec:	b00d      	add	sp, #52	; 0x34
 80153ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153f2:	6838      	ldr	r0, [r7, #0]
 80153f4:	6803      	ldr	r3, [r0, #0]
 80153f6:	6a1b      	ldr	r3, [r3, #32]
 80153f8:	4798      	blx	r3
 80153fa:	4a38      	ldr	r2, [pc, #224]	; (80154dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 80153fc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8015400:	8813      	ldrh	r3, [r2, #0]
 8015402:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 8015406:	fb0c 1303 	mla	r3, ip, r3, r1
 801540a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801540e:	2eff      	cmp	r6, #255	; 0xff
 8015410:	4418      	add	r0, r3
 8015412:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8015416:	d032      	beq.n	801547e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8015418:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801541c:	9306      	str	r3, [sp, #24]
 801541e:	f04f 0c00 	mov.w	ip, #0
 8015422:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 8015426:	45c4      	cmp	ip, r8
 8015428:	da49      	bge.n	80154be <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801542a:	4686      	mov	lr, r0
 801542c:	46a1      	mov	r9, r4
 801542e:	eba9 0304 	sub.w	r3, r9, r4
 8015432:	428b      	cmp	r3, r1
 8015434:	da13      	bge.n	801545e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 8015436:	f819 3b01 	ldrb.w	r3, [r9], #1
 801543a:	9307      	str	r3, [sp, #28]
 801543c:	f89e b000 	ldrb.w	fp, [lr]
 8015440:	9b06      	ldr	r3, [sp, #24]
 8015442:	fb1b fb03 	smulbb	fp, fp, r3
 8015446:	9b07      	ldr	r3, [sp, #28]
 8015448:	fb03 b306 	mla	r3, r3, r6, fp
 801544c:	b29b      	uxth	r3, r3
 801544e:	f103 0b01 	add.w	fp, r3, #1
 8015452:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8015456:	121b      	asrs	r3, r3, #8
 8015458:	f80e 3b01 	strb.w	r3, [lr], #1
 801545c:	e7e7      	b.n	801542e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801545e:	8813      	ldrh	r3, [r2, #0]
 8015460:	1b5b      	subs	r3, r3, r5
 8015462:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015466:	4453      	add	r3, sl
 8015468:	4418      	add	r0, r3
 801546a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801546e:	1b5b      	subs	r3, r3, r5
 8015470:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015474:	4453      	add	r3, sl
 8015476:	441c      	add	r4, r3
 8015478:	f10c 0c01 	add.w	ip, ip, #1
 801547c:	e7d3      	b.n	8015426 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801547e:	2600      	movs	r6, #0
 8015480:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 8015484:	4546      	cmp	r6, r8
 8015486:	da1a      	bge.n	80154be <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8015488:	f100 3eff 	add.w	lr, r0, #4294967295
 801548c:	4623      	mov	r3, r4
 801548e:	eba3 0904 	sub.w	r9, r3, r4
 8015492:	4589      	cmp	r9, r1
 8015494:	da04      	bge.n	80154a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 8015496:	f813 9b01 	ldrb.w	r9, [r3], #1
 801549a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801549e:	e7f6      	b.n	801548e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 80154a0:	8813      	ldrh	r3, [r2, #0]
 80154a2:	1b5b      	subs	r3, r3, r5
 80154a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80154a8:	4463      	add	r3, ip
 80154aa:	4418      	add	r0, r3
 80154ac:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80154b0:	1b5b      	subs	r3, r3, r5
 80154b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80154b6:	4463      	add	r3, ip
 80154b8:	441c      	add	r4, r3
 80154ba:	3601      	adds	r6, #1
 80154bc:	e7e2      	b.n	8015484 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 80154be:	6838      	ldr	r0, [r7, #0]
 80154c0:	6803      	ldr	r3, [r0, #0]
 80154c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154c4:	4798      	blx	r3
 80154c6:	e791      	b.n	80153ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80154c8:	f1b9 0f00 	cmp.w	r9, #0
 80154cc:	f47f af78 	bne.w	80153c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 80154d0:	f010 0f01 	tst.w	r0, #1
 80154d4:	e776      	b.n	80153c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 80154d6:	bf00      	nop
 80154d8:	20005f24 	.word	0x20005f24
 80154dc:	20005f1e 	.word	0x20005f1e

080154e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80154e0:	b510      	push	{r4, lr}
 80154e2:	2104      	movs	r1, #4
 80154e4:	4604      	mov	r4, r0
 80154e6:	f006 fa29 	bl	801b93c <_ZdlPvj>
 80154ea:	4620      	mov	r0, r4
 80154ec:	bd10      	pop	{r4, pc}

080154ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80154ee:	b510      	push	{r4, lr}
 80154f0:	2104      	movs	r1, #4
 80154f2:	4604      	mov	r4, r0
 80154f4:	f006 fa22 	bl	801b93c <_ZdlPvj>
 80154f8:	4620      	mov	r0, r4
 80154fa:	bd10      	pop	{r4, pc}

080154fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80154fc:	b510      	push	{r4, lr}
 80154fe:	2104      	movs	r1, #4
 8015500:	4604      	mov	r4, r0
 8015502:	f006 fa1b 	bl	801b93c <_ZdlPvj>
 8015506:	4620      	mov	r0, r4
 8015508:	bd10      	pop	{r4, pc}

0801550a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801550a:	b510      	push	{r4, lr}
 801550c:	2104      	movs	r1, #4
 801550e:	4604      	mov	r4, r0
 8015510:	f006 fa14 	bl	801b93c <_ZdlPvj>
 8015514:	4620      	mov	r0, r4
 8015516:	bd10      	pop	{r4, pc}

08015518 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015518:	b510      	push	{r4, lr}
 801551a:	2104      	movs	r1, #4
 801551c:	4604      	mov	r4, r0
 801551e:	f006 fa0d 	bl	801b93c <_ZdlPvj>
 8015522:	4620      	mov	r0, r4
 8015524:	bd10      	pop	{r4, pc}

08015526 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015526:	b510      	push	{r4, lr}
 8015528:	2104      	movs	r1, #4
 801552a:	4604      	mov	r4, r0
 801552c:	f006 fa06 	bl	801b93c <_ZdlPvj>
 8015530:	4620      	mov	r0, r4
 8015532:	bd10      	pop	{r4, pc}

08015534 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015534:	b510      	push	{r4, lr}
 8015536:	2104      	movs	r1, #4
 8015538:	4604      	mov	r4, r0
 801553a:	f006 f9ff 	bl	801b93c <_ZdlPvj>
 801553e:	4620      	mov	r0, r4
 8015540:	bd10      	pop	{r4, pc}

08015542 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015542:	b510      	push	{r4, lr}
 8015544:	2104      	movs	r1, #4
 8015546:	4604      	mov	r4, r0
 8015548:	f006 f9f8 	bl	801b93c <_ZdlPvj>
 801554c:	4620      	mov	r0, r4
 801554e:	bd10      	pop	{r4, pc}

08015550 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8015550:	b510      	push	{r4, lr}
 8015552:	2104      	movs	r1, #4
 8015554:	4604      	mov	r4, r0
 8015556:	f006 f9f1 	bl	801b93c <_ZdlPvj>
 801555a:	4620      	mov	r0, r4
 801555c:	bd10      	pop	{r4, pc}

0801555e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801555e:	b510      	push	{r4, lr}
 8015560:	2104      	movs	r1, #4
 8015562:	4604      	mov	r4, r0
 8015564:	f006 f9ea 	bl	801b93c <_ZdlPvj>
 8015568:	4620      	mov	r0, r4
 801556a:	bd10      	pop	{r4, pc}

0801556c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801556c:	b510      	push	{r4, lr}
 801556e:	2104      	movs	r1, #4
 8015570:	4604      	mov	r4, r0
 8015572:	f006 f9e3 	bl	801b93c <_ZdlPvj>
 8015576:	4620      	mov	r0, r4
 8015578:	bd10      	pop	{r4, pc}

0801557a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801557a:	b510      	push	{r4, lr}
 801557c:	2104      	movs	r1, #4
 801557e:	4604      	mov	r4, r0
 8015580:	f006 f9dc 	bl	801b93c <_ZdlPvj>
 8015584:	4620      	mov	r0, r4
 8015586:	bd10      	pop	{r4, pc}

08015588 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015588:	b510      	push	{r4, lr}
 801558a:	2104      	movs	r1, #4
 801558c:	4604      	mov	r4, r0
 801558e:	f006 f9d5 	bl	801b93c <_ZdlPvj>
 8015592:	4620      	mov	r0, r4
 8015594:	bd10      	pop	{r4, pc}

08015596 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015596:	b510      	push	{r4, lr}
 8015598:	2104      	movs	r1, #4
 801559a:	4604      	mov	r4, r0
 801559c:	f006 f9ce 	bl	801b93c <_ZdlPvj>
 80155a0:	4620      	mov	r0, r4
 80155a2:	bd10      	pop	{r4, pc}

080155a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80155a4:	b510      	push	{r4, lr}
 80155a6:	2104      	movs	r1, #4
 80155a8:	4604      	mov	r4, r0
 80155aa:	f006 f9c7 	bl	801b93c <_ZdlPvj>
 80155ae:	4620      	mov	r0, r4
 80155b0:	bd10      	pop	{r4, pc}

080155b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80155b2:	b510      	push	{r4, lr}
 80155b4:	2104      	movs	r1, #4
 80155b6:	4604      	mov	r4, r0
 80155b8:	f006 f9c0 	bl	801b93c <_ZdlPvj>
 80155bc:	4620      	mov	r0, r4
 80155be:	bd10      	pop	{r4, pc}

080155c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80155c0:	b510      	push	{r4, lr}
 80155c2:	2104      	movs	r1, #4
 80155c4:	4604      	mov	r4, r0
 80155c6:	f006 f9b9 	bl	801b93c <_ZdlPvj>
 80155ca:	4620      	mov	r0, r4
 80155cc:	bd10      	pop	{r4, pc}

080155ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80155ce:	b510      	push	{r4, lr}
 80155d0:	2104      	movs	r1, #4
 80155d2:	4604      	mov	r4, r0
 80155d4:	f006 f9b2 	bl	801b93c <_ZdlPvj>
 80155d8:	4620      	mov	r0, r4
 80155da:	bd10      	pop	{r4, pc}

080155dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80155dc:	b510      	push	{r4, lr}
 80155de:	2104      	movs	r1, #4
 80155e0:	4604      	mov	r4, r0
 80155e2:	f006 f9ab 	bl	801b93c <_ZdlPvj>
 80155e6:	4620      	mov	r0, r4
 80155e8:	bd10      	pop	{r4, pc}

080155ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80155ea:	b510      	push	{r4, lr}
 80155ec:	2104      	movs	r1, #4
 80155ee:	4604      	mov	r4, r0
 80155f0:	f006 f9a4 	bl	801b93c <_ZdlPvj>
 80155f4:	4620      	mov	r0, r4
 80155f6:	bd10      	pop	{r4, pc}

080155f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80155f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155fc:	4d9e      	ldr	r5, [pc, #632]	; (8015878 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80155fe:	4690      	mov	r8, r2
 8015600:	682a      	ldr	r2, [r5, #0]
 8015602:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8015606:	2a02      	cmp	r2, #2
 8015608:	b08f      	sub	sp, #60	; 0x3c
 801560a:	4604      	mov	r4, r0
 801560c:	4689      	mov	r9, r1
 801560e:	d106      	bne.n	801561e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8015610:	4b9a      	ldr	r3, [pc, #616]	; (801587c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8015612:	4a9b      	ldr	r2, [pc, #620]	; (8015880 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8015614:	f240 11ef 	movw	r1, #495	; 0x1ef
 8015618:	489a      	ldr	r0, [pc, #616]	; (8015884 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801561a:	f006 f9bb 	bl	801b994 <__assert_func>
 801561e:	ae0e      	add	r6, sp, #56	; 0x38
 8015620:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8015624:	4630      	mov	r0, r6
 8015626:	f7fe f8b1 	bl	801378c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801562a:	6823      	ldr	r3, [r4, #0]
 801562c:	4607      	mov	r7, r0
 801562e:	6a1b      	ldr	r3, [r3, #32]
 8015630:	4620      	mov	r0, r4
 8015632:	4798      	blx	r3
 8015634:	4287      	cmp	r7, r0
 8015636:	d004      	beq.n	8015642 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8015638:	4b93      	ldr	r3, [pc, #588]	; (8015888 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801563a:	4a91      	ldr	r2, [pc, #580]	; (8015880 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801563c:	f240 11f1 	movw	r1, #497	; 0x1f1
 8015640:	e7ea      	b.n	8015618 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015642:	4630      	mov	r0, r6
 8015644:	f7fe f81e 	bl	8013684 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015648:	4607      	mov	r7, r0
 801564a:	b920      	cbnz	r0, 8015656 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801564c:	4b8f      	ldr	r3, [pc, #572]	; (801588c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801564e:	4a8c      	ldr	r2, [pc, #560]	; (8015880 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8015650:	f240 11f3 	movw	r1, #499	; 0x1f3
 8015654:	e7e0      	b.n	8015618 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015656:	f8d8 0000 	ldr.w	r0, [r8]
 801565a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801565e:	f9b8 a000 	ldrsh.w	sl, [r8]
 8015662:	ab06      	add	r3, sp, #24
 8015664:	c303      	stmia	r3!, {r0, r1}
 8015666:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801566a:	f8d9 0000 	ldr.w	r0, [r9]
 801566e:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8015672:	ab08      	add	r3, sp, #32
 8015674:	c303      	stmia	r3!, {r0, r1}
 8015676:	4630      	mov	r0, r6
 8015678:	f7fd ff36 	bl	80134e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801567c:	4680      	mov	r8, r0
 801567e:	4630      	mov	r0, r6
 8015680:	f7fd ff6c 	bl	801355c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015684:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8015688:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801568c:	f10d 0920 	add.w	r9, sp, #32
 8015690:	a806      	add	r0, sp, #24
 8015692:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015696:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801569a:	f7fb fe99 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801569e:	4648      	mov	r0, r9
 80156a0:	f7fb fe96 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80156a4:	a80a      	add	r0, sp, #40	; 0x28
 80156a6:	f7fb fe93 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80156aa:	4e79      	ldr	r6, [pc, #484]	; (8015890 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 80156ac:	4b79      	ldr	r3, [pc, #484]	; (8015894 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 80156ae:	f9b6 2000 	ldrsh.w	r2, [r6]
 80156b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156b6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80156ba:	2100      	movs	r1, #0
 80156bc:	910c      	str	r1, [sp, #48]	; 0x30
 80156be:	4648      	mov	r0, r9
 80156c0:	a90c      	add	r1, sp, #48	; 0x30
 80156c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80156c6:	f7f9 fe7d 	bl	800f3c4 <_ZN8touchgfx4RectaNERKS0_>
 80156ca:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 80156ce:	9602      	str	r6, [sp, #8]
 80156d0:	f1bc 0f00 	cmp.w	ip, #0
 80156d4:	f340 80a3 	ble.w	801581e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 80156d8:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 80156dc:	2e00      	cmp	r6, #0
 80156de:	f340 809e 	ble.w	801581e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 80156e2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80156e6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80156ea:	4288      	cmp	r0, r1
 80156ec:	db36      	blt.n	801575c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80156ee:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80156f2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80156f6:	429a      	cmp	r2, r3
 80156f8:	db30      	blt.n	801575c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80156fa:	4460      	add	r0, ip
 80156fc:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8015700:	4461      	add	r1, ip
 8015702:	b200      	sxth	r0, r0
 8015704:	b209      	sxth	r1, r1
 8015706:	4288      	cmp	r0, r1
 8015708:	dc28      	bgt.n	801575c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801570a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801570e:	4432      	add	r2, r6
 8015710:	440b      	add	r3, r1
 8015712:	b212      	sxth	r2, r2
 8015714:	b21b      	sxth	r3, r3
 8015716:	429a      	cmp	r2, r3
 8015718:	dc20      	bgt.n	801575c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801571a:	6823      	ldr	r3, [r4, #0]
 801571c:	4620      	mov	r0, r4
 801571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015720:	4798      	blx	r3
 8015722:	4682      	mov	sl, r0
 8015724:	6828      	ldr	r0, [r5, #0]
 8015726:	6803      	ldr	r3, [r0, #0]
 8015728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801572a:	4798      	blx	r3
 801572c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8015730:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8015734:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8015738:	9303      	str	r3, [sp, #12]
 801573a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801573e:	1a9b      	subs	r3, r3, r2
 8015740:	b29b      	uxth	r3, r3
 8015742:	b21c      	sxth	r4, r3
 8015744:	2c00      	cmp	r4, #0
 8015746:	dc0e      	bgt.n	8015766 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8015748:	b134      	cbz	r4, 8015758 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801574a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801574e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8015752:	4413      	add	r3, r2
 8015754:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015758:	463c      	mov	r4, r7
 801575a:	e00b      	b.n	8015774 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801575c:	4b4e      	ldr	r3, [pc, #312]	; (8015898 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801575e:	4a48      	ldr	r2, [pc, #288]	; (8015880 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8015760:	f240 2101 	movw	r1, #513	; 0x201
 8015764:	e758      	b.n	8015618 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015766:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801576a:	ebab 0303 	sub.w	r3, fp, r3
 801576e:	443c      	add	r4, r7
 8015770:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8015774:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8015778:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801577c:	1a9b      	subs	r3, r3, r2
 801577e:	b29b      	uxth	r3, r3
 8015780:	b219      	sxth	r1, r3
 8015782:	2900      	cmp	r1, #0
 8015784:	dd4f      	ble.n	8015826 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22e>
 8015786:	9a03      	ldr	r2, [sp, #12]
 8015788:	fb02 4401 	mla	r4, r2, r1, r4
 801578c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8015790:	1ad3      	subs	r3, r2, r3
 8015792:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015796:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801579a:	f1bc 0f00 	cmp.w	ip, #0
 801579e:	dd3e      	ble.n	801581e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 80157a0:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80157a4:	2e00      	cmp	r6, #0
 80157a6:	dd3a      	ble.n	801581e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 80157a8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80157ac:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80157b0:	fb0a f801 	mul.w	r8, sl, r1
 80157b4:	2203      	movs	r2, #3
 80157b6:	fb13 8802 	smlabb	r8, r3, r2, r8
 80157ba:	9a02      	ldr	r2, [sp, #8]
 80157bc:	4480      	add	r8, r0
 80157be:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 80157c2:	8812      	ldrh	r2, [r2, #0]
 80157c4:	4584      	cmp	ip, r0
 80157c6:	bfa8      	it	ge
 80157c8:	4684      	movge	ip, r0
 80157ca:	1ad3      	subs	r3, r2, r3
 80157cc:	459c      	cmp	ip, r3
 80157ce:	bfa8      	it	ge
 80157d0:	469c      	movge	ip, r3
 80157d2:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 80157d6:	429e      	cmp	r6, r3
 80157d8:	bfa8      	it	ge
 80157da:	461e      	movge	r6, r3
 80157dc:	4b2d      	ldr	r3, [pc, #180]	; (8015894 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 80157de:	881b      	ldrh	r3, [r3, #0]
 80157e0:	1a59      	subs	r1, r3, r1
 80157e2:	428e      	cmp	r6, r1
 80157e4:	4633      	mov	r3, r6
 80157e6:	bfa8      	it	ge
 80157e8:	460b      	movge	r3, r1
 80157ea:	4562      	cmp	r2, ip
 80157ec:	9302      	str	r3, [sp, #8]
 80157ee:	d12d      	bne.n	801584c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x254>
 80157f0:	455a      	cmp	r2, fp
 80157f2:	d12b      	bne.n	801584c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x254>
 80157f4:	6828      	ldr	r0, [r5, #0]
 80157f6:	6803      	ldr	r3, [r0, #0]
 80157f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157fa:	4798      	blx	r3
 80157fc:	07c3      	lsls	r3, r0, #31
 80157fe:	d51b      	bpl.n	8015838 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x240>
 8015800:	6828      	ldr	r0, [r5, #0]
 8015802:	9b02      	ldr	r3, [sp, #8]
 8015804:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8015808:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801580c:	6803      	ldr	r3, [r0, #0]
 801580e:	f8cd b000 	str.w	fp, [sp]
 8015812:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8015814:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015818:	4623      	mov	r3, r4
 801581a:	47a8      	blx	r5
 801581c:	4607      	mov	r7, r0
 801581e:	4638      	mov	r0, r7
 8015820:	b00f      	add	sp, #60	; 0x3c
 8015822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015826:	bf1f      	itttt	ne
 8015828:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801582c:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8015830:	189b      	addne	r3, r3, r2
 8015832:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8015836:	e7ae      	b.n	8015796 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 8015838:	6828      	ldr	r0, [r5, #0]
 801583a:	6803      	ldr	r3, [r0, #0]
 801583c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801583e:	9b02      	ldr	r3, [sp, #8]
 8015840:	4642      	mov	r2, r8
 8015842:	fb03 f30a 	mul.w	r3, r3, sl
 8015846:	4621      	mov	r1, r4
 8015848:	47a8      	blx	r5
 801584a:	e7e8      	b.n	801581e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801584c:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 8015850:	f04f 0900 	mov.w	r9, #0
 8015854:	9b02      	ldr	r3, [sp, #8]
 8015856:	454b      	cmp	r3, r9
 8015858:	dde1      	ble.n	801581e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801585a:	6828      	ldr	r0, [r5, #0]
 801585c:	6803      	ldr	r3, [r0, #0]
 801585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015860:	4642      	mov	r2, r8
 8015862:	461e      	mov	r6, r3
 8015864:	4621      	mov	r1, r4
 8015866:	465b      	mov	r3, fp
 8015868:	47b0      	blx	r6
 801586a:	9b03      	ldr	r3, [sp, #12]
 801586c:	44d0      	add	r8, sl
 801586e:	441c      	add	r4, r3
 8015870:	f109 0901 	add.w	r9, r9, #1
 8015874:	e7ee      	b.n	8015854 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25c>
 8015876:	bf00      	nop
 8015878:	20005f24 	.word	0x20005f24
 801587c:	0801f6ed 	.word	0x0801f6ed
 8015880:	0801fec9 	.word	0x0801fec9
 8015884:	0801f6bb 	.word	0x0801f6bb
 8015888:	0801f79f 	.word	0x0801f79f
 801588c:	0801f7f4 	.word	0x0801f7f4
 8015890:	20005f1e 	.word	0x20005f1e
 8015894:	20005f20 	.word	0x20005f20
 8015898:	0801f832 	.word	0x0801f832

0801589c <_ZN8touchgfx8LCD24bppC1Ev>:
 801589c:	4a0b      	ldr	r2, [pc, #44]	; (80158cc <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801589e:	6002      	str	r2, [r0, #0]
 80158a0:	2200      	movs	r2, #0
 80158a2:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80158a6:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80158aa:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80158ae:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80158b2:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80158b6:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80158ba:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80158be:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80158c2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80158c6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80158ca:	4770      	bx	lr
 80158cc:	0801fb18 	.word	0x0801fb18

080158d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80158d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158d4:	b093      	sub	sp, #76	; 0x4c
 80158d6:	880c      	ldrh	r4, [r1, #0]
 80158d8:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 80158dc:	4605      	mov	r5, r0
 80158de:	460f      	mov	r7, r1
 80158e0:	4691      	mov	r9, r2
 80158e2:	b12c      	cbz	r4, 80158f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 80158e4:	4b71      	ldr	r3, [pc, #452]	; (8015aac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80158e6:	4a72      	ldr	r2, [pc, #456]	; (8015ab0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80158e8:	4872      	ldr	r0, [pc, #456]	; (8015ab4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80158ea:	2168      	movs	r1, #104	; 0x68
 80158ec:	f006 f852 	bl	801b994 <__assert_func>
 80158f0:	6810      	ldr	r0, [r2, #0]
 80158f2:	6851      	ldr	r1, [r2, #4]
 80158f4:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8015abc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 80158f8:	ae0e      	add	r6, sp, #56	; 0x38
 80158fa:	c603      	stmia	r6!, {r0, r1}
 80158fc:	6818      	ldr	r0, [r3, #0]
 80158fe:	6859      	ldr	r1, [r3, #4]
 8015900:	ae10      	add	r6, sp, #64	; 0x40
 8015902:	c603      	stmia	r6!, {r0, r1}
 8015904:	a80e      	add	r0, sp, #56	; 0x38
 8015906:	f7fb fd63 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801590a:	4649      	mov	r1, r9
 801590c:	a810      	add	r0, sp, #64	; 0x40
 801590e:	f7fb fd47 	bl	80113a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015912:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8015916:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801591a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801591e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8015ab8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8015922:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8015926:	f8d9 0000 	ldr.w	r0, [r9]
 801592a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801592e:	440d      	add	r5, r1
 8015930:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8015934:	440a      	add	r2, r1
 8015936:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801593a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801593e:	4413      	add	r3, r2
 8015940:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015944:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8015948:	930b      	str	r3, [sp, #44]	; 0x2c
 801594a:	6803      	ldr	r3, [r0, #0]
 801594c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015950:	4798      	blx	r3
 8015952:	2801      	cmp	r0, #1
 8015954:	d11e      	bne.n	8015994 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 8015956:	220b      	movs	r2, #11
 8015958:	9008      	str	r0, [sp, #32]
 801595a:	9207      	str	r2, [sp, #28]
 801595c:	f8ba 2000 	ldrh.w	r2, [sl]
 8015960:	f8cd 8010 	str.w	r8, [sp, #16]
 8015964:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8015968:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801596c:	9203      	str	r2, [sp, #12]
 801596e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015972:	9202      	str	r2, [sp, #8]
 8015974:	b2b6      	uxth	r6, r6
 8015976:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801597a:	9200      	str	r2, [sp, #0]
 801597c:	9601      	str	r6, [sp, #4]
 801597e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015982:	f8d9 0000 	ldr.w	r0, [r9]
 8015986:	463a      	mov	r2, r7
 8015988:	4629      	mov	r1, r5
 801598a:	f7fa f967 	bl	800fc5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801598e:	b013      	add	sp, #76	; 0x4c
 8015990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015994:	f8d9 0000 	ldr.w	r0, [r9]
 8015998:	6803      	ldr	r3, [r0, #0]
 801599a:	6a1b      	ldr	r3, [r3, #32]
 801599c:	4798      	blx	r3
 801599e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80159a2:	f8ba 3000 	ldrh.w	r3, [sl]
 80159a6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80159aa:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80159ae:	fb01 2303 	mla	r3, r1, r3, r2
 80159b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80159b6:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 80159ba:	4418      	add	r0, r3
 80159bc:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80159c0:	930c      	str	r3, [sp, #48]	; 0x30
 80159c2:	4621      	mov	r1, r4
 80159c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159c6:	4299      	cmp	r1, r3
 80159c8:	da6a      	bge.n	8015aa0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 80159ca:	1cc2      	adds	r2, r0, #3
 80159cc:	46aa      	mov	sl, r5
 80159ce:	ebaa 0305 	sub.w	r3, sl, r5
 80159d2:	429e      	cmp	r6, r3
 80159d4:	dd55      	ble.n	8015a82 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 80159d6:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80159da:	2404      	movs	r4, #4
 80159dc:	fb14 4303 	smlabb	r3, r4, r3, r4
 80159e0:	eb07 0e03 	add.w	lr, r7, r3
 80159e4:	f89e 4003 	ldrb.w	r4, [lr, #3]
 80159e8:	b184      	cbz	r4, 8015a0c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80159ea:	2cff      	cmp	r4, #255	; 0xff
 80159ec:	f817 b003 	ldrb.w	fp, [r7, r3]
 80159f0:	d10e      	bne.n	8015a10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80159f2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80159f6:	d10b      	bne.n	8015a10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80159f8:	f802 bc03 	strb.w	fp, [r2, #-3]
 80159fc:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8015a00:	f802 3c02 	strb.w	r3, [r2, #-2]
 8015a04:	f89e 3002 	ldrb.w	r3, [lr, #2]
 8015a08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015a0c:	3203      	adds	r2, #3
 8015a0e:	e7de      	b.n	80159ce <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 8015a10:	fb08 f404 	mul.w	r4, r8, r4
 8015a14:	1c63      	adds	r3, r4, #1
 8015a16:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8015a1a:	121b      	asrs	r3, r3, #8
 8015a1c:	b29c      	uxth	r4, r3
 8015a1e:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8015a22:	43db      	mvns	r3, r3
 8015a24:	b2db      	uxtb	r3, r3
 8015a26:	fb1b fb04 	smulbb	fp, fp, r4
 8015a2a:	fb0c bc03 	mla	ip, ip, r3, fp
 8015a2e:	fa1f fc8c 	uxth.w	ip, ip
 8015a32:	f10c 0b01 	add.w	fp, ip, #1
 8015a36:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8015a3a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015a3e:	f802 cc03 	strb.w	ip, [r2, #-3]
 8015a42:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 8015a46:	f89e c001 	ldrb.w	ip, [lr, #1]
 8015a4a:	fb1b fb03 	smulbb	fp, fp, r3
 8015a4e:	fb0c bc04 	mla	ip, ip, r4, fp
 8015a52:	fa1f fc8c 	uxth.w	ip, ip
 8015a56:	f10c 0b01 	add.w	fp, ip, #1
 8015a5a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8015a5e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015a62:	f802 cc02 	strb.w	ip, [r2, #-2]
 8015a66:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8015a6a:	f89e e002 	ldrb.w	lr, [lr, #2]
 8015a6e:	fb1c f303 	smulbb	r3, ip, r3
 8015a72:	fb0e 3304 	mla	r3, lr, r4, r3
 8015a76:	b29b      	uxth	r3, r3
 8015a78:	1c5c      	adds	r4, r3, #1
 8015a7a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8015a7e:	121b      	asrs	r3, r3, #8
 8015a80:	e7c2      	b.n	8015a08 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8015a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015a86:	881b      	ldrh	r3, [r3, #0]
 8015a88:	1b9b      	subs	r3, r3, r6
 8015a8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015a8e:	4413      	add	r3, r2
 8015a90:	4418      	add	r0, r3
 8015a92:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8015a96:	1b9b      	subs	r3, r3, r6
 8015a98:	444b      	add	r3, r9
 8015a9a:	441d      	add	r5, r3
 8015a9c:	3101      	adds	r1, #1
 8015a9e:	e791      	b.n	80159c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8015aa0:	4b05      	ldr	r3, [pc, #20]	; (8015ab8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8015aa2:	6818      	ldr	r0, [r3, #0]
 8015aa4:	6803      	ldr	r3, [r0, #0]
 8015aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa8:	4798      	blx	r3
 8015aaa:	e770      	b.n	801598e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8015aac:	0801f61f 	.word	0x0801f61f
 8015ab0:	0801fceb 	.word	0x0801fceb
 8015ab4:	0801f6bb 	.word	0x0801f6bb
 8015ab8:	20005f24 	.word	0x20005f24
 8015abc:	20005f1e 	.word	0x20005f1e

08015ac0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8015ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac4:	4614      	mov	r4, r2
 8015ac6:	880a      	ldrh	r2, [r1, #0]
 8015ac8:	b091      	sub	sp, #68	; 0x44
 8015aca:	2a01      	cmp	r2, #1
 8015acc:	4680      	mov	r8, r0
 8015ace:	460e      	mov	r6, r1
 8015ad0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015ad4:	d005      	beq.n	8015ae2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 8015ad6:	4b6d      	ldr	r3, [pc, #436]	; (8015c8c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8015ad8:	4a6d      	ldr	r2, [pc, #436]	; (8015c90 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8015ada:	486e      	ldr	r0, [pc, #440]	; (8015c94 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8015adc:	21b6      	movs	r1, #182	; 0xb6
 8015ade:	f005 ff59 	bl	801b994 <__assert_func>
 8015ae2:	6820      	ldr	r0, [r4, #0]
 8015ae4:	6861      	ldr	r1, [r4, #4]
 8015ae6:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8015c98 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 8015aea:	ad0c      	add	r5, sp, #48	; 0x30
 8015aec:	c503      	stmia	r5!, {r0, r1}
 8015aee:	6818      	ldr	r0, [r3, #0]
 8015af0:	6859      	ldr	r1, [r3, #4]
 8015af2:	ad0e      	add	r5, sp, #56	; 0x38
 8015af4:	c503      	stmia	r5!, {r0, r1}
 8015af6:	a80c      	add	r0, sp, #48	; 0x30
 8015af8:	f7fb fc6a 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015afc:	4621      	mov	r1, r4
 8015afe:	a80e      	add	r0, sp, #56	; 0x38
 8015b00:	f7fb fc4e 	bl	80113a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015b04:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015b08:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015b0c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015b10:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8015b14:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015b18:	eb08 0401 	add.w	r4, r8, r1
 8015b1c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8015b20:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8015c9c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 8015b24:	440a      	add	r2, r1
 8015b26:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8015b2a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8015b2e:	f8d8 0000 	ldr.w	r0, [r8]
 8015b32:	4413      	add	r3, r2
 8015b34:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015b38:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8015b3c:	930a      	str	r3, [sp, #40]	; 0x28
 8015b3e:	6803      	ldr	r3, [r0, #0]
 8015b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015b44:	4798      	blx	r3
 8015b46:	2801      	cmp	r0, #1
 8015b48:	d11e      	bne.n	8015b88 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 8015b4a:	220b      	movs	r2, #11
 8015b4c:	9008      	str	r0, [sp, #32]
 8015b4e:	9207      	str	r2, [sp, #28]
 8015b50:	f8b9 2000 	ldrh.w	r2, [r9]
 8015b54:	9206      	str	r2, [sp, #24]
 8015b56:	2200      	movs	r2, #0
 8015b58:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8015b5c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8015b60:	9203      	str	r2, [sp, #12]
 8015b62:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8015b66:	9202      	str	r2, [sp, #8]
 8015b68:	b2ad      	uxth	r5, r5
 8015b6a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8015b6e:	9200      	str	r2, [sp, #0]
 8015b70:	9501      	str	r5, [sp, #4]
 8015b72:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015b76:	f8d8 0000 	ldr.w	r0, [r8]
 8015b7a:	4632      	mov	r2, r6
 8015b7c:	4621      	mov	r1, r4
 8015b7e:	f7fa f86d 	bl	800fc5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015b82:	b011      	add	sp, #68	; 0x44
 8015b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b88:	f8d8 0000 	ldr.w	r0, [r8]
 8015b8c:	6803      	ldr	r3, [r0, #0]
 8015b8e:	6a1b      	ldr	r3, [r3, #32]
 8015b90:	4798      	blx	r3
 8015b92:	f8b9 3000 	ldrh.w	r3, [r9]
 8015b96:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8015b9a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015b9e:	fb01 2303 	mla	r3, r1, r3, r2
 8015ba2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015ba6:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8015baa:	4418      	add	r0, r3
 8015bac:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 8015bb0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8015bb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015bb6:	f04f 0e00 	mov.w	lr, #0
 8015bba:	fa1f f987 	uxth.w	r9, r7
 8015bbe:	b289      	uxth	r1, r1
 8015bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bc2:	459e      	cmp	lr, r3
 8015bc4:	da5c      	bge.n	8015c80 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8015bc6:	1cc3      	adds	r3, r0, #3
 8015bc8:	46a2      	mov	sl, r4
 8015bca:	ebaa 0204 	sub.w	r2, sl, r4
 8015bce:	4295      	cmp	r5, r2
 8015bd0:	dd46      	ble.n	8015c60 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 8015bd2:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8015bd6:	f04f 0c03 	mov.w	ip, #3
 8015bda:	f04f 0b04 	mov.w	fp, #4
 8015bde:	fb1c b202 	smlabb	r2, ip, r2, fp
 8015be2:	2fff      	cmp	r7, #255	; 0xff
 8015be4:	eb06 0c02 	add.w	ip, r6, r2
 8015be8:	f816 b002 	ldrb.w	fp, [r6, r2]
 8015bec:	d02f      	beq.n	8015c4e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 8015bee:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8015bf2:	fb12 f201 	smulbb	r2, r2, r1
 8015bf6:	fb0b 2209 	mla	r2, fp, r9, r2
 8015bfa:	b292      	uxth	r2, r2
 8015bfc:	f102 0b01 	add.w	fp, r2, #1
 8015c00:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8015c04:	1212      	asrs	r2, r2, #8
 8015c06:	f803 2c03 	strb.w	r2, [r3, #-3]
 8015c0a:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 8015c0e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8015c12:	fb1b fb01 	smulbb	fp, fp, r1
 8015c16:	fb02 b209 	mla	r2, r2, r9, fp
 8015c1a:	b292      	uxth	r2, r2
 8015c1c:	f102 0b01 	add.w	fp, r2, #1
 8015c20:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8015c24:	1212      	asrs	r2, r2, #8
 8015c26:	f803 2c02 	strb.w	r2, [r3, #-2]
 8015c2a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8015c2e:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 8015c32:	fb1c fc01 	smulbb	ip, ip, r1
 8015c36:	fb02 c209 	mla	r2, r2, r9, ip
 8015c3a:	b292      	uxth	r2, r2
 8015c3c:	f102 0c01 	add.w	ip, r2, #1
 8015c40:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015c44:	1212      	asrs	r2, r2, #8
 8015c46:	f803 2c01 	strb.w	r2, [r3, #-1]
 8015c4a:	3303      	adds	r3, #3
 8015c4c:	e7bd      	b.n	8015bca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 8015c4e:	f803 bc03 	strb.w	fp, [r3, #-3]
 8015c52:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8015c56:	f803 2c02 	strb.w	r2, [r3, #-2]
 8015c5a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8015c5e:	e7f2      	b.n	8015c46 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 8015c60:	4b0d      	ldr	r3, [pc, #52]	; (8015c98 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8015c62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015c64:	881b      	ldrh	r3, [r3, #0]
 8015c66:	1b5b      	subs	r3, r3, r5
 8015c68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c6c:	4413      	add	r3, r2
 8015c6e:	4418      	add	r0, r3
 8015c70:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8015c74:	1b5b      	subs	r3, r3, r5
 8015c76:	4443      	add	r3, r8
 8015c78:	441c      	add	r4, r3
 8015c7a:	f10e 0e01 	add.w	lr, lr, #1
 8015c7e:	e79f      	b.n	8015bc0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8015c80:	4b06      	ldr	r3, [pc, #24]	; (8015c9c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8015c82:	6818      	ldr	r0, [r3, #0]
 8015c84:	6803      	ldr	r3, [r0, #0]
 8015c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c88:	4798      	blx	r3
 8015c8a:	e77a      	b.n	8015b82 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8015c8c:	0801f503 	.word	0x0801f503
 8015c90:	0801fbde 	.word	0x0801fbde
 8015c94:	0801f6bb 	.word	0x0801f6bb
 8015c98:	20005f1e 	.word	0x20005f1e
 8015c9c:	20005f24 	.word	0x20005f24

08015ca0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8015ca0:	b570      	push	{r4, r5, r6, lr}
 8015ca2:	780d      	ldrb	r5, [r1, #0]
 8015ca4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8015ca8:	2d01      	cmp	r5, #1
 8015caa:	d00d      	beq.n	8015cc8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8015cac:	d307      	bcc.n	8015cbe <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8015cae:	2d02      	cmp	r5, #2
 8015cb0:	d10f      	bne.n	8015cd2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8015cb2:	4b08      	ldr	r3, [pc, #32]	; (8015cd4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8015cb4:	4a08      	ldr	r2, [pc, #32]	; (8015cd8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8015cb6:	4809      	ldr	r0, [pc, #36]	; (8015cdc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8015cb8:	215b      	movs	r1, #91	; 0x5b
 8015cba:	f005 fe6b 	bl	801b994 <__assert_func>
 8015cbe:	9404      	str	r4, [sp, #16]
 8015cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cc4:	f7ff be04 	b.w	80158d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8015cc8:	9404      	str	r4, [sp, #16]
 8015cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cce:	f7ff bef7 	b.w	8015ac0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8015cd2:	bd70      	pop	{r4, r5, r6, pc}
 8015cd4:	0801f4b8 	.word	0x0801f4b8
 8015cd8:	0801fb5c 	.word	0x0801fb5c
 8015cdc:	0801f6bb 	.word	0x0801f6bb

08015ce0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8015ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce4:	4605      	mov	r5, r0
 8015ce6:	b08f      	sub	sp, #60	; 0x3c
 8015ce8:	460c      	mov	r4, r1
 8015cea:	461f      	mov	r7, r3
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d04e      	beq.n	8015d8e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 8015cf0:	6808      	ldr	r0, [r1, #0]
 8015cf2:	6849      	ldr	r1, [r1, #4]
 8015cf4:	4e81      	ldr	r6, [pc, #516]	; (8015efc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 8015cf6:	ab0a      	add	r3, sp, #40	; 0x28
 8015cf8:	c303      	stmia	r3!, {r0, r1}
 8015cfa:	6810      	ldr	r0, [r2, #0]
 8015cfc:	6851      	ldr	r1, [r2, #4]
 8015cfe:	ab0c      	add	r3, sp, #48	; 0x30
 8015d00:	c303      	stmia	r3!, {r0, r1}
 8015d02:	a80a      	add	r0, sp, #40	; 0x28
 8015d04:	f7fb fb64 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015d08:	4621      	mov	r1, r4
 8015d0a:	a80c      	add	r0, sp, #48	; 0x30
 8015d0c:	f7fb fb48 	bl	80113a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015d10:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8015d14:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015d18:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015d1c:	6830      	ldr	r0, [r6, #0]
 8015d1e:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 8015d22:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 8015d26:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015d2a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8015d2e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8015d32:	440a      	add	r2, r1
 8015d34:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8015d38:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8015d3c:	4413      	add	r3, r2
 8015d3e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015d42:	6803      	ldr	r3, [r0, #0]
 8015d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d46:	4798      	blx	r3
 8015d48:	2fff      	cmp	r7, #255	; 0xff
 8015d4a:	4633      	mov	r3, r6
 8015d4c:	4e6c      	ldr	r6, [pc, #432]	; (8015f00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 8015d4e:	d021      	beq.n	8015d94 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 8015d50:	f010 0f04 	tst.w	r0, #4
 8015d54:	6818      	ldr	r0, [r3, #0]
 8015d56:	d020      	beq.n	8015d9a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 8015d58:	2100      	movs	r1, #0
 8015d5a:	f04f 0e01 	mov.w	lr, #1
 8015d5e:	f8d0 c000 	ldr.w	ip, [r0]
 8015d62:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015d66:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8015d6a:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 8015d6e:	8836      	ldrh	r6, [r6, #0]
 8015d70:	9703      	str	r7, [sp, #12]
 8015d72:	e9cd 1604 	strd	r1, r6, [sp, #16]
 8015d76:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015d7a:	9102      	str	r1, [sp, #8]
 8015d7c:	b2a4      	uxth	r4, r4
 8015d7e:	fa1f f188 	uxth.w	r1, r8
 8015d82:	9101      	str	r1, [sp, #4]
 8015d84:	9400      	str	r4, [sp, #0]
 8015d86:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 8015d8a:	4629      	mov	r1, r5
 8015d8c:	47a0      	blx	r4
 8015d8e:	b00f      	add	sp, #60	; 0x3c
 8015d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d94:	f010 0f01 	tst.w	r0, #1
 8015d98:	e7dc      	b.n	8015d54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 8015d9a:	6803      	ldr	r3, [r0, #0]
 8015d9c:	6a1b      	ldr	r3, [r3, #32]
 8015d9e:	4798      	blx	r3
 8015da0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8015da4:	8833      	ldrh	r3, [r6, #0]
 8015da6:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8015daa:	fb01 2303 	mla	r3, r1, r3, r2
 8015dae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015db2:	2fff      	cmp	r7, #255	; 0xff
 8015db4:	4418      	add	r0, r3
 8015db6:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8015dba:	d128      	bne.n	8015e0e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 8015dbc:	0051      	lsls	r1, r2, #1
 8015dbe:	2700      	movs	r7, #0
 8015dc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015dc4:	4547      	cmp	r7, r8
 8015dc6:	f280 8092 	bge.w	8015eee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 8015dca:	4684      	mov	ip, r0
 8015dcc:	f04f 0e00 	mov.w	lr, #0
 8015dd0:	45a6      	cmp	lr, r4
 8015dd2:	f10c 0c03 	add.w	ip, ip, #3
 8015dd6:	da7c      	bge.n	8015ed2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 8015dd8:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 8015ddc:	ea4f 2a29 	mov.w	sl, r9, asr #8
 8015de0:	ea4f 03e9 	mov.w	r3, r9, asr #3
 8015de4:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8015de8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8015dec:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 8015df0:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 8015df4:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8015df8:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 8015dfc:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8015e00:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8015e04:	f80c ac01 	strb.w	sl, [ip, #-1]
 8015e08:	f10e 0e01 	add.w	lr, lr, #1
 8015e0c:	e7e0      	b.n	8015dd0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 8015e0e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8015e12:	ea6f 0c07 	mvn.w	ip, r7
 8015e16:	9309      	str	r3, [sp, #36]	; 0x24
 8015e18:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8015e1c:	f04f 0900 	mov.w	r9, #0
 8015e20:	b2bb      	uxth	r3, r7
 8015e22:	fa5f fc8c 	uxtb.w	ip, ip
 8015e26:	45c1      	cmp	r9, r8
 8015e28:	da61      	bge.n	8015eee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 8015e2a:	4601      	mov	r1, r0
 8015e2c:	f04f 0e00 	mov.w	lr, #0
 8015e30:	45a6      	cmp	lr, r4
 8015e32:	f101 0103 	add.w	r1, r1, #3
 8015e36:	da3b      	bge.n	8015eb0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 8015e38:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 8015e3c:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 8015e40:	1216      	asrs	r6, r2, #8
 8015e42:	10d7      	asrs	r7, r2, #3
 8015e44:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 8015e48:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 8015e4c:	b2d2      	uxtb	r2, r2
 8015e4e:	fb1b fb0c 	smulbb	fp, fp, ip
 8015e52:	fb02 b203 	mla	r2, r2, r3, fp
 8015e56:	b292      	uxth	r2, r2
 8015e58:	f102 0b01 	add.w	fp, r2, #1
 8015e5c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8015e60:	1212      	asrs	r2, r2, #8
 8015e62:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8015e66:	f801 2c03 	strb.w	r2, [r1, #-3]
 8015e6a:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8015e6e:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 8015e72:	fb17 f703 	smulbb	r7, r7, r3
 8015e76:	fb02 770c 	mla	r7, r2, ip, r7
 8015e7a:	b2bf      	uxth	r7, r7
 8015e7c:	1c7a      	adds	r2, r7, #1
 8015e7e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015e82:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8015e86:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8015e8a:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8015e8e:	fb16 f603 	smulbb	r6, r6, r3
 8015e92:	fb02 660c 	mla	r6, r2, ip, r6
 8015e96:	b2b6      	uxth	r6, r6
 8015e98:	1c72      	adds	r2, r6, #1
 8015e9a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8015e9e:	123f      	asrs	r7, r7, #8
 8015ea0:	1236      	asrs	r6, r6, #8
 8015ea2:	f801 7c02 	strb.w	r7, [r1, #-2]
 8015ea6:	f801 6c01 	strb.w	r6, [r1, #-1]
 8015eaa:	f10e 0e01 	add.w	lr, lr, #1
 8015eae:	e7bf      	b.n	8015e30 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 8015eb0:	4a13      	ldr	r2, [pc, #76]	; (8015f00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 8015eb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015eb4:	8812      	ldrh	r2, [r2, #0]
 8015eb6:	1b12      	subs	r2, r2, r4
 8015eb8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015ebc:	440a      	add	r2, r1
 8015ebe:	4410      	add	r0, r2
 8015ec0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8015ec4:	1b12      	subs	r2, r2, r4
 8015ec6:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8015eca:	4415      	add	r5, r2
 8015ecc:	f109 0901 	add.w	r9, r9, #1
 8015ed0:	e7a9      	b.n	8015e26 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 8015ed2:	8833      	ldrh	r3, [r6, #0]
 8015ed4:	1b1b      	subs	r3, r3, r4
 8015ed6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015eda:	4413      	add	r3, r2
 8015edc:	4418      	add	r0, r3
 8015ede:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8015ee2:	1b1b      	subs	r3, r3, r4
 8015ee4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8015ee8:	441d      	add	r5, r3
 8015eea:	3701      	adds	r7, #1
 8015eec:	e76a      	b.n	8015dc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 8015eee:	4b03      	ldr	r3, [pc, #12]	; (8015efc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 8015ef0:	6818      	ldr	r0, [r3, #0]
 8015ef2:	6803      	ldr	r3, [r0, #0]
 8015ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ef6:	4798      	blx	r3
 8015ef8:	e749      	b.n	8015d8e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 8015efa:	bf00      	nop
 8015efc:	20005f24 	.word	0x20005f24
 8015f00:	20005f1e 	.word	0x20005f1e

08015f04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8015f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f08:	460c      	mov	r4, r1
 8015f0a:	b08b      	sub	sp, #44	; 0x2c
 8015f0c:	4680      	mov	r8, r0
 8015f0e:	6808      	ldr	r0, [r1, #0]
 8015f10:	6849      	ldr	r1, [r1, #4]
 8015f12:	469a      	mov	sl, r3
 8015f14:	ab06      	add	r3, sp, #24
 8015f16:	c303      	stmia	r3!, {r0, r1}
 8015f18:	6810      	ldr	r0, [r2, #0]
 8015f1a:	6851      	ldr	r1, [r2, #4]
 8015f1c:	ab08      	add	r3, sp, #32
 8015f1e:	c303      	stmia	r3!, {r0, r1}
 8015f20:	a806      	add	r0, sp, #24
 8015f22:	f7fb fa55 	bl	80113d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015f26:	4621      	mov	r1, r4
 8015f28:	a808      	add	r0, sp, #32
 8015f2a:	f7fb fa39 	bl	80113a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015f2e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015f32:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015f36:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015f3a:	4c5d      	ldr	r4, [pc, #372]	; (80160b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8015f3c:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 8015f40:	6820      	ldr	r0, [r4, #0]
 8015f42:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 8015f46:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015f4a:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 8015f4e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8015f52:	440a      	add	r2, r1
 8015f54:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015f58:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015f5c:	4413      	add	r3, r2
 8015f5e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015f62:	6803      	ldr	r3, [r0, #0]
 8015f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f66:	4798      	blx	r3
 8015f68:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8015f6c:	d118      	bne.n	8015fa0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8015f6e:	f010 0f20 	tst.w	r0, #32
 8015f72:	6820      	ldr	r0, [r4, #0]
 8015f74:	d017      	beq.n	8015fa6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8015f76:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8015f7a:	6801      	ldr	r1, [r0, #0]
 8015f7c:	9402      	str	r4, [sp, #8]
 8015f7e:	b2bf      	uxth	r7, r7
 8015f80:	fa1f f489 	uxth.w	r4, r9
 8015f84:	f8cd a00c 	str.w	sl, [sp, #12]
 8015f88:	9401      	str	r4, [sp, #4]
 8015f8a:	9700      	str	r7, [sp, #0]
 8015f8c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8015f8e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015f92:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015f96:	4641      	mov	r1, r8
 8015f98:	47a0      	blx	r4
 8015f9a:	b00b      	add	sp, #44	; 0x2c
 8015f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015fa4:	e7e5      	b.n	8015f72 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8015fa6:	6803      	ldr	r3, [r0, #0]
 8015fa8:	6a1b      	ldr	r3, [r3, #32]
 8015faa:	4798      	blx	r3
 8015fac:	4b41      	ldr	r3, [pc, #260]	; (80160b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 8015fae:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8015fb2:	881a      	ldrh	r2, [r3, #0]
 8015fb4:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8015fb8:	fb04 1202 	mla	r2, r4, r2, r1
 8015fbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015fc0:	4410      	add	r0, r2
 8015fc2:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 8015fc6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8015fca:	0092      	lsls	r2, r2, #2
 8015fcc:	9105      	str	r1, [sp, #20]
 8015fce:	9204      	str	r2, [sp, #16]
 8015fd0:	f04f 0c00 	mov.w	ip, #0
 8015fd4:	45cc      	cmp	ip, r9
 8015fd6:	da65      	bge.n	80160a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 8015fd8:	1cc4      	adds	r4, r0, #3
 8015fda:	f108 0504 	add.w	r5, r8, #4
 8015fde:	f04f 0e00 	mov.w	lr, #0
 8015fe2:	45be      	cmp	lr, r7
 8015fe4:	da4d      	bge.n	8016082 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 8015fe6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015fea:	b181      	cbz	r1, 801600e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8015fec:	29ff      	cmp	r1, #255	; 0xff
 8015fee:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 8015ff2:	d111      	bne.n	8016018 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8015ff4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8015ff8:	d10e      	bne.n	8016018 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8015ffa:	f804 bc03 	strb.w	fp, [r4, #-3]
 8015ffe:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8016002:	f804 2c02 	strb.w	r2, [r4, #-2]
 8016006:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801600a:	f804 2c01 	strb.w	r2, [r4, #-1]
 801600e:	f10e 0e01 	add.w	lr, lr, #1
 8016012:	3403      	adds	r4, #3
 8016014:	3504      	adds	r5, #4
 8016016:	e7e4      	b.n	8015fe2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8016018:	fb0a f101 	mul.w	r1, sl, r1
 801601c:	1c4a      	adds	r2, r1, #1
 801601e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8016022:	1212      	asrs	r2, r2, #8
 8016024:	b296      	uxth	r6, r2
 8016026:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801602a:	43d2      	mvns	r2, r2
 801602c:	b2d2      	uxtb	r2, r2
 801602e:	fb1b fb06 	smulbb	fp, fp, r6
 8016032:	fb01 b102 	mla	r1, r1, r2, fp
 8016036:	b289      	uxth	r1, r1
 8016038:	f101 0b01 	add.w	fp, r1, #1
 801603c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8016040:	1209      	asrs	r1, r1, #8
 8016042:	f804 1c03 	strb.w	r1, [r4, #-3]
 8016046:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801604a:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801604e:	fb1b fb02 	smulbb	fp, fp, r2
 8016052:	fb01 b106 	mla	r1, r1, r6, fp
 8016056:	b289      	uxth	r1, r1
 8016058:	f101 0b01 	add.w	fp, r1, #1
 801605c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8016060:	1209      	asrs	r1, r1, #8
 8016062:	f804 1c02 	strb.w	r1, [r4, #-2]
 8016066:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801606a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801606e:	fb11 f202 	smulbb	r2, r1, r2
 8016072:	fb0b 2206 	mla	r2, fp, r6, r2
 8016076:	b292      	uxth	r2, r2
 8016078:	1c56      	adds	r6, r2, #1
 801607a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801607e:	1212      	asrs	r2, r2, #8
 8016080:	e7c3      	b.n	801600a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 8016082:	881a      	ldrh	r2, [r3, #0]
 8016084:	9905      	ldr	r1, [sp, #20]
 8016086:	1bd2      	subs	r2, r2, r7
 8016088:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801608c:	440a      	add	r2, r1
 801608e:	4410      	add	r0, r2
 8016090:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8016094:	9904      	ldr	r1, [sp, #16]
 8016096:	1bd2      	subs	r2, r2, r7
 8016098:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801609c:	4490      	add	r8, r2
 801609e:	f10c 0c01 	add.w	ip, ip, #1
 80160a2:	e797      	b.n	8015fd4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 80160a4:	4b02      	ldr	r3, [pc, #8]	; (80160b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 80160a6:	6818      	ldr	r0, [r3, #0]
 80160a8:	6803      	ldr	r3, [r0, #0]
 80160aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ac:	4798      	blx	r3
 80160ae:	e774      	b.n	8015f9a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80160b0:	20005f24 	.word	0x20005f24
 80160b4:	20005f1e 	.word	0x20005f1e

080160b8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80160b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160bc:	b085      	sub	sp, #20
 80160be:	4606      	mov	r6, r0
 80160c0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80160c4:	460c      	mov	r4, r1
 80160c6:	4691      	mov	r9, r2
 80160c8:	4698      	mov	r8, r3
 80160ca:	b3a5      	cbz	r5, 8016136 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 80160cc:	4608      	mov	r0, r1
 80160ce:	f7fd fa0b 	bl	80134e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80160d2:	4607      	mov	r7, r0
 80160d4:	4620      	mov	r0, r4
 80160d6:	f7fd fa41 	bl	801355c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80160da:	f8ad 000e 	strh.w	r0, [sp, #14]
 80160de:	4620      	mov	r0, r4
 80160e0:	f8ad 9008 	strh.w	r9, [sp, #8]
 80160e4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80160e8:	f8ad 700c 	strh.w	r7, [sp, #12]
 80160ec:	f7fd fb4e 	bl	801378c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80160f0:	b1a0      	cbz	r0, 801611c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 80160f2:	4620      	mov	r0, r4
 80160f4:	f7fd fb4a 	bl	801378c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80160f8:	2801      	cmp	r0, #1
 80160fa:	d00f      	beq.n	801611c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 80160fc:	4620      	mov	r0, r4
 80160fe:	f7fd fb45 	bl	801378c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016102:	2802      	cmp	r0, #2
 8016104:	d00a      	beq.n	801611c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8016106:	4620      	mov	r0, r4
 8016108:	f7fd fb40 	bl	801378c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801610c:	280b      	cmp	r0, #11
 801610e:	d005      	beq.n	801611c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8016110:	4b21      	ldr	r3, [pc, #132]	; (8016198 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 8016112:	4a22      	ldr	r2, [pc, #136]	; (801619c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 8016114:	4822      	ldr	r0, [pc, #136]	; (80161a0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 8016116:	213f      	movs	r1, #63	; 0x3f
 8016118:	f005 fc3c 	bl	801b994 <__assert_func>
 801611c:	4620      	mov	r0, r4
 801611e:	f7fd fb35 	bl	801378c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016122:	2802      	cmp	r0, #2
 8016124:	4620      	mov	r0, r4
 8016126:	d109      	bne.n	801613c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 8016128:	f7fd faac 	bl	8013684 <_ZNK8touchgfx6Bitmap7getDataEv>
 801612c:	462b      	mov	r3, r5
 801612e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016130:	a902      	add	r1, sp, #8
 8016132:	f7ff fee7 	bl	8015f04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016136:	b005      	add	sp, #20
 8016138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801613c:	f7fd fb26 	bl	801378c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016140:	280b      	cmp	r0, #11
 8016142:	4620      	mov	r0, r4
 8016144:	d10d      	bne.n	8016162 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8016146:	f7fd fa9d 	bl	8013684 <_ZNK8touchgfx6Bitmap7getDataEv>
 801614a:	4606      	mov	r6, r0
 801614c:	4620      	mov	r0, r4
 801614e:	f7fd facb 	bl	80136e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8016152:	9500      	str	r5, [sp, #0]
 8016154:	4601      	mov	r1, r0
 8016156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016158:	aa02      	add	r2, sp, #8
 801615a:	4630      	mov	r0, r6
 801615c:	f7ff fda0 	bl	8015ca0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8016160:	e7e9      	b.n	8016136 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8016162:	f7fd fb13 	bl	801378c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016166:	b940      	cbnz	r0, 801617a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 8016168:	4620      	mov	r0, r4
 801616a:	f7fd fa8b 	bl	8013684 <_ZNK8touchgfx6Bitmap7getDataEv>
 801616e:	462b      	mov	r3, r5
 8016170:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016172:	a902      	add	r1, sp, #8
 8016174:	f7ff fdb4 	bl	8015ce0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8016178:	e7dd      	b.n	8016136 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801617a:	6833      	ldr	r3, [r6, #0]
 801617c:	4620      	mov	r0, r4
 801617e:	68df      	ldr	r7, [r3, #12]
 8016180:	f7fd fa80 	bl	8013684 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016184:	2300      	movs	r3, #0
 8016186:	e9cd 5300 	strd	r5, r3, [sp]
 801618a:	4601      	mov	r1, r0
 801618c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801618e:	aa02      	add	r2, sp, #8
 8016190:	4630      	mov	r0, r6
 8016192:	47b8      	blx	r7
 8016194:	e7cf      	b.n	8016136 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8016196:	bf00      	nop
 8016198:	0801f551 	.word	0x0801f551
 801619c:	0801fc67 	.word	0x0801fc67
 80161a0:	0801f6bb 	.word	0x0801f6bb

080161a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80161a4:	b570      	push	{r4, r5, r6, lr}
 80161a6:	9d04      	ldr	r5, [sp, #16]
 80161a8:	460c      	mov	r4, r1
 80161aa:	4619      	mov	r1, r3
 80161ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80161b0:	2a0c      	cmp	r2, #12
 80161b2:	d826      	bhi.n	8016202 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 80161b4:	e8df f002 	tbb	[pc, r2]
 80161b8:	200e1407 	.word	0x200e1407
 80161bc:	20202020 	.word	0x20202020
 80161c0:	20202020 	.word	0x20202020
 80161c4:	20          	.byte	0x20
 80161c5:	00          	.byte	0x00
 80161c6:	4b0f      	ldr	r3, [pc, #60]	; (8016204 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80161c8:	4a0f      	ldr	r2, [pc, #60]	; (8016208 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80161ca:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80161ce:	480f      	ldr	r0, [pc, #60]	; (801620c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80161d0:	f005 fbe0 	bl	801b994 <__assert_func>
 80161d4:	462a      	mov	r2, r5
 80161d6:	4620      	mov	r0, r4
 80161d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161dc:	f7ff be92 	b.w	8015f04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80161e0:	2600      	movs	r6, #0
 80161e2:	6802      	ldr	r2, [r0, #0]
 80161e4:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80161e8:	68d6      	ldr	r6, [r2, #12]
 80161ea:	462b      	mov	r3, r5
 80161ec:	460a      	mov	r2, r1
 80161ee:	46b4      	mov	ip, r6
 80161f0:	4621      	mov	r1, r4
 80161f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161f6:	4760      	bx	ip
 80161f8:	4b05      	ldr	r3, [pc, #20]	; (8016210 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80161fa:	4a03      	ldr	r2, [pc, #12]	; (8016208 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80161fc:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8016200:	e7e5      	b.n	80161ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8016202:	bd70      	pop	{r4, r5, r6, pc}
 8016204:	0801f892 	.word	0x0801f892
 8016208:	0801ff4f 	.word	0x0801ff4f
 801620c:	0801f6bb 	.word	0x0801f6bb
 8016210:	0801f8d3 	.word	0x0801f8d3

08016214 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8016214:	b158      	cbz	r0, 801622e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8016216:	2902      	cmp	r1, #2
 8016218:	d00f      	beq.n	801623a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801621a:	2903      	cmp	r1, #3
 801621c:	d010      	beq.n	8016240 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801621e:	2901      	cmp	r1, #1
 8016220:	d101      	bne.n	8016226 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8016222:	2001      	movs	r0, #1
 8016224:	4770      	bx	lr
 8016226:	4b08      	ldr	r3, [pc, #32]	; (8016248 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8016228:	8819      	ldrh	r1, [r3, #0]
 801622a:	4248      	negs	r0, r1
 801622c:	4770      	bx	lr
 801622e:	2902      	cmp	r1, #2
 8016230:	d006      	beq.n	8016240 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8016232:	2903      	cmp	r1, #3
 8016234:	d0f7      	beq.n	8016226 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8016236:	2901      	cmp	r1, #1
 8016238:	d1f3      	bne.n	8016222 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801623a:	4b03      	ldr	r3, [pc, #12]	; (8016248 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801623c:	8818      	ldrh	r0, [r3, #0]
 801623e:	4770      	bx	lr
 8016240:	f04f 30ff 	mov.w	r0, #4294967295
 8016244:	4770      	bx	lr
 8016246:	bf00      	nop
 8016248:	20005f1e 	.word	0x20005f1e

0801624c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801624c:	b170      	cbz	r0, 801626c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801624e:	2902      	cmp	r1, #2
 8016250:	d012      	beq.n	8016278 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8016252:	2903      	cmp	r1, #3
 8016254:	d006      	beq.n	8016264 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8016256:	2901      	cmp	r1, #1
 8016258:	d001      	beq.n	801625e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801625a:	2001      	movs	r0, #1
 801625c:	4770      	bx	lr
 801625e:	4b08      	ldr	r3, [pc, #32]	; (8016280 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8016260:	8818      	ldrh	r0, [r3, #0]
 8016262:	4770      	bx	lr
 8016264:	4b06      	ldr	r3, [pc, #24]	; (8016280 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8016266:	8818      	ldrh	r0, [r3, #0]
 8016268:	4240      	negs	r0, r0
 801626a:	4770      	bx	lr
 801626c:	2902      	cmp	r1, #2
 801626e:	d0f9      	beq.n	8016264 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8016270:	2903      	cmp	r1, #3
 8016272:	d0f2      	beq.n	801625a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8016274:	2901      	cmp	r1, #1
 8016276:	d1f2      	bne.n	801625e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8016278:	f04f 30ff 	mov.w	r0, #4294967295
 801627c:	4770      	bx	lr
 801627e:	bf00      	nop
 8016280:	20005f1e 	.word	0x20005f1e

08016284 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8016284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016288:	b097      	sub	sp, #92	; 0x5c
 801628a:	910b      	str	r1, [sp, #44]	; 0x2c
 801628c:	a912      	add	r1, sp, #72	; 0x48
 801628e:	e881 000c 	stmia.w	r1, {r2, r3}
 8016292:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8016296:	9308      	str	r3, [sp, #32]
 8016298:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801629c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80162a0:	9310      	str	r3, [sp, #64]	; 0x40
 80162a2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80162a6:	930c      	str	r3, [sp, #48]	; 0x30
 80162a8:	7b4b      	ldrb	r3, [r1, #13]
 80162aa:	798d      	ldrb	r5, [r1, #6]
 80162ac:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80162b0:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80162b4:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80162b8:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80162bc:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80162c0:	0158      	lsls	r0, r3, #5
 80162c2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80162c6:	4328      	orrs	r0, r5
 80162c8:	9007      	str	r0, [sp, #28]
 80162ca:	f000 8182 	beq.w	80165d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 80162ce:	011b      	lsls	r3, r3, #4
 80162d0:	79c8      	ldrb	r0, [r1, #7]
 80162d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162d6:	4303      	orrs	r3, r0
 80162d8:	9309      	str	r3, [sp, #36]	; 0x24
 80162da:	f000 817a 	beq.w	80165d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 80162de:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80162e2:	b29b      	uxth	r3, r3
 80162e4:	2f00      	cmp	r7, #0
 80162e6:	f000 8120 	beq.w	801652a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a6>
 80162ea:	1aff      	subs	r7, r7, r3
 80162ec:	b2bf      	uxth	r7, r7
 80162ee:	043b      	lsls	r3, r7, #16
 80162f0:	d502      	bpl.n	80162f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80162f2:	1bf6      	subs	r6, r6, r7
 80162f4:	b236      	sxth	r6, r6
 80162f6:	2700      	movs	r7, #0
 80162f8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80162fc:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8016300:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8016304:	428e      	cmp	r6, r1
 8016306:	b28b      	uxth	r3, r1
 8016308:	bfbf      	itttt	lt
 801630a:	18ff      	addlt	r7, r7, r3
 801630c:	1bbe      	sublt	r6, r7, r6
 801630e:	b2b7      	uxthlt	r7, r6
 8016310:	460e      	movlt	r6, r1
 8016312:	8891      	ldrh	r1, [r2, #4]
 8016314:	440b      	add	r3, r1
 8016316:	b21b      	sxth	r3, r3
 8016318:	930f      	str	r3, [sp, #60]	; 0x3c
 801631a:	88d3      	ldrh	r3, [r2, #6]
 801631c:	9a08      	ldr	r2, [sp, #32]
 801631e:	449a      	add	sl, r3
 8016320:	fa0f f38a 	sxth.w	r3, sl
 8016324:	930e      	str	r3, [sp, #56]	; 0x38
 8016326:	4bb3      	ldr	r3, [pc, #716]	; (80165f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 8016328:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 801632c:	f893 b000 	ldrb.w	fp, [r3]
 8016330:	f10b 3cff 	add.w	ip, fp, #4294967295
 8016334:	f1dc 0300 	rsbs	r3, ip, #0
 8016338:	eb43 030c 	adc.w	r3, r3, ip
 801633c:	930d      	str	r3, [sp, #52]	; 0x34
 801633e:	4631      	mov	r1, r6
 8016340:	464b      	mov	r3, r9
 8016342:	a812      	add	r0, sp, #72	; 0x48
 8016344:	f7fa ff1d 	bl	8011182 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8016348:	4631      	mov	r1, r6
 801634a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801634e:	464b      	mov	r3, r9
 8016350:	9a08      	ldr	r2, [sp, #32]
 8016352:	a812      	add	r0, sp, #72	; 0x48
 8016354:	f7fa ff2d 	bl	80111b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8016358:	a916      	add	r1, sp, #88	; 0x58
 801635a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801635e:	a815      	add	r0, sp, #84	; 0x54
 8016360:	f7fb f808 	bl	8011374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8016364:	f1b9 0f00 	cmp.w	r9, #0
 8016368:	f040 80e2 	bne.w	8016530 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ac>
 801636c:	f1bb 0f01 	cmp.w	fp, #1
 8016370:	f040 80e6 	bne.w	8016540 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2bc>
 8016374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016376:	2b00      	cmp	r3, #0
 8016378:	f040 8130 	bne.w	80165dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x358>
 801637c:	4b9e      	ldr	r3, [pc, #632]	; (80165f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801637e:	6818      	ldr	r0, [r3, #0]
 8016380:	6803      	ldr	r3, [r0, #0]
 8016382:	6a1b      	ldr	r3, [r3, #32]
 8016384:	4798      	blx	r3
 8016386:	4a9d      	ldr	r2, [pc, #628]	; (80165fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8016388:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801638c:	8811      	ldrh	r1, [r2, #0]
 801638e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8016392:	fb01 2303 	mla	r3, r1, r3, r2
 8016396:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801639a:	18c3      	adds	r3, r0, r3
 801639c:	9309      	str	r3, [sp, #36]	; 0x24
 801639e:	2301      	movs	r3, #1
 80163a0:	fa03 f308 	lsl.w	r3, r3, r8
 80163a4:	3b01      	subs	r3, #1
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	f1b8 0f01 	cmp.w	r8, #1
 80163ac:	9311      	str	r3, [sp, #68]	; 0x44
 80163ae:	f000 8117 	beq.w	80165e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 80163b2:	f1b8 0f02 	cmp.w	r8, #2
 80163b6:	f000 8115 	beq.w	80165e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 80163ba:	f1b8 0f04 	cmp.w	r8, #4
 80163be:	bf14      	ite	ne
 80163c0:	2301      	movne	r3, #1
 80163c2:	2311      	moveq	r3, #17
 80163c4:	930a      	str	r3, [sp, #40]	; 0x28
 80163c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163c8:	b153      	cbz	r3, 80163e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 80163ca:	9a07      	ldr	r2, [sp, #28]
 80163cc:	2508      	movs	r5, #8
 80163ce:	fb95 f3f8 	sdiv	r3, r5, r8
 80163d2:	1e5d      	subs	r5, r3, #1
 80163d4:	4415      	add	r5, r2
 80163d6:	fb95 f5f3 	sdiv	r5, r5, r3
 80163da:	fb15 f503 	smulbb	r5, r5, r3
 80163de:	b2ad      	uxth	r5, r5
 80163e0:	b907      	cbnz	r7, 80163e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 80163e2:	b174      	cbz	r4, 8016402 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17e>
 80163e4:	fb15 7304 	smlabb	r3, r5, r4, r7
 80163e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80163ea:	fb13 f308 	smulbb	r3, r3, r8
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	ebaa 0a04 	sub.w	sl, sl, r4
 80163f4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80163f8:	9226      	str	r2, [sp, #152]	; 0x98
 80163fa:	fa1f fa8a 	uxth.w	sl, sl
 80163fe:	f003 0407 	and.w	r4, r3, #7
 8016402:	4649      	mov	r1, r9
 8016404:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016406:	f7ff ff05 	bl	8016214 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801640a:	4649      	mov	r1, r9
 801640c:	4683      	mov	fp, r0
 801640e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016410:	f7ff ff1c 	bl	801624c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8016414:	9a08      	ldr	r2, [sp, #32]
 8016416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016418:	1a9b      	subs	r3, r3, r2
 801641a:	459a      	cmp	sl, r3
 801641c:	bfa8      	it	ge
 801641e:	469a      	movge	sl, r3
 8016420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016422:	1bf6      	subs	r6, r6, r7
 8016424:	1b9e      	subs	r6, r3, r6
 8016426:	9b07      	ldr	r3, [sp, #28]
 8016428:	429e      	cmp	r6, r3
 801642a:	bfd4      	ite	le
 801642c:	ebc7 0706 	rsble	r7, r7, r6
 8016430:	ebc7 0703 	rsbgt	r7, r7, r3
 8016434:	1bed      	subs	r5, r5, r7
 8016436:	fb08 f305 	mul.w	r3, r8, r5
 801643a:	9308      	str	r3, [sp, #32]
 801643c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801643e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8016442:	930d      	str	r3, [sp, #52]	; 0x34
 8016444:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016446:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801644a:	930e      	str	r3, [sp, #56]	; 0x38
 801644c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801644e:	b2de      	uxtb	r6, r3
 8016450:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016452:	781a      	ldrb	r2, [r3, #0]
 8016454:	fb0b 0017 	mls	r0, fp, r7, r0
 8016458:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801645c:	4122      	asrs	r2, r4
 801645e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016462:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 8016466:	b2d2      	uxtb	r2, r2
 8016468:	9307      	str	r3, [sp, #28]
 801646a:	fb03 0b0b 	mla	fp, r3, fp, r0
 801646e:	f1ba 0f00 	cmp.w	sl, #0
 8016472:	f340 80d8 	ble.w	8016626 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8016476:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016478:	46be      	mov	lr, r7
 801647a:	f1be 0f00 	cmp.w	lr, #0
 801647e:	f340 80bf 	ble.w	8016600 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8016482:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016484:	4013      	ands	r3, r2
 8016486:	d03e      	beq.n	8016506 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 8016488:	980a      	ldr	r0, [sp, #40]	; 0x28
 801648a:	fb13 f300 	smulbb	r3, r3, r0
 801648e:	2bfe      	cmp	r3, #254	; 0xfe
 8016490:	dd03      	ble.n	801649a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x216>
 8016492:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016494:	28ff      	cmp	r0, #255	; 0xff
 8016496:	f000 80a7 	beq.w	80165e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x364>
 801649a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801649c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801649e:	fb10 f303 	smulbb	r3, r0, r3
 80164a2:	b29b      	uxth	r3, r3
 80164a4:	1c58      	adds	r0, r3, #1
 80164a6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80164aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80164ae:	fa1f fc83 	uxth.w	ip, r3
 80164b2:	7808      	ldrb	r0, [r1, #0]
 80164b4:	43db      	mvns	r3, r3
 80164b6:	b2db      	uxtb	r3, r3
 80164b8:	fb16 f90c 	smulbb	r9, r6, ip
 80164bc:	fb00 9003 	mla	r0, r0, r3, r9
 80164c0:	b280      	uxth	r0, r0
 80164c2:	f100 0901 	add.w	r9, r0, #1
 80164c6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80164ca:	1200      	asrs	r0, r0, #8
 80164cc:	7008      	strb	r0, [r1, #0]
 80164ce:	7848      	ldrb	r0, [r1, #1]
 80164d0:	fb15 f90c 	smulbb	r9, r5, ip
 80164d4:	fb00 9003 	mla	r0, r0, r3, r9
 80164d8:	b280      	uxth	r0, r0
 80164da:	f100 0901 	add.w	r9, r0, #1
 80164de:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80164e2:	1200      	asrs	r0, r0, #8
 80164e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80164e6:	7048      	strb	r0, [r1, #1]
 80164e8:	7888      	ldrb	r0, [r1, #2]
 80164ea:	fb15 fc0c 	smulbb	ip, r5, ip
 80164ee:	fb00 cc03 	mla	ip, r0, r3, ip
 80164f2:	fa1f fc8c 	uxth.w	ip, ip
 80164f6:	f10c 0301 	add.w	r3, ip, #1
 80164fa:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80164fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016502:	f881 c002 	strb.w	ip, [r1, #2]
 8016506:	4444      	add	r4, r8
 8016508:	b2a4      	uxth	r4, r4
 801650a:	2c07      	cmp	r4, #7
 801650c:	bf81      	itttt	hi
 801650e:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8016510:	785a      	ldrbhi	r2, [r3, #1]
 8016512:	3301      	addhi	r3, #1
 8016514:	9326      	strhi	r3, [sp, #152]	; 0x98
 8016516:	9b07      	ldr	r3, [sp, #28]
 8016518:	bf9a      	itte	ls
 801651a:	fa42 f208 	asrls.w	r2, r2, r8
 801651e:	b2d2      	uxtbls	r2, r2
 8016520:	2400      	movhi	r4, #0
 8016522:	4419      	add	r1, r3
 8016524:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016528:	e7a7      	b.n	801647a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f6>
 801652a:	441e      	add	r6, r3
 801652c:	b236      	sxth	r6, r6
 801652e:	e6e3      	b.n	80162f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8016530:	f1b9 0f01 	cmp.w	r9, #1
 8016534:	f47f af1e 	bne.w	8016374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016538:	f1bb 0f01 	cmp.w	fp, #1
 801653c:	f47f af1a 	bne.w	8016374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016540:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80165f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8016544:	f8db 0000 	ldr.w	r0, [fp]
 8016548:	6803      	ldr	r3, [r0, #0]
 801654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801654c:	4798      	blx	r3
 801654e:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8016552:	465a      	mov	r2, fp
 8016554:	d006      	beq.n	8016564 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 8016556:	f1b8 0f04 	cmp.w	r8, #4
 801655a:	d13d      	bne.n	80165d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x354>
 801655c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801655e:	3300      	adds	r3, #0
 8016560:	bf18      	it	ne
 8016562:	2301      	movne	r3, #1
 8016564:	05c0      	lsls	r0, r0, #23
 8016566:	d567      	bpl.n	8016638 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8016568:	f1b8 0f08 	cmp.w	r8, #8
 801656c:	d164      	bne.n	8016638 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801656e:	2b00      	cmp	r3, #0
 8016570:	bf0c      	ite	eq
 8016572:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8016576:	2180      	movne	r1, #128	; 0x80
 8016578:	2f00      	cmp	r7, #0
 801657a:	f47f aefb 	bne.w	8016374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801657e:	2c00      	cmp	r4, #0
 8016580:	f47f aef8 	bne.w	8016374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016584:	9b07      	ldr	r3, [sp, #28]
 8016586:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016588:	18f3      	adds	r3, r6, r3
 801658a:	4283      	cmp	r3, r0
 801658c:	f73f aef2 	bgt.w	8016374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016590:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 8016594:	4403      	add	r3, r0
 8016596:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016598:	4283      	cmp	r3, r0
 801659a:	f73f aeeb 	bgt.w	8016374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801659e:	6810      	ldr	r0, [r2, #0]
 80165a0:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80165a4:	6804      	ldr	r4, [r0, #0]
 80165a6:	9105      	str	r1, [sp, #20]
 80165a8:	f1b8 0f08 	cmp.w	r8, #8
 80165ac:	bf18      	it	ne
 80165ae:	3501      	addne	r5, #1
 80165b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80165b2:	9104      	str	r1, [sp, #16]
 80165b4:	bf18      	it	ne
 80165b6:	f025 0501 	bicne.w	r5, r5, #1
 80165ba:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80165bc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80165c0:	bf18      	it	ne
 80165c2:	b2ad      	uxthne	r5, r5
 80165c4:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80165c8:	e9cd 5a00 	strd	r5, sl, [sp]
 80165cc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80165ce:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80165d0:	47a0      	blx	r4
 80165d2:	b017      	add	sp, #92	; 0x5c
 80165d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165d8:	2300      	movs	r3, #0
 80165da:	e7c3      	b.n	8016564 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 80165dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80165de:	e6d2      	b.n	8016386 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80165e0:	23ff      	movs	r3, #255	; 0xff
 80165e2:	e6ef      	b.n	80163c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 80165e4:	2355      	movs	r3, #85	; 0x55
 80165e6:	e6ed      	b.n	80163c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 80165e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165ea:	704b      	strb	r3, [r1, #1]
 80165ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165ee:	700e      	strb	r6, [r1, #0]
 80165f0:	708b      	strb	r3, [r1, #2]
 80165f2:	e788      	b.n	8016506 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 80165f4:	20005f1c 	.word	0x20005f1c
 80165f8:	20005f24 	.word	0x20005f24
 80165fc:	20005f1e 	.word	0x20005f1e
 8016600:	9b08      	ldr	r3, [sp, #32]
 8016602:	b153      	cbz	r3, 801661a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8016604:	441c      	add	r4, r3
 8016606:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016608:	b2a4      	uxth	r4, r4
 801660a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801660e:	f004 0407 	and.w	r4, r4, #7
 8016612:	781a      	ldrb	r2, [r3, #0]
 8016614:	9326      	str	r3, [sp, #152]	; 0x98
 8016616:	4122      	asrs	r2, r4
 8016618:	b2d2      	uxtb	r2, r2
 801661a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801661c:	445b      	add	r3, fp
 801661e:	9309      	str	r3, [sp, #36]	; 0x24
 8016620:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016624:	e723      	b.n	801646e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 8016626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016628:	2b00      	cmp	r3, #0
 801662a:	d1d2      	bne.n	80165d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 801662c:	4b05      	ldr	r3, [pc, #20]	; (8016644 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c0>)
 801662e:	6818      	ldr	r0, [r3, #0]
 8016630:	6803      	ldr	r3, [r0, #0]
 8016632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016634:	4798      	blx	r3
 8016636:	e7cc      	b.n	80165d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 8016638:	2b00      	cmp	r3, #0
 801663a:	f43f ae9b 	beq.w	8016374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801663e:	2180      	movs	r1, #128	; 0x80
 8016640:	e79a      	b.n	8016578 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f4>
 8016642:	bf00      	nop
 8016644:	20005f24 	.word	0x20005f24

08016648 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8016648:	b538      	push	{r3, r4, r5, lr}
 801664a:	4c15      	ldr	r4, [pc, #84]	; (80166a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801664c:	7823      	ldrb	r3, [r4, #0]
 801664e:	f3bf 8f5b 	dmb	ish
 8016652:	07da      	lsls	r2, r3, #31
 8016654:	4605      	mov	r5, r0
 8016656:	d40b      	bmi.n	8016670 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016658:	4620      	mov	r0, r4
 801665a:	f005 f971 	bl	801b940 <__cxa_guard_acquire>
 801665e:	b138      	cbz	r0, 8016670 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016660:	4620      	mov	r0, r4
 8016662:	f005 f979 	bl	801b958 <__cxa_guard_release>
 8016666:	4a0f      	ldr	r2, [pc, #60]	; (80166a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016668:	490f      	ldr	r1, [pc, #60]	; (80166a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801666a:	4810      	ldr	r0, [pc, #64]	; (80166ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801666c:	f005 f95e 	bl	801b92c <__aeabi_atexit>
 8016670:	4c0f      	ldr	r4, [pc, #60]	; (80166b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8016672:	7823      	ldrb	r3, [r4, #0]
 8016674:	f3bf 8f5b 	dmb	ish
 8016678:	07db      	lsls	r3, r3, #31
 801667a:	d40b      	bmi.n	8016694 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801667c:	4620      	mov	r0, r4
 801667e:	f005 f95f 	bl	801b940 <__cxa_guard_acquire>
 8016682:	b138      	cbz	r0, 8016694 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016684:	4620      	mov	r0, r4
 8016686:	f005 f967 	bl	801b958 <__cxa_guard_release>
 801668a:	4a06      	ldr	r2, [pc, #24]	; (80166a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801668c:	4909      	ldr	r1, [pc, #36]	; (80166b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801668e:	480a      	ldr	r0, [pc, #40]	; (80166b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016690:	f005 f94c 	bl	801b92c <__aeabi_atexit>
 8016694:	4b05      	ldr	r3, [pc, #20]	; (80166ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016696:	612b      	str	r3, [r5, #16]
 8016698:	4b07      	ldr	r3, [pc, #28]	; (80166b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801669a:	616b      	str	r3, [r5, #20]
 801669c:	bd38      	pop	{r3, r4, r5, pc}
 801669e:	bf00      	nop
 80166a0:	20006010 	.word	0x20006010
 80166a4:	20000000 	.word	0x20000000
 80166a8:	0801502b 	.word	0x0801502b
 80166ac:	200000d8 	.word	0x200000d8
 80166b0:	20006014 	.word	0x20006014
 80166b4:	08015029 	.word	0x08015029
 80166b8:	200000dc 	.word	0x200000dc

080166bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80166bc:	b538      	push	{r3, r4, r5, lr}
 80166be:	4c15      	ldr	r4, [pc, #84]	; (8016714 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80166c0:	7823      	ldrb	r3, [r4, #0]
 80166c2:	f3bf 8f5b 	dmb	ish
 80166c6:	07da      	lsls	r2, r3, #31
 80166c8:	4605      	mov	r5, r0
 80166ca:	d40b      	bmi.n	80166e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80166cc:	4620      	mov	r0, r4
 80166ce:	f005 f937 	bl	801b940 <__cxa_guard_acquire>
 80166d2:	b138      	cbz	r0, 80166e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80166d4:	4620      	mov	r0, r4
 80166d6:	f005 f93f 	bl	801b958 <__cxa_guard_release>
 80166da:	4a0f      	ldr	r2, [pc, #60]	; (8016718 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80166dc:	490f      	ldr	r1, [pc, #60]	; (801671c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80166de:	4810      	ldr	r0, [pc, #64]	; (8016720 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80166e0:	f005 f924 	bl	801b92c <__aeabi_atexit>
 80166e4:	4c0f      	ldr	r4, [pc, #60]	; (8016724 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80166e6:	7823      	ldrb	r3, [r4, #0]
 80166e8:	f3bf 8f5b 	dmb	ish
 80166ec:	07db      	lsls	r3, r3, #31
 80166ee:	d40b      	bmi.n	8016708 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80166f0:	4620      	mov	r0, r4
 80166f2:	f005 f925 	bl	801b940 <__cxa_guard_acquire>
 80166f6:	b138      	cbz	r0, 8016708 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80166f8:	4620      	mov	r0, r4
 80166fa:	f005 f92d 	bl	801b958 <__cxa_guard_release>
 80166fe:	4a06      	ldr	r2, [pc, #24]	; (8016718 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016700:	4909      	ldr	r1, [pc, #36]	; (8016728 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8016702:	480a      	ldr	r0, [pc, #40]	; (801672c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016704:	f005 f912 	bl	801b92c <__aeabi_atexit>
 8016708:	4b05      	ldr	r3, [pc, #20]	; (8016720 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801670a:	60ab      	str	r3, [r5, #8]
 801670c:	4b07      	ldr	r3, [pc, #28]	; (801672c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801670e:	60eb      	str	r3, [r5, #12]
 8016710:	bd38      	pop	{r3, r4, r5, pc}
 8016712:	bf00      	nop
 8016714:	20005ff0 	.word	0x20005ff0
 8016718:	20000000 	.word	0x20000000
 801671c:	0801502f 	.word	0x0801502f
 8016720:	200000b8 	.word	0x200000b8
 8016724:	20005ff4 	.word	0x20005ff4
 8016728:	0801502d 	.word	0x0801502d
 801672c:	200000bc 	.word	0x200000bc

08016730 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8016730:	b510      	push	{r4, lr}
 8016732:	4604      	mov	r4, r0
 8016734:	f7ff ff88 	bl	8016648 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8016738:	4620      	mov	r0, r4
 801673a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801673e:	f7ff bfbd 	b.w	80166bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08016744 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8016744:	b538      	push	{r3, r4, r5, lr}
 8016746:	4c15      	ldr	r4, [pc, #84]	; (801679c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8016748:	7823      	ldrb	r3, [r4, #0]
 801674a:	f3bf 8f5b 	dmb	ish
 801674e:	07da      	lsls	r2, r3, #31
 8016750:	4605      	mov	r5, r0
 8016752:	d40b      	bmi.n	801676c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016754:	4620      	mov	r0, r4
 8016756:	f005 f8f3 	bl	801b940 <__cxa_guard_acquire>
 801675a:	b138      	cbz	r0, 801676c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801675c:	4620      	mov	r0, r4
 801675e:	f005 f8fb 	bl	801b958 <__cxa_guard_release>
 8016762:	4a0f      	ldr	r2, [pc, #60]	; (80167a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016764:	490f      	ldr	r1, [pc, #60]	; (80167a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8016766:	4810      	ldr	r0, [pc, #64]	; (80167a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016768:	f005 f8e0 	bl	801b92c <__aeabi_atexit>
 801676c:	4c0f      	ldr	r4, [pc, #60]	; (80167ac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801676e:	7823      	ldrb	r3, [r4, #0]
 8016770:	f3bf 8f5b 	dmb	ish
 8016774:	07db      	lsls	r3, r3, #31
 8016776:	d40b      	bmi.n	8016790 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016778:	4620      	mov	r0, r4
 801677a:	f005 f8e1 	bl	801b940 <__cxa_guard_acquire>
 801677e:	b138      	cbz	r0, 8016790 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016780:	4620      	mov	r0, r4
 8016782:	f005 f8e9 	bl	801b958 <__cxa_guard_release>
 8016786:	4a06      	ldr	r2, [pc, #24]	; (80167a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016788:	4909      	ldr	r1, [pc, #36]	; (80167b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801678a:	480a      	ldr	r0, [pc, #40]	; (80167b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801678c:	f005 f8ce 	bl	801b92c <__aeabi_atexit>
 8016790:	4b05      	ldr	r3, [pc, #20]	; (80167a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016792:	622b      	str	r3, [r5, #32]
 8016794:	4b07      	ldr	r3, [pc, #28]	; (80167b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016796:	626b      	str	r3, [r5, #36]	; 0x24
 8016798:	bd38      	pop	{r3, r4, r5, pc}
 801679a:	bf00      	nop
 801679c:	20006018 	.word	0x20006018
 80167a0:	20000000 	.word	0x20000000
 80167a4:	08015023 	.word	0x08015023
 80167a8:	200000e0 	.word	0x200000e0
 80167ac:	2000601c 	.word	0x2000601c
 80167b0:	08015021 	.word	0x08015021
 80167b4:	200000e4 	.word	0x200000e4

080167b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80167b8:	b538      	push	{r3, r4, r5, lr}
 80167ba:	4c15      	ldr	r4, [pc, #84]	; (8016810 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80167bc:	7823      	ldrb	r3, [r4, #0]
 80167be:	f3bf 8f5b 	dmb	ish
 80167c2:	07da      	lsls	r2, r3, #31
 80167c4:	4605      	mov	r5, r0
 80167c6:	d40b      	bmi.n	80167e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80167c8:	4620      	mov	r0, r4
 80167ca:	f005 f8b9 	bl	801b940 <__cxa_guard_acquire>
 80167ce:	b138      	cbz	r0, 80167e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80167d0:	4620      	mov	r0, r4
 80167d2:	f005 f8c1 	bl	801b958 <__cxa_guard_release>
 80167d6:	4a0f      	ldr	r2, [pc, #60]	; (8016814 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80167d8:	490f      	ldr	r1, [pc, #60]	; (8016818 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80167da:	4810      	ldr	r0, [pc, #64]	; (801681c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80167dc:	f005 f8a6 	bl	801b92c <__aeabi_atexit>
 80167e0:	4c0f      	ldr	r4, [pc, #60]	; (8016820 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80167e2:	7823      	ldrb	r3, [r4, #0]
 80167e4:	f3bf 8f5b 	dmb	ish
 80167e8:	07db      	lsls	r3, r3, #31
 80167ea:	d40b      	bmi.n	8016804 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80167ec:	4620      	mov	r0, r4
 80167ee:	f005 f8a7 	bl	801b940 <__cxa_guard_acquire>
 80167f2:	b138      	cbz	r0, 8016804 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80167f4:	4620      	mov	r0, r4
 80167f6:	f005 f8af 	bl	801b958 <__cxa_guard_release>
 80167fa:	4a06      	ldr	r2, [pc, #24]	; (8016814 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80167fc:	4909      	ldr	r1, [pc, #36]	; (8016824 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80167fe:	480a      	ldr	r0, [pc, #40]	; (8016828 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016800:	f005 f894 	bl	801b92c <__aeabi_atexit>
 8016804:	4b05      	ldr	r3, [pc, #20]	; (801681c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016806:	61ab      	str	r3, [r5, #24]
 8016808:	4b07      	ldr	r3, [pc, #28]	; (8016828 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801680a:	61eb      	str	r3, [r5, #28]
 801680c:	bd38      	pop	{r3, r4, r5, pc}
 801680e:	bf00      	nop
 8016810:	20005ff8 	.word	0x20005ff8
 8016814:	20000000 	.word	0x20000000
 8016818:	08015027 	.word	0x08015027
 801681c:	200000c0 	.word	0x200000c0
 8016820:	20005ffc 	.word	0x20005ffc
 8016824:	08015025 	.word	0x08015025
 8016828:	200000c4 	.word	0x200000c4

0801682c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801682c:	b510      	push	{r4, lr}
 801682e:	4604      	mov	r4, r0
 8016830:	f7ff ff88 	bl	8016744 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8016834:	4620      	mov	r0, r4
 8016836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801683a:	f7ff bfbd 	b.w	80167b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08016840 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8016840:	b538      	push	{r3, r4, r5, lr}
 8016842:	4c15      	ldr	r4, [pc, #84]	; (8016898 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8016844:	7823      	ldrb	r3, [r4, #0]
 8016846:	f3bf 8f5b 	dmb	ish
 801684a:	07da      	lsls	r2, r3, #31
 801684c:	4605      	mov	r5, r0
 801684e:	d40b      	bmi.n	8016868 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016850:	4620      	mov	r0, r4
 8016852:	f005 f875 	bl	801b940 <__cxa_guard_acquire>
 8016856:	b138      	cbz	r0, 8016868 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016858:	4620      	mov	r0, r4
 801685a:	f005 f87d 	bl	801b958 <__cxa_guard_release>
 801685e:	4a0f      	ldr	r2, [pc, #60]	; (801689c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016860:	490f      	ldr	r1, [pc, #60]	; (80168a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8016862:	4810      	ldr	r0, [pc, #64]	; (80168a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016864:	f005 f862 	bl	801b92c <__aeabi_atexit>
 8016868:	4c0f      	ldr	r4, [pc, #60]	; (80168a8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801686a:	7823      	ldrb	r3, [r4, #0]
 801686c:	f3bf 8f5b 	dmb	ish
 8016870:	07db      	lsls	r3, r3, #31
 8016872:	d40b      	bmi.n	801688c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016874:	4620      	mov	r0, r4
 8016876:	f005 f863 	bl	801b940 <__cxa_guard_acquire>
 801687a:	b138      	cbz	r0, 801688c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801687c:	4620      	mov	r0, r4
 801687e:	f005 f86b 	bl	801b958 <__cxa_guard_release>
 8016882:	4a06      	ldr	r2, [pc, #24]	; (801689c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016884:	4909      	ldr	r1, [pc, #36]	; (80168ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8016886:	480a      	ldr	r0, [pc, #40]	; (80168b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016888:	f005 f850 	bl	801b92c <__aeabi_atexit>
 801688c:	4b05      	ldr	r3, [pc, #20]	; (80168a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801688e:	632b      	str	r3, [r5, #48]	; 0x30
 8016890:	4b07      	ldr	r3, [pc, #28]	; (80168b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016892:	636b      	str	r3, [r5, #52]	; 0x34
 8016894:	bd38      	pop	{r3, r4, r5, pc}
 8016896:	bf00      	nop
 8016898:	20006000 	.word	0x20006000
 801689c:	20000000 	.word	0x20000000
 80168a0:	0801501b 	.word	0x0801501b
 80168a4:	200000c8 	.word	0x200000c8
 80168a8:	20006004 	.word	0x20006004
 80168ac:	08015019 	.word	0x08015019
 80168b0:	200000cc 	.word	0x200000cc

080168b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 80168b4:	b538      	push	{r3, r4, r5, lr}
 80168b6:	4c15      	ldr	r4, [pc, #84]	; (801690c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 80168b8:	7823      	ldrb	r3, [r4, #0]
 80168ba:	f3bf 8f5b 	dmb	ish
 80168be:	07da      	lsls	r2, r3, #31
 80168c0:	4605      	mov	r5, r0
 80168c2:	d40b      	bmi.n	80168dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80168c4:	4620      	mov	r0, r4
 80168c6:	f005 f83b 	bl	801b940 <__cxa_guard_acquire>
 80168ca:	b138      	cbz	r0, 80168dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80168cc:	4620      	mov	r0, r4
 80168ce:	f005 f843 	bl	801b958 <__cxa_guard_release>
 80168d2:	4a0f      	ldr	r2, [pc, #60]	; (8016910 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80168d4:	490f      	ldr	r1, [pc, #60]	; (8016914 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 80168d6:	4810      	ldr	r0, [pc, #64]	; (8016918 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80168d8:	f005 f828 	bl	801b92c <__aeabi_atexit>
 80168dc:	4c0f      	ldr	r4, [pc, #60]	; (801691c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80168de:	7823      	ldrb	r3, [r4, #0]
 80168e0:	f3bf 8f5b 	dmb	ish
 80168e4:	07db      	lsls	r3, r3, #31
 80168e6:	d40b      	bmi.n	8016900 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80168e8:	4620      	mov	r0, r4
 80168ea:	f005 f829 	bl	801b940 <__cxa_guard_acquire>
 80168ee:	b138      	cbz	r0, 8016900 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80168f0:	4620      	mov	r0, r4
 80168f2:	f005 f831 	bl	801b958 <__cxa_guard_release>
 80168f6:	4a06      	ldr	r2, [pc, #24]	; (8016910 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80168f8:	4909      	ldr	r1, [pc, #36]	; (8016920 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80168fa:	480a      	ldr	r0, [pc, #40]	; (8016924 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80168fc:	f005 f816 	bl	801b92c <__aeabi_atexit>
 8016900:	4b05      	ldr	r3, [pc, #20]	; (8016918 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8016902:	62ab      	str	r3, [r5, #40]	; 0x28
 8016904:	4b07      	ldr	r3, [pc, #28]	; (8016924 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8016906:	62eb      	str	r3, [r5, #44]	; 0x2c
 8016908:	bd38      	pop	{r3, r4, r5, pc}
 801690a:	bf00      	nop
 801690c:	20005fd8 	.word	0x20005fd8
 8016910:	20000000 	.word	0x20000000
 8016914:	0801501f 	.word	0x0801501f
 8016918:	200000a0 	.word	0x200000a0
 801691c:	20005fdc 	.word	0x20005fdc
 8016920:	0801501d 	.word	0x0801501d
 8016924:	200000a4 	.word	0x200000a4

08016928 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8016928:	b510      	push	{r4, lr}
 801692a:	4604      	mov	r4, r0
 801692c:	f7ff ff88 	bl	8016840 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8016930:	4620      	mov	r0, r4
 8016932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016936:	f7ff bfbd 	b.w	80168b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801693c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801693c:	b538      	push	{r3, r4, r5, lr}
 801693e:	4c15      	ldr	r4, [pc, #84]	; (8016994 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8016940:	7823      	ldrb	r3, [r4, #0]
 8016942:	f3bf 8f5b 	dmb	ish
 8016946:	07da      	lsls	r2, r3, #31
 8016948:	4605      	mov	r5, r0
 801694a:	d40b      	bmi.n	8016964 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801694c:	4620      	mov	r0, r4
 801694e:	f004 fff7 	bl	801b940 <__cxa_guard_acquire>
 8016952:	b138      	cbz	r0, 8016964 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016954:	4620      	mov	r0, r4
 8016956:	f004 ffff 	bl	801b958 <__cxa_guard_release>
 801695a:	4a0f      	ldr	r2, [pc, #60]	; (8016998 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801695c:	490f      	ldr	r1, [pc, #60]	; (801699c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801695e:	4810      	ldr	r0, [pc, #64]	; (80169a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016960:	f004 ffe4 	bl	801b92c <__aeabi_atexit>
 8016964:	4c0f      	ldr	r4, [pc, #60]	; (80169a4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8016966:	7823      	ldrb	r3, [r4, #0]
 8016968:	f3bf 8f5b 	dmb	ish
 801696c:	07db      	lsls	r3, r3, #31
 801696e:	d40b      	bmi.n	8016988 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016970:	4620      	mov	r0, r4
 8016972:	f004 ffe5 	bl	801b940 <__cxa_guard_acquire>
 8016976:	b138      	cbz	r0, 8016988 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016978:	4620      	mov	r0, r4
 801697a:	f004 ffed 	bl	801b958 <__cxa_guard_release>
 801697e:	4a06      	ldr	r2, [pc, #24]	; (8016998 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016980:	4909      	ldr	r1, [pc, #36]	; (80169a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8016982:	480a      	ldr	r0, [pc, #40]	; (80169ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016984:	f004 ffd2 	bl	801b92c <__aeabi_atexit>
 8016988:	4b05      	ldr	r3, [pc, #20]	; (80169a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801698a:	642b      	str	r3, [r5, #64]	; 0x40
 801698c:	4b07      	ldr	r3, [pc, #28]	; (80169ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801698e:	646b      	str	r3, [r5, #68]	; 0x44
 8016990:	bd38      	pop	{r3, r4, r5, pc}
 8016992:	bf00      	nop
 8016994:	20006008 	.word	0x20006008
 8016998:	20000000 	.word	0x20000000
 801699c:	08015013 	.word	0x08015013
 80169a0:	200000d0 	.word	0x200000d0
 80169a4:	2000600c 	.word	0x2000600c
 80169a8:	08015011 	.word	0x08015011
 80169ac:	200000d4 	.word	0x200000d4

080169b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80169b0:	b538      	push	{r3, r4, r5, lr}
 80169b2:	4c15      	ldr	r4, [pc, #84]	; (8016a08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80169b4:	7823      	ldrb	r3, [r4, #0]
 80169b6:	f3bf 8f5b 	dmb	ish
 80169ba:	07da      	lsls	r2, r3, #31
 80169bc:	4605      	mov	r5, r0
 80169be:	d40b      	bmi.n	80169d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80169c0:	4620      	mov	r0, r4
 80169c2:	f004 ffbd 	bl	801b940 <__cxa_guard_acquire>
 80169c6:	b138      	cbz	r0, 80169d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80169c8:	4620      	mov	r0, r4
 80169ca:	f004 ffc5 	bl	801b958 <__cxa_guard_release>
 80169ce:	4a0f      	ldr	r2, [pc, #60]	; (8016a0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80169d0:	490f      	ldr	r1, [pc, #60]	; (8016a10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80169d2:	4810      	ldr	r0, [pc, #64]	; (8016a14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80169d4:	f004 ffaa 	bl	801b92c <__aeabi_atexit>
 80169d8:	4c0f      	ldr	r4, [pc, #60]	; (8016a18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80169da:	7823      	ldrb	r3, [r4, #0]
 80169dc:	f3bf 8f5b 	dmb	ish
 80169e0:	07db      	lsls	r3, r3, #31
 80169e2:	d40b      	bmi.n	80169fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80169e4:	4620      	mov	r0, r4
 80169e6:	f004 ffab 	bl	801b940 <__cxa_guard_acquire>
 80169ea:	b138      	cbz	r0, 80169fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80169ec:	4620      	mov	r0, r4
 80169ee:	f004 ffb3 	bl	801b958 <__cxa_guard_release>
 80169f2:	4a06      	ldr	r2, [pc, #24]	; (8016a0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80169f4:	4909      	ldr	r1, [pc, #36]	; (8016a1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80169f6:	480a      	ldr	r0, [pc, #40]	; (8016a20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80169f8:	f004 ff98 	bl	801b92c <__aeabi_atexit>
 80169fc:	4b05      	ldr	r3, [pc, #20]	; (8016a14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80169fe:	63ab      	str	r3, [r5, #56]	; 0x38
 8016a00:	4b07      	ldr	r3, [pc, #28]	; (8016a20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016a02:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016a04:	bd38      	pop	{r3, r4, r5, pc}
 8016a06:	bf00      	nop
 8016a08:	20005fe8 	.word	0x20005fe8
 8016a0c:	20000000 	.word	0x20000000
 8016a10:	08015017 	.word	0x08015017
 8016a14:	200000b0 	.word	0x200000b0
 8016a18:	20005fec 	.word	0x20005fec
 8016a1c:	08015015 	.word	0x08015015
 8016a20:	200000b4 	.word	0x200000b4

08016a24 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8016a24:	b510      	push	{r4, lr}
 8016a26:	4604      	mov	r4, r0
 8016a28:	f7ff ff88 	bl	801693c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a32:	f7ff bfbd 	b.w	80169b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08016a38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8016a38:	b538      	push	{r3, r4, r5, lr}
 8016a3a:	4c15      	ldr	r4, [pc, #84]	; (8016a90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8016a3c:	7823      	ldrb	r3, [r4, #0]
 8016a3e:	f3bf 8f5b 	dmb	ish
 8016a42:	07da      	lsls	r2, r3, #31
 8016a44:	4605      	mov	r5, r0
 8016a46:	d40b      	bmi.n	8016a60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8016a48:	4620      	mov	r0, r4
 8016a4a:	f004 ff79 	bl	801b940 <__cxa_guard_acquire>
 8016a4e:	b138      	cbz	r0, 8016a60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8016a50:	4620      	mov	r0, r4
 8016a52:	f004 ff81 	bl	801b958 <__cxa_guard_release>
 8016a56:	4a0f      	ldr	r2, [pc, #60]	; (8016a94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8016a58:	490f      	ldr	r1, [pc, #60]	; (8016a98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8016a5a:	4810      	ldr	r0, [pc, #64]	; (8016a9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8016a5c:	f004 ff66 	bl	801b92c <__aeabi_atexit>
 8016a60:	4c0f      	ldr	r4, [pc, #60]	; (8016aa0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8016a62:	7823      	ldrb	r3, [r4, #0]
 8016a64:	f3bf 8f5b 	dmb	ish
 8016a68:	07db      	lsls	r3, r3, #31
 8016a6a:	d40b      	bmi.n	8016a84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	f004 ff67 	bl	801b940 <__cxa_guard_acquire>
 8016a72:	b138      	cbz	r0, 8016a84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8016a74:	4620      	mov	r0, r4
 8016a76:	f004 ff6f 	bl	801b958 <__cxa_guard_release>
 8016a7a:	4a06      	ldr	r2, [pc, #24]	; (8016a94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8016a7c:	4909      	ldr	r1, [pc, #36]	; (8016aa4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8016a7e:	480a      	ldr	r0, [pc, #40]	; (8016aa8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8016a80:	f004 ff54 	bl	801b92c <__aeabi_atexit>
 8016a84:	4b05      	ldr	r3, [pc, #20]	; (8016a9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8016a86:	652b      	str	r3, [r5, #80]	; 0x50
 8016a88:	4b07      	ldr	r3, [pc, #28]	; (8016aa8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8016a8a:	656b      	str	r3, [r5, #84]	; 0x54
 8016a8c:	bd38      	pop	{r3, r4, r5, pc}
 8016a8e:	bf00      	nop
 8016a90:	20005fe0 	.word	0x20005fe0
 8016a94:	20000000 	.word	0x20000000
 8016a98:	0801500b 	.word	0x0801500b
 8016a9c:	200000a8 	.word	0x200000a8
 8016aa0:	20005fe4 	.word	0x20005fe4
 8016aa4:	08015009 	.word	0x08015009
 8016aa8:	200000ac 	.word	0x200000ac

08016aac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8016aac:	b538      	push	{r3, r4, r5, lr}
 8016aae:	4c15      	ldr	r4, [pc, #84]	; (8016b04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8016ab0:	7823      	ldrb	r3, [r4, #0]
 8016ab2:	f3bf 8f5b 	dmb	ish
 8016ab6:	07da      	lsls	r2, r3, #31
 8016ab8:	4605      	mov	r5, r0
 8016aba:	d40b      	bmi.n	8016ad4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016abc:	4620      	mov	r0, r4
 8016abe:	f004 ff3f 	bl	801b940 <__cxa_guard_acquire>
 8016ac2:	b138      	cbz	r0, 8016ad4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016ac4:	4620      	mov	r0, r4
 8016ac6:	f004 ff47 	bl	801b958 <__cxa_guard_release>
 8016aca:	4a0f      	ldr	r2, [pc, #60]	; (8016b08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8016acc:	490f      	ldr	r1, [pc, #60]	; (8016b0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8016ace:	4810      	ldr	r0, [pc, #64]	; (8016b10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8016ad0:	f004 ff2c 	bl	801b92c <__aeabi_atexit>
 8016ad4:	4c0f      	ldr	r4, [pc, #60]	; (8016b14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8016ad6:	7823      	ldrb	r3, [r4, #0]
 8016ad8:	f3bf 8f5b 	dmb	ish
 8016adc:	07db      	lsls	r3, r3, #31
 8016ade:	d40b      	bmi.n	8016af8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	f004 ff2d 	bl	801b940 <__cxa_guard_acquire>
 8016ae6:	b138      	cbz	r0, 8016af8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8016ae8:	4620      	mov	r0, r4
 8016aea:	f004 ff35 	bl	801b958 <__cxa_guard_release>
 8016aee:	4a06      	ldr	r2, [pc, #24]	; (8016b08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8016af0:	4909      	ldr	r1, [pc, #36]	; (8016b18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8016af2:	480a      	ldr	r0, [pc, #40]	; (8016b1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8016af4:	f004 ff1a 	bl	801b92c <__aeabi_atexit>
 8016af8:	4b05      	ldr	r3, [pc, #20]	; (8016b10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8016afa:	64ab      	str	r3, [r5, #72]	; 0x48
 8016afc:	4b07      	ldr	r3, [pc, #28]	; (8016b1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8016afe:	64eb      	str	r3, [r5, #76]	; 0x4c
 8016b00:	bd38      	pop	{r3, r4, r5, pc}
 8016b02:	bf00      	nop
 8016b04:	20005fd0 	.word	0x20005fd0
 8016b08:	20000000 	.word	0x20000000
 8016b0c:	0801500f 	.word	0x0801500f
 8016b10:	20000098 	.word	0x20000098
 8016b14:	20005fd4 	.word	0x20005fd4
 8016b18:	0801500d 	.word	0x0801500d
 8016b1c:	2000009c 	.word	0x2000009c

08016b20 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8016b20:	b510      	push	{r4, lr}
 8016b22:	4604      	mov	r4, r0
 8016b24:	f7ff ff88 	bl	8016a38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8016b28:	4620      	mov	r0, r4
 8016b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b2e:	f7ff bfbd 	b.w	8016aac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08016b32 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8016b32:	b510      	push	{r4, lr}
 8016b34:	4604      	mov	r4, r0
 8016b36:	f7ff fff3 	bl	8016b20 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8016b3a:	4620      	mov	r0, r4
 8016b3c:	f7ff ff72 	bl	8016a24 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8016b40:	4620      	mov	r0, r4
 8016b42:	f7ff fe73 	bl	801682c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8016b46:	4620      	mov	r0, r4
 8016b48:	f7ff fdf2 	bl	8016730 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8016b4c:	4620      	mov	r0, r4
 8016b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b52:	f7ff bee9 	b.w	8016928 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08016b58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8016b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b5c:	b087      	sub	sp, #28
 8016b5e:	7888      	ldrb	r0, [r1, #2]
 8016b60:	9001      	str	r0, [sp, #4]
 8016b62:	7848      	ldrb	r0, [r1, #1]
 8016b64:	9002      	str	r0, [sp, #8]
 8016b66:	7808      	ldrb	r0, [r1, #0]
 8016b68:	9100      	str	r1, [sp, #0]
 8016b6a:	9901      	ldr	r1, [sp, #4]
 8016b6c:	9003      	str	r0, [sp, #12]
 8016b6e:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8016b72:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8016b76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8016b7a:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8016b7e:	9902      	ldr	r1, [sp, #8]
 8016b80:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8016b84:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8016b88:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016b8c:	4616      	mov	r6, r2
 8016b8e:	fb05 ca0e 	mla	sl, r5, lr, ip
 8016b92:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8016b96:	2d00      	cmp	r5, #0
 8016b98:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8016b9c:	9005      	str	r0, [sp, #20]
 8016b9e:	eb06 080a 	add.w	r8, r6, sl
 8016ba2:	db4a      	blt.n	8016c3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8016ba4:	45a9      	cmp	r9, r5
 8016ba6:	dd48      	ble.n	8016c3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8016ba8:	f1bc 0f00 	cmp.w	ip, #0
 8016bac:	db43      	blt.n	8016c36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8016bae:	45e6      	cmp	lr, ip
 8016bb0:	dd41      	ble.n	8016c36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8016bb2:	f816 600a 	ldrb.w	r6, [r6, sl]
 8016bb6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016bba:	441e      	add	r6, r3
 8016bbc:	f11c 0001 	adds.w	r0, ip, #1
 8016bc0:	d43e      	bmi.n	8016c40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8016bc2:	4586      	cmp	lr, r0
 8016bc4:	dd3c      	ble.n	8016c40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8016bc6:	2a00      	cmp	r2, #0
 8016bc8:	d03a      	beq.n	8016c40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8016bca:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016bce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016bd2:	4418      	add	r0, r3
 8016bd4:	3501      	adds	r5, #1
 8016bd6:	d437      	bmi.n	8016c48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8016bd8:	45a9      	cmp	r9, r5
 8016bda:	dd35      	ble.n	8016c48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8016bdc:	b3a4      	cbz	r4, 8016c48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8016bde:	f1bc 0f00 	cmp.w	ip, #0
 8016be2:	db2f      	blt.n	8016c44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8016be4:	45e6      	cmp	lr, ip
 8016be6:	dd2d      	ble.n	8016c44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8016be8:	f818 500e 	ldrb.w	r5, [r8, lr]
 8016bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bf0:	441d      	add	r5, r3
 8016bf2:	f11c 0c01 	adds.w	ip, ip, #1
 8016bf6:	d42a      	bmi.n	8016c4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8016bf8:	45e6      	cmp	lr, ip
 8016bfa:	dd28      	ble.n	8016c4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8016bfc:	b33a      	cbz	r2, 8016c4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8016bfe:	44c6      	add	lr, r8
 8016c00:	f89e c001 	ldrb.w	ip, [lr, #1]
 8016c04:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016c08:	4463      	add	r3, ip
 8016c0a:	ea6f 0c07 	mvn.w	ip, r7
 8016c0e:	2a0f      	cmp	r2, #15
 8016c10:	fa5f fc8c 	uxtb.w	ip, ip
 8016c14:	f896 a000 	ldrb.w	sl, [r6]
 8016c18:	f890 b000 	ldrb.w	fp, [r0]
 8016c1c:	f895 9000 	ldrb.w	r9, [r5]
 8016c20:	7819      	ldrb	r1, [r3, #0]
 8016c22:	d801      	bhi.n	8016c28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 8016c24:	2c0f      	cmp	r4, #15
 8016c26:	d914      	bls.n	8016c52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 8016c28:	4b40      	ldr	r3, [pc, #256]	; (8016d2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8016c2a:	4a41      	ldr	r2, [pc, #260]	; (8016d30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8016c2c:	4841      	ldr	r0, [pc, #260]	; (8016d34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 8016c2e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8016c32:	f004 feaf 	bl	801b994 <__assert_func>
 8016c36:	ae05      	add	r6, sp, #20
 8016c38:	e7c0      	b.n	8016bbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 8016c3a:	a805      	add	r0, sp, #20
 8016c3c:	4606      	mov	r6, r0
 8016c3e:	e7c9      	b.n	8016bd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8016c40:	a805      	add	r0, sp, #20
 8016c42:	e7c7      	b.n	8016bd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8016c44:	ad05      	add	r5, sp, #20
 8016c46:	e7d4      	b.n	8016bf2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 8016c48:	ab05      	add	r3, sp, #20
 8016c4a:	461d      	mov	r5, r3
 8016c4c:	e7dd      	b.n	8016c0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8016c4e:	ab05      	add	r3, sp, #20
 8016c50:	e7db      	b.n	8016c0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8016c52:	b292      	uxth	r2, r2
 8016c54:	b2a4      	uxth	r4, r4
 8016c56:	fb02 f804 	mul.w	r8, r2, r4
 8016c5a:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8016c5e:	0112      	lsls	r2, r2, #4
 8016c60:	b2a4      	uxth	r4, r4
 8016c62:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8016c66:	eba2 0208 	sub.w	r2, r2, r8
 8016c6a:	b292      	uxth	r2, r2
 8016c6c:	ebae 0e04 	sub.w	lr, lr, r4
 8016c70:	fa1f fe8e 	uxth.w	lr, lr
 8016c74:	fb02 fb0b 	mul.w	fp, r2, fp
 8016c78:	fb0e ba0a 	mla	sl, lr, sl, fp
 8016c7c:	fb04 aa09 	mla	sl, r4, r9, sl
 8016c80:	fb08 aa01 	mla	sl, r8, r1, sl
 8016c84:	9903      	ldr	r1, [sp, #12]
 8016c86:	fa1f fc8c 	uxth.w	ip, ip
 8016c8a:	fb11 f90c 	smulbb	r9, r1, ip
 8016c8e:	b2bf      	uxth	r7, r7
 8016c90:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8016c94:	fb0a 9a07 	mla	sl, sl, r7, r9
 8016c98:	fa1f fa8a 	uxth.w	sl, sl
 8016c9c:	f10a 0901 	add.w	r9, sl, #1
 8016ca0:	9900      	ldr	r1, [sp, #0]
 8016ca2:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8016ca6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016caa:	f881 a000 	strb.w	sl, [r1]
 8016cae:	f890 a001 	ldrb.w	sl, [r0, #1]
 8016cb2:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016cb6:	9902      	ldr	r1, [sp, #8]
 8016cb8:	fb02 fa0a 	mul.w	sl, r2, sl
 8016cbc:	fb0e aa09 	mla	sl, lr, r9, sl
 8016cc0:	f895 9001 	ldrb.w	r9, [r5, #1]
 8016cc4:	fb04 aa09 	mla	sl, r4, r9, sl
 8016cc8:	f893 9001 	ldrb.w	r9, [r3, #1]
 8016ccc:	fb08 a909 	mla	r9, r8, r9, sl
 8016cd0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8016cd4:	fb11 fa0c 	smulbb	sl, r1, ip
 8016cd8:	fb09 a907 	mla	r9, r9, r7, sl
 8016cdc:	fa1f f989 	uxth.w	r9, r9
 8016ce0:	f109 0a01 	add.w	sl, r9, #1
 8016ce4:	9900      	ldr	r1, [sp, #0]
 8016ce6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016cea:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016cee:	f881 9001 	strb.w	r9, [r1, #1]
 8016cf2:	7880      	ldrb	r0, [r0, #2]
 8016cf4:	78b6      	ldrb	r6, [r6, #2]
 8016cf6:	789b      	ldrb	r3, [r3, #2]
 8016cf8:	4342      	muls	r2, r0
 8016cfa:	78a8      	ldrb	r0, [r5, #2]
 8016cfc:	fb0e 2206 	mla	r2, lr, r6, r2
 8016d00:	fb04 2400 	mla	r4, r4, r0, r2
 8016d04:	fb08 4803 	mla	r8, r8, r3, r4
 8016d08:	9b01      	ldr	r3, [sp, #4]
 8016d0a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8016d0e:	fb13 fc0c 	smulbb	ip, r3, ip
 8016d12:	fb08 c707 	mla	r7, r8, r7, ip
 8016d16:	b2bf      	uxth	r7, r7
 8016d18:	f107 0c01 	add.w	ip, r7, #1
 8016d1c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8016d20:	123f      	asrs	r7, r7, #8
 8016d22:	708f      	strb	r7, [r1, #2]
 8016d24:	b007      	add	sp, #28
 8016d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d2a:	bf00      	nop
 8016d2c:	0801f881 	.word	0x0801f881
 8016d30:	0801fd76 	.word	0x0801fd76
 8016d34:	0801f94a 	.word	0x0801f94a

08016d38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d3c:	ed2d 8b08 	vpush	{d8-d11}
 8016d40:	b095      	sub	sp, #84	; 0x54
 8016d42:	eeb0 aa40 	vmov.f32	s20, s0
 8016d46:	930a      	str	r3, [sp, #40]	; 0x28
 8016d48:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8016d4c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8016d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8016d50:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8016d54:	9310      	str	r3, [sp, #64]	; 0x40
 8016d56:	910f      	str	r1, [sp, #60]	; 0x3c
 8016d58:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8016d5c:	9013      	str	r0, [sp, #76]	; 0x4c
 8016d5e:	6860      	ldr	r0, [r4, #4]
 8016d60:	9212      	str	r2, [sp, #72]	; 0x48
 8016d62:	fb00 1303 	mla	r3, r0, r3, r1
 8016d66:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8016d68:	6821      	ldr	r1, [r4, #0]
 8016d6a:	6854      	ldr	r4, [r2, #4]
 8016d6c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8016d70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016d74:	18cb      	adds	r3, r1, r3
 8016d76:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d78:	6813      	ldr	r3, [r2, #0]
 8016d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8016d7c:	1d23      	adds	r3, r4, #4
 8016d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8016d80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d82:	43db      	mvns	r3, r3
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	eef0 9a60 	vmov.f32	s19, s1
 8016d8a:	eeb0 9a41 	vmov.f32	s18, s2
 8016d8e:	eeb0 8a62 	vmov.f32	s16, s5
 8016d92:	eef0 8a43 	vmov.f32	s17, s6
 8016d96:	eef0 ba44 	vmov.f32	s23, s8
 8016d9a:	eeb0 ba64 	vmov.f32	s22, s9
 8016d9e:	eef0 aa45 	vmov.f32	s21, s10
 8016da2:	930d      	str	r3, [sp, #52]	; 0x34
 8016da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	dc03      	bgt.n	8016db2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8016daa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	f340 823c 	ble.w	801722a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8016db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	f340 8115 	ble.w	8016fe4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8016dba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8016dbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016dbe:	1412      	asrs	r2, r2, #16
 8016dc0:	ea4f 4323 	mov.w	r3, r3, asr #16
 8016dc4:	d431      	bmi.n	8016e2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8016dc6:	1c51      	adds	r1, r2, #1
 8016dc8:	428d      	cmp	r5, r1
 8016dca:	dd31      	ble.n	8016e30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	db2f      	blt.n	8016e30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8016dd0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016dd2:	1c59      	adds	r1, r3, #1
 8016dd4:	4288      	cmp	r0, r1
 8016dd6:	dd2b      	ble.n	8016e30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8016dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dda:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016ddc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8016dde:	3b01      	subs	r3, #1
 8016de0:	fb02 1203 	mla	r2, r2, r3, r1
 8016de4:	1412      	asrs	r2, r2, #16
 8016de6:	d42d      	bmi.n	8016e44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8016de8:	3201      	adds	r2, #1
 8016dea:	4295      	cmp	r5, r2
 8016dec:	dd2a      	ble.n	8016e44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8016dee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016df0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016df2:	fb02 1303 	mla	r3, r2, r3, r1
 8016df6:	141b      	asrs	r3, r3, #16
 8016df8:	d424      	bmi.n	8016e44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8016dfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016dfc:	3301      	adds	r3, #1
 8016dfe:	429a      	cmp	r2, r3
 8016e00:	dd20      	ble.n	8016e44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8016e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e04:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8016e08:	f103 0c03 	add.w	ip, r3, #3
 8016e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e0e:	9311      	str	r3, [sp, #68]	; 0x44
 8016e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	f300 814f 	bgt.w	80170b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 8016e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016e1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016e20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e24:	441a      	add	r2, r3
 8016e26:	920b      	str	r2, [sp, #44]	; 0x2c
 8016e28:	e0de      	b.n	8016fe8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e2a:	1c51      	adds	r1, r2, #1
 8016e2c:	f040 80cb 	bne.w	8016fc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8016e30:	42aa      	cmp	r2, r5
 8016e32:	f280 80c8 	bge.w	8016fc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8016e36:	1c5f      	adds	r7, r3, #1
 8016e38:	f2c0 80c5 	blt.w	8016fc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8016e3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016e3e:	4293      	cmp	r3, r2
 8016e40:	f280 80c1 	bge.w	8016fc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8016e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e46:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016e48:	9311      	str	r3, [sp, #68]	; 0x44
 8016e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	dde3      	ble.n	8016e18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8016e50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e52:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8016e54:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016e56:	141a      	asrs	r2, r3, #16
 8016e58:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016e5a:	1400      	asrs	r0, r0, #16
 8016e5c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8016e60:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8016e64:	f100 810e 	bmi.w	8017084 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8016e68:	1c46      	adds	r6, r0, #1
 8016e6a:	42b5      	cmp	r5, r6
 8016e6c:	f340 810c 	ble.w	8017088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8016e70:	2a00      	cmp	r2, #0
 8016e72:	f2c0 8109 	blt.w	8017088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8016e76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016e78:	1c56      	adds	r6, r2, #1
 8016e7a:	42b4      	cmp	r4, r6
 8016e7c:	f340 8104 	ble.w	8017088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8016e80:	fb02 0005 	mla	r0, r2, r5, r0
 8016e84:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e88:	f814 e000 	ldrb.w	lr, [r4, r0]
 8016e8c:	4402      	add	r2, r0
 8016e8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e90:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016e94:	eb00 080e 	add.w	r8, r0, lr
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	f000 80e4 	beq.w	8017066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 8016e9e:	f892 c001 	ldrb.w	ip, [r2, #1]
 8016ea2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016ea6:	4484      	add	ip, r0
 8016ea8:	2900      	cmp	r1, #0
 8016eaa:	f000 80e5 	beq.w	8017078 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 8016eae:	1950      	adds	r0, r2, r5
 8016eb0:	5d52      	ldrb	r2, [r2, r5]
 8016eb2:	7840      	ldrb	r0, [r0, #1]
 8016eb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016eb6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016eba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016ebe:	4422      	add	r2, r4
 8016ec0:	4420      	add	r0, r4
 8016ec2:	b29b      	uxth	r3, r3
 8016ec4:	b289      	uxth	r1, r1
 8016ec6:	fb03 fa01 	mul.w	sl, r3, r1
 8016eca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016ecc:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8016ed0:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8016ed4:	f89c e000 	ldrb.w	lr, [ip]
 8016ed8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016eda:	011b      	lsls	r3, r3, #4
 8016edc:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8016ee0:	b289      	uxth	r1, r1
 8016ee2:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8016ee6:	eba3 030a 	sub.w	r3, r3, sl
 8016eea:	b29b      	uxth	r3, r3
 8016eec:	eba9 0901 	sub.w	r9, r9, r1
 8016ef0:	fa1f f989 	uxth.w	r9, r9
 8016ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8016ef8:	fb09 ee0b 	mla	lr, r9, fp, lr
 8016efc:	f892 b000 	ldrb.w	fp, [r2]
 8016f00:	fb01 ee0b 	mla	lr, r1, fp, lr
 8016f04:	f890 b000 	ldrb.w	fp, [r0]
 8016f08:	fb0a ee0b 	mla	lr, sl, fp, lr
 8016f0c:	f897 b000 	ldrb.w	fp, [r7]
 8016f10:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8016f14:	fb1b fb04 	smulbb	fp, fp, r4
 8016f18:	fb0e be06 	mla	lr, lr, r6, fp
 8016f1c:	fa1f fe8e 	uxth.w	lr, lr
 8016f20:	f10e 0b01 	add.w	fp, lr, #1
 8016f24:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 8016f28:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8016f2c:	f887 b000 	strb.w	fp, [r7]
 8016f30:	f89c e001 	ldrb.w	lr, [ip, #1]
 8016f34:	f898 b001 	ldrb.w	fp, [r8, #1]
 8016f38:	fb03 fe0e 	mul.w	lr, r3, lr
 8016f3c:	fb09 ee0b 	mla	lr, r9, fp, lr
 8016f40:	f892 b001 	ldrb.w	fp, [r2, #1]
 8016f44:	fb01 ee0b 	mla	lr, r1, fp, lr
 8016f48:	f890 b001 	ldrb.w	fp, [r0, #1]
 8016f4c:	fb0a ee0b 	mla	lr, sl, fp, lr
 8016f50:	f897 b001 	ldrb.w	fp, [r7, #1]
 8016f54:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8016f58:	fb1b fb04 	smulbb	fp, fp, r4
 8016f5c:	fb0e be06 	mla	lr, lr, r6, fp
 8016f60:	fa1f fe8e 	uxth.w	lr, lr
 8016f64:	f10e 0b01 	add.w	fp, lr, #1
 8016f68:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8016f6c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016f70:	f887 e001 	strb.w	lr, [r7, #1]
 8016f74:	f89c c002 	ldrb.w	ip, [ip, #2]
 8016f78:	f898 e002 	ldrb.w	lr, [r8, #2]
 8016f7c:	fb03 f30c 	mul.w	r3, r3, ip
 8016f80:	fb09 330e 	mla	r3, r9, lr, r3
 8016f84:	f892 e002 	ldrb.w	lr, [r2, #2]
 8016f88:	7882      	ldrb	r2, [r0, #2]
 8016f8a:	fb01 310e 	mla	r1, r1, lr, r3
 8016f8e:	fb0a 1a02 	mla	sl, sl, r2, r1
 8016f92:	78b9      	ldrb	r1, [r7, #2]
 8016f94:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8016f98:	fb11 f104 	smulbb	r1, r1, r4
 8016f9c:	fb0a 1606 	mla	r6, sl, r6, r1
 8016fa0:	b2b6      	uxth	r6, r6
 8016fa2:	1c73      	adds	r3, r6, #1
 8016fa4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8016fa8:	1236      	asrs	r6, r6, #8
 8016faa:	70be      	strb	r6, [r7, #2]
 8016fac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016fae:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016fb0:	4413      	add	r3, r2
 8016fb2:	9327      	str	r3, [sp, #156]	; 0x9c
 8016fb4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016fb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016fb8:	4413      	add	r3, r2
 8016fba:	9328      	str	r3, [sp, #160]	; 0xa0
 8016fbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fbe:	3b01      	subs	r3, #1
 8016fc0:	3703      	adds	r7, #3
 8016fc2:	9311      	str	r3, [sp, #68]	; 0x44
 8016fc4:	e741      	b.n	8016e4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8016fc6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016fc8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016fca:	4413      	add	r3, r2
 8016fcc:	9327      	str	r3, [sp, #156]	; 0x9c
 8016fce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016fd0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016fd2:	4413      	add	r3, r2
 8016fd4:	9328      	str	r3, [sp, #160]	; 0xa0
 8016fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fd8:	3b01      	subs	r3, #1
 8016fda:	930a      	str	r3, [sp, #40]	; 0x28
 8016fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016fde:	3303      	adds	r3, #3
 8016fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fe2:	e6e6      	b.n	8016db2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8016fe4:	f47f aef8 	bne.w	8016dd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8016fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	f340 811d 	ble.w	801722a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8016ff0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ff8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016ffc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016ffe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8017002:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017006:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801700a:	eef0 6a48 	vmov.f32	s13, s16
 801700e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017012:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017016:	ee37 8a48 	vsub.f32	s16, s14, s16
 801701a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801701e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017022:	eef0 6a68 	vmov.f32	s13, s17
 8017026:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801702a:	ee18 2a10 	vmov	r2, s16
 801702e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017032:	fb92 f3f3 	sdiv	r3, r2, r3
 8017036:	ee18 2a90 	vmov	r2, s17
 801703a:	9329      	str	r3, [sp, #164]	; 0xa4
 801703c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801703e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017042:	932a      	str	r3, [sp, #168]	; 0xa8
 8017044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017046:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017048:	3b01      	subs	r3, #1
 801704a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801704e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017050:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017052:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8017056:	bf08      	it	eq
 8017058:	4613      	moveq	r3, r2
 801705a:	930a      	str	r3, [sp, #40]	; 0x28
 801705c:	eef0 8a67 	vmov.f32	s17, s15
 8017060:	eeb0 8a47 	vmov.f32	s16, s14
 8017064:	e69e      	b.n	8016da4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8017066:	b151      	cbz	r1, 801707e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8017068:	5d52      	ldrb	r2, [r2, r5]
 801706a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801706c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017070:	4402      	add	r2, r0
 8017072:	4640      	mov	r0, r8
 8017074:	46c4      	mov	ip, r8
 8017076:	e724      	b.n	8016ec2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8017078:	4640      	mov	r0, r8
 801707a:	4642      	mov	r2, r8
 801707c:	e721      	b.n	8016ec2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801707e:	4640      	mov	r0, r8
 8017080:	4642      	mov	r2, r8
 8017082:	e7f7      	b.n	8017074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8017084:	1c46      	adds	r6, r0, #1
 8017086:	d191      	bne.n	8016fac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8017088:	4285      	cmp	r5, r0
 801708a:	dd8f      	ble.n	8016fac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801708c:	1c54      	adds	r4, r2, #1
 801708e:	db8d      	blt.n	8016fac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8017090:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017092:	4294      	cmp	r4, r2
 8017094:	dd8a      	ble.n	8016fac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8017096:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801709a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801709c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801709e:	9002      	str	r0, [sp, #8]
 80170a0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80170a4:	e9cd 5300 	strd	r5, r3, [sp]
 80170a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80170ae:	4639      	mov	r1, r7
 80170b0:	f7ff fd52 	bl	8016b58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80170b4:	e77a      	b.n	8016fac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80170b6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80170b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80170ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80170bc:	1410      	asrs	r0, r2, #16
 80170be:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80170c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80170c4:	1412      	asrs	r2, r2, #16
 80170c6:	fb05 2000 	mla	r0, r5, r0, r2
 80170ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170cc:	f814 8000 	ldrb.w	r8, [r4, r0]
 80170d0:	4402      	add	r2, r0
 80170d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80170d4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80170d8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80170dc:	eb00 0708 	add.w	r7, r0, r8
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	f000 8093 	beq.w	801720c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80170e6:	7856      	ldrb	r6, [r2, #1]
 80170e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80170ec:	4406      	add	r6, r0
 80170ee:	2900      	cmp	r1, #0
 80170f0:	f000 8095 	beq.w	801721e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80170f4:	1950      	adds	r0, r2, r5
 80170f6:	5d52      	ldrb	r2, [r2, r5]
 80170f8:	7840      	ldrb	r0, [r0, #1]
 80170fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80170fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017100:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017104:	4422      	add	r2, r4
 8017106:	4420      	add	r0, r4
 8017108:	b29b      	uxth	r3, r3
 801710a:	b289      	uxth	r1, r1
 801710c:	fb03 f901 	mul.w	r9, r3, r1
 8017110:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017112:	011b      	lsls	r3, r3, #4
 8017114:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017118:	f814 b008 	ldrb.w	fp, [r4, r8]
 801711c:	f896 8000 	ldrb.w	r8, [r6]
 8017120:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017122:	b289      	uxth	r1, r1
 8017124:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017128:	eba3 0309 	sub.w	r3, r3, r9
 801712c:	b29b      	uxth	r3, r3
 801712e:	ebae 0e01 	sub.w	lr, lr, r1
 8017132:	fa1f fe8e 	uxth.w	lr, lr
 8017136:	fb03 f808 	mul.w	r8, r3, r8
 801713a:	fb0e 880b 	mla	r8, lr, fp, r8
 801713e:	f892 b000 	ldrb.w	fp, [r2]
 8017142:	fb01 880b 	mla	r8, r1, fp, r8
 8017146:	f890 b000 	ldrb.w	fp, [r0]
 801714a:	fb09 880b 	mla	r8, r9, fp, r8
 801714e:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8017152:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8017156:	fb1b fb04 	smulbb	fp, fp, r4
 801715a:	fb08 b80a 	mla	r8, r8, sl, fp
 801715e:	fa1f f888 	uxth.w	r8, r8
 8017162:	f108 0b01 	add.w	fp, r8, #1
 8017166:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801716a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801716e:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8017172:	f896 8001 	ldrb.w	r8, [r6, #1]
 8017176:	f897 b001 	ldrb.w	fp, [r7, #1]
 801717a:	fb03 f808 	mul.w	r8, r3, r8
 801717e:	fb0e 880b 	mla	r8, lr, fp, r8
 8017182:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017186:	fb01 880b 	mla	r8, r1, fp, r8
 801718a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801718e:	fb09 880b 	mla	r8, r9, fp, r8
 8017192:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8017196:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801719a:	fb1b fb04 	smulbb	fp, fp, r4
 801719e:	fb08 b80a 	mla	r8, r8, sl, fp
 80171a2:	fa1f f888 	uxth.w	r8, r8
 80171a6:	f108 0b01 	add.w	fp, r8, #1
 80171aa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80171ae:	ea4f 2828 	mov.w	r8, r8, asr #8
 80171b2:	f80c 8c02 	strb.w	r8, [ip, #-2]
 80171b6:	78b6      	ldrb	r6, [r6, #2]
 80171b8:	78bf      	ldrb	r7, [r7, #2]
 80171ba:	4373      	muls	r3, r6
 80171bc:	7896      	ldrb	r6, [r2, #2]
 80171be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80171c0:	fb0e 3307 	mla	r3, lr, r7, r3
 80171c4:	fb01 3306 	mla	r3, r1, r6, r3
 80171c8:	7886      	ldrb	r6, [r0, #2]
 80171ca:	fb09 3906 	mla	r9, r9, r6, r3
 80171ce:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
 80171d2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80171d6:	fb13 f304 	smulbb	r3, r3, r4
 80171da:	fb09 390a 	mla	r9, r9, sl, r3
 80171de:	fa1f f989 	uxth.w	r9, r9
 80171e2:	f109 0301 	add.w	r3, r9, #1
 80171e6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80171ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80171ec:	4413      	add	r3, r2
 80171ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80171f0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80171f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80171f4:	4413      	add	r3, r2
 80171f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80171f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80171fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80171fe:	3b01      	subs	r3, #1
 8017200:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8017204:	9311      	str	r3, [sp, #68]	; 0x44
 8017206:	f10c 0c03 	add.w	ip, ip, #3
 801720a:	e601      	b.n	8016e10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801720c:	b151      	cbz	r1, 8017224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801720e:	5d52      	ldrb	r2, [r2, r5]
 8017210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017212:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017216:	4402      	add	r2, r0
 8017218:	4638      	mov	r0, r7
 801721a:	463e      	mov	r6, r7
 801721c:	e774      	b.n	8017108 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801721e:	4638      	mov	r0, r7
 8017220:	463a      	mov	r2, r7
 8017222:	e771      	b.n	8017108 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8017224:	4638      	mov	r0, r7
 8017226:	463a      	mov	r2, r7
 8017228:	e7f7      	b.n	801721a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801722a:	b015      	add	sp, #84	; 0x54
 801722c:	ecbd 8b08 	vpop	{d8-d11}
 8017230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017234 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8017234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017238:	780d      	ldrb	r5, [r1, #0]
 801723a:	f891 9002 	ldrb.w	r9, [r1, #2]
 801723e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8017242:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8017246:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801724a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801724e:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8017252:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8017256:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801725a:	f891 9001 	ldrb.w	r9, [r1, #1]
 801725e:	fb06 470c 	mla	r7, r6, ip, r4
 8017262:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8017266:	2e00      	cmp	r6, #0
 8017268:	eb02 0e07 	add.w	lr, r2, r7
 801726c:	9501      	str	r5, [sp, #4]
 801726e:	db46      	blt.n	80172fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8017270:	45b0      	cmp	r8, r6
 8017272:	dd44      	ble.n	80172fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8017274:	2c00      	cmp	r4, #0
 8017276:	db40      	blt.n	80172fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8017278:	45a4      	cmp	ip, r4
 801727a:	dd3e      	ble.n	80172fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801727c:	5dd7      	ldrb	r7, [r2, r7]
 801727e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017282:	441f      	add	r7, r3
 8017284:	1c62      	adds	r2, r4, #1
 8017286:	d43d      	bmi.n	8017304 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8017288:	4594      	cmp	ip, r2
 801728a:	dd3b      	ble.n	8017304 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801728c:	f1ba 0f00 	cmp.w	sl, #0
 8017290:	d038      	beq.n	8017304 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8017292:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8017296:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801729a:	441d      	add	r5, r3
 801729c:	3601      	adds	r6, #1
 801729e:	d435      	bmi.n	801730c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80172a0:	45b0      	cmp	r8, r6
 80172a2:	dd33      	ble.n	801730c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80172a4:	b390      	cbz	r0, 801730c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80172a6:	2c00      	cmp	r4, #0
 80172a8:	db2e      	blt.n	8017308 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80172aa:	45a4      	cmp	ip, r4
 80172ac:	dd2c      	ble.n	8017308 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80172ae:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80172b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80172b6:	441e      	add	r6, r3
 80172b8:	1c62      	adds	r2, r4, #1
 80172ba:	d42a      	bmi.n	8017312 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80172bc:	4594      	cmp	ip, r2
 80172be:	dd28      	ble.n	8017312 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80172c0:	f1ba 0f00 	cmp.w	sl, #0
 80172c4:	d025      	beq.n	8017312 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80172c6:	44f4      	add	ip, lr
 80172c8:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80172cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80172d0:	4413      	add	r3, r2
 80172d2:	f1ba 0f0f 	cmp.w	sl, #15
 80172d6:	f897 8000 	ldrb.w	r8, [r7]
 80172da:	f895 9000 	ldrb.w	r9, [r5]
 80172de:	f896 e000 	ldrb.w	lr, [r6]
 80172e2:	f893 c000 	ldrb.w	ip, [r3]
 80172e6:	d801      	bhi.n	80172ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 80172e8:	280f      	cmp	r0, #15
 80172ea:	d914      	bls.n	8017316 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 80172ec:	4b29      	ldr	r3, [pc, #164]	; (8017394 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80172ee:	4a2a      	ldr	r2, [pc, #168]	; (8017398 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80172f0:	482a      	ldr	r0, [pc, #168]	; (801739c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 80172f2:	f240 11a5 	movw	r1, #421	; 0x1a5
 80172f6:	f004 fb4d 	bl	801b994 <__assert_func>
 80172fa:	af01      	add	r7, sp, #4
 80172fc:	e7c2      	b.n	8017284 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80172fe:	ad01      	add	r5, sp, #4
 8017300:	462f      	mov	r7, r5
 8017302:	e7cb      	b.n	801729c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8017304:	ad01      	add	r5, sp, #4
 8017306:	e7c9      	b.n	801729c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8017308:	ae01      	add	r6, sp, #4
 801730a:	e7d5      	b.n	80172b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801730c:	ab01      	add	r3, sp, #4
 801730e:	461e      	mov	r6, r3
 8017310:	e7df      	b.n	80172d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8017312:	ab01      	add	r3, sp, #4
 8017314:	e7dd      	b.n	80172d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8017316:	fa1f f48a 	uxth.w	r4, sl
 801731a:	b280      	uxth	r0, r0
 801731c:	fb04 fa00 	mul.w	sl, r4, r0
 8017320:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8017324:	0124      	lsls	r4, r4, #4
 8017326:	b282      	uxth	r2, r0
 8017328:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801732c:	eba4 000a 	sub.w	r0, r4, sl
 8017330:	b280      	uxth	r0, r0
 8017332:	ebab 0b02 	sub.w	fp, fp, r2
 8017336:	fa1f fb8b 	uxth.w	fp, fp
 801733a:	fb00 f909 	mul.w	r9, r0, r9
 801733e:	fb0b 9808 	mla	r8, fp, r8, r9
 8017342:	fb02 8e0e 	mla	lr, r2, lr, r8
 8017346:	fb0a ec0c 	mla	ip, sl, ip, lr
 801734a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801734e:	f881 c000 	strb.w	ip, [r1]
 8017352:	786c      	ldrb	r4, [r5, #1]
 8017354:	f897 c001 	ldrb.w	ip, [r7, #1]
 8017358:	4344      	muls	r4, r0
 801735a:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801735e:	7874      	ldrb	r4, [r6, #1]
 8017360:	fb02 cc04 	mla	ip, r2, r4, ip
 8017364:	785c      	ldrb	r4, [r3, #1]
 8017366:	fb0a c404 	mla	r4, sl, r4, ip
 801736a:	1224      	asrs	r4, r4, #8
 801736c:	704c      	strb	r4, [r1, #1]
 801736e:	78ad      	ldrb	r5, [r5, #2]
 8017370:	78bc      	ldrb	r4, [r7, #2]
 8017372:	4368      	muls	r0, r5
 8017374:	fb0b 0b04 	mla	fp, fp, r4, r0
 8017378:	78b0      	ldrb	r0, [r6, #2]
 801737a:	fb02 b000 	mla	r0, r2, r0, fp
 801737e:	789a      	ldrb	r2, [r3, #2]
 8017380:	fb0a 0a02 	mla	sl, sl, r2, r0
 8017384:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017388:	f881 a002 	strb.w	sl, [r1, #2]
 801738c:	b003      	add	sp, #12
 801738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017392:	bf00      	nop
 8017394:	0801f881 	.word	0x0801f881
 8017398:	0801fd76 	.word	0x0801fd76
 801739c:	0801f94a 	.word	0x0801f94a

080173a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80173a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173a4:	ed2d 8b0a 	vpush	{d8-d12}
 80173a8:	b08f      	sub	sp, #60	; 0x3c
 80173aa:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 80173ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80173b0:	9307      	str	r3, [sp, #28]
 80173b2:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80173b6:	9309      	str	r3, [sp, #36]	; 0x24
 80173b8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80173bc:	900d      	str	r0, [sp, #52]	; 0x34
 80173be:	6860      	ldr	r0, [r4, #4]
 80173c0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80173c2:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 80173c6:	fb00 1303 	mla	r3, r0, r3, r1
 80173ca:	6821      	ldr	r1, [r4, #0]
 80173cc:	6854      	ldr	r4, [r2, #4]
 80173ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80173d2:	18cb      	adds	r3, r1, r3
 80173d4:	9308      	str	r3, [sp, #32]
 80173d6:	6813      	ldr	r3, [r2, #0]
 80173d8:	930a      	str	r3, [sp, #40]	; 0x28
 80173da:	eeb0 aa40 	vmov.f32	s20, s0
 80173de:	eef0 9a60 	vmov.f32	s19, s1
 80173e2:	eeb0 9a41 	vmov.f32	s18, s2
 80173e6:	eeb0 8a62 	vmov.f32	s16, s5
 80173ea:	eef0 8a43 	vmov.f32	s17, s6
 80173ee:	eeb0 ca44 	vmov.f32	s24, s8
 80173f2:	eef0 ba64 	vmov.f32	s23, s9
 80173f6:	eeb0 ba45 	vmov.f32	s22, s10
 80173fa:	3404      	adds	r4, #4
 80173fc:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8017400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017402:	2b00      	cmp	r3, #0
 8017404:	dc03      	bgt.n	801740e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8017406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017408:	2b00      	cmp	r3, #0
 801740a:	f340 81d2 	ble.w	80177b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801740e:	9b07      	ldr	r3, [sp, #28]
 8017410:	2b00      	cmp	r3, #0
 8017412:	f340 80e3 	ble.w	80175dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8017416:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017418:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801741a:	1412      	asrs	r2, r2, #16
 801741c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017420:	d42f      	bmi.n	8017482 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8017422:	1c51      	adds	r1, r2, #1
 8017424:	428d      	cmp	r5, r1
 8017426:	dd2f      	ble.n	8017488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8017428:	2b00      	cmp	r3, #0
 801742a:	db2d      	blt.n	8017488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801742c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801742e:	1c59      	adds	r1, r3, #1
 8017430:	4288      	cmp	r0, r1
 8017432:	dd29      	ble.n	8017488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8017434:	9b07      	ldr	r3, [sp, #28]
 8017436:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017438:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801743a:	3b01      	subs	r3, #1
 801743c:	fb02 1203 	mla	r2, r2, r3, r1
 8017440:	1412      	asrs	r2, r2, #16
 8017442:	d42b      	bmi.n	801749c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8017444:	3201      	adds	r2, #1
 8017446:	4295      	cmp	r5, r2
 8017448:	dd28      	ble.n	801749c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801744a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801744c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801744e:	fb02 1303 	mla	r3, r2, r3, r1
 8017452:	141b      	asrs	r3, r3, #16
 8017454:	d422      	bmi.n	801749c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8017456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017458:	3301      	adds	r3, #1
 801745a:	429a      	cmp	r2, r3
 801745c:	dd1e      	ble.n	801749c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801745e:	9b08      	ldr	r3, [sp, #32]
 8017460:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017464:	f103 0803 	add.w	r8, r3, #3
 8017468:	f1ba 0f00 	cmp.w	sl, #0
 801746c:	f300 8119 	bgt.w	80176a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8017470:	9b07      	ldr	r3, [sp, #28]
 8017472:	9a08      	ldr	r2, [sp, #32]
 8017474:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801747c:	441a      	add	r2, r3
 801747e:	9208      	str	r2, [sp, #32]
 8017480:	e0ae      	b.n	80175e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8017482:	1c51      	adds	r1, r2, #1
 8017484:	f040 809b 	bne.w	80175be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8017488:	42aa      	cmp	r2, r5
 801748a:	f280 8098 	bge.w	80175be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801748e:	1c5a      	adds	r2, r3, #1
 8017490:	f2c0 8095 	blt.w	80175be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8017494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017496:	4293      	cmp	r3, r2
 8017498:	f280 8091 	bge.w	80175be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801749c:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 80174a0:	f1bb 0f00 	cmp.w	fp, #0
 80174a4:	dde4      	ble.n	8017470 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80174a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80174a8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80174aa:	9924      	ldr	r1, [sp, #144]	; 0x90
 80174ac:	141a      	asrs	r2, r3, #16
 80174ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80174b0:	1400      	asrs	r0, r0, #16
 80174b2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80174b6:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80174ba:	f100 80dc 	bmi.w	8017676 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 80174be:	1c47      	adds	r7, r0, #1
 80174c0:	42bd      	cmp	r5, r7
 80174c2:	f340 80da 	ble.w	801767a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80174c6:	2a00      	cmp	r2, #0
 80174c8:	f2c0 80d7 	blt.w	801767a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80174cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80174ce:	f102 0c01 	add.w	ip, r2, #1
 80174d2:	4567      	cmp	r7, ip
 80174d4:	f340 80d1 	ble.w	801767a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80174d8:	fb02 0005 	mla	r0, r2, r5, r0
 80174dc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80174de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174e0:	f817 8000 	ldrb.w	r8, [r7, r0]
 80174e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80174e8:	4402      	add	r2, r0
 80174ea:	eb04 0c08 	add.w	ip, r4, r8
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	f000 80b3 	beq.w	801765a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 80174f4:	7857      	ldrb	r7, [r2, #1]
 80174f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80174fa:	4427      	add	r7, r4
 80174fc:	2900      	cmp	r1, #0
 80174fe:	f000 80b4 	beq.w	801766a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 8017502:	1950      	adds	r0, r2, r5
 8017504:	5d52      	ldrb	r2, [r2, r5]
 8017506:	7840      	ldrb	r0, [r0, #1]
 8017508:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801750c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017510:	4422      	add	r2, r4
 8017512:	4420      	add	r0, r4
 8017514:	b29b      	uxth	r3, r3
 8017516:	b289      	uxth	r1, r1
 8017518:	fb03 f901 	mul.w	r9, r3, r1
 801751c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017520:	011b      	lsls	r3, r3, #4
 8017522:	f814 a008 	ldrb.w	sl, [r4, r8]
 8017526:	f897 8000 	ldrb.w	r8, [r7]
 801752a:	b289      	uxth	r1, r1
 801752c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017530:	eba3 0309 	sub.w	r3, r3, r9
 8017534:	b29b      	uxth	r3, r3
 8017536:	ebae 0e01 	sub.w	lr, lr, r1
 801753a:	fa1f fe8e 	uxth.w	lr, lr
 801753e:	fb03 f808 	mul.w	r8, r3, r8
 8017542:	fb0e 880a 	mla	r8, lr, sl, r8
 8017546:	f892 a000 	ldrb.w	sl, [r2]
 801754a:	fb01 880a 	mla	r8, r1, sl, r8
 801754e:	f890 a000 	ldrb.w	sl, [r0]
 8017552:	fb09 880a 	mla	r8, r9, sl, r8
 8017556:	ea4f 2828 	mov.w	r8, r8, asr #8
 801755a:	f886 8000 	strb.w	r8, [r6]
 801755e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017562:	f89c a001 	ldrb.w	sl, [ip, #1]
 8017566:	fb03 f808 	mul.w	r8, r3, r8
 801756a:	fb0e 880a 	mla	r8, lr, sl, r8
 801756e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8017572:	fb01 880a 	mla	r8, r1, sl, r8
 8017576:	f890 a001 	ldrb.w	sl, [r0, #1]
 801757a:	fb09 880a 	mla	r8, r9, sl, r8
 801757e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017582:	f886 8001 	strb.w	r8, [r6, #1]
 8017586:	78bf      	ldrb	r7, [r7, #2]
 8017588:	f89c c002 	ldrb.w	ip, [ip, #2]
 801758c:	7892      	ldrb	r2, [r2, #2]
 801758e:	437b      	muls	r3, r7
 8017590:	fb0e 330c 	mla	r3, lr, ip, r3
 8017594:	fb01 3102 	mla	r1, r1, r2, r3
 8017598:	7882      	ldrb	r2, [r0, #2]
 801759a:	fb09 1902 	mla	r9, r9, r2, r1
 801759e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80175a2:	f886 9002 	strb.w	r9, [r6, #2]
 80175a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80175a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80175aa:	4413      	add	r3, r2
 80175ac:	9323      	str	r3, [sp, #140]	; 0x8c
 80175ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80175b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80175b2:	4413      	add	r3, r2
 80175b4:	3603      	adds	r6, #3
 80175b6:	9324      	str	r3, [sp, #144]	; 0x90
 80175b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80175bc:	e770      	b.n	80174a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80175be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80175c0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80175c2:	4413      	add	r3, r2
 80175c4:	9323      	str	r3, [sp, #140]	; 0x8c
 80175c6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80175c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80175ca:	4413      	add	r3, r2
 80175cc:	9324      	str	r3, [sp, #144]	; 0x90
 80175ce:	9b07      	ldr	r3, [sp, #28]
 80175d0:	3b01      	subs	r3, #1
 80175d2:	9307      	str	r3, [sp, #28]
 80175d4:	9b08      	ldr	r3, [sp, #32]
 80175d6:	3303      	adds	r3, #3
 80175d8:	9308      	str	r3, [sp, #32]
 80175da:	e718      	b.n	801740e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80175dc:	f47f af2a 	bne.w	8017434 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80175e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	f340 80e5 	ble.w	80177b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80175e8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80175ec:	ee79 9aab 	vadd.f32	s19, s19, s23
 80175f0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80175f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80175f6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80175fa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80175fe:	eef0 6a48 	vmov.f32	s13, s16
 8017602:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017606:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801760a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801760e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017612:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017616:	eef0 6a68 	vmov.f32	s13, s17
 801761a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801761e:	ee18 2a10 	vmov	r2, s16
 8017622:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017626:	fb92 f3f3 	sdiv	r3, r2, r3
 801762a:	ee18 2a90 	vmov	r2, s17
 801762e:	9325      	str	r3, [sp, #148]	; 0x94
 8017630:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017632:	fb92 f3f3 	sdiv	r3, r2, r3
 8017636:	9326      	str	r3, [sp, #152]	; 0x98
 8017638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801763a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801763c:	3b01      	subs	r3, #1
 801763e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017642:	930b      	str	r3, [sp, #44]	; 0x2c
 8017644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017646:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801764a:	bf08      	it	eq
 801764c:	4613      	moveq	r3, r2
 801764e:	9307      	str	r3, [sp, #28]
 8017650:	eef0 8a67 	vmov.f32	s17, s15
 8017654:	eeb0 8a47 	vmov.f32	s16, s14
 8017658:	e6d2      	b.n	8017400 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801765a:	b149      	cbz	r1, 8017670 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801765c:	5d52      	ldrb	r2, [r2, r5]
 801765e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017662:	4422      	add	r2, r4
 8017664:	4660      	mov	r0, ip
 8017666:	4667      	mov	r7, ip
 8017668:	e754      	b.n	8017514 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801766a:	4660      	mov	r0, ip
 801766c:	4662      	mov	r2, ip
 801766e:	e751      	b.n	8017514 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8017670:	4660      	mov	r0, ip
 8017672:	4662      	mov	r2, ip
 8017674:	e7f7      	b.n	8017666 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8017676:	1c47      	adds	r7, r0, #1
 8017678:	d195      	bne.n	80175a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801767a:	4285      	cmp	r5, r0
 801767c:	dd93      	ble.n	80175a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801767e:	1c57      	adds	r7, r2, #1
 8017680:	db91      	blt.n	80175a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8017682:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017684:	4297      	cmp	r7, r2
 8017686:	dd8e      	ble.n	80175a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8017688:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801768c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8017690:	e9cd 5700 	strd	r5, r7, [sp]
 8017694:	4623      	mov	r3, r4
 8017696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017698:	980d      	ldr	r0, [sp, #52]	; 0x34
 801769a:	4631      	mov	r1, r6
 801769c:	f7ff fdca 	bl	8017234 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80176a0:	e781      	b.n	80175a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80176a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80176a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80176a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80176a8:	1410      	asrs	r0, r2, #16
 80176aa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80176ae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80176b0:	1412      	asrs	r2, r2, #16
 80176b2:	fb05 2000 	mla	r0, r5, r0, r2
 80176b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80176b8:	f816 e000 	ldrb.w	lr, [r6, r0]
 80176bc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80176c0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80176c4:	4402      	add	r2, r0
 80176c6:	eb04 070e 	add.w	r7, r4, lr
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d063      	beq.n	8017796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 80176ce:	7856      	ldrb	r6, [r2, #1]
 80176d0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80176d4:	4426      	add	r6, r4
 80176d6:	2900      	cmp	r1, #0
 80176d8:	d065      	beq.n	80177a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80176da:	1950      	adds	r0, r2, r5
 80176dc:	5d52      	ldrb	r2, [r2, r5]
 80176de:	7840      	ldrb	r0, [r0, #1]
 80176e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80176e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80176e8:	4422      	add	r2, r4
 80176ea:	4420      	add	r0, r4
 80176ec:	b29b      	uxth	r3, r3
 80176ee:	b289      	uxth	r1, r1
 80176f0:	fb03 f901 	mul.w	r9, r3, r1
 80176f4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80176f8:	011b      	lsls	r3, r3, #4
 80176fa:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80176fe:	f896 e000 	ldrb.w	lr, [r6]
 8017702:	b289      	uxth	r1, r1
 8017704:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8017708:	eba3 0309 	sub.w	r3, r3, r9
 801770c:	b29b      	uxth	r3, r3
 801770e:	ebac 0c01 	sub.w	ip, ip, r1
 8017712:	fa1f fc8c 	uxth.w	ip, ip
 8017716:	fb03 fe0e 	mul.w	lr, r3, lr
 801771a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801771e:	f892 b000 	ldrb.w	fp, [r2]
 8017722:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017726:	f890 b000 	ldrb.w	fp, [r0]
 801772a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801772e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017732:	f808 ec03 	strb.w	lr, [r8, #-3]
 8017736:	f896 e001 	ldrb.w	lr, [r6, #1]
 801773a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801773e:	fb03 fe0e 	mul.w	lr, r3, lr
 8017742:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017746:	f892 b001 	ldrb.w	fp, [r2, #1]
 801774a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801774e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017752:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017756:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801775a:	f808 ec02 	strb.w	lr, [r8, #-2]
 801775e:	78b6      	ldrb	r6, [r6, #2]
 8017760:	78bf      	ldrb	r7, [r7, #2]
 8017762:	4373      	muls	r3, r6
 8017764:	7896      	ldrb	r6, [r2, #2]
 8017766:	7882      	ldrb	r2, [r0, #2]
 8017768:	fb0c 3307 	mla	r3, ip, r7, r3
 801776c:	fb01 3306 	mla	r3, r1, r6, r3
 8017770:	fb09 3902 	mla	r9, r9, r2, r3
 8017774:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017776:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017778:	4413      	add	r3, r2
 801777a:	9323      	str	r3, [sp, #140]	; 0x8c
 801777c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801777e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017780:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017784:	4413      	add	r3, r2
 8017786:	f808 9c01 	strb.w	r9, [r8, #-1]
 801778a:	9324      	str	r3, [sp, #144]	; 0x90
 801778c:	f108 0803 	add.w	r8, r8, #3
 8017790:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017794:	e668      	b.n	8017468 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8017796:	b149      	cbz	r1, 80177ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8017798:	5d52      	ldrb	r2, [r2, r5]
 801779a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801779e:	4422      	add	r2, r4
 80177a0:	4638      	mov	r0, r7
 80177a2:	463e      	mov	r6, r7
 80177a4:	e7a2      	b.n	80176ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80177a6:	4638      	mov	r0, r7
 80177a8:	463a      	mov	r2, r7
 80177aa:	e79f      	b.n	80176ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80177ac:	4638      	mov	r0, r7
 80177ae:	463a      	mov	r2, r7
 80177b0:	e7f7      	b.n	80177a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 80177b2:	b00f      	add	sp, #60	; 0x3c
 80177b4:	ecbd 8b0a 	vpop	{d8-d12}
 80177b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080177bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80177bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177c0:	b087      	sub	sp, #28
 80177c2:	7888      	ldrb	r0, [r1, #2]
 80177c4:	9002      	str	r0, [sp, #8]
 80177c6:	7848      	ldrb	r0, [r1, #1]
 80177c8:	9003      	str	r0, [sp, #12]
 80177ca:	7808      	ldrb	r0, [r1, #0]
 80177cc:	9e02      	ldr	r6, [sp, #8]
 80177ce:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80177d2:	9004      	str	r0, [sp, #16]
 80177d4:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 80177d8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80177dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80177e0:	9e03      	ldr	r6, [sp, #12]
 80177e2:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80177e6:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 80177ea:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80177ee:	fb04 7508 	mla	r5, r4, r8, r7
 80177f2:	2c00      	cmp	r4, #0
 80177f4:	eb02 0905 	add.w	r9, r2, r5
 80177f8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 80177fc:	db45      	blt.n	801788a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 80177fe:	45a2      	cmp	sl, r4
 8017800:	dd43      	ble.n	801788a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8017802:	2f00      	cmp	r7, #0
 8017804:	db3f      	blt.n	8017886 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8017806:	45b8      	cmp	r8, r7
 8017808:	dd3d      	ble.n	8017886 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801780a:	5d52      	ldrb	r2, [r2, r5]
 801780c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017810:	1c7a      	adds	r2, r7, #1
 8017812:	d43d      	bmi.n	8017890 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8017814:	4590      	cmp	r8, r2
 8017816:	dd3b      	ble.n	8017890 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8017818:	f1bc 0f00 	cmp.w	ip, #0
 801781c:	d038      	beq.n	8017890 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801781e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8017822:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017826:	3401      	adds	r4, #1
 8017828:	d436      	bmi.n	8017898 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801782a:	45a2      	cmp	sl, r4
 801782c:	dd34      	ble.n	8017898 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801782e:	f1be 0f00 	cmp.w	lr, #0
 8017832:	d031      	beq.n	8017898 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8017834:	2f00      	cmp	r7, #0
 8017836:	db2d      	blt.n	8017894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8017838:	45b8      	cmp	r8, r7
 801783a:	dd2b      	ble.n	8017894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801783c:	f819 2008 	ldrb.w	r2, [r9, r8]
 8017840:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8017844:	3701      	adds	r7, #1
 8017846:	d409      	bmi.n	801785c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8017848:	45b8      	cmp	r8, r7
 801784a:	dd07      	ble.n	801785c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801784c:	f1bc 0f00 	cmp.w	ip, #0
 8017850:	d004      	beq.n	801785c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8017852:	44c8      	add	r8, r9
 8017854:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017858:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801785c:	f1bc 0f0f 	cmp.w	ip, #15
 8017860:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8017864:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8017868:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801786c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8017870:	d802      	bhi.n	8017878 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8017872:	f1be 0f0f 	cmp.w	lr, #15
 8017876:	d911      	bls.n	801789c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8017878:	4b77      	ldr	r3, [pc, #476]	; (8017a58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801787a:	4a78      	ldr	r2, [pc, #480]	; (8017a5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801787c:	4878      	ldr	r0, [pc, #480]	; (8017a60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801787e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8017882:	f004 f887 	bl	801b994 <__assert_func>
 8017886:	4606      	mov	r6, r0
 8017888:	e7c2      	b.n	8017810 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801788a:	4605      	mov	r5, r0
 801788c:	4606      	mov	r6, r0
 801788e:	e7ca      	b.n	8017826 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8017890:	4605      	mov	r5, r0
 8017892:	e7c8      	b.n	8017826 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8017894:	4604      	mov	r4, r0
 8017896:	e7d5      	b.n	8017844 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8017898:	4604      	mov	r4, r0
 801789a:	e7df      	b.n	801785c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801789c:	fa1f fc8c 	uxth.w	ip, ip
 80178a0:	fa1f f28e 	uxth.w	r2, lr
 80178a4:	fb02 fe0c 	mul.w	lr, r2, ip
 80178a8:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 80178ac:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80178b0:	ebac 070e 	sub.w	r7, ip, lr
 80178b4:	b292      	uxth	r2, r2
 80178b6:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80178ba:	b2bf      	uxth	r7, r7
 80178bc:	1a9b      	subs	r3, r3, r2
 80178be:	b29b      	uxth	r3, r3
 80178c0:	fb07 fc0a 	mul.w	ip, r7, sl
 80178c4:	fb03 cc0b 	mla	ip, r3, fp, ip
 80178c8:	fb02 cc09 	mla	ip, r2, r9, ip
 80178cc:	fb0e cc08 	mla	ip, lr, r8, ip
 80178d0:	9301      	str	r3, [sp, #4]
 80178d2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80178d6:	9305      	str	r3, [sp, #20]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	f000 80b9 	beq.w	8017a50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 80178de:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80178e2:	fb0b fc0c 	mul.w	ip, fp, ip
 80178e6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80178ea:	fb0b f606 	mul.w	r6, fp, r6
 80178ee:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80178f2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80178f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80178fa:	44dc      	add	ip, fp
 80178fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017900:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8017904:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8017908:	fb0a fb0b 	mul.w	fp, sl, fp
 801790c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8017910:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8017914:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8017918:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801791c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017920:	44dc      	add	ip, fp
 8017922:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017926:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801792a:	fb09 fb0b 	mul.w	fp, r9, fp
 801792e:	fb09 f904 	mul.w	r9, r9, r4
 8017932:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8017936:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801793a:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801793e:	fb08 f404 	mul.w	r4, r8, r4
 8017942:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8017946:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801794a:	fb08 f800 	mul.w	r8, r8, r0
 801794e:	fb0a fa05 	mul.w	sl, sl, r5
 8017952:	0a20      	lsrs	r0, r4, #8
 8017954:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8017958:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801795c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8017960:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8017964:	4404      	add	r4, r0
 8017966:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801796a:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801796e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017972:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8017976:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801797a:	9801      	ldr	r0, [sp, #4]
 801797c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017980:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017984:	fb0c fc07 	mul.w	ip, ip, r7
 8017988:	445d      	add	r5, fp
 801798a:	0a24      	lsrs	r4, r4, #8
 801798c:	fb03 cc00 	mla	ip, r3, r0, ip
 8017990:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017994:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017998:	0a2d      	lsrs	r5, r5, #8
 801799a:	fb04 cc0e 	mla	ip, r4, lr, ip
 801799e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80179a2:	0a36      	lsrs	r6, r6, #8
 80179a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80179a8:	fb05 cc02 	mla	ip, r5, r2, ip
 80179ac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80179b0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80179b4:	fb07 f70a 	mul.w	r7, r7, sl
 80179b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80179bc:	fb00 7606 	mla	r6, r0, r6, r7
 80179c0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80179c4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80179c8:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80179cc:	fb0e 6e08 	mla	lr, lr, r8, r6
 80179d0:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 80179d4:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 80179d8:	9c04      	ldr	r4, [sp, #16]
 80179da:	fb02 ec0c 	mla	ip, r2, ip, lr
 80179de:	9a05      	ldr	r2, [sp, #20]
 80179e0:	b280      	uxth	r0, r0
 80179e2:	4342      	muls	r2, r0
 80179e4:	1c53      	adds	r3, r2, #1
 80179e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80179ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80179ee:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80179f2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80179f6:	ea45 0c0c 	orr.w	ip, r5, ip
 80179fa:	b2db      	uxtb	r3, r3
 80179fc:	fb14 f403 	smulbb	r4, r4, r3
 8017a00:	fa5f f28c 	uxtb.w	r2, ip
 8017a04:	fb02 4200 	mla	r2, r2, r0, r4
 8017a08:	b292      	uxth	r2, r2
 8017a0a:	1c54      	adds	r4, r2, #1
 8017a0c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8017a10:	9c03      	ldr	r4, [sp, #12]
 8017a12:	1212      	asrs	r2, r2, #8
 8017a14:	fb14 f403 	smulbb	r4, r4, r3
 8017a18:	700a      	strb	r2, [r1, #0]
 8017a1a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8017a1e:	fb02 4200 	mla	r2, r2, r0, r4
 8017a22:	b292      	uxth	r2, r2
 8017a24:	1c54      	adds	r4, r2, #1
 8017a26:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8017a2a:	1212      	asrs	r2, r2, #8
 8017a2c:	704a      	strb	r2, [r1, #1]
 8017a2e:	9a02      	ldr	r2, [sp, #8]
 8017a30:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017a34:	fb12 f303 	smulbb	r3, r2, r3
 8017a38:	fb0c 3c00 	mla	ip, ip, r0, r3
 8017a3c:	fa1f fc8c 	uxth.w	ip, ip
 8017a40:	f10c 0301 	add.w	r3, ip, #1
 8017a44:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8017a48:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017a4c:	f881 c002 	strb.w	ip, [r1, #2]
 8017a50:	b007      	add	sp, #28
 8017a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a56:	bf00      	nop
 8017a58:	0801f881 	.word	0x0801f881
 8017a5c:	0801fd76 	.word	0x0801fd76
 8017a60:	0801f94a 	.word	0x0801f94a

08017a64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8017a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a68:	ed2d 8b08 	vpush	{d8-d11}
 8017a6c:	b09b      	sub	sp, #108	; 0x6c
 8017a6e:	eeb0 aa40 	vmov.f32	s20, s0
 8017a72:	930a      	str	r3, [sp, #40]	; 0x28
 8017a74:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8017a78:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8017a7a:	9312      	str	r3, [sp, #72]	; 0x48
 8017a7c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8017a80:	9114      	str	r1, [sp, #80]	; 0x50
 8017a82:	9317      	str	r3, [sp, #92]	; 0x5c
 8017a84:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8017a88:	9019      	str	r0, [sp, #100]	; 0x64
 8017a8a:	6868      	ldr	r0, [r5, #4]
 8017a8c:	9218      	str	r2, [sp, #96]	; 0x60
 8017a8e:	fb00 1303 	mla	r3, r0, r3, r1
 8017a92:	6829      	ldr	r1, [r5, #0]
 8017a94:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8017a96:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8017a9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a9e:	18cb      	adds	r3, r1, r3
 8017aa0:	930d      	str	r3, [sp, #52]	; 0x34
 8017aa2:	6813      	ldr	r3, [r2, #0]
 8017aa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8017aa6:	6853      	ldr	r3, [r2, #4]
 8017aa8:	3304      	adds	r3, #4
 8017aaa:	eef0 9a60 	vmov.f32	s19, s1
 8017aae:	eeb0 9a41 	vmov.f32	s18, s2
 8017ab2:	eeb0 8a62 	vmov.f32	s16, s5
 8017ab6:	eef0 8a43 	vmov.f32	s17, s6
 8017aba:	eef0 ba44 	vmov.f32	s23, s8
 8017abe:	eeb0 ba64 	vmov.f32	s22, s9
 8017ac2:	eef0 aa45 	vmov.f32	s21, s10
 8017ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8017ac8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	dc03      	bgt.n	8017ad6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8017ace:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	f340 8353 	ble.w	801817c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 8017ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	f340 81a3 	ble.w	8017e24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c0>
 8017ade:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017ae0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017ae2:	1412      	asrs	r2, r2, #16
 8017ae4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017ae8:	d431      	bmi.n	8017b4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8017aea:	1c51      	adds	r1, r2, #1
 8017aec:	428c      	cmp	r4, r1
 8017aee:	dd31      	ble.n	8017b54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	db2f      	blt.n	8017b54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8017af4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017af6:	1c59      	adds	r1, r3, #1
 8017af8:	4288      	cmp	r0, r1
 8017afa:	dd2b      	ble.n	8017b54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8017afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017afe:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017b00:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017b02:	3b01      	subs	r3, #1
 8017b04:	fb02 1203 	mla	r2, r2, r3, r1
 8017b08:	1412      	asrs	r2, r2, #16
 8017b0a:	d42d      	bmi.n	8017b68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8017b0c:	3201      	adds	r2, #1
 8017b0e:	4294      	cmp	r4, r2
 8017b10:	dd2a      	ble.n	8017b68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8017b12:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8017b14:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8017b16:	fb02 1303 	mla	r3, r2, r3, r1
 8017b1a:	141b      	asrs	r3, r3, #16
 8017b1c:	d424      	bmi.n	8017b68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8017b1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b20:	3301      	adds	r3, #1
 8017b22:	429a      	cmp	r2, r3
 8017b24:	dd20      	ble.n	8017b68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8017b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b28:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8017b2c:	f103 0e03 	add.w	lr, r3, #3
 8017b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b32:	9315      	str	r3, [sp, #84]	; 0x54
 8017b34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	f300 81df 	bgt.w	8017efa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x496>
 8017b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017b40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b48:	441a      	add	r2, r3
 8017b4a:	920d      	str	r2, [sp, #52]	; 0x34
 8017b4c:	e16c      	b.n	8017e28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c4>
 8017b4e:	1c51      	adds	r1, r2, #1
 8017b50:	f040 8159 	bne.w	8017e06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 8017b54:	42a2      	cmp	r2, r4
 8017b56:	f280 8156 	bge.w	8017e06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 8017b5a:	1c5a      	adds	r2, r3, #1
 8017b5c:	f2c0 8153 	blt.w	8017e06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 8017b60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b62:	4293      	cmp	r3, r2
 8017b64:	f280 814f 	bge.w	8017e06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 8017b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b6a:	9316      	str	r3, [sp, #88]	; 0x58
 8017b6c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017b6e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8017b72:	9315      	str	r3, [sp, #84]	; 0x54
 8017b74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	dde0      	ble.n	8017b3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8017b7a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017b7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017b7e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8017b82:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017b84:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017b88:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017b8a:	1412      	asrs	r2, r2, #16
 8017b8c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017b90:	f100 819a 	bmi.w	8017ec8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x464>
 8017b94:	1c55      	adds	r5, r2, #1
 8017b96:	42ac      	cmp	r4, r5
 8017b98:	f340 8198 	ble.w	8017ecc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x468>
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	f2c0 8195 	blt.w	8017ecc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x468>
 8017ba2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8017ba4:	1c5d      	adds	r5, r3, #1
 8017ba6:	42af      	cmp	r7, r5
 8017ba8:	f340 8190 	ble.w	8017ecc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x468>
 8017bac:	fb03 2304 	mla	r3, r3, r4, r2
 8017bb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017bb2:	18d5      	adds	r5, r2, r3
 8017bb4:	5cd3      	ldrb	r3, [r2, r3]
 8017bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bbc:	0e1f      	lsrs	r7, r3, #24
 8017bbe:	2800      	cmp	r0, #0
 8017bc0:	f000 8171 	beq.w	8017ea6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x442>
 8017bc4:	f895 c001 	ldrb.w	ip, [r5, #1]
 8017bc8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8017bcc:	920e      	str	r2, [sp, #56]	; 0x38
 8017bce:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8017bd2:	2900      	cmp	r1, #0
 8017bd4:	f000 8172 	beq.w	8017ebc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x458>
 8017bd8:	eb05 0c04 	add.w	ip, r5, r4
 8017bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bde:	5d2d      	ldrb	r5, [r5, r4]
 8017be0:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8017be4:	950b      	str	r5, [sp, #44]	; 0x2c
 8017be6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8017bea:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8017bee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017bf0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8017bf4:	920f      	str	r2, [sp, #60]	; 0x3c
 8017bf6:	0e15      	lsrs	r5, r2, #24
 8017bf8:	b280      	uxth	r0, r0
 8017bfa:	b289      	uxth	r1, r1
 8017bfc:	fb00 fa01 	mul.w	sl, r0, r1
 8017c00:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8017c04:	0100      	lsls	r0, r0, #4
 8017c06:	eba0 080a 	sub.w	r8, r0, sl
 8017c0a:	b289      	uxth	r1, r1
 8017c0c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8017c10:	fa1f f888 	uxth.w	r8, r8
 8017c14:	1a52      	subs	r2, r2, r1
 8017c16:	b292      	uxth	r2, r2
 8017c18:	fb08 f00e 	mul.w	r0, r8, lr
 8017c1c:	fb02 0007 	mla	r0, r2, r7, r0
 8017c20:	fb01 0009 	mla	r0, r1, r9, r0
 8017c24:	fb0a 0005 	mla	r0, sl, r5, r0
 8017c28:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	f000 80dd 	beq.w	8017dec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8017c32:	2fff      	cmp	r7, #255	; 0xff
 8017c34:	d01a      	beq.n	8017c6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 8017c36:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8017c3a:	fb07 fc0c 	mul.w	ip, r7, ip
 8017c3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017c42:	435f      	muls	r7, r3
 8017c44:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8017c48:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017c4c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017c50:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8017c54:	4463      	add	r3, ip
 8017c56:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8017c5a:	0a1b      	lsrs	r3, r3, #8
 8017c5c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8017c60:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017c64:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8017c68:	ea43 030b 	orr.w	r3, r3, fp
 8017c6c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017c70:	d01e      	beq.n	8017cb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24c>
 8017c72:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8017c74:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8017c78:	fb0e fb0b 	mul.w	fp, lr, fp
 8017c7c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017c80:	fb0e fe07 	mul.w	lr, lr, r7
 8017c84:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8017c88:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8017c8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017c90:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017c94:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8017c98:	44dc      	add	ip, fp
 8017c9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017c9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017ca2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017ca6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8017caa:	ea4c 070e 	orr.w	r7, ip, lr
 8017cae:	970e      	str	r7, [sp, #56]	; 0x38
 8017cb0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017cb4:	d01e      	beq.n	8017cf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8017cb6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017cb8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8017cbc:	fb09 fe0e 	mul.w	lr, r9, lr
 8017cc0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017cc4:	fb09 f907 	mul.w	r9, r9, r7
 8017cc8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8017ccc:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8017cd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017cd4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8017cd8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017cdc:	44f4      	add	ip, lr
 8017cde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017ce2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017ce6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017cea:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017cee:	ea4c 0709 	orr.w	r7, ip, r9
 8017cf2:	970b      	str	r7, [sp, #44]	; 0x2c
 8017cf4:	2dff      	cmp	r5, #255	; 0xff
 8017cf6:	d01c      	beq.n	8017d32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 8017cf8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017cfa:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8017cfe:	fb05 fe0e 	mul.w	lr, r5, lr
 8017d02:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017d06:	437d      	muls	r5, r7
 8017d08:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8017d0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017d10:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8017d14:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8017d18:	44f4      	add	ip, lr
 8017d1a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8017d1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017d22:	0a2d      	lsrs	r5, r5, #8
 8017d24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017d28:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8017d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8017d30:	950f      	str	r5, [sp, #60]	; 0x3c
 8017d32:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8017d34:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017d38:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8017d3c:	fb08 f505 	mul.w	r5, r8, r5
 8017d40:	fb02 5507 	mla	r5, r2, r7, r5
 8017d44:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017d46:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017d4a:	fb01 5507 	mla	r5, r1, r7, r5
 8017d4e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017d50:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017d54:	fb0a 5507 	mla	r5, sl, r7, r5
 8017d58:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8017d5a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017d5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017d62:	fb08 f807 	mul.w	r8, r8, r7
 8017d66:	fb02 8303 	mla	r3, r2, r3, r8
 8017d6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017d6c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8017d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017d72:	fb01 330c 	mla	r3, r1, ip, r3
 8017d76:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8017d7a:	fb0a 3a01 	mla	sl, sl, r1, r3
 8017d7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d80:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017d82:	4343      	muls	r3, r0
 8017d84:	0a2d      	lsrs	r5, r5, #8
 8017d86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017d8a:	1c58      	adds	r0, r3, #1
 8017d8c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017d90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017d94:	ea45 050a 	orr.w	r5, r5, sl
 8017d98:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017d9c:	b2ea      	uxtb	r2, r5
 8017d9e:	7833      	ldrb	r3, [r6, #0]
 8017da0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8017da4:	b2c0      	uxtb	r0, r0
 8017da6:	fb12 f201 	smulbb	r2, r2, r1
 8017daa:	fb03 2300 	mla	r3, r3, r0, r2
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	1c5a      	adds	r2, r3, #1
 8017db2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017db6:	7872      	ldrb	r2, [r6, #1]
 8017db8:	121b      	asrs	r3, r3, #8
 8017dba:	fb12 f200 	smulbb	r2, r2, r0
 8017dbe:	7033      	strb	r3, [r6, #0]
 8017dc0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8017dc4:	fb03 2301 	mla	r3, r3, r1, r2
 8017dc8:	b29b      	uxth	r3, r3
 8017dca:	1c5a      	adds	r2, r3, #1
 8017dcc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017dd0:	121b      	asrs	r3, r3, #8
 8017dd2:	7073      	strb	r3, [r6, #1]
 8017dd4:	78b3      	ldrb	r3, [r6, #2]
 8017dd6:	0c2d      	lsrs	r5, r5, #16
 8017dd8:	fb13 f000 	smulbb	r0, r3, r0
 8017ddc:	fb05 0501 	mla	r5, r5, r1, r0
 8017de0:	b2ad      	uxth	r5, r5
 8017de2:	1c6b      	adds	r3, r5, #1
 8017de4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8017de8:	122d      	asrs	r5, r5, #8
 8017dea:	70b5      	strb	r5, [r6, #2]
 8017dec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017dee:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017df0:	4413      	add	r3, r2
 8017df2:	932d      	str	r3, [sp, #180]	; 0xb4
 8017df4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8017df6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017df8:	4413      	add	r3, r2
 8017dfa:	932e      	str	r3, [sp, #184]	; 0xb8
 8017dfc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017dfe:	3b01      	subs	r3, #1
 8017e00:	3603      	adds	r6, #3
 8017e02:	9316      	str	r3, [sp, #88]	; 0x58
 8017e04:	e6b6      	b.n	8017b74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8017e06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017e08:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017e0a:	4413      	add	r3, r2
 8017e0c:	932d      	str	r3, [sp, #180]	; 0xb4
 8017e0e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8017e10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017e12:	4413      	add	r3, r2
 8017e14:	932e      	str	r3, [sp, #184]	; 0xb8
 8017e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e18:	3b01      	subs	r3, #1
 8017e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8017e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e1e:	3303      	adds	r3, #3
 8017e20:	930d      	str	r3, [sp, #52]	; 0x34
 8017e22:	e658      	b.n	8017ad6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8017e24:	f47f ae6a 	bne.w	8017afc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8017e28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	f340 81a6 	ble.w	801817c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 8017e30:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017e38:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017e3c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017e3e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8017e42:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017e46:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017e4a:	eef0 6a48 	vmov.f32	s13, s16
 8017e4e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017e52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e56:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017e5a:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8017e5e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017e62:	eef0 6a68 	vmov.f32	s13, s17
 8017e66:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017e6a:	ee18 2a10 	vmov	r2, s16
 8017e6e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017e72:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e76:	ee18 2a90 	vmov	r2, s17
 8017e7a:	932f      	str	r3, [sp, #188]	; 0xbc
 8017e7c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017e7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e82:	9330      	str	r3, [sp, #192]	; 0xc0
 8017e84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017e88:	3b01      	subs	r3, #1
 8017e8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e8e:	9314      	str	r3, [sp, #80]	; 0x50
 8017e90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017e92:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8017e96:	bf08      	it	eq
 8017e98:	4613      	moveq	r3, r2
 8017e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8017e9c:	eef0 8a67 	vmov.f32	s17, s15
 8017ea0:	eeb0 8a47 	vmov.f32	s16, s14
 8017ea4:	e610      	b.n	8017ac8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8017ea6:	b161      	cbz	r1, 8017ec2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 8017ea8:	5d2a      	ldrb	r2, [r5, r4]
 8017eaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017eac:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8017eb0:	920b      	str	r2, [sp, #44]	; 0x2c
 8017eb2:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8017eb6:	25ff      	movs	r5, #255	; 0xff
 8017eb8:	46ae      	mov	lr, r5
 8017eba:	e69d      	b.n	8017bf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x194>
 8017ebc:	25ff      	movs	r5, #255	; 0xff
 8017ebe:	46a9      	mov	r9, r5
 8017ec0:	e69a      	b.n	8017bf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x194>
 8017ec2:	25ff      	movs	r5, #255	; 0xff
 8017ec4:	46a9      	mov	r9, r5
 8017ec6:	e7f7      	b.n	8017eb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 8017ec8:	1c57      	adds	r7, r2, #1
 8017eca:	d18f      	bne.n	8017dec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8017ecc:	4294      	cmp	r4, r2
 8017ece:	dd8d      	ble.n	8017dec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8017ed0:	1c5d      	adds	r5, r3, #1
 8017ed2:	db8b      	blt.n	8017dec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8017ed4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017ed6:	429d      	cmp	r5, r3
 8017ed8:	dd88      	ble.n	8017dec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8017eda:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8017ede:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8017ee0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017ee2:	9202      	str	r2, [sp, #8]
 8017ee4:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8017ee8:	e9cd 4300 	strd	r4, r3, [sp]
 8017eec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ef0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017ef2:	4631      	mov	r1, r6
 8017ef4:	f7ff fc62 	bl	80177bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8017ef8:	e778      	b.n	8017dec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8017efa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017efc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017efe:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8017f02:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017f04:	1412      	asrs	r2, r2, #16
 8017f06:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8017f0a:	141b      	asrs	r3, r3, #16
 8017f0c:	fb04 2303 	mla	r3, r4, r3, r2
 8017f10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017f12:	18d5      	adds	r5, r2, r3
 8017f14:	5cd3      	ldrb	r3, [r2, r3]
 8017f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017f1c:	0e1e      	lsrs	r6, r3, #24
 8017f1e:	2900      	cmp	r1, #0
 8017f20:	f000 811b 	beq.w	801815a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 8017f24:	786a      	ldrb	r2, [r5, #1]
 8017f26:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017f28:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8017f2c:	9210      	str	r2, [sp, #64]	; 0x40
 8017f2e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8017f32:	2800      	cmp	r0, #0
 8017f34:	f000 811c 	beq.w	8018170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 8017f38:	192a      	adds	r2, r5, r4
 8017f3a:	5d2d      	ldrb	r5, [r5, r4]
 8017f3c:	7852      	ldrb	r2, [r2, #1]
 8017f3e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8017f42:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8017f46:	950c      	str	r5, [sp, #48]	; 0x30
 8017f48:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8017f4c:	9211      	str	r2, [sp, #68]	; 0x44
 8017f4e:	0e15      	lsrs	r5, r2, #24
 8017f50:	b289      	uxth	r1, r1
 8017f52:	b280      	uxth	r0, r0
 8017f54:	fb01 fa00 	mul.w	sl, r1, r0
 8017f58:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8017f5c:	0109      	lsls	r1, r1, #4
 8017f5e:	eba1 080a 	sub.w	r8, r1, sl
 8017f62:	b280      	uxth	r0, r0
 8017f64:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8017f68:	fa1f f888 	uxth.w	r8, r8
 8017f6c:	1a12      	subs	r2, r2, r0
 8017f6e:	b292      	uxth	r2, r2
 8017f70:	fb08 f10c 	mul.w	r1, r8, ip
 8017f74:	fb02 1106 	mla	r1, r2, r6, r1
 8017f78:	fb00 1109 	mla	r1, r0, r9, r1
 8017f7c:	fb0a 1105 	mla	r1, sl, r5, r1
 8017f80:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017f84:	2900      	cmp	r1, #0
 8017f86:	f000 80da 	beq.w	801813e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6da>
 8017f8a:	2eff      	cmp	r6, #255	; 0xff
 8017f8c:	d016      	beq.n	8017fbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x558>
 8017f8e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8017f92:	4377      	muls	r7, r6
 8017f94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017f98:	435e      	muls	r6, r3
 8017f9a:	0a3b      	lsrs	r3, r7, #8
 8017f9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017fa0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017fa4:	443b      	add	r3, r7
 8017fa6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8017faa:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8017fae:	0a1b      	lsrs	r3, r3, #8
 8017fb0:	0a3f      	lsrs	r7, r7, #8
 8017fb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017fb6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017fba:	433b      	orrs	r3, r7
 8017fbc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8017fc0:	d01d      	beq.n	8017ffe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x59a>
 8017fc2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8017fc4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8017fc6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017fca:	fb0c f606 	mul.w	r6, ip, r6
 8017fce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017fd2:	fb0c fc07 	mul.w	ip, ip, r7
 8017fd6:	0a37      	lsrs	r7, r6, #8
 8017fd8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017fdc:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8017fe0:	4437      	add	r7, r6
 8017fe2:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8017fe6:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8017fea:	0a3f      	lsrs	r7, r7, #8
 8017fec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017ff0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017ff4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017ff8:	ea47 060c 	orr.w	r6, r7, ip
 8017ffc:	9610      	str	r6, [sp, #64]	; 0x40
 8017ffe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018002:	d01d      	beq.n	8018040 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5dc>
 8018004:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018006:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801800a:	fb09 fc0c 	mul.w	ip, r9, ip
 801800e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018012:	fb09 f906 	mul.w	r9, r9, r6
 8018016:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801801a:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801801e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018022:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018026:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801802a:	4467      	add	r7, ip
 801802c:	0a3f      	lsrs	r7, r7, #8
 801802e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018032:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018036:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801803a:	ea47 0609 	orr.w	r6, r7, r9
 801803e:	960c      	str	r6, [sp, #48]	; 0x30
 8018040:	2dff      	cmp	r5, #255	; 0xff
 8018042:	d01a      	beq.n	801807a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x616>
 8018044:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018046:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801804a:	fb05 fc0c 	mul.w	ip, r5, ip
 801804e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018052:	4375      	muls	r5, r6
 8018054:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8018058:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801805c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018060:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8018064:	4467      	add	r7, ip
 8018066:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801806a:	0a3f      	lsrs	r7, r7, #8
 801806c:	0a2d      	lsrs	r5, r5, #8
 801806e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018072:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8018076:	433d      	orrs	r5, r7
 8018078:	9511      	str	r5, [sp, #68]	; 0x44
 801807a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801807c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8018080:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8018084:	fb08 f505 	mul.w	r5, r8, r5
 8018088:	fb02 5506 	mla	r5, r2, r6, r5
 801808c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801808e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018092:	fb00 5506 	mla	r5, r0, r6, r5
 8018096:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018098:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801809c:	fb0a 5506 	mla	r5, sl, r6, r5
 80180a0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80180a2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80180a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80180aa:	fb08 f806 	mul.w	r8, r8, r6
 80180ae:	fb02 8303 	mla	r3, r2, r3, r8
 80180b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80180b4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80180b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80180ba:	fb00 3307 	mla	r3, r0, r7, r3
 80180be:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80180c2:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80180c6:	0a2d      	lsrs	r5, r5, #8
 80180c8:	fb01 f30b 	mul.w	r3, r1, fp
 80180cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80180d0:	1c59      	adds	r1, r3, #1
 80180d2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80180d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80180da:	ea45 050c 	orr.w	r5, r5, ip
 80180de:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80180e2:	b2ea      	uxtb	r2, r5
 80180e4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80180e8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80180ec:	b2c9      	uxtb	r1, r1
 80180ee:	fb12 f20b 	smulbb	r2, r2, fp
 80180f2:	fb03 2301 	mla	r3, r3, r1, r2
 80180f6:	b29b      	uxth	r3, r3
 80180f8:	1c5a      	adds	r2, r3, #1
 80180fa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80180fe:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8018102:	121b      	asrs	r3, r3, #8
 8018104:	fb12 f201 	smulbb	r2, r2, r1
 8018108:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801810c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8018110:	fb03 230b 	mla	r3, r3, fp, r2
 8018114:	b29b      	uxth	r3, r3
 8018116:	1c5a      	adds	r2, r3, #1
 8018118:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801811c:	121b      	asrs	r3, r3, #8
 801811e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018122:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8018126:	0c2d      	lsrs	r5, r5, #16
 8018128:	fb13 f101 	smulbb	r1, r3, r1
 801812c:	fb05 150b 	mla	r5, r5, fp, r1
 8018130:	b2ad      	uxth	r5, r5
 8018132:	1c69      	adds	r1, r5, #1
 8018134:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8018138:	122d      	asrs	r5, r5, #8
 801813a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801813e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018140:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018142:	4413      	add	r3, r2
 8018144:	932d      	str	r3, [sp, #180]	; 0xb4
 8018146:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8018148:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801814a:	4413      	add	r3, r2
 801814c:	932e      	str	r3, [sp, #184]	; 0xb8
 801814e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018150:	3b01      	subs	r3, #1
 8018152:	f10e 0e03 	add.w	lr, lr, #3
 8018156:	9315      	str	r3, [sp, #84]	; 0x54
 8018158:	e4ec      	b.n	8017b34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801815a:	b160      	cbz	r0, 8018176 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 801815c:	5d2a      	ldrb	r2, [r5, r4]
 801815e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8018160:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018164:	920c      	str	r2, [sp, #48]	; 0x30
 8018166:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801816a:	25ff      	movs	r5, #255	; 0xff
 801816c:	46ac      	mov	ip, r5
 801816e:	e6ef      	b.n	8017f50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8018170:	25ff      	movs	r5, #255	; 0xff
 8018172:	46a9      	mov	r9, r5
 8018174:	e6ec      	b.n	8017f50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8018176:	25ff      	movs	r5, #255	; 0xff
 8018178:	46a9      	mov	r9, r5
 801817a:	e7f7      	b.n	801816c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 801817c:	b01b      	add	sp, #108	; 0x6c
 801817e:	ecbd 8b08 	vpop	{d8-d11}
 8018182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018188 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8018188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801818c:	b085      	sub	sp, #20
 801818e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8018192:	7888      	ldrb	r0, [r1, #2]
 8018194:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8018198:	9000      	str	r0, [sp, #0]
 801819a:	7848      	ldrb	r0, [r1, #1]
 801819c:	9001      	str	r0, [sp, #4]
 801819e:	fb04 560c 	mla	r6, r4, ip, r5
 80181a2:	7808      	ldrb	r0, [r1, #0]
 80181a4:	9002      	str	r0, [sp, #8]
 80181a6:	4692      	mov	sl, r2
 80181a8:	eb02 0e06 	add.w	lr, r2, r6
 80181ac:	9a00      	ldr	r2, [sp, #0]
 80181ae:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80181b2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80181b6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80181ba:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80181be:	9a01      	ldr	r2, [sp, #4]
 80181c0:	2c00      	cmp	r4, #0
 80181c2:	4698      	mov	r8, r3
 80181c4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80181c8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80181cc:	db3e      	blt.n	801824c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 80181ce:	45a1      	cmp	r9, r4
 80181d0:	dd3c      	ble.n	801824c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 80181d2:	2d00      	cmp	r5, #0
 80181d4:	db38      	blt.n	8018248 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 80181d6:	45ac      	cmp	ip, r5
 80181d8:	dd36      	ble.n	8018248 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 80181da:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80181de:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80181e2:	1c6e      	adds	r6, r5, #1
 80181e4:	d435      	bmi.n	8018252 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80181e6:	45b4      	cmp	ip, r6
 80181e8:	dd33      	ble.n	8018252 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80181ea:	b393      	cbz	r3, 8018252 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80181ec:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80181f0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 80181f4:	3401      	adds	r4, #1
 80181f6:	d430      	bmi.n	801825a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80181f8:	45a1      	cmp	r9, r4
 80181fa:	dd2e      	ble.n	801825a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80181fc:	b36f      	cbz	r7, 801825a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80181fe:	2d00      	cmp	r5, #0
 8018200:	db29      	blt.n	8018256 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8018202:	45ac      	cmp	ip, r5
 8018204:	dd27      	ble.n	8018256 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8018206:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801820a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801820e:	3501      	adds	r5, #1
 8018210:	d407      	bmi.n	8018222 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8018212:	45ac      	cmp	ip, r5
 8018214:	dd05      	ble.n	8018222 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8018216:	b123      	cbz	r3, 8018222 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8018218:	44f4      	add	ip, lr
 801821a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801821e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8018222:	2b0f      	cmp	r3, #15
 8018224:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8018228:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801822c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8018230:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8018234:	d801      	bhi.n	801823a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8018236:	2f0f      	cmp	r7, #15
 8018238:	d911      	bls.n	801825e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801823a:	4b76      	ldr	r3, [pc, #472]	; (8018414 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801823c:	4a76      	ldr	r2, [pc, #472]	; (8018418 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801823e:	4877      	ldr	r0, [pc, #476]	; (801841c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8018240:	f240 11a5 	movw	r1, #421	; 0x1a5
 8018244:	f003 fba6 	bl	801b994 <__assert_func>
 8018248:	4602      	mov	r2, r0
 801824a:	e7ca      	b.n	80181e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801824c:	4606      	mov	r6, r0
 801824e:	4602      	mov	r2, r0
 8018250:	e7d0      	b.n	80181f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8018252:	4606      	mov	r6, r0
 8018254:	e7ce      	b.n	80181f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8018256:	4604      	mov	r4, r0
 8018258:	e7d9      	b.n	801820e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801825a:	4604      	mov	r4, r0
 801825c:	e7e1      	b.n	8018222 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801825e:	b29b      	uxth	r3, r3
 8018260:	b2bf      	uxth	r7, r7
 8018262:	fb07 fe03 	mul.w	lr, r7, r3
 8018266:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801826a:	011b      	lsls	r3, r3, #4
 801826c:	eba3 0c0e 	sub.w	ip, r3, lr
 8018270:	b2bf      	uxth	r7, r7
 8018272:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8018276:	fa1f fc8c 	uxth.w	ip, ip
 801827a:	1bed      	subs	r5, r5, r7
 801827c:	b2ad      	uxth	r5, r5
 801827e:	fb0c f30a 	mul.w	r3, ip, sl
 8018282:	fb05 330b 	mla	r3, r5, fp, r3
 8018286:	fb07 3309 	mla	r3, r7, r9, r3
 801828a:	fb0e 3308 	mla	r3, lr, r8, r3
 801828e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018292:	9303      	str	r3, [sp, #12]
 8018294:	2b00      	cmp	r3, #0
 8018296:	f000 80b9 	beq.w	801840c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801829a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801829e:	d018      	beq.n	80182d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 80182a0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80182a4:	fb0b f303 	mul.w	r3, fp, r3
 80182a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80182ac:	fb0b fb02 	mul.w	fp, fp, r2
 80182b0:	0a1a      	lsrs	r2, r3, #8
 80182b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80182b6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80182ba:	441a      	add	r2, r3
 80182bc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80182c0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80182c4:	0a12      	lsrs	r2, r2, #8
 80182c6:	0a1b      	lsrs	r3, r3, #8
 80182c8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80182cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80182d0:	431a      	orrs	r2, r3
 80182d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80182d6:	d019      	beq.n	801830c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 80182d8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80182dc:	fb0a fb0b 	mul.w	fp, sl, fp
 80182e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80182e4:	fb0a fa06 	mul.w	sl, sl, r6
 80182e8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80182ec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80182f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80182f4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80182f8:	445e      	add	r6, fp
 80182fa:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80182fe:	0a36      	lsrs	r6, r6, #8
 8018300:	0a1b      	lsrs	r3, r3, #8
 8018302:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018306:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801830a:	431e      	orrs	r6, r3
 801830c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018310:	d019      	beq.n	8018346 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8018312:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8018316:	fb09 fa0a 	mul.w	sl, r9, sl
 801831a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801831e:	fb09 f904 	mul.w	r9, r9, r4
 8018322:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018326:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801832a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801832e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8018332:	4454      	add	r4, sl
 8018334:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8018338:	0a24      	lsrs	r4, r4, #8
 801833a:	0a1b      	lsrs	r3, r3, #8
 801833c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018340:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018344:	431c      	orrs	r4, r3
 8018346:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801834a:	d019      	beq.n	8018380 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801834c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8018350:	fb08 f909 	mul.w	r9, r8, r9
 8018354:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018358:	fb08 f800 	mul.w	r8, r8, r0
 801835c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8018360:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018364:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8018368:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801836c:	4448      	add	r0, r9
 801836e:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8018372:	0a00      	lsrs	r0, r0, #8
 8018374:	0a1b      	lsrs	r3, r3, #8
 8018376:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801837a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801837e:	4318      	orrs	r0, r3
 8018380:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8018384:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8018388:	fb0c f808 	mul.w	r8, ip, r8
 801838c:	fb05 8803 	mla	r8, r5, r3, r8
 8018390:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8018394:	fb07 8803 	mla	r8, r7, r3, r8
 8018398:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801839c:	fb0e 8303 	mla	r3, lr, r3, r8
 80183a0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80183a4:	0a1b      	lsrs	r3, r3, #8
 80183a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80183aa:	fb0c f606 	mul.w	r6, ip, r6
 80183ae:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80183b2:	fb05 6202 	mla	r2, r5, r2, r6
 80183b6:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80183ba:	fb07 2703 	mla	r7, r7, r3, r2
 80183be:	9a03      	ldr	r2, [sp, #12]
 80183c0:	9c02      	ldr	r4, [sp, #8]
 80183c2:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80183c6:	43d2      	mvns	r2, r2
 80183c8:	b2d2      	uxtb	r2, r2
 80183ca:	fb0e 7303 	mla	r3, lr, r3, r7
 80183ce:	4354      	muls	r4, r2
 80183d0:	0a1b      	lsrs	r3, r3, #8
 80183d2:	1c60      	adds	r0, r4, #1
 80183d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80183d8:	ea48 0303 	orr.w	r3, r8, r3
 80183dc:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80183e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80183e4:	7008      	strb	r0, [r1, #0]
 80183e6:	9801      	ldr	r0, [sp, #4]
 80183e8:	4350      	muls	r0, r2
 80183ea:	1c44      	adds	r4, r0, #1
 80183ec:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 80183f0:	0a18      	lsrs	r0, r3, #8
 80183f2:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80183f6:	7048      	strb	r0, [r1, #1]
 80183f8:	9800      	ldr	r0, [sp, #0]
 80183fa:	4350      	muls	r0, r2
 80183fc:	4602      	mov	r2, r0
 80183fe:	3001      	adds	r0, #1
 8018400:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8018404:	0c1b      	lsrs	r3, r3, #16
 8018406:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801840a:	708b      	strb	r3, [r1, #2]
 801840c:	b005      	add	sp, #20
 801840e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018412:	bf00      	nop
 8018414:	0801f881 	.word	0x0801f881
 8018418:	0801fd76 	.word	0x0801fd76
 801841c:	0801f94a 	.word	0x0801f94a

08018420 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018424:	ed2d 8b08 	vpush	{d8-d11}
 8018428:	b097      	sub	sp, #92	; 0x5c
 801842a:	eeb0 aa40 	vmov.f32	s20, s0
 801842e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8018430:	9308      	str	r3, [sp, #32]
 8018432:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8018436:	9112      	str	r1, [sp, #72]	; 0x48
 8018438:	9310      	str	r3, [sp, #64]	; 0x40
 801843a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801843e:	9015      	str	r0, [sp, #84]	; 0x54
 8018440:	6868      	ldr	r0, [r5, #4]
 8018442:	9214      	str	r2, [sp, #80]	; 0x50
 8018444:	fb00 1303 	mla	r3, r0, r3, r1
 8018448:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801844a:	6829      	ldr	r1, [r5, #0]
 801844c:	6855      	ldr	r5, [r2, #4]
 801844e:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8018452:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018456:	18cb      	adds	r3, r1, r3
 8018458:	930b      	str	r3, [sp, #44]	; 0x2c
 801845a:	6813      	ldr	r3, [r2, #0]
 801845c:	9311      	str	r3, [sp, #68]	; 0x44
 801845e:	eef0 9a60 	vmov.f32	s19, s1
 8018462:	eeb0 9a41 	vmov.f32	s18, s2
 8018466:	eeb0 8a62 	vmov.f32	s16, s5
 801846a:	eef0 8a43 	vmov.f32	s17, s6
 801846e:	eef0 ba44 	vmov.f32	s23, s8
 8018472:	eeb0 ba64 	vmov.f32	s22, s9
 8018476:	eef0 aa45 	vmov.f32	s21, s10
 801847a:	3504      	adds	r5, #4
 801847c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801847e:	2b00      	cmp	r3, #0
 8018480:	dc03      	bgt.n	801848a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8018482:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018484:	2b00      	cmp	r3, #0
 8018486:	f340 8334 	ble.w	8018af2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d2>
 801848a:	9b08      	ldr	r3, [sp, #32]
 801848c:	2b00      	cmp	r3, #0
 801848e:	f340 8191 	ble.w	80187b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 8018492:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018494:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018496:	1412      	asrs	r2, r2, #16
 8018498:	ea4f 4323 	mov.w	r3, r3, asr #16
 801849c:	d42f      	bmi.n	80184fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801849e:	1c51      	adds	r1, r2, #1
 80184a0:	428c      	cmp	r4, r1
 80184a2:	dd2f      	ble.n	8018504 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	db2d      	blt.n	8018504 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80184a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80184aa:	1c59      	adds	r1, r3, #1
 80184ac:	4288      	cmp	r0, r1
 80184ae:	dd29      	ble.n	8018504 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80184b0:	9b08      	ldr	r3, [sp, #32]
 80184b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80184b4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80184b6:	3b01      	subs	r3, #1
 80184b8:	fb02 1203 	mla	r2, r2, r3, r1
 80184bc:	1412      	asrs	r2, r2, #16
 80184be:	d42b      	bmi.n	8018518 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80184c0:	3201      	adds	r2, #1
 80184c2:	4294      	cmp	r4, r2
 80184c4:	dd28      	ble.n	8018518 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80184c6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80184c8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80184ca:	fb02 1303 	mla	r3, r2, r3, r1
 80184ce:	141b      	asrs	r3, r3, #16
 80184d0:	d422      	bmi.n	8018518 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80184d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80184d4:	3301      	adds	r3, #1
 80184d6:	429a      	cmp	r2, r3
 80184d8:	dd1e      	ble.n	8018518 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80184da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184dc:	f103 0803 	add.w	r8, r3, #3
 80184e0:	9b08      	ldr	r3, [sp, #32]
 80184e2:	9307      	str	r3, [sp, #28]
 80184e4:	9b07      	ldr	r3, [sp, #28]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	f300 81cb 	bgt.w	8018882 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 80184ec:	9b08      	ldr	r3, [sp, #32]
 80184ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80184f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80184f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80184f8:	441a      	add	r2, r3
 80184fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80184fc:	e15c      	b.n	80187b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 80184fe:	1c51      	adds	r1, r2, #1
 8018500:	f040 8149 	bne.w	8018796 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8018504:	42a2      	cmp	r2, r4
 8018506:	f280 8146 	bge.w	8018796 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 801850a:	1c5a      	adds	r2, r3, #1
 801850c:	f2c0 8143 	blt.w	8018796 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8018510:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018512:	4293      	cmp	r3, r2
 8018514:	f280 813f 	bge.w	8018796 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8018518:	9b08      	ldr	r3, [sp, #32]
 801851a:	9313      	str	r3, [sp, #76]	; 0x4c
 801851c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801851e:	9307      	str	r3, [sp, #28]
 8018520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018522:	2b00      	cmp	r3, #0
 8018524:	dde2      	ble.n	80184ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8018526:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018528:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801852a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801852e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018530:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8018534:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018536:	1412      	asrs	r2, r2, #16
 8018538:	ea4f 4323 	mov.w	r3, r3, asr #16
 801853c:	f100 818b 	bmi.w	8018856 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x436>
 8018540:	1c56      	adds	r6, r2, #1
 8018542:	42b4      	cmp	r4, r6
 8018544:	f340 8189 	ble.w	801885a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 8018548:	2b00      	cmp	r3, #0
 801854a:	f2c0 8186 	blt.w	801885a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 801854e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018550:	1c5e      	adds	r6, r3, #1
 8018552:	42b7      	cmp	r7, r6
 8018554:	f340 8181 	ble.w	801885a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 8018558:	fb03 2304 	mla	r3, r3, r4, r2
 801855c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801855e:	18d6      	adds	r6, r2, r3
 8018560:	5cd3      	ldrb	r3, [r2, r3]
 8018562:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8018566:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801856a:	2900      	cmp	r1, #0
 801856c:	f000 8163 	beq.w	8018836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 8018570:	7872      	ldrb	r2, [r6, #1]
 8018572:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018576:	920c      	str	r2, [sp, #48]	; 0x30
 8018578:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801857c:	2800      	cmp	r0, #0
 801857e:	f000 8164 	beq.w	801884a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8018582:	1932      	adds	r2, r6, r4
 8018584:	5d36      	ldrb	r6, [r6, r4]
 8018586:	7852      	ldrb	r2, [r2, #1]
 8018588:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801858c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018590:	9609      	str	r6, [sp, #36]	; 0x24
 8018592:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018596:	920d      	str	r2, [sp, #52]	; 0x34
 8018598:	0e16      	lsrs	r6, r2, #24
 801859a:	b289      	uxth	r1, r1
 801859c:	b280      	uxth	r0, r0
 801859e:	fb01 fb00 	mul.w	fp, r1, r0
 80185a2:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80185a6:	0109      	lsls	r1, r1, #4
 80185a8:	eba1 090b 	sub.w	r9, r1, fp
 80185ac:	b280      	uxth	r0, r0
 80185ae:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80185b2:	fa1f f989 	uxth.w	r9, r9
 80185b6:	1a12      	subs	r2, r2, r0
 80185b8:	b292      	uxth	r2, r2
 80185ba:	fb09 f108 	mul.w	r1, r9, r8
 80185be:	fb02 110c 	mla	r1, r2, ip, r1
 80185c2:	fb00 110a 	mla	r1, r0, sl, r1
 80185c6:	fb0b 1106 	mla	r1, fp, r6, r1
 80185ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80185ce:	2900      	cmp	r1, #0
 80185d0:	f000 80d2 	beq.w	8018778 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 80185d4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80185d8:	d01b      	beq.n	8018612 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 80185da:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80185de:	fb0c fe0e 	mul.w	lr, ip, lr
 80185e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80185e6:	fb0c fc03 	mul.w	ip, ip, r3
 80185ea:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80185ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80185f2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80185f6:	4473      	add	r3, lr
 80185f8:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80185fc:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8018600:	0a1b      	lsrs	r3, r3, #8
 8018602:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018606:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801860a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801860e:	ea43 030e 	orr.w	r3, r3, lr
 8018612:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018616:	d01e      	beq.n	8018656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 8018618:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801861a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801861e:	fb08 fc0c 	mul.w	ip, r8, ip
 8018622:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8018626:	fb08 f80e 	mul.w	r8, r8, lr
 801862a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801862e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018632:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018636:	44e6      	add	lr, ip
 8018638:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801863c:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8018640:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018644:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018648:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801864c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018650:	ea4e 0708 	orr.w	r7, lr, r8
 8018654:	970c      	str	r7, [sp, #48]	; 0x30
 8018656:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801865a:	d01e      	beq.n	801869a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 801865c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801865e:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8018662:	fb0a f808 	mul.w	r8, sl, r8
 8018666:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801866a:	fb0a fa0c 	mul.w	sl, sl, ip
 801866e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8018672:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018676:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801867a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801867e:	44c6      	add	lr, r8
 8018680:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018684:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018688:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801868c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018690:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018694:	ea4e 070a 	orr.w	r7, lr, sl
 8018698:	9709      	str	r7, [sp, #36]	; 0x24
 801869a:	2eff      	cmp	r6, #255	; 0xff
 801869c:	d01d      	beq.n	80186da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801869e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80186a0:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80186a4:	fb06 f808 	mul.w	r8, r6, r8
 80186a8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80186ac:	fb06 f60c 	mul.w	r6, r6, ip
 80186b0:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80186b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80186b8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80186bc:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80186c0:	44c6      	add	lr, r8
 80186c2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80186c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80186ca:	0a36      	lsrs	r6, r6, #8
 80186cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80186d0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80186d4:	ea4e 0606 	orr.w	r6, lr, r6
 80186d8:	960d      	str	r6, [sp, #52]	; 0x34
 80186da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80186dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80186de:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80186e2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80186e6:	fb09 f606 	mul.w	r6, r9, r6
 80186ea:	fb02 660c 	mla	r6, r2, ip, r6
 80186ee:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80186f2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80186f4:	fb00 660c 	mla	r6, r0, ip, r6
 80186f8:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80186fc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80186fe:	fb0b 660c 	mla	r6, fp, ip, r6
 8018702:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8018706:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801870a:	fb09 f90c 	mul.w	r9, r9, ip
 801870e:	fb02 9303 	mla	r3, r2, r3, r9
 8018712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018714:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8018718:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801871a:	fb00 330e 	mla	r3, r0, lr, r3
 801871e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8018722:	fb0b 3b00 	mla	fp, fp, r0, r3
 8018726:	9b07      	ldr	r3, [sp, #28]
 8018728:	43c9      	mvns	r1, r1
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	b2c9      	uxtb	r1, r1
 801872e:	fb03 f201 	mul.w	r2, r3, r1
 8018732:	0a36      	lsrs	r6, r6, #8
 8018734:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8018738:	1c53      	adds	r3, r2, #1
 801873a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801873e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8018742:	ea46 060b 	orr.w	r6, r6, fp
 8018746:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801874a:	9a07      	ldr	r2, [sp, #28]
 801874c:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8018750:	7013      	strb	r3, [r2, #0]
 8018752:	7853      	ldrb	r3, [r2, #1]
 8018754:	434b      	muls	r3, r1
 8018756:	1c5a      	adds	r2, r3, #1
 8018758:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801875c:	0a33      	lsrs	r3, r6, #8
 801875e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018762:	9a07      	ldr	r2, [sp, #28]
 8018764:	7053      	strb	r3, [r2, #1]
 8018766:	7893      	ldrb	r3, [r2, #2]
 8018768:	4359      	muls	r1, r3
 801876a:	1c4b      	adds	r3, r1, #1
 801876c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8018770:	0c36      	lsrs	r6, r6, #16
 8018772:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8018776:	7096      	strb	r6, [r2, #2]
 8018778:	9b07      	ldr	r3, [sp, #28]
 801877a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801877c:	3303      	adds	r3, #3
 801877e:	9307      	str	r3, [sp, #28]
 8018780:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018782:	4413      	add	r3, r2
 8018784:	9329      	str	r3, [sp, #164]	; 0xa4
 8018786:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018788:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801878a:	4413      	add	r3, r2
 801878c:	932a      	str	r3, [sp, #168]	; 0xa8
 801878e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018790:	3b01      	subs	r3, #1
 8018792:	9313      	str	r3, [sp, #76]	; 0x4c
 8018794:	e6c4      	b.n	8018520 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8018796:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018798:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801879a:	4413      	add	r3, r2
 801879c:	9329      	str	r3, [sp, #164]	; 0xa4
 801879e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80187a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80187a2:	4413      	add	r3, r2
 80187a4:	932a      	str	r3, [sp, #168]	; 0xa8
 80187a6:	9b08      	ldr	r3, [sp, #32]
 80187a8:	3b01      	subs	r3, #1
 80187aa:	9308      	str	r3, [sp, #32]
 80187ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187ae:	3303      	adds	r3, #3
 80187b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80187b2:	e66a      	b.n	801848a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80187b4:	f47f ae7c 	bne.w	80184b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 80187b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	f340 8199 	ble.w	8018af2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d2>
 80187c0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80187c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80187c8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80187cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80187ce:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80187d2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80187d6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80187da:	eef0 6a48 	vmov.f32	s13, s16
 80187de:	ee69 7a27 	vmul.f32	s15, s18, s15
 80187e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80187ea:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80187ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80187f2:	eef0 6a68 	vmov.f32	s13, s17
 80187f6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80187fa:	ee18 2a10 	vmov	r2, s16
 80187fe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018802:	fb92 f3f3 	sdiv	r3, r2, r3
 8018806:	ee18 2a90 	vmov	r2, s17
 801880a:	932b      	str	r3, [sp, #172]	; 0xac
 801880c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801880e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018812:	932c      	str	r3, [sp, #176]	; 0xb0
 8018814:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018816:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018818:	3b01      	subs	r3, #1
 801881a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801881e:	9312      	str	r3, [sp, #72]	; 0x48
 8018820:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018822:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8018826:	bf08      	it	eq
 8018828:	4613      	moveq	r3, r2
 801882a:	9308      	str	r3, [sp, #32]
 801882c:	eef0 8a67 	vmov.f32	s17, s15
 8018830:	eeb0 8a47 	vmov.f32	s16, s14
 8018834:	e622      	b.n	801847c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8018836:	b158      	cbz	r0, 8018850 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 8018838:	5d32      	ldrb	r2, [r6, r4]
 801883a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801883e:	9209      	str	r2, [sp, #36]	; 0x24
 8018840:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8018844:	26ff      	movs	r6, #255	; 0xff
 8018846:	46b0      	mov	r8, r6
 8018848:	e6a7      	b.n	801859a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 801884a:	26ff      	movs	r6, #255	; 0xff
 801884c:	46b2      	mov	sl, r6
 801884e:	e6a4      	b.n	801859a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8018850:	26ff      	movs	r6, #255	; 0xff
 8018852:	46b2      	mov	sl, r6
 8018854:	e7f7      	b.n	8018846 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x426>
 8018856:	1c57      	adds	r7, r2, #1
 8018858:	d18e      	bne.n	8018778 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801885a:	4294      	cmp	r4, r2
 801885c:	dd8c      	ble.n	8018778 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801885e:	1c5e      	adds	r6, r3, #1
 8018860:	db8a      	blt.n	8018778 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 8018862:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8018864:	429e      	cmp	r6, r3
 8018866:	dd87      	ble.n	8018778 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 8018868:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801886c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018870:	e9cd 4600 	strd	r4, r6, [sp]
 8018874:	462b      	mov	r3, r5
 8018876:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018878:	9907      	ldr	r1, [sp, #28]
 801887a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801887c:	f7ff fc84 	bl	8018188 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8018880:	e77a      	b.n	8018778 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 8018882:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018884:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018886:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801888a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801888c:	1409      	asrs	r1, r1, #16
 801888e:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8018892:	141b      	asrs	r3, r3, #16
 8018894:	fb04 1303 	mla	r3, r4, r3, r1
 8018898:	9911      	ldr	r1, [sp, #68]	; 0x44
 801889a:	18ce      	adds	r6, r1, r3
 801889c:	5ccb      	ldrb	r3, [r1, r3]
 801889e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80188a2:	0e1f      	lsrs	r7, r3, #24
 80188a4:	2a00      	cmp	r2, #0
 80188a6:	f000 8114 	beq.w	8018ad2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 80188aa:	7871      	ldrb	r1, [r6, #1]
 80188ac:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80188b0:	910e      	str	r1, [sp, #56]	; 0x38
 80188b2:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80188b6:	2800      	cmp	r0, #0
 80188b8:	f000 8115 	beq.w	8018ae6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 80188bc:	1931      	adds	r1, r6, r4
 80188be:	5d36      	ldrb	r6, [r6, r4]
 80188c0:	7849      	ldrb	r1, [r1, #1]
 80188c2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80188c6:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80188ca:	960a      	str	r6, [sp, #40]	; 0x28
 80188cc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80188d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80188d2:	0e0e      	lsrs	r6, r1, #24
 80188d4:	b292      	uxth	r2, r2
 80188d6:	b280      	uxth	r0, r0
 80188d8:	fb02 fb00 	mul.w	fp, r2, r0
 80188dc:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80188e0:	0112      	lsls	r2, r2, #4
 80188e2:	eba2 090b 	sub.w	r9, r2, fp
 80188e6:	b280      	uxth	r0, r0
 80188e8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80188ec:	fa1f f989 	uxth.w	r9, r9
 80188f0:	1a09      	subs	r1, r1, r0
 80188f2:	b289      	uxth	r1, r1
 80188f4:	fb09 f20e 	mul.w	r2, r9, lr
 80188f8:	fb01 2207 	mla	r2, r1, r7, r2
 80188fc:	fb00 220a 	mla	r2, r0, sl, r2
 8018900:	fb0b 2206 	mla	r2, fp, r6, r2
 8018904:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018908:	9213      	str	r2, [sp, #76]	; 0x4c
 801890a:	2a00      	cmp	r2, #0
 801890c:	f000 80d4 	beq.w	8018ab8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x698>
 8018910:	2fff      	cmp	r7, #255	; 0xff
 8018912:	d01a      	beq.n	801894a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 8018914:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8018918:	fb07 fc0c 	mul.w	ip, r7, ip
 801891c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018920:	435f      	muls	r7, r3
 8018922:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8018926:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801892a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801892e:	4463      	add	r3, ip
 8018930:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8018934:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8018938:	0a1b      	lsrs	r3, r3, #8
 801893a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801893e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018942:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018946:	ea43 030c 	orr.w	r3, r3, ip
 801894a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801894e:	d01f      	beq.n	8018990 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x570>
 8018950:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8018952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018954:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018958:	fb0e f707 	mul.w	r7, lr, r7
 801895c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8018960:	fb0e fe0c 	mul.w	lr, lr, ip
 8018964:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018968:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801896c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018970:	44bc      	add	ip, r7
 8018972:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8018976:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801897a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801897e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018982:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018986:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801898a:	ea4c 020e 	orr.w	r2, ip, lr
 801898e:	920e      	str	r2, [sp, #56]	; 0x38
 8018990:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018994:	d01e      	beq.n	80189d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b4>
 8018996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018998:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801899c:	fb0a fe0e 	mul.w	lr, sl, lr
 80189a0:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80189a4:	fb0a fa07 	mul.w	sl, sl, r7
 80189a8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80189ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80189b0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80189b4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80189b8:	44f4      	add	ip, lr
 80189ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80189be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80189c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80189c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80189ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80189ce:	ea4c 020a 	orr.w	r2, ip, sl
 80189d2:	920a      	str	r2, [sp, #40]	; 0x28
 80189d4:	2eff      	cmp	r6, #255	; 0xff
 80189d6:	d01c      	beq.n	8018a12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80189d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80189da:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80189de:	fb06 fe0e 	mul.w	lr, r6, lr
 80189e2:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80189e6:	437e      	muls	r6, r7
 80189e8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80189ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80189f0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80189f4:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80189f8:	44f4      	add	ip, lr
 80189fa:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80189fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018a02:	0a36      	lsrs	r6, r6, #8
 8018a04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018a08:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018a0c:	ea4c 0206 	orr.w	r2, ip, r6
 8018a10:	920f      	str	r2, [sp, #60]	; 0x3c
 8018a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a14:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8018a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a1a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8018a1e:	fb09 f606 	mul.w	r6, r9, r6
 8018a22:	fb01 6607 	mla	r6, r1, r7, r6
 8018a26:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8018a2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a2c:	fb00 6607 	mla	r6, r0, r7, r6
 8018a30:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8018a34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a36:	fb0b 6607 	mla	r6, fp, r7, r6
 8018a3a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8018a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018a44:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8018a48:	fb09 f907 	mul.w	r9, r9, r7
 8018a4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a4e:	fb01 9303 	mla	r3, r1, r3, r9
 8018a52:	fb00 330c 	mla	r3, r0, ip, r3
 8018a56:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8018a5a:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8018a5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018a60:	43da      	mvns	r2, r3
 8018a62:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8018a66:	b2d2      	uxtb	r2, r2
 8018a68:	fb03 f102 	mul.w	r1, r3, r2
 8018a6c:	0a36      	lsrs	r6, r6, #8
 8018a6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018a72:	1c4b      	adds	r3, r1, #1
 8018a74:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018a78:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018a7c:	ea46 060e 	orr.w	r6, r6, lr
 8018a80:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018a84:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8018a88:	f808 3c03 	strb.w	r3, [r8, #-3]
 8018a8c:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8018a90:	4353      	muls	r3, r2
 8018a92:	1c59      	adds	r1, r3, #1
 8018a94:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018a98:	0a33      	lsrs	r3, r6, #8
 8018a9a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018a9e:	f808 3c02 	strb.w	r3, [r8, #-2]
 8018aa2:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018aa6:	435a      	muls	r2, r3
 8018aa8:	1c53      	adds	r3, r2, #1
 8018aaa:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8018aae:	0c36      	lsrs	r6, r6, #16
 8018ab0:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8018ab4:	f808 6c01 	strb.w	r6, [r8, #-1]
 8018ab8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018aba:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018abc:	4413      	add	r3, r2
 8018abe:	9329      	str	r3, [sp, #164]	; 0xa4
 8018ac0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018ac2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018ac4:	4413      	add	r3, r2
 8018ac6:	932a      	str	r3, [sp, #168]	; 0xa8
 8018ac8:	9b07      	ldr	r3, [sp, #28]
 8018aca:	f108 0803 	add.w	r8, r8, #3
 8018ace:	3b01      	subs	r3, #1
 8018ad0:	e507      	b.n	80184e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8018ad2:	b158      	cbz	r0, 8018aec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8018ad4:	5d31      	ldrb	r1, [r6, r4]
 8018ad6:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8018ada:	910a      	str	r1, [sp, #40]	; 0x28
 8018adc:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8018ae0:	26ff      	movs	r6, #255	; 0xff
 8018ae2:	46b6      	mov	lr, r6
 8018ae4:	e6f6      	b.n	80188d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8018ae6:	26ff      	movs	r6, #255	; 0xff
 8018ae8:	46b2      	mov	sl, r6
 8018aea:	e6f3      	b.n	80188d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8018aec:	26ff      	movs	r6, #255	; 0xff
 8018aee:	46b2      	mov	sl, r6
 8018af0:	e7f7      	b.n	8018ae2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8018af2:	b017      	add	sp, #92	; 0x5c
 8018af4:	ecbd 8b08 	vpop	{d8-d11}
 8018af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018afc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8018afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b00:	b08d      	sub	sp, #52	; 0x34
 8018b02:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8018b06:	9103      	str	r1, [sp, #12]
 8018b08:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8018b0c:	910b      	str	r1, [sp, #44]	; 0x2c
 8018b0e:	fb07 5803 	mla	r8, r7, r3, r5
 8018b12:	9903      	ldr	r1, [sp, #12]
 8018b14:	9803      	ldr	r0, [sp, #12]
 8018b16:	9c03      	ldr	r4, [sp, #12]
 8018b18:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8018b1c:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8018b20:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8018b24:	7809      	ldrb	r1, [r1, #0]
 8018b26:	7840      	ldrb	r0, [r0, #1]
 8018b28:	78a4      	ldrb	r4, [r4, #2]
 8018b2a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018b2e:	2f00      	cmp	r7, #0
 8018b30:	eb02 0608 	add.w	r6, r2, r8
 8018b34:	db51      	blt.n	8018bda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8018b36:	45be      	cmp	lr, r7
 8018b38:	dd4f      	ble.n	8018bda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8018b3a:	2d00      	cmp	r5, #0
 8018b3c:	db49      	blt.n	8018bd2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8018b3e:	42ab      	cmp	r3, r5
 8018b40:	dd47      	ble.n	8018bd2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8018b42:	f812 2008 	ldrb.w	r2, [r2, r8]
 8018b46:	9204      	str	r2, [sp, #16]
 8018b48:	7872      	ldrb	r2, [r6, #1]
 8018b4a:	9205      	str	r2, [sp, #20]
 8018b4c:	78b2      	ldrb	r2, [r6, #2]
 8018b4e:	9206      	str	r2, [sp, #24]
 8018b50:	1c6a      	adds	r2, r5, #1
 8018b52:	d449      	bmi.n	8018be8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8018b54:	4293      	cmp	r3, r2
 8018b56:	dd47      	ble.n	8018be8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8018b58:	f1bc 0f00 	cmp.w	ip, #0
 8018b5c:	d044      	beq.n	8018be8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8018b5e:	7972      	ldrb	r2, [r6, #5]
 8018b60:	f896 b003 	ldrb.w	fp, [r6, #3]
 8018b64:	f896 a004 	ldrb.w	sl, [r6, #4]
 8018b68:	9201      	str	r2, [sp, #4]
 8018b6a:	3701      	adds	r7, #1
 8018b6c:	d444      	bmi.n	8018bf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8018b6e:	45be      	cmp	lr, r7
 8018b70:	dd42      	ble.n	8018bf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8018b72:	f1b9 0f00 	cmp.w	r9, #0
 8018b76:	f000 80c1 	beq.w	8018cfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8018b7a:	2d00      	cmp	r5, #0
 8018b7c:	db38      	blt.n	8018bf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8018b7e:	42ab      	cmp	r3, r5
 8018b80:	dd36      	ble.n	8018bf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8018b82:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018b86:	f816 8002 	ldrb.w	r8, [r6, r2]
 8018b8a:	2203      	movs	r2, #3
 8018b8c:	fb03 6702 	mla	r7, r3, r2, r6
 8018b90:	fb03 6202 	mla	r2, r3, r2, r6
 8018b94:	787f      	ldrb	r7, [r7, #1]
 8018b96:	f892 e002 	ldrb.w	lr, [r2, #2]
 8018b9a:	9702      	str	r7, [sp, #8]
 8018b9c:	3501      	adds	r5, #1
 8018b9e:	d432      	bmi.n	8018c06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8018ba0:	42ab      	cmp	r3, r5
 8018ba2:	dd30      	ble.n	8018c06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8018ba4:	f1bc 0f00 	cmp.w	ip, #0
 8018ba8:	d031      	beq.n	8018c0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8018baa:	2703      	movs	r7, #3
 8018bac:	fb13 7207 	smlabb	r2, r3, r7, r7
 8018bb0:	5cb5      	ldrb	r5, [r6, r2]
 8018bb2:	fb03 6207 	mla	r2, r3, r7, r6
 8018bb6:	fb03 6307 	mla	r3, r3, r7, r6
 8018bba:	7912      	ldrb	r2, [r2, #4]
 8018bbc:	795e      	ldrb	r6, [r3, #5]
 8018bbe:	f1bc 0f0f 	cmp.w	ip, #15
 8018bc2:	d927      	bls.n	8018c14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8018bc4:	4b53      	ldr	r3, [pc, #332]	; (8018d14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8018bc6:	4a54      	ldr	r2, [pc, #336]	; (8018d18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8018bc8:	4854      	ldr	r0, [pc, #336]	; (8018d1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8018bca:	f240 11a5 	movw	r1, #421	; 0x1a5
 8018bce:	f002 fee1 	bl	801b994 <__assert_func>
 8018bd2:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8018bd6:	9104      	str	r1, [sp, #16]
 8018bd8:	e7ba      	b.n	8018b50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8018bda:	9401      	str	r4, [sp, #4]
 8018bdc:	4682      	mov	sl, r0
 8018bde:	468b      	mov	fp, r1
 8018be0:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8018be4:	9104      	str	r1, [sp, #16]
 8018be6:	e7c0      	b.n	8018b6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8018be8:	9401      	str	r4, [sp, #4]
 8018bea:	4682      	mov	sl, r0
 8018bec:	468b      	mov	fp, r1
 8018bee:	e7bc      	b.n	8018b6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8018bf0:	46a6      	mov	lr, r4
 8018bf2:	9002      	str	r0, [sp, #8]
 8018bf4:	4688      	mov	r8, r1
 8018bf6:	e7d1      	b.n	8018b9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8018bf8:	4626      	mov	r6, r4
 8018bfa:	4602      	mov	r2, r0
 8018bfc:	460d      	mov	r5, r1
 8018bfe:	46a6      	mov	lr, r4
 8018c00:	9002      	str	r0, [sp, #8]
 8018c02:	4688      	mov	r8, r1
 8018c04:	e7db      	b.n	8018bbe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8018c06:	4626      	mov	r6, r4
 8018c08:	4602      	mov	r2, r0
 8018c0a:	460d      	mov	r5, r1
 8018c0c:	e7d7      	b.n	8018bbe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8018c0e:	4626      	mov	r6, r4
 8018c10:	4602      	mov	r2, r0
 8018c12:	460d      	mov	r5, r1
 8018c14:	f1b9 0f0f 	cmp.w	r9, #15
 8018c18:	d8d4      	bhi.n	8018bc4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8018c1a:	fa1f f38c 	uxth.w	r3, ip
 8018c1e:	fa1f fc89 	uxth.w	ip, r9
 8018c22:	fb03 f70c 	mul.w	r7, r3, ip
 8018c26:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8018c2a:	011b      	lsls	r3, r3, #4
 8018c2c:	9707      	str	r7, [sp, #28]
 8018c2e:	fa1f fc8c 	uxth.w	ip, ip
 8018c32:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8018c36:	eba7 070c 	sub.w	r7, r7, ip
 8018c3a:	b2bf      	uxth	r7, r7
 8018c3c:	9709      	str	r7, [sp, #36]	; 0x24
 8018c3e:	9f07      	ldr	r7, [sp, #28]
 8018c40:	1bdb      	subs	r3, r3, r7
 8018c42:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8018c46:	9708      	str	r7, [sp, #32]
 8018c48:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018c4a:	b29b      	uxth	r3, r3
 8018c4c:	930a      	str	r3, [sp, #40]	; 0x28
 8018c4e:	ea6f 0907 	mvn.w	r9, r7
 8018c52:	fb03 fb0b 	mul.w	fp, r3, fp
 8018c56:	9f04      	ldr	r7, [sp, #16]
 8018c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c5a:	fb03 bb07 	mla	fp, r3, r7, fp
 8018c5e:	9f07      	ldr	r7, [sp, #28]
 8018c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c62:	fb0c b808 	mla	r8, ip, r8, fp
 8018c66:	fa5f f989 	uxtb.w	r9, r9
 8018c6a:	fb07 8805 	mla	r8, r7, r5, r8
 8018c6e:	9d08      	ldr	r5, [sp, #32]
 8018c70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018c72:	fb11 f109 	smulbb	r1, r1, r9
 8018c76:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018c7a:	fb08 1805 	mla	r8, r8, r5, r1
 8018c7e:	fa1f f888 	uxth.w	r8, r8
 8018c82:	f108 0101 	add.w	r1, r8, #1
 8018c86:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8018c8a:	9903      	ldr	r1, [sp, #12]
 8018c8c:	9d05      	ldr	r5, [sp, #20]
 8018c8e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018c92:	f881 8000 	strb.w	r8, [r1]
 8018c96:	fb03 f10a 	mul.w	r1, r3, sl
 8018c9a:	fb07 1105 	mla	r1, r7, r5, r1
 8018c9e:	9d02      	ldr	r5, [sp, #8]
 8018ca0:	fb0c 1105 	mla	r1, ip, r5, r1
 8018ca4:	9d07      	ldr	r5, [sp, #28]
 8018ca6:	fb05 1102 	mla	r1, r5, r2, r1
 8018caa:	9a08      	ldr	r2, [sp, #32]
 8018cac:	fb10 f009 	smulbb	r0, r0, r9
 8018cb0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018cb4:	fb01 0102 	mla	r1, r1, r2, r0
 8018cb8:	b289      	uxth	r1, r1
 8018cba:	1c48      	adds	r0, r1, #1
 8018cbc:	9a03      	ldr	r2, [sp, #12]
 8018cbe:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8018cc2:	1209      	asrs	r1, r1, #8
 8018cc4:	7051      	strb	r1, [r2, #1]
 8018cc6:	9a01      	ldr	r2, [sp, #4]
 8018cc8:	4353      	muls	r3, r2
 8018cca:	9a06      	ldr	r2, [sp, #24]
 8018ccc:	fb07 3702 	mla	r7, r7, r2, r3
 8018cd0:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8018cd4:	9b08      	ldr	r3, [sp, #32]
 8018cd6:	fb05 c606 	mla	r6, r5, r6, ip
 8018cda:	fb14 f409 	smulbb	r4, r4, r9
 8018cde:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018ce2:	fb06 4603 	mla	r6, r6, r3, r4
 8018ce6:	b2b6      	uxth	r6, r6
 8018ce8:	f106 0e01 	add.w	lr, r6, #1
 8018cec:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8018cf0:	9b03      	ldr	r3, [sp, #12]
 8018cf2:	1236      	asrs	r6, r6, #8
 8018cf4:	709e      	strb	r6, [r3, #2]
 8018cf6:	b00d      	add	sp, #52	; 0x34
 8018cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cfc:	f1bc 0f0f 	cmp.w	ip, #15
 8018d00:	f63f af60 	bhi.w	8018bc4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8018d04:	4626      	mov	r6, r4
 8018d06:	4602      	mov	r2, r0
 8018d08:	460d      	mov	r5, r1
 8018d0a:	46a6      	mov	lr, r4
 8018d0c:	9002      	str	r0, [sp, #8]
 8018d0e:	4688      	mov	r8, r1
 8018d10:	e783      	b.n	8018c1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8018d12:	bf00      	nop
 8018d14:	0801f881 	.word	0x0801f881
 8018d18:	0801fd76 	.word	0x0801fd76
 8018d1c:	0801f94a 	.word	0x0801f94a

08018d20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d24:	ed2d 8b08 	vpush	{d8-d11}
 8018d28:	b0a1      	sub	sp, #132	; 0x84
 8018d2a:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8018d2e:	9307      	str	r3, [sp, #28]
 8018d30:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8018d34:	9308      	str	r3, [sp, #32]
 8018d36:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8018d3a:	9210      	str	r2, [sp, #64]	; 0x40
 8018d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8018d3e:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8018d40:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8018d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8018d46:	910e      	str	r1, [sp, #56]	; 0x38
 8018d48:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8018d4c:	901f      	str	r0, [sp, #124]	; 0x7c
 8018d4e:	6850      	ldr	r0, [r2, #4]
 8018d50:	6812      	ldr	r2, [r2, #0]
 8018d52:	fb00 1303 	mla	r3, r0, r3, r1
 8018d56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018d5a:	18d3      	adds	r3, r2, r3
 8018d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8018d5e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8018d60:	9908      	ldr	r1, [sp, #32]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	930c      	str	r3, [sp, #48]	; 0x30
 8018d66:	2203      	movs	r2, #3
 8018d68:	f06f 0304 	mvn.w	r3, #4
 8018d6c:	fb11 3302 	smlabb	r3, r1, r2, r3
 8018d70:	930d      	str	r3, [sp, #52]	; 0x34
 8018d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d74:	43db      	mvns	r3, r3
 8018d76:	b2db      	uxtb	r3, r3
 8018d78:	eeb0 aa40 	vmov.f32	s20, s0
 8018d7c:	eef0 9a60 	vmov.f32	s19, s1
 8018d80:	eeb0 9a41 	vmov.f32	s18, s2
 8018d84:	eeb0 8a62 	vmov.f32	s16, s5
 8018d88:	eef0 8a43 	vmov.f32	s17, s6
 8018d8c:	eef0 ba44 	vmov.f32	s23, s8
 8018d90:	eeb0 ba64 	vmov.f32	s22, s9
 8018d94:	eef0 aa45 	vmov.f32	s21, s10
 8018d98:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	dc03      	bgt.n	8018da8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8018da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	f340 81df 	ble.w	8019166 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8018da8:	9b07      	ldr	r3, [sp, #28]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	f340 80f2 	ble.w	8018f94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8018db0:	ea5f 4228 	movs.w	r2, r8, asr #16
 8018db4:	ea4f 432b 	mov.w	r3, fp, asr #16
 8018db8:	d430      	bmi.n	8018e1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8018dba:	9808      	ldr	r0, [sp, #32]
 8018dbc:	1c51      	adds	r1, r2, #1
 8018dbe:	4281      	cmp	r1, r0
 8018dc0:	da2f      	bge.n	8018e22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	db2d      	blt.n	8018e22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8018dc6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018dc8:	1c59      	adds	r1, r3, #1
 8018dca:	4288      	cmp	r0, r1
 8018dcc:	dd29      	ble.n	8018e22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8018dce:	9b07      	ldr	r3, [sp, #28]
 8018dd0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8018dd2:	3b01      	subs	r3, #1
 8018dd4:	fb02 8203 	mla	r2, r2, r3, r8
 8018dd8:	1412      	asrs	r2, r2, #16
 8018dda:	d42d      	bmi.n	8018e38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8018ddc:	9908      	ldr	r1, [sp, #32]
 8018dde:	3201      	adds	r2, #1
 8018de0:	4291      	cmp	r1, r2
 8018de2:	dd29      	ble.n	8018e38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8018de4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8018de6:	fb02 b303 	mla	r3, r2, r3, fp
 8018dea:	141b      	asrs	r3, r3, #16
 8018dec:	d424      	bmi.n	8018e38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8018dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018df0:	3301      	adds	r3, #1
 8018df2:	429a      	cmp	r2, r3
 8018df4:	dd20      	ble.n	8018e38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8018df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018df8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018dfc:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8018e00:	1cde      	adds	r6, r3, #3
 8018e02:	f1bc 0f00 	cmp.w	ip, #0
 8018e06:	f300 811f 	bgt.w	8019048 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8018e0a:	9b07      	ldr	r3, [sp, #28]
 8018e0c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018e16:	4423      	add	r3, r4
 8018e18:	9309      	str	r3, [sp, #36]	; 0x24
 8018e1a:	e0bd      	b.n	8018f98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8018e1c:	1c57      	adds	r7, r2, #1
 8018e1e:	f040 80ae 	bne.w	8018f7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8018e22:	9908      	ldr	r1, [sp, #32]
 8018e24:	428a      	cmp	r2, r1
 8018e26:	f280 80aa 	bge.w	8018f7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8018e2a:	1c5e      	adds	r6, r3, #1
 8018e2c:	f2c0 80a7 	blt.w	8018f7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8018e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e32:	4293      	cmp	r3, r2
 8018e34:	f280 80a3 	bge.w	8018f7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8018e38:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018e3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018e3e:	f1ba 0f00 	cmp.w	sl, #0
 8018e42:	dde2      	ble.n	8018e0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8018e44:	ea5f 4028 	movs.w	r0, r8, asr #16
 8018e48:	ea4f 412b 	mov.w	r1, fp, asr #16
 8018e4c:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8018e50:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8018e54:	f100 80df 	bmi.w	8019016 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8018e58:	9f08      	ldr	r7, [sp, #32]
 8018e5a:	1c45      	adds	r5, r0, #1
 8018e5c:	42af      	cmp	r7, r5
 8018e5e:	f340 80dc 	ble.w	801901a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8018e62:	2900      	cmp	r1, #0
 8018e64:	f2c0 80d9 	blt.w	801901a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8018e68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018e6a:	1c4d      	adds	r5, r1, #1
 8018e6c:	42af      	cmp	r7, r5
 8018e6e:	f340 80d4 	ble.w	801901a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8018e72:	9d08      	ldr	r5, [sp, #32]
 8018e74:	fb05 0101 	mla	r1, r5, r1, r0
 8018e78:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018e7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018e7e:	1845      	adds	r5, r0, r1
 8018e80:	5c40      	ldrb	r0, [r0, r1]
 8018e82:	792f      	ldrb	r7, [r5, #4]
 8018e84:	9711      	str	r7, [sp, #68]	; 0x44
 8018e86:	796f      	ldrb	r7, [r5, #5]
 8018e88:	7869      	ldrb	r1, [r5, #1]
 8018e8a:	f895 e002 	ldrb.w	lr, [r5, #2]
 8018e8e:	f895 9003 	ldrb.w	r9, [r5, #3]
 8018e92:	9712      	str	r7, [sp, #72]	; 0x48
 8018e94:	b17a      	cbz	r2, 8018eb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8018e96:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8018e98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018e9a:	3505      	adds	r5, #5
 8018e9c:	19ef      	adds	r7, r5, r7
 8018e9e:	5d2d      	ldrb	r5, [r5, r4]
 8018ea0:	787c      	ldrb	r4, [r7, #1]
 8018ea2:	9415      	str	r4, [sp, #84]	; 0x54
 8018ea4:	78bc      	ldrb	r4, [r7, #2]
 8018ea6:	9417      	str	r4, [sp, #92]	; 0x5c
 8018ea8:	78fc      	ldrb	r4, [r7, #3]
 8018eaa:	9414      	str	r4, [sp, #80]	; 0x50
 8018eac:	793c      	ldrb	r4, [r7, #4]
 8018eae:	9416      	str	r4, [sp, #88]	; 0x58
 8018eb0:	797c      	ldrb	r4, [r7, #5]
 8018eb2:	9513      	str	r5, [sp, #76]	; 0x4c
 8018eb4:	9418      	str	r4, [sp, #96]	; 0x60
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	b292      	uxth	r2, r2
 8018eba:	fb03 f702 	mul.w	r7, r3, r2
 8018ebe:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8018ec2:	011b      	lsls	r3, r3, #4
 8018ec4:	b292      	uxth	r2, r2
 8018ec6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8018eca:	1bdb      	subs	r3, r3, r7
 8018ecc:	b29b      	uxth	r3, r3
 8018ece:	ebac 0c02 	sub.w	ip, ip, r2
 8018ed2:	fa1f fc8c 	uxth.w	ip, ip
 8018ed6:	fb03 f909 	mul.w	r9, r3, r9
 8018eda:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018edc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018ee0:	fb0c 9000 	mla	r0, ip, r0, r9
 8018ee4:	fb02 0004 	mla	r0, r2, r4, r0
 8018ee8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018eea:	f896 9000 	ldrb.w	r9, [r6]
 8018eee:	fb07 0004 	mla	r0, r7, r4, r0
 8018ef2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018ef4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018ef8:	fb19 f904 	smulbb	r9, r9, r4
 8018efc:	fb00 9005 	mla	r0, r0, r5, r9
 8018f00:	b280      	uxth	r0, r0
 8018f02:	f100 0901 	add.w	r9, r0, #1
 8018f06:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8018f0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018f0c:	4358      	muls	r0, r3
 8018f0e:	fb0c 0101 	mla	r1, ip, r1, r0
 8018f12:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018f14:	fb02 1100 	mla	r1, r2, r0, r1
 8018f18:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018f1a:	fb07 1100 	mla	r1, r7, r0, r1
 8018f1e:	7870      	ldrb	r0, [r6, #1]
 8018f20:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018f24:	fb10 f004 	smulbb	r0, r0, r4
 8018f28:	fb01 0105 	mla	r1, r1, r5, r0
 8018f2c:	b289      	uxth	r1, r1
 8018f2e:	1c48      	adds	r0, r1, #1
 8018f30:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8018f34:	1209      	asrs	r1, r1, #8
 8018f36:	7071      	strb	r1, [r6, #1]
 8018f38:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018f3a:	434b      	muls	r3, r1
 8018f3c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8018f3e:	fb0c 330e 	mla	r3, ip, lr, r3
 8018f42:	fb02 3201 	mla	r2, r2, r1, r3
 8018f46:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018f48:	fb07 2703 	mla	r7, r7, r3, r2
 8018f4c:	78b2      	ldrb	r2, [r6, #2]
 8018f4e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8018f52:	fb12 f204 	smulbb	r2, r2, r4
 8018f56:	fb07 2505 	mla	r5, r7, r5, r2
 8018f5a:	b2ad      	uxth	r5, r5
 8018f5c:	1c6f      	adds	r7, r5, #1
 8018f5e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8018f62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f66:	122d      	asrs	r5, r5, #8
 8018f68:	f886 9000 	strb.w	r9, [r6]
 8018f6c:	70b5      	strb	r5, [r6, #2]
 8018f6e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8018f70:	4498      	add	r8, r3
 8018f72:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018f74:	3603      	adds	r6, #3
 8018f76:	449b      	add	fp, r3
 8018f78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018f7c:	e75f      	b.n	8018e3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8018f7e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8018f80:	4498      	add	r8, r3
 8018f82:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018f84:	449b      	add	fp, r3
 8018f86:	9b07      	ldr	r3, [sp, #28]
 8018f88:	3b01      	subs	r3, #1
 8018f8a:	9307      	str	r3, [sp, #28]
 8018f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f8e:	3303      	adds	r3, #3
 8018f90:	9309      	str	r3, [sp, #36]	; 0x24
 8018f92:	e709      	b.n	8018da8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8018f94:	f47f af1b 	bne.w	8018dce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8018f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	f340 80e3 	ble.w	8019166 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8018fa0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018fa8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018fac:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018fae:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018fb2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018fb6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018fba:	eef0 6a48 	vmov.f32	s13, s16
 8018fbe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018fc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018fc6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018fca:	ee16 8a90 	vmov	r8, s13
 8018fce:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018fd2:	eef0 6a68 	vmov.f32	s13, s17
 8018fd6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018fda:	ee18 2a10 	vmov	r2, s16
 8018fde:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018fe2:	fb92 f3f3 	sdiv	r3, r2, r3
 8018fe6:	ee18 2a90 	vmov	r2, s17
 8018fea:	9335      	str	r3, [sp, #212]	; 0xd4
 8018fec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018fee:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ff2:	9336      	str	r3, [sp, #216]	; 0xd8
 8018ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018ff8:	3b01      	subs	r3, #1
 8018ffa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018ffe:	930e      	str	r3, [sp, #56]	; 0x38
 8019000:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019002:	bf08      	it	eq
 8019004:	4613      	moveq	r3, r2
 8019006:	ee16 ba90 	vmov	fp, s13
 801900a:	9307      	str	r3, [sp, #28]
 801900c:	eef0 8a67 	vmov.f32	s17, s15
 8019010:	eeb0 8a47 	vmov.f32	s16, s14
 8019014:	e6c1      	b.n	8018d9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8019016:	1c45      	adds	r5, r0, #1
 8019018:	d1a9      	bne.n	8018f6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801901a:	9c08      	ldr	r4, [sp, #32]
 801901c:	42a0      	cmp	r0, r4
 801901e:	daa6      	bge.n	8018f6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8019020:	1c4c      	adds	r4, r1, #1
 8019022:	dba4      	blt.n	8018f6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8019024:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019026:	428c      	cmp	r4, r1
 8019028:	dda1      	ble.n	8018f6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801902a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801902c:	9001      	str	r0, [sp, #4]
 801902e:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8019032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019034:	9300      	str	r3, [sp, #0]
 8019036:	e9cd 2404 	strd	r2, r4, [sp, #16]
 801903a:	9b08      	ldr	r3, [sp, #32]
 801903c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801903e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8019040:	4631      	mov	r1, r6
 8019042:	f7ff fd5b 	bl	8018afc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8019046:	e792      	b.n	8018f6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8019048:	9c08      	ldr	r4, [sp, #32]
 801904a:	ea4f 4228 	mov.w	r2, r8, asr #16
 801904e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8019052:	fb04 2000 	mla	r0, r4, r0, r2
 8019056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019058:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801905a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801905e:	4402      	add	r2, r0
 8019060:	5c25      	ldrb	r5, [r4, r0]
 8019062:	7894      	ldrb	r4, [r2, #2]
 8019064:	9411      	str	r4, [sp, #68]	; 0x44
 8019066:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801906a:	7954      	ldrb	r4, [r2, #5]
 801906c:	7850      	ldrb	r0, [r2, #1]
 801906e:	f892 a003 	ldrb.w	sl, [r2, #3]
 8019072:	f892 9004 	ldrb.w	r9, [r2, #4]
 8019076:	9412      	str	r4, [sp, #72]	; 0x48
 8019078:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801907c:	b171      	cbz	r1, 801909c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801907e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019080:	3205      	adds	r2, #5
 8019082:	1917      	adds	r7, r2, r4
 8019084:	5d12      	ldrb	r2, [r2, r4]
 8019086:	9219      	str	r2, [sp, #100]	; 0x64
 8019088:	787a      	ldrb	r2, [r7, #1]
 801908a:	921b      	str	r2, [sp, #108]	; 0x6c
 801908c:	78ba      	ldrb	r2, [r7, #2]
 801908e:	921d      	str	r2, [sp, #116]	; 0x74
 8019090:	78fa      	ldrb	r2, [r7, #3]
 8019092:	921a      	str	r2, [sp, #104]	; 0x68
 8019094:	793a      	ldrb	r2, [r7, #4]
 8019096:	921c      	str	r2, [sp, #112]	; 0x70
 8019098:	797a      	ldrb	r2, [r7, #5]
 801909a:	921e      	str	r2, [sp, #120]	; 0x78
 801909c:	b29b      	uxth	r3, r3
 801909e:	b289      	uxth	r1, r1
 80190a0:	fb03 f201 	mul.w	r2, r3, r1
 80190a4:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80190a8:	011b      	lsls	r3, r3, #4
 80190aa:	b289      	uxth	r1, r1
 80190ac:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80190b0:	1a9b      	subs	r3, r3, r2
 80190b2:	b29b      	uxth	r3, r3
 80190b4:	1a7f      	subs	r7, r7, r1
 80190b6:	b2bf      	uxth	r7, r7
 80190b8:	fb03 fa0a 	mul.w	sl, r3, sl
 80190bc:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80190be:	fb07 a505 	mla	r5, r7, r5, sl
 80190c2:	fb01 5504 	mla	r5, r1, r4, r5
 80190c6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80190c8:	f816 ac03 	ldrb.w	sl, [r6, #-3]
 80190cc:	fb02 5504 	mla	r5, r2, r4, r5
 80190d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80190d2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80190d6:	fb1a fa04 	smulbb	sl, sl, r4
 80190da:	fb05 a50e 	mla	r5, r5, lr, sl
 80190de:	b2ad      	uxth	r5, r5
 80190e0:	fb03 f909 	mul.w	r9, r3, r9
 80190e4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80190e6:	f105 0a01 	add.w	sl, r5, #1
 80190ea:	fb07 9000 	mla	r0, r7, r0, r9
 80190ee:	fb01 0004 	mla	r0, r1, r4, r0
 80190f2:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80190f6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80190f8:	122d      	asrs	r5, r5, #8
 80190fa:	fb02 0004 	mla	r0, r2, r4, r0
 80190fe:	f806 5c03 	strb.w	r5, [r6, #-3]
 8019102:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019104:	f816 5c02 	ldrb.w	r5, [r6, #-2]
 8019108:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801910c:	fb15 f504 	smulbb	r5, r5, r4
 8019110:	fb00 500e 	mla	r0, r0, lr, r5
 8019114:	b280      	uxth	r0, r0
 8019116:	1c45      	adds	r5, r0, #1
 8019118:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801911c:	1200      	asrs	r0, r0, #8
 801911e:	f806 0c02 	strb.w	r0, [r6, #-2]
 8019122:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019124:	4343      	muls	r3, r0
 8019126:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019128:	fb07 3300 	mla	r3, r7, r0, r3
 801912c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801912e:	fb01 3100 	mla	r1, r1, r0, r3
 8019132:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019134:	fb02 1203 	mla	r2, r2, r3, r1
 8019138:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801913c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019140:	fb11 f104 	smulbb	r1, r1, r4
 8019144:	fb02 120e 	mla	r2, r2, lr, r1
 8019148:	b292      	uxth	r2, r2
 801914a:	1c53      	adds	r3, r2, #1
 801914c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019150:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8019152:	4498      	add	r8, r3
 8019154:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8019156:	1212      	asrs	r2, r2, #8
 8019158:	f806 2c01 	strb.w	r2, [r6, #-1]
 801915c:	449b      	add	fp, r3
 801915e:	3603      	adds	r6, #3
 8019160:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019164:	e64d      	b.n	8018e02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8019166:	b021      	add	sp, #132	; 0x84
 8019168:	ecbd 8b08 	vpop	{d8-d11}
 801916c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019170 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8019170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019174:	b085      	sub	sp, #20
 8019176:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801917a:	fb07 ce03 	mla	lr, r7, r3, ip
 801917e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8019182:	9403      	str	r4, [sp, #12]
 8019184:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019188:	2f00      	cmp	r7, #0
 801918a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801918e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8019192:	780c      	ldrb	r4, [r1, #0]
 8019194:	784d      	ldrb	r5, [r1, #1]
 8019196:	788e      	ldrb	r6, [r1, #2]
 8019198:	eb02 0b0e 	add.w	fp, r2, lr
 801919c:	db56      	blt.n	801924c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801919e:	45b9      	cmp	r9, r7
 80191a0:	dd54      	ble.n	801924c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80191a2:	f1bc 0f00 	cmp.w	ip, #0
 80191a6:	db4d      	blt.n	8019244 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80191a8:	4563      	cmp	r3, ip
 80191aa:	dd4b      	ble.n	8019244 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80191ac:	f812 200e 	ldrb.w	r2, [r2, lr]
 80191b0:	9200      	str	r2, [sp, #0]
 80191b2:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80191b6:	9201      	str	r2, [sp, #4]
 80191b8:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80191bc:	9202      	str	r2, [sp, #8]
 80191be:	f11c 0201 	adds.w	r2, ip, #1
 80191c2:	d44a      	bmi.n	801925a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80191c4:	4293      	cmp	r3, r2
 80191c6:	dd48      	ble.n	801925a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80191c8:	2800      	cmp	r0, #0
 80191ca:	d046      	beq.n	801925a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80191cc:	f89b e003 	ldrb.w	lr, [fp, #3]
 80191d0:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80191d4:	f89b a005 	ldrb.w	sl, [fp, #5]
 80191d8:	3701      	adds	r7, #1
 80191da:	d446      	bmi.n	801926a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80191dc:	45b9      	cmp	r9, r7
 80191de:	dd44      	ble.n	801926a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80191e0:	9a03      	ldr	r2, [sp, #12]
 80191e2:	2a00      	cmp	r2, #0
 80191e4:	d045      	beq.n	8019272 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 80191e6:	f1bc 0f00 	cmp.w	ip, #0
 80191ea:	db3a      	blt.n	8019262 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80191ec:	4563      	cmp	r3, ip
 80191ee:	dd38      	ble.n	8019262 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80191f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80191f4:	f04f 0903 	mov.w	r9, #3
 80191f8:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80191fc:	fb03 b209 	mla	r2, r3, r9, fp
 8019200:	fb03 b909 	mla	r9, r3, r9, fp
 8019204:	7852      	ldrb	r2, [r2, #1]
 8019206:	f899 9002 	ldrb.w	r9, [r9, #2]
 801920a:	f11c 0c01 	adds.w	ip, ip, #1
 801920e:	d40d      	bmi.n	801922c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8019210:	4563      	cmp	r3, ip
 8019212:	dd0b      	ble.n	801922c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8019214:	b160      	cbz	r0, 8019230 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8019216:	2603      	movs	r6, #3
 8019218:	fb13 6406 	smlabb	r4, r3, r6, r6
 801921c:	fb03 b506 	mla	r5, r3, r6, fp
 8019220:	fb03 b306 	mla	r3, r3, r6, fp
 8019224:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8019228:	792d      	ldrb	r5, [r5, #4]
 801922a:	795e      	ldrb	r6, [r3, #5]
 801922c:	280f      	cmp	r0, #15
 801922e:	d802      	bhi.n	8019236 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8019230:	9b03      	ldr	r3, [sp, #12]
 8019232:	2b0f      	cmp	r3, #15
 8019234:	d922      	bls.n	801927c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8019236:	4b2f      	ldr	r3, [pc, #188]	; (80192f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8019238:	4a2f      	ldr	r2, [pc, #188]	; (80192f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801923a:	4830      	ldr	r0, [pc, #192]	; (80192fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801923c:	f240 11a5 	movw	r1, #421	; 0x1a5
 8019240:	f002 fba8 	bl	801b994 <__assert_func>
 8019244:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8019248:	9400      	str	r4, [sp, #0]
 801924a:	e7b8      	b.n	80191be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801924c:	46b2      	mov	sl, r6
 801924e:	46a8      	mov	r8, r5
 8019250:	46a6      	mov	lr, r4
 8019252:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8019256:	9400      	str	r4, [sp, #0]
 8019258:	e7be      	b.n	80191d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801925a:	46b2      	mov	sl, r6
 801925c:	46a8      	mov	r8, r5
 801925e:	46a6      	mov	lr, r4
 8019260:	e7ba      	b.n	80191d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8019262:	46b1      	mov	r9, r6
 8019264:	462a      	mov	r2, r5
 8019266:	4627      	mov	r7, r4
 8019268:	e7cf      	b.n	801920a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801926a:	46b1      	mov	r9, r6
 801926c:	462a      	mov	r2, r5
 801926e:	4627      	mov	r7, r4
 8019270:	e7dc      	b.n	801922c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8019272:	280f      	cmp	r0, #15
 8019274:	d8df      	bhi.n	8019236 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8019276:	46b1      	mov	r9, r6
 8019278:	462a      	mov	r2, r5
 801927a:	4627      	mov	r7, r4
 801927c:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8019280:	b280      	uxth	r0, r0
 8019282:	fb00 f30b 	mul.w	r3, r0, fp
 8019286:	0100      	lsls	r0, r0, #4
 8019288:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801928c:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8019290:	1ac0      	subs	r0, r0, r3
 8019292:	fa1f fb8b 	uxth.w	fp, fp
 8019296:	b280      	uxth	r0, r0
 8019298:	9003      	str	r0, [sp, #12]
 801929a:	ebac 0c0b 	sub.w	ip, ip, fp
 801929e:	fb00 fe0e 	mul.w	lr, r0, lr
 80192a2:	9800      	ldr	r0, [sp, #0]
 80192a4:	fa1f fc8c 	uxth.w	ip, ip
 80192a8:	fb0c ee00 	mla	lr, ip, r0, lr
 80192ac:	9803      	ldr	r0, [sp, #12]
 80192ae:	fb00 f808 	mul.w	r8, r0, r8
 80192b2:	9801      	ldr	r0, [sp, #4]
 80192b4:	fb0c 8800 	mla	r8, ip, r0, r8
 80192b8:	fb0b 8202 	mla	r2, fp, r2, r8
 80192bc:	fb03 2505 	mla	r5, r3, r5, r2
 80192c0:	9a03      	ldr	r2, [sp, #12]
 80192c2:	fb02 f00a 	mul.w	r0, r2, sl
 80192c6:	9a02      	ldr	r2, [sp, #8]
 80192c8:	fb0c 0c02 	mla	ip, ip, r2, r0
 80192cc:	fb0b ee07 	mla	lr, fp, r7, lr
 80192d0:	fb0b c909 	mla	r9, fp, r9, ip
 80192d4:	fb03 ee04 	mla	lr, r3, r4, lr
 80192d8:	fb03 9606 	mla	r6, r3, r6, r9
 80192dc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80192e0:	122d      	asrs	r5, r5, #8
 80192e2:	1236      	asrs	r6, r6, #8
 80192e4:	f881 e000 	strb.w	lr, [r1]
 80192e8:	704d      	strb	r5, [r1, #1]
 80192ea:	708e      	strb	r6, [r1, #2]
 80192ec:	b005      	add	sp, #20
 80192ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192f2:	bf00      	nop
 80192f4:	0801f881 	.word	0x0801f881
 80192f8:	0801fd76 	.word	0x0801fd76
 80192fc:	0801f94a 	.word	0x0801f94a

08019300 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019304:	ed2d 8b0a 	vpush	{d8-d12}
 8019308:	b09d      	sub	sp, #116	; 0x74
 801930a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 801930e:	9306      	str	r3, [sp, #24]
 8019310:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8019314:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8019316:	9307      	str	r3, [sp, #28]
 8019318:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 801931c:	9309      	str	r3, [sp, #36]	; 0x24
 801931e:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8019322:	901b      	str	r0, [sp, #108]	; 0x6c
 8019324:	6850      	ldr	r0, [r2, #4]
 8019326:	6812      	ldr	r2, [r2, #0]
 8019328:	fb00 1303 	mla	r3, r0, r3, r1
 801932c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019330:	18d3      	adds	r3, r2, r3
 8019332:	9308      	str	r3, [sp, #32]
 8019334:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8019336:	9907      	ldr	r1, [sp, #28]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	930a      	str	r3, [sp, #40]	; 0x28
 801933c:	2203      	movs	r2, #3
 801933e:	f06f 0304 	mvn.w	r3, #4
 8019342:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8019346:	fb11 3302 	smlabb	r3, r1, r2, r3
 801934a:	eeb0 aa40 	vmov.f32	s20, s0
 801934e:	eef0 9a60 	vmov.f32	s19, s1
 8019352:	eeb0 9a41 	vmov.f32	s18, s2
 8019356:	eeb0 8a62 	vmov.f32	s16, s5
 801935a:	eef0 8a43 	vmov.f32	s17, s6
 801935e:	eeb0 ca44 	vmov.f32	s24, s8
 8019362:	eef0 ba64 	vmov.f32	s23, s9
 8019366:	eeb0 ba45 	vmov.f32	s22, s10
 801936a:	930b      	str	r3, [sp, #44]	; 0x2c
 801936c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8019370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019372:	2b00      	cmp	r3, #0
 8019374:	dc03      	bgt.n	801937e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8019376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019378:	2b00      	cmp	r3, #0
 801937a:	f340 8193 	ble.w	80196a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801937e:	9b06      	ldr	r3, [sp, #24]
 8019380:	2b00      	cmp	r3, #0
 8019382:	f340 80d0 	ble.w	8019526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8019386:	1432      	asrs	r2, r6, #16
 8019388:	ea4f 4325 	mov.w	r3, r5, asr #16
 801938c:	d42f      	bmi.n	80193ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801938e:	9807      	ldr	r0, [sp, #28]
 8019390:	1c51      	adds	r1, r2, #1
 8019392:	4281      	cmp	r1, r0
 8019394:	da2e      	bge.n	80193f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8019396:	2b00      	cmp	r3, #0
 8019398:	db2c      	blt.n	80193f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801939a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801939c:	1c59      	adds	r1, r3, #1
 801939e:	4288      	cmp	r0, r1
 80193a0:	dd28      	ble.n	80193f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80193a2:	9b06      	ldr	r3, [sp, #24]
 80193a4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80193a6:	3b01      	subs	r3, #1
 80193a8:	fb02 6203 	mla	r2, r2, r3, r6
 80193ac:	1412      	asrs	r2, r2, #16
 80193ae:	d42c      	bmi.n	801940a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80193b0:	9907      	ldr	r1, [sp, #28]
 80193b2:	3201      	adds	r2, #1
 80193b4:	4291      	cmp	r1, r2
 80193b6:	dd28      	ble.n	801940a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80193b8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80193ba:	fb02 5303 	mla	r3, r2, r3, r5
 80193be:	141b      	asrs	r3, r3, #16
 80193c0:	d423      	bmi.n	801940a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80193c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80193c4:	3301      	adds	r3, #1
 80193c6:	429a      	cmp	r2, r3
 80193c8:	dd1f      	ble.n	801940a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80193ca:	9b08      	ldr	r3, [sp, #32]
 80193cc:	f8dd e018 	ldr.w	lr, [sp, #24]
 80193d0:	f103 0c03 	add.w	ip, r3, #3
 80193d4:	f1be 0f00 	cmp.w	lr, #0
 80193d8:	f300 80fa 	bgt.w	80195d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80193dc:	9b06      	ldr	r3, [sp, #24]
 80193de:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80193e2:	9b08      	ldr	r3, [sp, #32]
 80193e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80193e8:	4423      	add	r3, r4
 80193ea:	9308      	str	r3, [sp, #32]
 80193ec:	e09d      	b.n	801952a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80193ee:	1c51      	adds	r1, r2, #1
 80193f0:	f040 808e 	bne.w	8019510 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80193f4:	9907      	ldr	r1, [sp, #28]
 80193f6:	428a      	cmp	r2, r1
 80193f8:	f280 808a 	bge.w	8019510 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80193fc:	1c5f      	adds	r7, r3, #1
 80193fe:	f2c0 8087 	blt.w	8019510 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8019402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019404:	4293      	cmp	r3, r2
 8019406:	f280 8083 	bge.w	8019510 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801940a:	9f06      	ldr	r7, [sp, #24]
 801940c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019410:	2f00      	cmp	r7, #0
 8019412:	dde3      	ble.n	80193dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8019414:	1432      	asrs	r2, r6, #16
 8019416:	ea4f 4325 	mov.w	r3, r5, asr #16
 801941a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801941e:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8019422:	f100 80bf 	bmi.w	80195a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8019426:	9c07      	ldr	r4, [sp, #28]
 8019428:	1c50      	adds	r0, r2, #1
 801942a:	4284      	cmp	r4, r0
 801942c:	f340 80bc 	ble.w	80195a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8019430:	2b00      	cmp	r3, #0
 8019432:	f2c0 80b9 	blt.w	80195a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8019436:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019438:	1c58      	adds	r0, r3, #1
 801943a:	4284      	cmp	r4, r0
 801943c:	f340 80b4 	ble.w	80195a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8019440:	9807      	ldr	r0, [sp, #28]
 8019442:	fb00 2303 	mla	r3, r0, r3, r2
 8019446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019448:	980a      	ldr	r0, [sp, #40]	; 0x28
 801944a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801944e:	441a      	add	r2, r3
 8019450:	f810 c003 	ldrb.w	ip, [r0, r3]
 8019454:	7953      	ldrb	r3, [r2, #5]
 8019456:	7850      	ldrb	r0, [r2, #1]
 8019458:	f892 e002 	ldrb.w	lr, [r2, #2]
 801945c:	f892 9003 	ldrb.w	r9, [r2, #3]
 8019460:	f892 8004 	ldrb.w	r8, [r2, #4]
 8019464:	930e      	str	r3, [sp, #56]	; 0x38
 8019466:	f1bb 0f00 	cmp.w	fp, #0
 801946a:	d00f      	beq.n	801948c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801946c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801946e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019470:	3205      	adds	r2, #5
 8019472:	18d3      	adds	r3, r2, r3
 8019474:	5d12      	ldrb	r2, [r2, r4]
 8019476:	920f      	str	r2, [sp, #60]	; 0x3c
 8019478:	785a      	ldrb	r2, [r3, #1]
 801947a:	9211      	str	r2, [sp, #68]	; 0x44
 801947c:	789a      	ldrb	r2, [r3, #2]
 801947e:	9213      	str	r2, [sp, #76]	; 0x4c
 8019480:	78da      	ldrb	r2, [r3, #3]
 8019482:	9210      	str	r2, [sp, #64]	; 0x40
 8019484:	791a      	ldrb	r2, [r3, #4]
 8019486:	795b      	ldrb	r3, [r3, #5]
 8019488:	9212      	str	r2, [sp, #72]	; 0x48
 801948a:	9314      	str	r3, [sp, #80]	; 0x50
 801948c:	b28b      	uxth	r3, r1
 801948e:	fa1f f28b 	uxth.w	r2, fp
 8019492:	fb03 fb02 	mul.w	fp, r3, r2
 8019496:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801949a:	011b      	lsls	r3, r3, #4
 801949c:	b292      	uxth	r2, r2
 801949e:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80194a2:	eba3 030b 	sub.w	r3, r3, fp
 80194a6:	b29b      	uxth	r3, r3
 80194a8:	1a89      	subs	r1, r1, r2
 80194aa:	b289      	uxth	r1, r1
 80194ac:	fb03 f808 	mul.w	r8, r3, r8
 80194b0:	fb01 8800 	mla	r8, r1, r0, r8
 80194b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80194b6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80194b8:	fb02 8800 	mla	r8, r2, r0, r8
 80194bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80194be:	fb0b 8800 	mla	r8, fp, r0, r8
 80194c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80194c4:	fb03 f909 	mul.w	r9, r3, r9
 80194c8:	4343      	muls	r3, r0
 80194ca:	fb01 330e 	mla	r3, r1, lr, r3
 80194ce:	fb01 990c 	mla	r9, r1, ip, r9
 80194d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80194d4:	fb02 9904 	mla	r9, r2, r4, r9
 80194d8:	fb02 3201 	mla	r2, r2, r1, r3
 80194dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80194de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80194e0:	fb0b 9904 	mla	r9, fp, r4, r9
 80194e4:	fb0b 2b03 	mla	fp, fp, r3, r2
 80194e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80194ec:	ea4f 2828 	mov.w	r8, r8, asr #8
 80194f0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80194f4:	f88a 9000 	strb.w	r9, [sl]
 80194f8:	f88a 8001 	strb.w	r8, [sl, #1]
 80194fc:	f88a b002 	strb.w	fp, [sl, #2]
 8019500:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8019502:	441e      	add	r6, r3
 8019504:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019506:	f10a 0a03 	add.w	sl, sl, #3
 801950a:	441d      	add	r5, r3
 801950c:	3f01      	subs	r7, #1
 801950e:	e77f      	b.n	8019410 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8019510:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8019512:	441e      	add	r6, r3
 8019514:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019516:	441d      	add	r5, r3
 8019518:	9b06      	ldr	r3, [sp, #24]
 801951a:	3b01      	subs	r3, #1
 801951c:	9306      	str	r3, [sp, #24]
 801951e:	9b08      	ldr	r3, [sp, #32]
 8019520:	3303      	adds	r3, #3
 8019522:	9308      	str	r3, [sp, #32]
 8019524:	e72b      	b.n	801937e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8019526:	f47f af3c 	bne.w	80193a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801952a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801952c:	2b00      	cmp	r3, #0
 801952e:	f340 80b9 	ble.w	80196a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8019532:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8019536:	ee79 9aab 	vadd.f32	s19, s19, s23
 801953a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801953e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019540:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8019544:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019548:	eef0 6a48 	vmov.f32	s13, s16
 801954c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019550:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019554:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019558:	ee16 6a90 	vmov	r6, s13
 801955c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019560:	eef0 6a68 	vmov.f32	s13, s17
 8019564:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019568:	ee18 2a10 	vmov	r2, s16
 801956c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019570:	fb92 f3f3 	sdiv	r3, r2, r3
 8019574:	ee18 2a90 	vmov	r2, s17
 8019578:	9333      	str	r3, [sp, #204]	; 0xcc
 801957a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801957c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019580:	9334      	str	r3, [sp, #208]	; 0xd0
 8019582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019586:	3b01      	subs	r3, #1
 8019588:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801958c:	930c      	str	r3, [sp, #48]	; 0x30
 801958e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019590:	bf08      	it	eq
 8019592:	4613      	moveq	r3, r2
 8019594:	ee16 5a90 	vmov	r5, s13
 8019598:	9306      	str	r3, [sp, #24]
 801959a:	eef0 8a67 	vmov.f32	s17, s15
 801959e:	eeb0 8a47 	vmov.f32	s16, s14
 80195a2:	e6e5      	b.n	8019370 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80195a4:	1c54      	adds	r4, r2, #1
 80195a6:	d1ab      	bne.n	8019500 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80195a8:	9807      	ldr	r0, [sp, #28]
 80195aa:	4282      	cmp	r2, r0
 80195ac:	daa8      	bge.n	8019500 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80195ae:	1c58      	adds	r0, r3, #1
 80195b0:	dba6      	blt.n	8019500 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80195b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80195b4:	4298      	cmp	r0, r3
 80195b6:	dda3      	ble.n	8019500 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80195b8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80195bc:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 80195c0:	9000      	str	r0, [sp, #0]
 80195c2:	9b07      	ldr	r3, [sp, #28]
 80195c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80195c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80195c8:	4651      	mov	r1, sl
 80195ca:	f7ff fdd1 	bl	8019170 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80195ce:	e797      	b.n	8019500 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80195d0:	9c07      	ldr	r4, [sp, #28]
 80195d2:	1431      	asrs	r1, r6, #16
 80195d4:	1428      	asrs	r0, r5, #16
 80195d6:	fb04 1000 	mla	r0, r4, r0, r1
 80195da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80195dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80195de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80195e2:	4401      	add	r1, r0
 80195e4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80195e8:	5c20      	ldrb	r0, [r4, r0]
 80195ea:	900e      	str	r0, [sp, #56]	; 0x38
 80195ec:	f3c6 3303 	ubfx	r3, r6, #12, #4
 80195f0:	7848      	ldrb	r0, [r1, #1]
 80195f2:	f891 8002 	ldrb.w	r8, [r1, #2]
 80195f6:	f891 a003 	ldrb.w	sl, [r1, #3]
 80195fa:	f891 9004 	ldrb.w	r9, [r1, #4]
 80195fe:	f891 b005 	ldrb.w	fp, [r1, #5]
 8019602:	b172      	cbz	r2, 8019622 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8019604:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019606:	3105      	adds	r1, #5
 8019608:	190f      	adds	r7, r1, r4
 801960a:	5d09      	ldrb	r1, [r1, r4]
 801960c:	9115      	str	r1, [sp, #84]	; 0x54
 801960e:	7879      	ldrb	r1, [r7, #1]
 8019610:	9117      	str	r1, [sp, #92]	; 0x5c
 8019612:	78b9      	ldrb	r1, [r7, #2]
 8019614:	9119      	str	r1, [sp, #100]	; 0x64
 8019616:	78f9      	ldrb	r1, [r7, #3]
 8019618:	9116      	str	r1, [sp, #88]	; 0x58
 801961a:	7939      	ldrb	r1, [r7, #4]
 801961c:	9118      	str	r1, [sp, #96]	; 0x60
 801961e:	7979      	ldrb	r1, [r7, #5]
 8019620:	911a      	str	r1, [sp, #104]	; 0x68
 8019622:	b29b      	uxth	r3, r3
 8019624:	b292      	uxth	r2, r2
 8019626:	fb03 f102 	mul.w	r1, r3, r2
 801962a:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 801962e:	011b      	lsls	r3, r3, #4
 8019630:	b292      	uxth	r2, r2
 8019632:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8019636:	1a5b      	subs	r3, r3, r1
 8019638:	b29b      	uxth	r3, r3
 801963a:	1abf      	subs	r7, r7, r2
 801963c:	b2bf      	uxth	r7, r7
 801963e:	fb03 f909 	mul.w	r9, r3, r9
 8019642:	fb07 9900 	mla	r9, r7, r0, r9
 8019646:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019648:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801964a:	fb02 9900 	mla	r9, r2, r0, r9
 801964e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019650:	fb03 fa0a 	mul.w	sl, r3, sl
 8019654:	fb01 9900 	mla	r9, r1, r0, r9
 8019658:	fb07 aa04 	mla	sl, r7, r4, sl
 801965c:	fb03 f30b 	mul.w	r3, r3, fp
 8019660:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019662:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019664:	fb07 3308 	mla	r3, r7, r8, r3
 8019668:	fb02 aa04 	mla	sl, r2, r4, sl
 801966c:	fb02 3200 	mla	r2, r2, r0, r3
 8019670:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019672:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019674:	fb01 aa04 	mla	sl, r1, r4, sl
 8019678:	fb01 2103 	mla	r1, r1, r3, r2
 801967c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801967e:	441e      	add	r6, r3
 8019680:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019682:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019686:	ea4f 2929 	mov.w	r9, r9, asr #8
 801968a:	1209      	asrs	r1, r1, #8
 801968c:	f80c ac03 	strb.w	sl, [ip, #-3]
 8019690:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8019694:	f80c 1c01 	strb.w	r1, [ip, #-1]
 8019698:	441d      	add	r5, r3
 801969a:	f10c 0c03 	add.w	ip, ip, #3
 801969e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80196a2:	e697      	b.n	80193d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80196a4:	b01d      	add	sp, #116	; 0x74
 80196a6:	ecbd 8b0a 	vpop	{d8-d12}
 80196aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080196b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80196b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b4:	b085      	sub	sp, #20
 80196b6:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80196ba:	7888      	ldrb	r0, [r1, #2]
 80196bc:	9000      	str	r0, [sp, #0]
 80196be:	7848      	ldrb	r0, [r1, #1]
 80196c0:	9001      	str	r0, [sp, #4]
 80196c2:	fb04 c603 	mla	r6, r4, r3, ip
 80196c6:	7808      	ldrb	r0, [r1, #0]
 80196c8:	9002      	str	r0, [sp, #8]
 80196ca:	4691      	mov	r9, r2
 80196cc:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80196d0:	9a00      	ldr	r2, [sp, #0]
 80196d2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80196d6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80196da:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80196de:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80196e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80196e6:	9a01      	ldr	r2, [sp, #4]
 80196e8:	2c00      	cmp	r4, #0
 80196ea:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80196ee:	db3a      	blt.n	8019766 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80196f0:	45a0      	cmp	r8, r4
 80196f2:	dd38      	ble.n	8019766 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80196f4:	f1bc 0f00 	cmp.w	ip, #0
 80196f8:	db33      	blt.n	8019762 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80196fa:	4563      	cmp	r3, ip
 80196fc:	dd31      	ble.n	8019762 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80196fe:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8019702:	f11c 0601 	adds.w	r6, ip, #1
 8019706:	d431      	bmi.n	801976c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8019708:	42b3      	cmp	r3, r6
 801970a:	dd2f      	ble.n	801976c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801970c:	b375      	cbz	r5, 801976c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801970e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8019712:	3401      	adds	r4, #1
 8019714:	d42e      	bmi.n	8019774 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8019716:	45a0      	cmp	r8, r4
 8019718:	dd2c      	ble.n	8019774 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801971a:	b35f      	cbz	r7, 8019774 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801971c:	f1bc 0f00 	cmp.w	ip, #0
 8019720:	db26      	blt.n	8019770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8019722:	4563      	cmp	r3, ip
 8019724:	dd24      	ble.n	8019770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8019726:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801972a:	f11c 0c01 	adds.w	ip, ip, #1
 801972e:	d405      	bmi.n	801973c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8019730:	4563      	cmp	r3, ip
 8019732:	dd03      	ble.n	801973c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8019734:	b115      	cbz	r5, 801973c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8019736:	3301      	adds	r3, #1
 8019738:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801973c:	2d0f      	cmp	r5, #15
 801973e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019742:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8019746:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801974a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801974e:	d801      	bhi.n	8019754 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8019750:	2f0f      	cmp	r7, #15
 8019752:	d911      	bls.n	8019778 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8019754:	4b7f      	ldr	r3, [pc, #508]	; (8019954 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8019756:	4a80      	ldr	r2, [pc, #512]	; (8019958 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8019758:	4880      	ldr	r0, [pc, #512]	; (801995c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801975a:	f240 11a5 	movw	r1, #421	; 0x1a5
 801975e:	f002 f919 	bl	801b994 <__assert_func>
 8019762:	4602      	mov	r2, r0
 8019764:	e7cd      	b.n	8019702 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8019766:	4606      	mov	r6, r0
 8019768:	4602      	mov	r2, r0
 801976a:	e7d2      	b.n	8019712 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801976c:	4606      	mov	r6, r0
 801976e:	e7d0      	b.n	8019712 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8019770:	4604      	mov	r4, r0
 8019772:	e7da      	b.n	801972a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8019774:	4604      	mov	r4, r0
 8019776:	e7e1      	b.n	801973c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8019778:	b2ab      	uxth	r3, r5
 801977a:	b2bf      	uxth	r7, r7
 801977c:	fb03 fe07 	mul.w	lr, r3, r7
 8019780:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8019784:	011b      	lsls	r3, r3, #4
 8019786:	eba3 0c0e 	sub.w	ip, r3, lr
 801978a:	b2bf      	uxth	r7, r7
 801978c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8019790:	fa1f fc8c 	uxth.w	ip, ip
 8019794:	1bed      	subs	r5, r5, r7
 8019796:	b2ad      	uxth	r5, r5
 8019798:	fb0c f30a 	mul.w	r3, ip, sl
 801979c:	fb05 330b 	mla	r3, r5, fp, r3
 80197a0:	fb07 3309 	mla	r3, r7, r9, r3
 80197a4:	fb0e 3308 	mla	r3, lr, r8, r3
 80197a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80197ac:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80197b0:	9303      	str	r3, [sp, #12]
 80197b2:	d018      	beq.n	80197e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x136>
 80197b4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80197b8:	fb0b f303 	mul.w	r3, fp, r3
 80197bc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80197c0:	fb0b fb02 	mul.w	fp, fp, r2
 80197c4:	0a1a      	lsrs	r2, r3, #8
 80197c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80197ca:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80197ce:	441a      	add	r2, r3
 80197d0:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80197d4:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80197d8:	0a12      	lsrs	r2, r2, #8
 80197da:	0a1b      	lsrs	r3, r3, #8
 80197dc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80197e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80197e4:	431a      	orrs	r2, r3
 80197e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80197ea:	d019      	beq.n	8019820 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x170>
 80197ec:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80197f0:	fb0a fb0b 	mul.w	fp, sl, fp
 80197f4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80197f8:	fb0a fa06 	mul.w	sl, sl, r6
 80197fc:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8019800:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019804:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019808:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801980c:	445e      	add	r6, fp
 801980e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8019812:	0a36      	lsrs	r6, r6, #8
 8019814:	0a1b      	lsrs	r3, r3, #8
 8019816:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801981a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801981e:	431e      	orrs	r6, r3
 8019820:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019824:	d019      	beq.n	801985a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1aa>
 8019826:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801982a:	fb09 fa0a 	mul.w	sl, r9, sl
 801982e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019832:	fb09 f904 	mul.w	r9, r9, r4
 8019836:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801983a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801983e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019842:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8019846:	4454      	add	r4, sl
 8019848:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801984c:	0a24      	lsrs	r4, r4, #8
 801984e:	0a1b      	lsrs	r3, r3, #8
 8019850:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019854:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019858:	431c      	orrs	r4, r3
 801985a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801985e:	d019      	beq.n	8019894 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e4>
 8019860:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8019864:	fb08 f909 	mul.w	r9, r8, r9
 8019868:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801986c:	fb08 f800 	mul.w	r8, r8, r0
 8019870:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8019874:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019878:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801987c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8019880:	4448      	add	r0, r9
 8019882:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8019886:	0a00      	lsrs	r0, r0, #8
 8019888:	0a1b      	lsrs	r3, r3, #8
 801988a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801988e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019892:	4318      	orrs	r0, r3
 8019894:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8019898:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801989c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80198a0:	fb0c f808 	mul.w	r8, ip, r8
 80198a4:	fb0c f606 	mul.w	r6, ip, r6
 80198a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80198ac:	fb05 8803 	mla	r8, r5, r3, r8
 80198b0:	fb05 6202 	mla	r2, r5, r2, r6
 80198b4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80198b8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80198bc:	fb07 8803 	mla	r8, r7, r3, r8
 80198c0:	fb07 2704 	mla	r7, r7, r4, r2
 80198c4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80198c8:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80198cc:	9c02      	ldr	r4, [sp, #8]
 80198ce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80198d2:	fb0e 8303 	mla	r3, lr, r3, r8
 80198d6:	fb0e 7e00 	mla	lr, lr, r0, r7
 80198da:	9803      	ldr	r0, [sp, #12]
 80198dc:	b292      	uxth	r2, r2
 80198de:	0a1b      	lsrs	r3, r3, #8
 80198e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80198e4:	4350      	muls	r0, r2
 80198e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80198ea:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80198ee:	ea43 0e0e 	orr.w	lr, r3, lr
 80198f2:	1c43      	adds	r3, r0, #1
 80198f4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80198f8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80198fc:	b2db      	uxtb	r3, r3
 80198fe:	fb14 f403 	smulbb	r4, r4, r3
 8019902:	fa5f f08e 	uxtb.w	r0, lr
 8019906:	fb00 4002 	mla	r0, r0, r2, r4
 801990a:	b280      	uxth	r0, r0
 801990c:	1c44      	adds	r4, r0, #1
 801990e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8019912:	9c01      	ldr	r4, [sp, #4]
 8019914:	1200      	asrs	r0, r0, #8
 8019916:	fb14 f403 	smulbb	r4, r4, r3
 801991a:	7008      	strb	r0, [r1, #0]
 801991c:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8019920:	fb00 4002 	mla	r0, r0, r2, r4
 8019924:	b280      	uxth	r0, r0
 8019926:	1c44      	adds	r4, r0, #1
 8019928:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801992c:	1200      	asrs	r0, r0, #8
 801992e:	7048      	strb	r0, [r1, #1]
 8019930:	9800      	ldr	r0, [sp, #0]
 8019932:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8019936:	fb10 f303 	smulbb	r3, r0, r3
 801993a:	fb0e 3202 	mla	r2, lr, r2, r3
 801993e:	b292      	uxth	r2, r2
 8019940:	f102 0e01 	add.w	lr, r2, #1
 8019944:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8019948:	1212      	asrs	r2, r2, #8
 801994a:	708a      	strb	r2, [r1, #2]
 801994c:	b005      	add	sp, #20
 801994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019952:	bf00      	nop
 8019954:	0801f881 	.word	0x0801f881
 8019958:	0801fd76 	.word	0x0801fd76
 801995c:	0801f94a 	.word	0x0801f94a

08019960 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019964:	ed2d 8b08 	vpush	{d8-d11}
 8019968:	b099      	sub	sp, #100	; 0x64
 801996a:	eeb0 aa40 	vmov.f32	s20, s0
 801996e:	9306      	str	r3, [sp, #24]
 8019970:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8019974:	9307      	str	r3, [sp, #28]
 8019976:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801997a:	9216      	str	r2, [sp, #88]	; 0x58
 801997c:	9310      	str	r3, [sp, #64]	; 0x40
 801997e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019980:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8019984:	9112      	str	r1, [sp, #72]	; 0x48
 8019986:	9315      	str	r3, [sp, #84]	; 0x54
 8019988:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801998c:	9017      	str	r0, [sp, #92]	; 0x5c
 801998e:	6850      	ldr	r0, [r2, #4]
 8019990:	6812      	ldr	r2, [r2, #0]
 8019992:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8019994:	fb00 1303 	mla	r3, r0, r3, r1
 8019998:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801999c:	18d3      	adds	r3, r2, r3
 801999e:	930a      	str	r3, [sp, #40]	; 0x28
 80199a0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	9311      	str	r3, [sp, #68]	; 0x44
 80199a6:	9b07      	ldr	r3, [sp, #28]
 80199a8:	009b      	lsls	r3, r3, #2
 80199aa:	eef0 9a60 	vmov.f32	s19, s1
 80199ae:	eeb0 9a41 	vmov.f32	s18, s2
 80199b2:	eeb0 8a62 	vmov.f32	s16, s5
 80199b6:	eef0 8a43 	vmov.f32	s17, s6
 80199ba:	eef0 ba44 	vmov.f32	s23, s8
 80199be:	eeb0 ba64 	vmov.f32	s22, s9
 80199c2:	eef0 aa45 	vmov.f32	s21, s10
 80199c6:	930e      	str	r3, [sp, #56]	; 0x38
 80199c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	dc03      	bgt.n	80199d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80199ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	f340 833d 	ble.w	801a050 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f0>
 80199d6:	9b06      	ldr	r3, [sp, #24]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	f340 8199 	ble.w	8019d10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 80199de:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80199e0:	1412      	asrs	r2, r2, #16
 80199e2:	ea4f 4324 	mov.w	r3, r4, asr #16
 80199e6:	d432      	bmi.n	8019a4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80199e8:	9807      	ldr	r0, [sp, #28]
 80199ea:	1c51      	adds	r1, r2, #1
 80199ec:	4288      	cmp	r0, r1
 80199ee:	dd31      	ble.n	8019a54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	db2f      	blt.n	8019a54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80199f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80199f6:	1c59      	adds	r1, r3, #1
 80199f8:	4288      	cmp	r0, r1
 80199fa:	dd2b      	ble.n	8019a54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80199fc:	9b06      	ldr	r3, [sp, #24]
 80199fe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019a00:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019a02:	3b01      	subs	r3, #1
 8019a04:	fb02 1203 	mla	r2, r2, r3, r1
 8019a08:	1412      	asrs	r2, r2, #16
 8019a0a:	d42e      	bmi.n	8019a6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8019a0c:	9907      	ldr	r1, [sp, #28]
 8019a0e:	3201      	adds	r2, #1
 8019a10:	4291      	cmp	r1, r2
 8019a12:	dd2a      	ble.n	8019a6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8019a14:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8019a16:	fb02 4303 	mla	r3, r2, r3, r4
 8019a1a:	141b      	asrs	r3, r3, #16
 8019a1c:	d425      	bmi.n	8019a6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8019a1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019a20:	3301      	adds	r3, #1
 8019a22:	429a      	cmp	r2, r3
 8019a24:	dd21      	ble.n	8019a6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8019a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a28:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8019a2c:	f103 0e03 	add.w	lr, r3, #3
 8019a30:	9b06      	ldr	r3, [sp, #24]
 8019a32:	9313      	str	r3, [sp, #76]	; 0x4c
 8019a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	f300 81d3 	bgt.w	8019de2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x482>
 8019a3c:	9b06      	ldr	r3, [sp, #24]
 8019a3e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019a48:	4423      	add	r3, r4
 8019a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8019a4c:	e162      	b.n	8019d14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8019a4e:	1c51      	adds	r1, r2, #1
 8019a50:	f040 8151 	bne.w	8019cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8019a54:	9907      	ldr	r1, [sp, #28]
 8019a56:	428a      	cmp	r2, r1
 8019a58:	f280 814d 	bge.w	8019cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8019a5c:	1c5a      	adds	r2, r3, #1
 8019a5e:	f2c0 814a 	blt.w	8019cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8019a62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019a64:	4293      	cmp	r3, r2
 8019a66:	f280 8146 	bge.w	8019cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8019a6a:	9b06      	ldr	r3, [sp, #24]
 8019a6c:	9314      	str	r3, [sp, #80]	; 0x50
 8019a6e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019a70:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8019a74:	9313      	str	r3, [sp, #76]	; 0x4c
 8019a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	dddf      	ble.n	8019a3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8019a7c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019a7e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8019a82:	1412      	asrs	r2, r2, #16
 8019a84:	ea4f 4324 	mov.w	r3, r4, asr #16
 8019a88:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8019a8c:	f100 8190 	bmi.w	8019db0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8019a90:	9f07      	ldr	r7, [sp, #28]
 8019a92:	1c55      	adds	r5, r2, #1
 8019a94:	42af      	cmp	r7, r5
 8019a96:	f340 818d 	ble.w	8019db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	f2c0 818a 	blt.w	8019db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 8019aa0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019aa2:	1c5d      	adds	r5, r3, #1
 8019aa4:	42af      	cmp	r7, r5
 8019aa6:	f340 8185 	ble.w	8019db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 8019aaa:	9d07      	ldr	r5, [sp, #28]
 8019aac:	fb03 2305 	mla	r3, r3, r5, r2
 8019ab0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019ab2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019aba:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019abe:	2800      	cmp	r0, #0
 8019ac0:	f000 8167 	beq.w	8019d92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x432>
 8019ac4:	686a      	ldr	r2, [r5, #4]
 8019ac6:	920b      	str	r2, [sp, #44]	; 0x2c
 8019ac8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8019acc:	2900      	cmp	r1, #0
 8019ace:	f000 8169 	beq.w	8019da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 8019ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019ad4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019ad6:	18aa      	adds	r2, r5, r2
 8019ad8:	59ed      	ldr	r5, [r5, r7]
 8019ada:	6852      	ldr	r2, [r2, #4]
 8019adc:	9508      	str	r5, [sp, #32]
 8019ade:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8019ae2:	920c      	str	r2, [sp, #48]	; 0x30
 8019ae4:	0e15      	lsrs	r5, r2, #24
 8019ae6:	b280      	uxth	r0, r0
 8019ae8:	b289      	uxth	r1, r1
 8019aea:	fb00 fb01 	mul.w	fp, r0, r1
 8019aee:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8019af2:	0100      	lsls	r0, r0, #4
 8019af4:	eba0 090b 	sub.w	r9, r0, fp
 8019af8:	b289      	uxth	r1, r1
 8019afa:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8019afe:	fa1f f989 	uxth.w	r9, r9
 8019b02:	1a52      	subs	r2, r2, r1
 8019b04:	b292      	uxth	r2, r2
 8019b06:	fb09 f008 	mul.w	r0, r9, r8
 8019b0a:	fb02 000c 	mla	r0, r2, ip, r0
 8019b0e:	fb01 000a 	mla	r0, r1, sl, r0
 8019b12:	fb0b 0005 	mla	r0, fp, r5, r0
 8019b16:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019b1a:	2800      	cmp	r0, #0
 8019b1c:	f000 80e0 	beq.w	8019ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 8019b20:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019b24:	d01b      	beq.n	8019b5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8019b26:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019b2a:	fb0c fe0e 	mul.w	lr, ip, lr
 8019b2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019b32:	fb0c fc03 	mul.w	ip, ip, r3
 8019b36:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8019b3a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019b3e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8019b42:	4473      	add	r3, lr
 8019b44:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8019b48:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8019b4c:	0a1b      	lsrs	r3, r3, #8
 8019b4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019b52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019b56:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019b5a:	ea43 030e 	orr.w	r3, r3, lr
 8019b5e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019b62:	d01e      	beq.n	8019ba2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x242>
 8019b64:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019b66:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8019b6a:	fb08 fc0c 	mul.w	ip, r8, ip
 8019b6e:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8019b72:	fb08 f80e 	mul.w	r8, r8, lr
 8019b76:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019b7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019b7e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019b82:	44e6      	add	lr, ip
 8019b84:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8019b88:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8019b8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019b90:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019b94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019b98:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019b9c:	ea4e 0708 	orr.w	r7, lr, r8
 8019ba0:	970b      	str	r7, [sp, #44]	; 0x2c
 8019ba2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019ba6:	d01e      	beq.n	8019be6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x286>
 8019ba8:	9f08      	ldr	r7, [sp, #32]
 8019baa:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8019bae:	fb0a f808 	mul.w	r8, sl, r8
 8019bb2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8019bb6:	fb0a fa0c 	mul.w	sl, sl, ip
 8019bba:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8019bbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019bc2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8019bc6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019bca:	44c6      	add	lr, r8
 8019bcc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019bd0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019bd4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019bd8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019bdc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019be0:	ea4e 070a 	orr.w	r7, lr, sl
 8019be4:	9708      	str	r7, [sp, #32]
 8019be6:	2dff      	cmp	r5, #255	; 0xff
 8019be8:	d01d      	beq.n	8019c26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8019bea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019bec:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8019bf0:	fb05 f808 	mul.w	r8, r5, r8
 8019bf4:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8019bf8:	fb05 f50c 	mul.w	r5, r5, ip
 8019bfc:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8019c00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019c04:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8019c08:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8019c0c:	44c6      	add	lr, r8
 8019c0e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8019c12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019c16:	0a2d      	lsrs	r5, r5, #8
 8019c18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019c1c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019c20:	ea4e 0505 	orr.w	r5, lr, r5
 8019c24:	950c      	str	r5, [sp, #48]	; 0x30
 8019c26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019c28:	9f08      	ldr	r7, [sp, #32]
 8019c2a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019c2e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019c32:	fb09 f505 	mul.w	r5, r9, r5
 8019c36:	fb02 550c 	mla	r5, r2, ip, r5
 8019c3a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8019c3e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019c40:	fb01 550c 	mla	r5, r1, ip, r5
 8019c44:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8019c48:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019c4a:	fb0b 550c 	mla	r5, fp, ip, r5
 8019c4e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8019c52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019c56:	fb09 f90c 	mul.w	r9, r9, ip
 8019c5a:	fb02 9303 	mla	r3, r2, r3, r9
 8019c5e:	9a08      	ldr	r2, [sp, #32]
 8019c60:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8019c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019c66:	fb01 330e 	mla	r3, r1, lr, r3
 8019c6a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8019c6e:	fb0b 3b01 	mla	fp, fp, r1, r3
 8019c72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019c74:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8019c76:	4343      	muls	r3, r0
 8019c78:	0a2d      	lsrs	r5, r5, #8
 8019c7a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8019c7e:	1c58      	adds	r0, r3, #1
 8019c80:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019c84:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8019c88:	ea45 050b 	orr.w	r5, r5, fp
 8019c8c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019c90:	b2ea      	uxtb	r2, r5
 8019c92:	7833      	ldrb	r3, [r6, #0]
 8019c94:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8019c98:	b2c0      	uxtb	r0, r0
 8019c9a:	fb12 f201 	smulbb	r2, r2, r1
 8019c9e:	fb03 2300 	mla	r3, r3, r0, r2
 8019ca2:	b29b      	uxth	r3, r3
 8019ca4:	1c5a      	adds	r2, r3, #1
 8019ca6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019caa:	7872      	ldrb	r2, [r6, #1]
 8019cac:	121b      	asrs	r3, r3, #8
 8019cae:	fb12 f200 	smulbb	r2, r2, r0
 8019cb2:	7033      	strb	r3, [r6, #0]
 8019cb4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8019cb8:	fb03 2301 	mla	r3, r3, r1, r2
 8019cbc:	b29b      	uxth	r3, r3
 8019cbe:	1c5a      	adds	r2, r3, #1
 8019cc0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019cc4:	121b      	asrs	r3, r3, #8
 8019cc6:	7073      	strb	r3, [r6, #1]
 8019cc8:	78b3      	ldrb	r3, [r6, #2]
 8019cca:	0c2d      	lsrs	r5, r5, #16
 8019ccc:	fb13 f000 	smulbb	r0, r3, r0
 8019cd0:	fb05 0501 	mla	r5, r5, r1, r0
 8019cd4:	b2ad      	uxth	r5, r5
 8019cd6:	1c6b      	adds	r3, r5, #1
 8019cd8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8019cdc:	122d      	asrs	r5, r5, #8
 8019cde:	70b5      	strb	r5, [r6, #2]
 8019ce0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019ce2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019ce4:	4413      	add	r3, r2
 8019ce6:	932b      	str	r3, [sp, #172]	; 0xac
 8019ce8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019cea:	441c      	add	r4, r3
 8019cec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019cee:	3b01      	subs	r3, #1
 8019cf0:	3603      	adds	r6, #3
 8019cf2:	9314      	str	r3, [sp, #80]	; 0x50
 8019cf4:	e6bf      	b.n	8019a76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x116>
 8019cf6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019cf8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019cfa:	4413      	add	r3, r2
 8019cfc:	932b      	str	r3, [sp, #172]	; 0xac
 8019cfe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019d00:	441c      	add	r4, r3
 8019d02:	9b06      	ldr	r3, [sp, #24]
 8019d04:	3b01      	subs	r3, #1
 8019d06:	9306      	str	r3, [sp, #24]
 8019d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d0a:	3303      	adds	r3, #3
 8019d0c:	930a      	str	r3, [sp, #40]	; 0x28
 8019d0e:	e662      	b.n	80199d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8019d10:	f47f ae74 	bne.w	80199fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8019d14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	f340 819a 	ble.w	801a050 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f0>
 8019d1c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d24:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019d28:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019d2a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019d2e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019d32:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019d36:	eef0 6a48 	vmov.f32	s13, s16
 8019d3a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019d3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d42:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019d46:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8019d4a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019d4e:	eef0 6a68 	vmov.f32	s13, s17
 8019d52:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019d56:	ee18 2a10 	vmov	r2, s16
 8019d5a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019d5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d62:	ee18 2a90 	vmov	r2, s17
 8019d66:	932d      	str	r3, [sp, #180]	; 0xb4
 8019d68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019d6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d6e:	932e      	str	r3, [sp, #184]	; 0xb8
 8019d70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019d74:	3b01      	subs	r3, #1
 8019d76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d7a:	9312      	str	r3, [sp, #72]	; 0x48
 8019d7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019d7e:	bf08      	it	eq
 8019d80:	4613      	moveq	r3, r2
 8019d82:	ee16 4a90 	vmov	r4, s13
 8019d86:	9306      	str	r3, [sp, #24]
 8019d88:	eef0 8a67 	vmov.f32	s17, s15
 8019d8c:	eeb0 8a47 	vmov.f32	s16, s14
 8019d90:	e61a      	b.n	80199c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019d92:	b151      	cbz	r1, 8019daa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 8019d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019d96:	58aa      	ldr	r2, [r5, r2]
 8019d98:	9208      	str	r2, [sp, #32]
 8019d9a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8019d9e:	25ff      	movs	r5, #255	; 0xff
 8019da0:	46a8      	mov	r8, r5
 8019da2:	e6a0      	b.n	8019ae6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x186>
 8019da4:	25ff      	movs	r5, #255	; 0xff
 8019da6:	46aa      	mov	sl, r5
 8019da8:	e69d      	b.n	8019ae6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x186>
 8019daa:	25ff      	movs	r5, #255	; 0xff
 8019dac:	46aa      	mov	sl, r5
 8019dae:	e7f7      	b.n	8019da0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8019db0:	1c57      	adds	r7, r2, #1
 8019db2:	d195      	bne.n	8019ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 8019db4:	9d07      	ldr	r5, [sp, #28]
 8019db6:	4295      	cmp	r5, r2
 8019db8:	dd92      	ble.n	8019ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 8019dba:	1c5d      	adds	r5, r3, #1
 8019dbc:	db90      	blt.n	8019ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 8019dbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8019dc0:	429d      	cmp	r5, r3
 8019dc2:	dd8d      	ble.n	8019ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 8019dc4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019dc6:	9201      	str	r2, [sp, #4]
 8019dc8:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8019dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019dce:	9300      	str	r3, [sp, #0]
 8019dd0:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8019dd4:	9b07      	ldr	r3, [sp, #28]
 8019dd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019dd8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019dda:	4631      	mov	r1, r6
 8019ddc:	f7ff fc68 	bl	80196b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8019de0:	e77e      	b.n	8019ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 8019de2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019de4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019de6:	9d07      	ldr	r5, [sp, #28]
 8019de8:	1412      	asrs	r2, r2, #16
 8019dea:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8019dee:	1423      	asrs	r3, r4, #16
 8019df0:	fb05 2303 	mla	r3, r5, r3, r2
 8019df4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019df6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019dfe:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8019e02:	0e1e      	lsrs	r6, r3, #24
 8019e04:	2900      	cmp	r1, #0
 8019e06:	f000 8114 	beq.w	801a032 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d2>
 8019e0a:	686a      	ldr	r2, [r5, #4]
 8019e0c:	920d      	str	r2, [sp, #52]	; 0x34
 8019e0e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8019e12:	2800      	cmp	r0, #0
 8019e14:	f000 8116 	beq.w	801a044 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e4>
 8019e18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e1a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019e1c:	18aa      	adds	r2, r5, r2
 8019e1e:	59ed      	ldr	r5, [r5, r7]
 8019e20:	6852      	ldr	r2, [r2, #4]
 8019e22:	9509      	str	r5, [sp, #36]	; 0x24
 8019e24:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019e28:	920f      	str	r2, [sp, #60]	; 0x3c
 8019e2a:	0e15      	lsrs	r5, r2, #24
 8019e2c:	b289      	uxth	r1, r1
 8019e2e:	b280      	uxth	r0, r0
 8019e30:	fb01 fa00 	mul.w	sl, r1, r0
 8019e34:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8019e38:	0109      	lsls	r1, r1, #4
 8019e3a:	eba1 080a 	sub.w	r8, r1, sl
 8019e3e:	b280      	uxth	r0, r0
 8019e40:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8019e44:	fa1f f888 	uxth.w	r8, r8
 8019e48:	1a12      	subs	r2, r2, r0
 8019e4a:	b292      	uxth	r2, r2
 8019e4c:	fb08 f10c 	mul.w	r1, r8, ip
 8019e50:	fb02 1106 	mla	r1, r2, r6, r1
 8019e54:	fb00 1109 	mla	r1, r0, r9, r1
 8019e58:	fb0a 1105 	mla	r1, sl, r5, r1
 8019e5c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019e60:	2900      	cmp	r1, #0
 8019e62:	f000 80da 	beq.w	801a01a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ba>
 8019e66:	2eff      	cmp	r6, #255	; 0xff
 8019e68:	d016      	beq.n	8019e98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x538>
 8019e6a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8019e6e:	4377      	muls	r7, r6
 8019e70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019e74:	435e      	muls	r6, r3
 8019e76:	0a3b      	lsrs	r3, r7, #8
 8019e78:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019e7c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019e80:	443b      	add	r3, r7
 8019e82:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8019e86:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8019e8a:	0a1b      	lsrs	r3, r3, #8
 8019e8c:	0a3f      	lsrs	r7, r7, #8
 8019e8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019e92:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019e96:	433b      	orrs	r3, r7
 8019e98:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019e9c:	d01d      	beq.n	8019eda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x57a>
 8019e9e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8019ea0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8019ea2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019ea6:	fb0c f606 	mul.w	r6, ip, r6
 8019eaa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019eae:	fb0c fc07 	mul.w	ip, ip, r7
 8019eb2:	0a37      	lsrs	r7, r6, #8
 8019eb4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019eb8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8019ebc:	4437      	add	r7, r6
 8019ebe:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8019ec2:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8019ec6:	0a3f      	lsrs	r7, r7, #8
 8019ec8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019ecc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019ed0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019ed4:	ea47 060c 	orr.w	r6, r7, ip
 8019ed8:	960d      	str	r6, [sp, #52]	; 0x34
 8019eda:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019ede:	d01d      	beq.n	8019f1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5bc>
 8019ee0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8019ee2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019ee6:	fb09 fc0c 	mul.w	ip, r9, ip
 8019eea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019eee:	fb09 f906 	mul.w	r9, r9, r6
 8019ef2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8019ef6:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8019efa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019efe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019f02:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8019f06:	4467      	add	r7, ip
 8019f08:	0a3f      	lsrs	r7, r7, #8
 8019f0a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019f0e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019f12:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019f16:	ea47 0609 	orr.w	r6, r7, r9
 8019f1a:	9609      	str	r6, [sp, #36]	; 0x24
 8019f1c:	2dff      	cmp	r5, #255	; 0xff
 8019f1e:	d01a      	beq.n	8019f56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f6>
 8019f20:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019f22:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019f26:	fb05 fc0c 	mul.w	ip, r5, ip
 8019f2a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019f2e:	4375      	muls	r5, r6
 8019f30:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8019f34:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019f38:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019f3c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8019f40:	4467      	add	r7, ip
 8019f42:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019f46:	0a3f      	lsrs	r7, r7, #8
 8019f48:	0a2d      	lsrs	r5, r5, #8
 8019f4a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019f4e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019f52:	433d      	orrs	r5, r7
 8019f54:	950f      	str	r5, [sp, #60]	; 0x3c
 8019f56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019f58:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019f5c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8019f60:	fb08 f505 	mul.w	r5, r8, r5
 8019f64:	fb02 5506 	mla	r5, r2, r6, r5
 8019f68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8019f6a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019f6e:	fb00 5506 	mla	r5, r0, r6, r5
 8019f72:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019f74:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019f78:	fb0a 5506 	mla	r5, sl, r6, r5
 8019f7c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8019f7e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019f82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019f86:	fb08 f806 	mul.w	r8, r8, r6
 8019f8a:	fb02 8303 	mla	r3, r2, r3, r8
 8019f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f90:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8019f94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019f96:	fb00 3307 	mla	r3, r0, r7, r3
 8019f9a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019f9e:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8019fa2:	0a2d      	lsrs	r5, r5, #8
 8019fa4:	fb01 f30b 	mul.w	r3, r1, fp
 8019fa8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019fac:	1c59      	adds	r1, r3, #1
 8019fae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019fb2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019fb6:	ea45 050c 	orr.w	r5, r5, ip
 8019fba:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019fbe:	b2ea      	uxtb	r2, r5
 8019fc0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019fc4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8019fc8:	b2c9      	uxtb	r1, r1
 8019fca:	fb12 f20b 	smulbb	r2, r2, fp
 8019fce:	fb03 2301 	mla	r3, r3, r1, r2
 8019fd2:	b29b      	uxth	r3, r3
 8019fd4:	1c5a      	adds	r2, r3, #1
 8019fd6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019fda:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8019fde:	121b      	asrs	r3, r3, #8
 8019fe0:	fb12 f201 	smulbb	r2, r2, r1
 8019fe4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8019fe8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8019fec:	fb03 230b 	mla	r3, r3, fp, r2
 8019ff0:	b29b      	uxth	r3, r3
 8019ff2:	1c5a      	adds	r2, r3, #1
 8019ff4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019ff8:	121b      	asrs	r3, r3, #8
 8019ffa:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8019ffe:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a002:	0c2d      	lsrs	r5, r5, #16
 801a004:	fb13 f101 	smulbb	r1, r3, r1
 801a008:	fb05 150b 	mla	r5, r5, fp, r1
 801a00c:	b2ad      	uxth	r5, r5
 801a00e:	1c69      	adds	r1, r5, #1
 801a010:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801a014:	122d      	asrs	r5, r5, #8
 801a016:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a01a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a01c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a01e:	4413      	add	r3, r2
 801a020:	932b      	str	r3, [sp, #172]	; 0xac
 801a022:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a024:	441c      	add	r4, r3
 801a026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a028:	3b01      	subs	r3, #1
 801a02a:	f10e 0e03 	add.w	lr, lr, #3
 801a02e:	9313      	str	r3, [sp, #76]	; 0x4c
 801a030:	e500      	b.n	8019a34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801a032:	b150      	cbz	r0, 801a04a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 801a034:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a036:	58aa      	ldr	r2, [r5, r2]
 801a038:	9209      	str	r2, [sp, #36]	; 0x24
 801a03a:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801a03e:	25ff      	movs	r5, #255	; 0xff
 801a040:	46ac      	mov	ip, r5
 801a042:	e6f3      	b.n	8019e2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4cc>
 801a044:	25ff      	movs	r5, #255	; 0xff
 801a046:	46a9      	mov	r9, r5
 801a048:	e6f0      	b.n	8019e2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4cc>
 801a04a:	25ff      	movs	r5, #255	; 0xff
 801a04c:	46a9      	mov	r9, r5
 801a04e:	e7f7      	b.n	801a040 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 801a050:	b019      	add	sp, #100	; 0x64
 801a052:	ecbd 8b08 	vpop	{d8-d11}
 801a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a05c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a060:	b085      	sub	sp, #20
 801a062:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801a066:	7888      	ldrb	r0, [r1, #2]
 801a068:	9000      	str	r0, [sp, #0]
 801a06a:	7848      	ldrb	r0, [r1, #1]
 801a06c:	9001      	str	r0, [sp, #4]
 801a06e:	fb04 c603 	mla	r6, r4, r3, ip
 801a072:	7808      	ldrb	r0, [r1, #0]
 801a074:	9002      	str	r0, [sp, #8]
 801a076:	4691      	mov	r9, r2
 801a078:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801a07c:	9a00      	ldr	r2, [sp, #0]
 801a07e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801a082:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801a086:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801a08a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801a08e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801a092:	9a01      	ldr	r2, [sp, #4]
 801a094:	2c00      	cmp	r4, #0
 801a096:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801a09a:	db3a      	blt.n	801a112 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801a09c:	45a0      	cmp	r8, r4
 801a09e:	dd38      	ble.n	801a112 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801a0a0:	f1bc 0f00 	cmp.w	ip, #0
 801a0a4:	db33      	blt.n	801a10e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801a0a6:	4563      	cmp	r3, ip
 801a0a8:	dd31      	ble.n	801a10e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801a0aa:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801a0ae:	f11c 0601 	adds.w	r6, ip, #1
 801a0b2:	d431      	bmi.n	801a118 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801a0b4:	42b3      	cmp	r3, r6
 801a0b6:	dd2f      	ble.n	801a118 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801a0b8:	b375      	cbz	r5, 801a118 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801a0ba:	f8de 6004 	ldr.w	r6, [lr, #4]
 801a0be:	3401      	adds	r4, #1
 801a0c0:	d42e      	bmi.n	801a120 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801a0c2:	45a0      	cmp	r8, r4
 801a0c4:	dd2c      	ble.n	801a120 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801a0c6:	b35f      	cbz	r7, 801a120 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801a0c8:	f1bc 0f00 	cmp.w	ip, #0
 801a0cc:	db26      	blt.n	801a11c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801a0ce:	4563      	cmp	r3, ip
 801a0d0:	dd24      	ble.n	801a11c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801a0d2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801a0d6:	f11c 0c01 	adds.w	ip, ip, #1
 801a0da:	d405      	bmi.n	801a0e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801a0dc:	4563      	cmp	r3, ip
 801a0de:	dd03      	ble.n	801a0e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801a0e0:	b115      	cbz	r5, 801a0e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801a0e2:	3301      	adds	r3, #1
 801a0e4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801a0e8:	2d0f      	cmp	r5, #15
 801a0ea:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801a0ee:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a0f2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a0f6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801a0fa:	d801      	bhi.n	801a100 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 801a0fc:	2f0f      	cmp	r7, #15
 801a0fe:	d911      	bls.n	801a124 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 801a100:	4b76      	ldr	r3, [pc, #472]	; (801a2dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801a102:	4a77      	ldr	r2, [pc, #476]	; (801a2e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 801a104:	4877      	ldr	r0, [pc, #476]	; (801a2e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 801a106:	f240 11a5 	movw	r1, #421	; 0x1a5
 801a10a:	f001 fc43 	bl	801b994 <__assert_func>
 801a10e:	4602      	mov	r2, r0
 801a110:	e7cd      	b.n	801a0ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 801a112:	4606      	mov	r6, r0
 801a114:	4602      	mov	r2, r0
 801a116:	e7d2      	b.n	801a0be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801a118:	4606      	mov	r6, r0
 801a11a:	e7d0      	b.n	801a0be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801a11c:	4604      	mov	r4, r0
 801a11e:	e7da      	b.n	801a0d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 801a120:	4604      	mov	r4, r0
 801a122:	e7e1      	b.n	801a0e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801a124:	b2ab      	uxth	r3, r5
 801a126:	b2bf      	uxth	r7, r7
 801a128:	fb03 fe07 	mul.w	lr, r3, r7
 801a12c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a130:	011b      	lsls	r3, r3, #4
 801a132:	eba3 0c0e 	sub.w	ip, r3, lr
 801a136:	b2bf      	uxth	r7, r7
 801a138:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801a13c:	fa1f fc8c 	uxth.w	ip, ip
 801a140:	1bed      	subs	r5, r5, r7
 801a142:	b2ad      	uxth	r5, r5
 801a144:	fb0c f30a 	mul.w	r3, ip, sl
 801a148:	fb05 330b 	mla	r3, r5, fp, r3
 801a14c:	fb07 3309 	mla	r3, r7, r9, r3
 801a150:	fb0e 3308 	mla	r3, lr, r8, r3
 801a154:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a158:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a15c:	9303      	str	r3, [sp, #12]
 801a15e:	d018      	beq.n	801a192 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x136>
 801a160:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801a164:	fb0b f303 	mul.w	r3, fp, r3
 801a168:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a16c:	fb0b fb02 	mul.w	fp, fp, r2
 801a170:	0a1a      	lsrs	r2, r3, #8
 801a172:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a176:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801a17a:	441a      	add	r2, r3
 801a17c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801a180:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801a184:	0a12      	lsrs	r2, r2, #8
 801a186:	0a1b      	lsrs	r3, r3, #8
 801a188:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a18c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a190:	431a      	orrs	r2, r3
 801a192:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a196:	d019      	beq.n	801a1cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x170>
 801a198:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801a19c:	fb0a fb0b 	mul.w	fp, sl, fp
 801a1a0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a1a4:	fb0a fa06 	mul.w	sl, sl, r6
 801a1a8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801a1ac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a1b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a1b4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801a1b8:	445e      	add	r6, fp
 801a1ba:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801a1be:	0a36      	lsrs	r6, r6, #8
 801a1c0:	0a1b      	lsrs	r3, r3, #8
 801a1c2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a1c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a1ca:	431e      	orrs	r6, r3
 801a1cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a1d0:	d019      	beq.n	801a206 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1aa>
 801a1d2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a1d6:	fb09 fa0a 	mul.w	sl, r9, sl
 801a1da:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a1de:	fb09 f904 	mul.w	r9, r9, r4
 801a1e2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a1e6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a1ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a1ee:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801a1f2:	4454      	add	r4, sl
 801a1f4:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801a1f8:	0a24      	lsrs	r4, r4, #8
 801a1fa:	0a1b      	lsrs	r3, r3, #8
 801a1fc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a200:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a204:	431c      	orrs	r4, r3
 801a206:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a20a:	d019      	beq.n	801a240 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e4>
 801a20c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801a210:	fb08 f909 	mul.w	r9, r8, r9
 801a214:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a218:	fb08 f800 	mul.w	r8, r8, r0
 801a21c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801a220:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a224:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a228:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801a22c:	4448      	add	r0, r9
 801a22e:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801a232:	0a00      	lsrs	r0, r0, #8
 801a234:	0a1b      	lsrs	r3, r3, #8
 801a236:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a23a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a23e:	4318      	orrs	r0, r3
 801a240:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801a244:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a248:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801a24c:	fb0c f808 	mul.w	r8, ip, r8
 801a250:	fb0c f606 	mul.w	r6, ip, r6
 801a254:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a258:	fb05 8803 	mla	r8, r5, r3, r8
 801a25c:	fb05 6202 	mla	r2, r5, r2, r6
 801a260:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801a264:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a268:	fb07 8803 	mla	r8, r7, r3, r8
 801a26c:	fb07 2704 	mla	r7, r7, r4, r2
 801a270:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801a274:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a278:	fb0e 8303 	mla	r3, lr, r3, r8
 801a27c:	fb0e 7e00 	mla	lr, lr, r0, r7
 801a280:	0a1b      	lsrs	r3, r3, #8
 801a282:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a286:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a28a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a28e:	ea43 0e0e 	orr.w	lr, r3, lr
 801a292:	9b03      	ldr	r3, [sp, #12]
 801a294:	9802      	ldr	r0, [sp, #8]
 801a296:	43db      	mvns	r3, r3
 801a298:	b2db      	uxtb	r3, r3
 801a29a:	4358      	muls	r0, r3
 801a29c:	1c42      	adds	r2, r0, #1
 801a29e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a2a2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801a2a6:	700a      	strb	r2, [r1, #0]
 801a2a8:	9a01      	ldr	r2, [sp, #4]
 801a2aa:	435a      	muls	r2, r3
 801a2ac:	1c50      	adds	r0, r2, #1
 801a2ae:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a2b2:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801a2b6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a2ba:	704a      	strb	r2, [r1, #1]
 801a2bc:	9a00      	ldr	r2, [sp, #0]
 801a2be:	435a      	muls	r2, r3
 801a2c0:	4613      	mov	r3, r2
 801a2c2:	3201      	adds	r2, #1
 801a2c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a2c8:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a2cc:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a2d0:	f881 e002 	strb.w	lr, [r1, #2]
 801a2d4:	b005      	add	sp, #20
 801a2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2da:	bf00      	nop
 801a2dc:	0801f881 	.word	0x0801f881
 801a2e0:	0801fd76 	.word	0x0801fd76
 801a2e4:	0801f94a 	.word	0x0801f94a

0801a2e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2ec:	ed2d 8b08 	vpush	{d8-d11}
 801a2f0:	b097      	sub	sp, #92	; 0x5c
 801a2f2:	eeb0 aa40 	vmov.f32	s20, s0
 801a2f6:	9306      	str	r3, [sp, #24]
 801a2f8:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801a2fc:	9307      	str	r3, [sp, #28]
 801a2fe:	9214      	str	r2, [sp, #80]	; 0x50
 801a300:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801a304:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a306:	9112      	str	r1, [sp, #72]	; 0x48
 801a308:	9310      	str	r3, [sp, #64]	; 0x40
 801a30a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801a30e:	9015      	str	r0, [sp, #84]	; 0x54
 801a310:	6850      	ldr	r0, [r2, #4]
 801a312:	6812      	ldr	r2, [r2, #0]
 801a314:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801a316:	fb00 1303 	mla	r3, r0, r3, r1
 801a31a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a31e:	18d3      	adds	r3, r2, r3
 801a320:	930a      	str	r3, [sp, #40]	; 0x28
 801a322:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	9311      	str	r3, [sp, #68]	; 0x44
 801a328:	9b07      	ldr	r3, [sp, #28]
 801a32a:	009b      	lsls	r3, r3, #2
 801a32c:	eef0 9a60 	vmov.f32	s19, s1
 801a330:	eeb0 9a41 	vmov.f32	s18, s2
 801a334:	eeb0 8a62 	vmov.f32	s16, s5
 801a338:	eef0 8a43 	vmov.f32	s17, s6
 801a33c:	eef0 ba44 	vmov.f32	s23, s8
 801a340:	eeb0 ba64 	vmov.f32	s22, s9
 801a344:	eef0 aa45 	vmov.f32	s21, s10
 801a348:	930e      	str	r3, [sp, #56]	; 0x38
 801a34a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	dc03      	bgt.n	801a358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801a350:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a352:	2b00      	cmp	r3, #0
 801a354:	f340 832e 	ble.w	801a9b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801a358:	9b06      	ldr	r3, [sp, #24]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	f340 8187 	ble.w	801a66e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801a360:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a362:	1412      	asrs	r2, r2, #16
 801a364:	ea4f 4324 	mov.w	r3, r4, asr #16
 801a368:	d42f      	bmi.n	801a3ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801a36a:	9807      	ldr	r0, [sp, #28]
 801a36c:	1c51      	adds	r1, r2, #1
 801a36e:	4288      	cmp	r0, r1
 801a370:	dd2e      	ble.n	801a3d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801a372:	2b00      	cmp	r3, #0
 801a374:	db2c      	blt.n	801a3d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801a376:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a378:	1c59      	adds	r1, r3, #1
 801a37a:	4288      	cmp	r0, r1
 801a37c:	dd28      	ble.n	801a3d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801a37e:	9b06      	ldr	r3, [sp, #24]
 801a380:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a382:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a384:	3b01      	subs	r3, #1
 801a386:	fb02 1203 	mla	r2, r2, r3, r1
 801a38a:	1412      	asrs	r2, r2, #16
 801a38c:	d42b      	bmi.n	801a3e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801a38e:	9907      	ldr	r1, [sp, #28]
 801a390:	3201      	adds	r2, #1
 801a392:	4291      	cmp	r1, r2
 801a394:	dd27      	ble.n	801a3e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801a396:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801a398:	fb02 4303 	mla	r3, r2, r3, r4
 801a39c:	141b      	asrs	r3, r3, #16
 801a39e:	d422      	bmi.n	801a3e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801a3a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a3a2:	3301      	adds	r3, #1
 801a3a4:	429a      	cmp	r2, r3
 801a3a6:	dd1e      	ble.n	801a3e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801a3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3aa:	f8dd b018 	ldr.w	fp, [sp, #24]
 801a3ae:	1cdd      	adds	r5, r3, #3
 801a3b0:	f1bb 0f00 	cmp.w	fp, #0
 801a3b4:	f300 81c4 	bgt.w	801a740 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x458>
 801a3b8:	9b06      	ldr	r3, [sp, #24]
 801a3ba:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a3c4:	4423      	add	r3, r4
 801a3c6:	930a      	str	r3, [sp, #40]	; 0x28
 801a3c8:	e153      	b.n	801a672 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801a3ca:	1c51      	adds	r1, r2, #1
 801a3cc:	f040 8142 	bne.w	801a654 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801a3d0:	9907      	ldr	r1, [sp, #28]
 801a3d2:	428a      	cmp	r2, r1
 801a3d4:	f280 813e 	bge.w	801a654 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801a3d8:	1c5a      	adds	r2, r3, #1
 801a3da:	f2c0 813b 	blt.w	801a654 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801a3de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a3e0:	4293      	cmp	r3, r2
 801a3e2:	f280 8137 	bge.w	801a654 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801a3e6:	9b06      	ldr	r3, [sp, #24]
 801a3e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a3ea:	9313      	str	r3, [sp, #76]	; 0x4c
 801a3ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	dde2      	ble.n	801a3b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801a3f2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a3f4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a3f6:	1409      	asrs	r1, r1, #16
 801a3f8:	ea4f 4324 	mov.w	r3, r4, asr #16
 801a3fc:	f3c2 3203 	ubfx	r2, r2, #12, #4
 801a400:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801a404:	f100 8186 	bmi.w	801a714 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42c>
 801a408:	9f07      	ldr	r7, [sp, #28]
 801a40a:	1c4e      	adds	r6, r1, #1
 801a40c:	42b7      	cmp	r7, r6
 801a40e:	f340 8183 	ble.w	801a718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801a412:	2b00      	cmp	r3, #0
 801a414:	f2c0 8180 	blt.w	801a718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801a418:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a41a:	1c5e      	adds	r6, r3, #1
 801a41c:	42b7      	cmp	r7, r6
 801a41e:	f340 817b 	ble.w	801a718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801a422:	9e07      	ldr	r6, [sp, #28]
 801a424:	fb03 1306 	mla	r3, r3, r6, r1
 801a428:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a42a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801a42e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801a432:	0e1f      	lsrs	r7, r3, #24
 801a434:	2a00      	cmp	r2, #0
 801a436:	f000 815b 	beq.w	801a6f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x408>
 801a43a:	6871      	ldr	r1, [r6, #4]
 801a43c:	910b      	str	r1, [sp, #44]	; 0x2c
 801a43e:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801a442:	2800      	cmp	r0, #0
 801a444:	f000 815d 	beq.w	801a702 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801a448:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a44a:	eb06 0c01 	add.w	ip, r6, r1
 801a44e:	5876      	ldr	r6, [r6, r1]
 801a450:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801a454:	9608      	str	r6, [sp, #32]
 801a456:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801a45a:	910c      	str	r1, [sp, #48]	; 0x30
 801a45c:	0e0e      	lsrs	r6, r1, #24
 801a45e:	b292      	uxth	r2, r2
 801a460:	b280      	uxth	r0, r0
 801a462:	fb02 fa00 	mul.w	sl, r2, r0
 801a466:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801a46a:	0112      	lsls	r2, r2, #4
 801a46c:	eba2 080a 	sub.w	r8, r2, sl
 801a470:	b280      	uxth	r0, r0
 801a472:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a476:	fa1f f888 	uxth.w	r8, r8
 801a47a:	1a09      	subs	r1, r1, r0
 801a47c:	b289      	uxth	r1, r1
 801a47e:	fb08 f20e 	mul.w	r2, r8, lr
 801a482:	fb01 2207 	mla	r2, r1, r7, r2
 801a486:	fb00 2209 	mla	r2, r0, r9, r2
 801a48a:	fb0a 2206 	mla	r2, sl, r6, r2
 801a48e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a492:	2a00      	cmp	r2, #0
 801a494:	f000 80d3 	beq.w	801a63e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801a498:	2fff      	cmp	r7, #255	; 0xff
 801a49a:	d01a      	beq.n	801a4d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801a49c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a4a0:	fb07 fc0c 	mul.w	ip, r7, ip
 801a4a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a4a8:	435f      	muls	r7, r3
 801a4aa:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801a4ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a4b2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a4b6:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801a4ba:	4463      	add	r3, ip
 801a4bc:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801a4c0:	0a1b      	lsrs	r3, r3, #8
 801a4c2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a4c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a4ca:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a4ce:	ea43 030b 	orr.w	r3, r3, fp
 801a4d2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a4d6:	d01e      	beq.n	801a516 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 801a4d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801a4da:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801a4de:	fb0e fb0b 	mul.w	fp, lr, fp
 801a4e2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a4e6:	fb0e fe07 	mul.w	lr, lr, r7
 801a4ea:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801a4ee:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801a4f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a4f6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a4fa:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801a4fe:	44dc      	add	ip, fp
 801a500:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a504:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a508:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a50c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a510:	ea4c 070e 	orr.w	r7, ip, lr
 801a514:	970b      	str	r7, [sp, #44]	; 0x2c
 801a516:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a51a:	d01e      	beq.n	801a55a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a51c:	9f08      	ldr	r7, [sp, #32]
 801a51e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801a522:	fb09 fe0e 	mul.w	lr, r9, lr
 801a526:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a52a:	fb09 f907 	mul.w	r9, r9, r7
 801a52e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801a532:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801a536:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a53a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801a53e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801a542:	44f4      	add	ip, lr
 801a544:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a548:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a54c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a550:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a554:	ea4c 0709 	orr.w	r7, ip, r9
 801a558:	9708      	str	r7, [sp, #32]
 801a55a:	2eff      	cmp	r6, #255	; 0xff
 801a55c:	d01c      	beq.n	801a598 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801a55e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801a560:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801a564:	fb06 fe0e 	mul.w	lr, r6, lr
 801a568:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a56c:	437e      	muls	r6, r7
 801a56e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801a572:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a576:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801a57a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801a57e:	44f4      	add	ip, lr
 801a580:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801a584:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a588:	0a36      	lsrs	r6, r6, #8
 801a58a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a58e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a592:	ea4c 0606 	orr.w	r6, ip, r6
 801a596:	960c      	str	r6, [sp, #48]	; 0x30
 801a598:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801a59a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a59e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801a5a2:	fb08 f606 	mul.w	r6, r8, r6
 801a5a6:	fb01 6607 	mla	r6, r1, r7, r6
 801a5aa:	9f08      	ldr	r7, [sp, #32]
 801a5ac:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a5b0:	fb00 6607 	mla	r6, r0, r7, r6
 801a5b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801a5b6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a5ba:	fb0a 6607 	mla	r6, sl, r7, r6
 801a5be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801a5c0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a5c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a5c8:	fb08 f807 	mul.w	r8, r8, r7
 801a5cc:	fb01 8303 	mla	r3, r1, r3, r8
 801a5d0:	9908      	ldr	r1, [sp, #32]
 801a5d2:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801a5d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a5d8:	fb00 330c 	mla	r3, r0, ip, r3
 801a5dc:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801a5e0:	fb0a 3a00 	mla	sl, sl, r0, r3
 801a5e4:	0a36      	lsrs	r6, r6, #8
 801a5e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a5ea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a5ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a5f2:	ea46 060a 	orr.w	r6, r6, sl
 801a5f6:	2aff      	cmp	r2, #255	; 0xff
 801a5f8:	b2f0      	uxtb	r0, r6
 801a5fa:	f3c6 2107 	ubfx	r1, r6, #8, #8
 801a5fe:	ea4f 4616 	mov.w	r6, r6, lsr #16
 801a602:	f000 8084 	beq.w	801a70e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x426>
 801a606:	782b      	ldrb	r3, [r5, #0]
 801a608:	43d2      	mvns	r2, r2
 801a60a:	b2d2      	uxtb	r2, r2
 801a60c:	fb03 f702 	mul.w	r7, r3, r2
 801a610:	1c7b      	adds	r3, r7, #1
 801a612:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801a616:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801a61a:	702b      	strb	r3, [r5, #0]
 801a61c:	786b      	ldrb	r3, [r5, #1]
 801a61e:	fb03 f002 	mul.w	r0, r3, r2
 801a622:	1c43      	adds	r3, r0, #1
 801a624:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a628:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a62c:	706b      	strb	r3, [r5, #1]
 801a62e:	78ab      	ldrb	r3, [r5, #2]
 801a630:	4353      	muls	r3, r2
 801a632:	1c5a      	adds	r2, r3, #1
 801a634:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a638:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801a63c:	70ae      	strb	r6, [r5, #2]
 801a63e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a640:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a642:	4413      	add	r3, r2
 801a644:	9329      	str	r3, [sp, #164]	; 0xa4
 801a646:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a648:	441c      	add	r4, r3
 801a64a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a64c:	3b01      	subs	r3, #1
 801a64e:	3503      	adds	r5, #3
 801a650:	9313      	str	r3, [sp, #76]	; 0x4c
 801a652:	e6cb      	b.n	801a3ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801a654:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a656:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a658:	4413      	add	r3, r2
 801a65a:	9329      	str	r3, [sp, #164]	; 0xa4
 801a65c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a65e:	441c      	add	r4, r3
 801a660:	9b06      	ldr	r3, [sp, #24]
 801a662:	3b01      	subs	r3, #1
 801a664:	9306      	str	r3, [sp, #24]
 801a666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a668:	3303      	adds	r3, #3
 801a66a:	930a      	str	r3, [sp, #40]	; 0x28
 801a66c:	e674      	b.n	801a358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801a66e:	f47f ae86 	bne.w	801a37e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801a672:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a674:	2b00      	cmp	r3, #0
 801a676:	f340 819d 	ble.w	801a9b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801a67a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a67e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a682:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a686:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a688:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a68c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a690:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a694:	eef0 6a48 	vmov.f32	s13, s16
 801a698:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a69c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a6a0:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a6a4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801a6a8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a6ac:	eef0 6a68 	vmov.f32	s13, s17
 801a6b0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a6b4:	ee18 2a10 	vmov	r2, s16
 801a6b8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a6bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801a6c0:	ee18 2a90 	vmov	r2, s17
 801a6c4:	932b      	str	r3, [sp, #172]	; 0xac
 801a6c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a6c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801a6cc:	932c      	str	r3, [sp, #176]	; 0xb0
 801a6ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a6d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a6d2:	3b01      	subs	r3, #1
 801a6d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a6d8:	9312      	str	r3, [sp, #72]	; 0x48
 801a6da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a6dc:	bf08      	it	eq
 801a6de:	4613      	moveq	r3, r2
 801a6e0:	ee16 4a90 	vmov	r4, s13
 801a6e4:	9306      	str	r3, [sp, #24]
 801a6e6:	eef0 8a67 	vmov.f32	s17, s15
 801a6ea:	eeb0 8a47 	vmov.f32	s16, s14
 801a6ee:	e62c      	b.n	801a34a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801a6f0:	b150      	cbz	r0, 801a708 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x420>
 801a6f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a6f4:	5871      	ldr	r1, [r6, r1]
 801a6f6:	9108      	str	r1, [sp, #32]
 801a6f8:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801a6fc:	26ff      	movs	r6, #255	; 0xff
 801a6fe:	46b6      	mov	lr, r6
 801a700:	e6ad      	b.n	801a45e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x176>
 801a702:	26ff      	movs	r6, #255	; 0xff
 801a704:	46b1      	mov	r9, r6
 801a706:	e6aa      	b.n	801a45e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x176>
 801a708:	26ff      	movs	r6, #255	; 0xff
 801a70a:	46b1      	mov	r9, r6
 801a70c:	e7f7      	b.n	801a6fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 801a70e:	7028      	strb	r0, [r5, #0]
 801a710:	7069      	strb	r1, [r5, #1]
 801a712:	e793      	b.n	801a63c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801a714:	1c4f      	adds	r7, r1, #1
 801a716:	d192      	bne.n	801a63e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801a718:	9e07      	ldr	r6, [sp, #28]
 801a71a:	428e      	cmp	r6, r1
 801a71c:	dd8f      	ble.n	801a63e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801a71e:	1c5e      	adds	r6, r3, #1
 801a720:	db8d      	blt.n	801a63e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801a722:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a724:	429e      	cmp	r6, r3
 801a726:	dd8a      	ble.n	801a63e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801a728:	e9cd 2003 	strd	r2, r0, [sp, #12]
 801a72c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a730:	9600      	str	r6, [sp, #0]
 801a732:	9b07      	ldr	r3, [sp, #28]
 801a734:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a736:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a738:	4629      	mov	r1, r5
 801a73a:	f7ff fc8f 	bl	801a05c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801a73e:	e77e      	b.n	801a63e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801a740:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a742:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a744:	9e07      	ldr	r6, [sp, #28]
 801a746:	1409      	asrs	r1, r1, #16
 801a748:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a74c:	1423      	asrs	r3, r4, #16
 801a74e:	fb06 1303 	mla	r3, r6, r3, r1
 801a752:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a754:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801a758:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801a75c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801a760:	0e1f      	lsrs	r7, r3, #24
 801a762:	2a00      	cmp	r2, #0
 801a764:	f000 8112 	beq.w	801a98c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 801a768:	6871      	ldr	r1, [r6, #4]
 801a76a:	910d      	str	r1, [sp, #52]	; 0x34
 801a76c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801a770:	2800      	cmp	r0, #0
 801a772:	f000 8114 	beq.w	801a99e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 801a776:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a778:	eb06 0c01 	add.w	ip, r6, r1
 801a77c:	5876      	ldr	r6, [r6, r1]
 801a77e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801a782:	9609      	str	r6, [sp, #36]	; 0x24
 801a784:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801a788:	910f      	str	r1, [sp, #60]	; 0x3c
 801a78a:	0e0e      	lsrs	r6, r1, #24
 801a78c:	b292      	uxth	r2, r2
 801a78e:	b280      	uxth	r0, r0
 801a790:	fb02 fa00 	mul.w	sl, r2, r0
 801a794:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801a798:	0112      	lsls	r2, r2, #4
 801a79a:	eba2 080a 	sub.w	r8, r2, sl
 801a79e:	b280      	uxth	r0, r0
 801a7a0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a7a4:	fa1f f888 	uxth.w	r8, r8
 801a7a8:	1a09      	subs	r1, r1, r0
 801a7aa:	b289      	uxth	r1, r1
 801a7ac:	fb08 f20e 	mul.w	r2, r8, lr
 801a7b0:	fb01 2207 	mla	r2, r1, r7, r2
 801a7b4:	fb00 2209 	mla	r2, r0, r9, r2
 801a7b8:	fb0a 2206 	mla	r2, sl, r6, r2
 801a7bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a7c0:	2a00      	cmp	r2, #0
 801a7c2:	f000 80d9 	beq.w	801a978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 801a7c6:	2fff      	cmp	r7, #255	; 0xff
 801a7c8:	d01a      	beq.n	801a800 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x518>
 801a7ca:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a7ce:	fb07 fc0c 	mul.w	ip, r7, ip
 801a7d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a7d6:	435f      	muls	r7, r3
 801a7d8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801a7dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a7e0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a7e4:	4463      	add	r3, ip
 801a7e6:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801a7ea:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801a7ee:	0a1b      	lsrs	r3, r3, #8
 801a7f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a7f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a7f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a7fc:	ea43 030c 	orr.w	r3, r3, ip
 801a800:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a804:	d021      	beq.n	801a84a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x562>
 801a806:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a808:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a80c:	fb0e f707 	mul.w	r7, lr, r7
 801a810:	9713      	str	r7, [sp, #76]	; 0x4c
 801a812:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a814:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801a818:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801a81a:	fb0e fe0c 	mul.w	lr, lr, ip
 801a81e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a822:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a826:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a82a:	44bc      	add	ip, r7
 801a82c:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801a830:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801a834:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a838:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a83c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a840:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a844:	ea4c 070e 	orr.w	r7, ip, lr
 801a848:	970d      	str	r7, [sp, #52]	; 0x34
 801a84a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a84e:	d01e      	beq.n	801a88e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a6>
 801a850:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a852:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801a856:	fb09 fe0e 	mul.w	lr, r9, lr
 801a85a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a85e:	fb09 f907 	mul.w	r9, r9, r7
 801a862:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801a866:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801a86a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a86e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801a872:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801a876:	44f4      	add	ip, lr
 801a878:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a87c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a880:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a884:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a888:	ea4c 0709 	orr.w	r7, ip, r9
 801a88c:	9709      	str	r7, [sp, #36]	; 0x24
 801a88e:	2eff      	cmp	r6, #255	; 0xff
 801a890:	d01c      	beq.n	801a8cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e4>
 801a892:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a894:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801a898:	fb06 fe0e 	mul.w	lr, r6, lr
 801a89c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a8a0:	437e      	muls	r6, r7
 801a8a2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801a8a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8aa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801a8ae:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801a8b2:	44f4      	add	ip, lr
 801a8b4:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801a8b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a8bc:	0a36      	lsrs	r6, r6, #8
 801a8be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a8c6:	ea4c 0606 	orr.w	r6, ip, r6
 801a8ca:	960f      	str	r6, [sp, #60]	; 0x3c
 801a8cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801a8ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a8d2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801a8d6:	fb08 f606 	mul.w	r6, r8, r6
 801a8da:	fb01 6607 	mla	r6, r1, r7, r6
 801a8de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a8e0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a8e4:	fb00 6607 	mla	r6, r0, r7, r6
 801a8e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a8ea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a8ee:	fb0a 6607 	mla	r6, sl, r7, r6
 801a8f2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a8f4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a8f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a8fc:	fb08 f807 	mul.w	r8, r8, r7
 801a900:	fb01 8303 	mla	r3, r1, r3, r8
 801a904:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a906:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801a90a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a90c:	fb00 330c 	mla	r3, r0, ip, r3
 801a910:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801a914:	fb0a 3e0e 	mla	lr, sl, lr, r3
 801a918:	0a36      	lsrs	r6, r6, #8
 801a91a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a91e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a922:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a926:	ea46 060e 	orr.w	r6, r6, lr
 801a92a:	2aff      	cmp	r2, #255	; 0xff
 801a92c:	b2f0      	uxtb	r0, r6
 801a92e:	f3c6 2107 	ubfx	r1, r6, #8, #8
 801a932:	ea4f 4616 	mov.w	r6, r6, lsr #16
 801a936:	d038      	beq.n	801a9aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 801a938:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801a93c:	43d2      	mvns	r2, r2
 801a93e:	b2d2      	uxtb	r2, r2
 801a940:	4357      	muls	r7, r2
 801a942:	1c7b      	adds	r3, r7, #1
 801a944:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801a948:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801a94c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 801a950:	f805 3c03 	strb.w	r3, [r5, #-3]
 801a954:	4350      	muls	r0, r2
 801a956:	1c43      	adds	r3, r0, #1
 801a958:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a95c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a960:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a964:	f805 1c02 	strb.w	r1, [r5, #-2]
 801a968:	4353      	muls	r3, r2
 801a96a:	1c5a      	adds	r2, r3, #1
 801a96c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a970:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801a974:	f805 6c01 	strb.w	r6, [r5, #-1]
 801a978:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a97a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a97c:	4413      	add	r3, r2
 801a97e:	9329      	str	r3, [sp, #164]	; 0xa4
 801a980:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a982:	3503      	adds	r5, #3
 801a984:	441c      	add	r4, r3
 801a986:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a98a:	e511      	b.n	801a3b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a98c:	b150      	cbz	r0, 801a9a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 801a98e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a990:	5871      	ldr	r1, [r6, r1]
 801a992:	9109      	str	r1, [sp, #36]	; 0x24
 801a994:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801a998:	26ff      	movs	r6, #255	; 0xff
 801a99a:	46b6      	mov	lr, r6
 801a99c:	e6f6      	b.n	801a78c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a4>
 801a99e:	26ff      	movs	r6, #255	; 0xff
 801a9a0:	46b1      	mov	r9, r6
 801a9a2:	e6f3      	b.n	801a78c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a4>
 801a9a4:	26ff      	movs	r6, #255	; 0xff
 801a9a6:	46b1      	mov	r9, r6
 801a9a8:	e7f7      	b.n	801a99a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 801a9aa:	f805 0c03 	strb.w	r0, [r5, #-3]
 801a9ae:	f805 1c02 	strb.w	r1, [r5, #-2]
 801a9b2:	e7df      	b.n	801a974 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 801a9b4:	b017      	add	sp, #92	; 0x5c
 801a9b6:	ecbd 8b08 	vpop	{d8-d11}
 801a9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a9c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801a9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9c4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801a9c8:	2800      	cmp	r0, #0
 801a9ca:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801a9ce:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801a9d2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801a9d6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801a9da:	fb0c 0e03 	mla	lr, ip, r3, r0
 801a9de:	db6b      	blt.n	801aab8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801a9e0:	4580      	cmp	r8, r0
 801a9e2:	dd69      	ble.n	801aab8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801a9e4:	f1bc 0f00 	cmp.w	ip, #0
 801a9e8:	db66      	blt.n	801aab8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801a9ea:	45e1      	cmp	r9, ip
 801a9ec:	dd64      	ble.n	801aab8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801a9ee:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801a9f2:	f01e 0f01 	tst.w	lr, #1
 801a9f6:	5d16      	ldrb	r6, [r2, r4]
 801a9f8:	bf0c      	ite	eq
 801a9fa:	f006 060f 	andeq.w	r6, r6, #15
 801a9fe:	1136      	asrne	r6, r6, #4
 801aa00:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801aa04:	b2f6      	uxtb	r6, r6
 801aa06:	f110 0a01 	adds.w	sl, r0, #1
 801aa0a:	d457      	bmi.n	801aabc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801aa0c:	45d0      	cmp	r8, sl
 801aa0e:	dd55      	ble.n	801aabc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801aa10:	f1bc 0f00 	cmp.w	ip, #0
 801aa14:	db52      	blt.n	801aabc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801aa16:	45e1      	cmp	r9, ip
 801aa18:	dd50      	ble.n	801aabc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801aa1a:	2f00      	cmp	r7, #0
 801aa1c:	f000 80ac 	beq.w	801ab78 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801aa20:	f10e 0b01 	add.w	fp, lr, #1
 801aa24:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801aa28:	f01b 0f01 	tst.w	fp, #1
 801aa2c:	5d14      	ldrb	r4, [r2, r4]
 801aa2e:	bf0c      	ite	eq
 801aa30:	f004 040f 	andeq.w	r4, r4, #15
 801aa34:	1124      	asrne	r4, r4, #4
 801aa36:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801aa3a:	b2e4      	uxtb	r4, r4
 801aa3c:	2d00      	cmp	r5, #0
 801aa3e:	f000 8096 	beq.w	801ab6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801aa42:	2800      	cmp	r0, #0
 801aa44:	f10c 0c01 	add.w	ip, ip, #1
 801aa48:	db3c      	blt.n	801aac4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801aa4a:	4580      	cmp	r8, r0
 801aa4c:	dd3a      	ble.n	801aac4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801aa4e:	f1bc 0f00 	cmp.w	ip, #0
 801aa52:	db37      	blt.n	801aac4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801aa54:	45e1      	cmp	r9, ip
 801aa56:	dd35      	ble.n	801aac4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801aa58:	eb03 0b0e 	add.w	fp, r3, lr
 801aa5c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801aa60:	f01b 0f01 	tst.w	fp, #1
 801aa64:	5c10      	ldrb	r0, [r2, r0]
 801aa66:	bf0c      	ite	eq
 801aa68:	f000 000f 	andeq.w	r0, r0, #15
 801aa6c:	1100      	asrne	r0, r0, #4
 801aa6e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801aa72:	b2c0      	uxtb	r0, r0
 801aa74:	f1ba 0f00 	cmp.w	sl, #0
 801aa78:	db26      	blt.n	801aac8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801aa7a:	45d0      	cmp	r8, sl
 801aa7c:	dd24      	ble.n	801aac8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801aa7e:	f1bc 0f00 	cmp.w	ip, #0
 801aa82:	db21      	blt.n	801aac8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801aa84:	45e1      	cmp	r9, ip
 801aa86:	dd1f      	ble.n	801aac8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801aa88:	b307      	cbz	r7, 801aacc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801aa8a:	3301      	adds	r3, #1
 801aa8c:	449e      	add	lr, r3
 801aa8e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801aa92:	f01e 0f01 	tst.w	lr, #1
 801aa96:	5cd3      	ldrb	r3, [r2, r3]
 801aa98:	bf0c      	ite	eq
 801aa9a:	f003 030f 	andeq.w	r3, r3, #15
 801aa9e:	111b      	asrne	r3, r3, #4
 801aaa0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801aaa4:	b2db      	uxtb	r3, r3
 801aaa6:	2f0f      	cmp	r7, #15
 801aaa8:	d911      	bls.n	801aace <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801aaaa:	4b35      	ldr	r3, [pc, #212]	; (801ab80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801aaac:	4a35      	ldr	r2, [pc, #212]	; (801ab84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801aaae:	4836      	ldr	r0, [pc, #216]	; (801ab88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801aab0:	f240 11a5 	movw	r1, #421	; 0x1a5
 801aab4:	f000 ff6e 	bl	801b994 <__assert_func>
 801aab8:	2600      	movs	r6, #0
 801aaba:	e7a4      	b.n	801aa06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801aabc:	2400      	movs	r4, #0
 801aabe:	e7bd      	b.n	801aa3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801aac0:	463c      	mov	r4, r7
 801aac2:	e7be      	b.n	801aa42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801aac4:	2000      	movs	r0, #0
 801aac6:	e7d5      	b.n	801aa74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801aac8:	2300      	movs	r3, #0
 801aaca:	e7ec      	b.n	801aaa6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801aacc:	463b      	mov	r3, r7
 801aace:	2d0f      	cmp	r5, #15
 801aad0:	d8eb      	bhi.n	801aaaa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801aad2:	b2bf      	uxth	r7, r7
 801aad4:	b2ad      	uxth	r5, r5
 801aad6:	fb07 f205 	mul.w	r2, r7, r5
 801aada:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801aade:	013f      	lsls	r7, r7, #4
 801aae0:	b2ad      	uxth	r5, r5
 801aae2:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801aae6:	1abf      	subs	r7, r7, r2
 801aae8:	ebac 0c05 	sub.w	ip, ip, r5
 801aaec:	b2bf      	uxth	r7, r7
 801aaee:	fa1f fc8c 	uxth.w	ip, ip
 801aaf2:	437c      	muls	r4, r7
 801aaf4:	fb06 440c 	mla	r4, r6, ip, r4
 801aaf8:	fb05 4400 	mla	r4, r5, r0, r4
 801aafc:	fb02 4203 	mla	r2, r2, r3, r4
 801ab00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ab04:	b38a      	cbz	r2, 801ab6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801ab06:	4b21      	ldr	r3, [pc, #132]	; (801ab8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801ab08:	681c      	ldr	r4, [r3, #0]
 801ab0a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801ab0e:	4353      	muls	r3, r2
 801ab10:	1c5a      	adds	r2, r3, #1
 801ab12:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ab16:	1212      	asrs	r2, r2, #8
 801ab18:	b290      	uxth	r0, r2
 801ab1a:	43d2      	mvns	r2, r2
 801ab1c:	b2d3      	uxtb	r3, r2
 801ab1e:	b2e5      	uxtb	r5, r4
 801ab20:	780a      	ldrb	r2, [r1, #0]
 801ab22:	fb15 f500 	smulbb	r5, r5, r0
 801ab26:	fb02 5203 	mla	r2, r2, r3, r5
 801ab2a:	b292      	uxth	r2, r2
 801ab2c:	1c55      	adds	r5, r2, #1
 801ab2e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801ab32:	784d      	ldrb	r5, [r1, #1]
 801ab34:	1212      	asrs	r2, r2, #8
 801ab36:	fb15 f503 	smulbb	r5, r5, r3
 801ab3a:	700a      	strb	r2, [r1, #0]
 801ab3c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801ab40:	fb02 5200 	mla	r2, r2, r0, r5
 801ab44:	b292      	uxth	r2, r2
 801ab46:	1c55      	adds	r5, r2, #1
 801ab48:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801ab4c:	1212      	asrs	r2, r2, #8
 801ab4e:	704a      	strb	r2, [r1, #1]
 801ab50:	788a      	ldrb	r2, [r1, #2]
 801ab52:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801ab56:	fb12 f303 	smulbb	r3, r2, r3
 801ab5a:	fb04 3300 	mla	r3, r4, r0, r3
 801ab5e:	b29b      	uxth	r3, r3
 801ab60:	1c5a      	adds	r2, r3, #1
 801ab62:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ab66:	121b      	asrs	r3, r3, #8
 801ab68:	708b      	strb	r3, [r1, #2]
 801ab6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab6e:	2f0f      	cmp	r7, #15
 801ab70:	d89b      	bhi.n	801aaaa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801ab72:	462b      	mov	r3, r5
 801ab74:	4628      	mov	r0, r5
 801ab76:	e7ac      	b.n	801aad2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801ab78:	2d00      	cmp	r5, #0
 801ab7a:	d1a1      	bne.n	801aac0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801ab7c:	462c      	mov	r4, r5
 801ab7e:	e7f8      	b.n	801ab72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801ab80:	0801f881 	.word	0x0801f881
 801ab84:	0801fd76 	.word	0x0801fd76
 801ab88:	0801f94a 	.word	0x0801f94a
 801ab8c:	20005f2c 	.word	0x20005f2c

0801ab90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab94:	ed2d 8b08 	vpush	{d8-d11}
 801ab98:	b097      	sub	sp, #92	; 0x5c
 801ab9a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801ab9e:	9308      	str	r3, [sp, #32]
 801aba0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801aba4:	9214      	str	r2, [sp, #80]	; 0x50
 801aba6:	9309      	str	r3, [sp, #36]	; 0x24
 801aba8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801abaa:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801abae:	910c      	str	r1, [sp, #48]	; 0x30
 801abb0:	930e      	str	r3, [sp, #56]	; 0x38
 801abb2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801abb6:	9015      	str	r0, [sp, #84]	; 0x54
 801abb8:	6850      	ldr	r0, [r2, #4]
 801abba:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 801abbe:	fb00 1803 	mla	r8, r0, r3, r1
 801abc2:	6813      	ldr	r3, [r2, #0]
 801abc4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801abc8:	4498      	add	r8, r3
 801abca:	f10b 0301 	add.w	r3, fp, #1
 801abce:	f023 0301 	bic.w	r3, r3, #1
 801abd2:	930f      	str	r3, [sp, #60]	; 0x3c
 801abd4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801abd6:	681f      	ldr	r7, [r3, #0]
 801abd8:	eeb0 aa40 	vmov.f32	s20, s0
 801abdc:	eef0 9a60 	vmov.f32	s19, s1
 801abe0:	eeb0 9a41 	vmov.f32	s18, s2
 801abe4:	eeb0 8a62 	vmov.f32	s16, s5
 801abe8:	eef0 8a43 	vmov.f32	s17, s6
 801abec:	eef0 ba44 	vmov.f32	s23, s8
 801abf0:	eeb0 ba64 	vmov.f32	s22, s9
 801abf4:	eef0 aa45 	vmov.f32	s21, s10
 801abf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	dc03      	bgt.n	801ac06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801abfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	f340 8236 	ble.w	801b072 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801ac06:	9b08      	ldr	r3, [sp, #32]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	f340 810b 	ble.w	801ae24 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801ac0e:	142a      	asrs	r2, r5, #16
 801ac10:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ac14:	d42c      	bmi.n	801ac70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801ac16:	1c51      	adds	r1, r2, #1
 801ac18:	458b      	cmp	fp, r1
 801ac1a:	dd2c      	ble.n	801ac76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	db2a      	blt.n	801ac76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801ac20:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ac22:	1c59      	adds	r1, r3, #1
 801ac24:	4288      	cmp	r0, r1
 801ac26:	dd26      	ble.n	801ac76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801ac28:	9b08      	ldr	r3, [sp, #32]
 801ac2a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ac2c:	3b01      	subs	r3, #1
 801ac2e:	fb02 5203 	mla	r2, r2, r3, r5
 801ac32:	1412      	asrs	r2, r2, #16
 801ac34:	d429      	bmi.n	801ac8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ac36:	3201      	adds	r2, #1
 801ac38:	4593      	cmp	fp, r2
 801ac3a:	dd26      	ble.n	801ac8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ac3c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ac3e:	fb02 6303 	mla	r3, r2, r3, r6
 801ac42:	141b      	asrs	r3, r3, #16
 801ac44:	d421      	bmi.n	801ac8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ac46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac48:	3301      	adds	r3, #1
 801ac4a:	429a      	cmp	r2, r3
 801ac4c:	dd1d      	ble.n	801ac8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ac4e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ac52:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801ac56:	f108 0e03 	add.w	lr, r8, #3
 801ac5a:	f1b9 0f00 	cmp.w	r9, #0
 801ac5e:	f300 814e 	bgt.w	801aefe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 801ac62:	9b08      	ldr	r3, [sp, #32]
 801ac64:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ac68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ac6c:	44a0      	add	r8, r4
 801ac6e:	e0db      	b.n	801ae28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x298>
 801ac70:	1c51      	adds	r1, r2, #1
 801ac72:	f040 80cd 	bne.w	801ae10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ac76:	4593      	cmp	fp, r2
 801ac78:	f340 80ca 	ble.w	801ae10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ac7c:	1c5a      	adds	r2, r3, #1
 801ac7e:	f2c0 80c7 	blt.w	801ae10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ac82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac84:	4293      	cmp	r3, r2
 801ac86:	f280 80c3 	bge.w	801ae10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ac8a:	9b08      	ldr	r3, [sp, #32]
 801ac8c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801ac90:	930d      	str	r3, [sp, #52]	; 0x34
 801ac92:	46c1      	mov	r9, r8
 801ac94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	dde3      	ble.n	801ac62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 801ac9a:	1428      	asrs	r0, r5, #16
 801ac9c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801aca0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801aca4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801aca8:	f100 8110 	bmi.w	801aecc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801acac:	f100 0c01 	add.w	ip, r0, #1
 801acb0:	45e3      	cmp	fp, ip
 801acb2:	f340 810d 	ble.w	801aed0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	f2c0 810a 	blt.w	801aed0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801acbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801acbe:	f103 0c01 	add.w	ip, r3, #1
 801acc2:	4564      	cmp	r4, ip
 801acc4:	f340 8104 	ble.w	801aed0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801acc8:	fb03 030a 	mla	r3, r3, sl, r0
 801accc:	0858      	lsrs	r0, r3, #1
 801acce:	07dc      	lsls	r4, r3, #31
 801acd0:	5c38      	ldrb	r0, [r7, r0]
 801acd2:	bf54      	ite	pl
 801acd4:	f000 000f 	andpl.w	r0, r0, #15
 801acd8:	1100      	asrmi	r0, r0, #4
 801acda:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801acde:	b2c0      	uxtb	r0, r0
 801ace0:	2a00      	cmp	r2, #0
 801ace2:	f000 80e0 	beq.w	801aea6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 801ace6:	f103 0e01 	add.w	lr, r3, #1
 801acea:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801acee:	f01e 0f01 	tst.w	lr, #1
 801acf2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801acf6:	bf0c      	ite	eq
 801acf8:	f00c 0c0f 	andeq.w	ip, ip, #15
 801acfc:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801ad00:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ad04:	fa5f f48c 	uxtb.w	r4, ip
 801ad08:	9410      	str	r4, [sp, #64]	; 0x40
 801ad0a:	b1f1      	cbz	r1, 801ad4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ba>
 801ad0c:	4453      	add	r3, sl
 801ad0e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ad12:	07dc      	lsls	r4, r3, #31
 801ad14:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ad18:	bf54      	ite	pl
 801ad1a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ad1e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ad22:	3301      	adds	r3, #1
 801ad24:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ad28:	fa5f f48c 	uxtb.w	r4, ip
 801ad2c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ad30:	940a      	str	r4, [sp, #40]	; 0x28
 801ad32:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ad36:	07dc      	lsls	r4, r3, #31
 801ad38:	bf54      	ite	pl
 801ad3a:	f00c 030f 	andpl.w	r3, ip, #15
 801ad3e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801ad42:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ad46:	b2db      	uxtb	r3, r3
 801ad48:	9311      	str	r3, [sp, #68]	; 0x44
 801ad4a:	b292      	uxth	r2, r2
 801ad4c:	b289      	uxth	r1, r1
 801ad4e:	fb02 fc01 	mul.w	ip, r2, r1
 801ad52:	0113      	lsls	r3, r2, #4
 801ad54:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 801ad58:	b289      	uxth	r1, r1
 801ad5a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ad5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad60:	eba3 030c 	sub.w	r3, r3, ip
 801ad64:	ebae 0e01 	sub.w	lr, lr, r1
 801ad68:	b29b      	uxth	r3, r3
 801ad6a:	4353      	muls	r3, r2
 801ad6c:	fa1f fe8e 	uxth.w	lr, lr
 801ad70:	fb00 320e 	mla	r2, r0, lr, r3
 801ad74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad76:	fb01 2203 	mla	r2, r1, r3, r2
 801ad7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ad7c:	fb0c 2203 	mla	r2, ip, r3, r2
 801ad80:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ad84:	2a00      	cmp	r2, #0
 801ad86:	d039      	beq.n	801adfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801ad88:	4bbc      	ldr	r3, [pc, #752]	; (801b07c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 801ad8a:	6819      	ldr	r1, [r3, #0]
 801ad8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad8e:	435a      	muls	r2, r3
 801ad90:	1c53      	adds	r3, r2, #1
 801ad92:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ad96:	1212      	asrs	r2, r2, #8
 801ad98:	b290      	uxth	r0, r2
 801ad9a:	43d2      	mvns	r2, r2
 801ad9c:	b2d3      	uxtb	r3, r2
 801ad9e:	fa5f fc81 	uxtb.w	ip, r1
 801ada2:	f899 2000 	ldrb.w	r2, [r9]
 801ada6:	fb1c fc00 	smulbb	ip, ip, r0
 801adaa:	fb02 c203 	mla	r2, r2, r3, ip
 801adae:	b292      	uxth	r2, r2
 801adb0:	f102 0c01 	add.w	ip, r2, #1
 801adb4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801adb8:	f899 c001 	ldrb.w	ip, [r9, #1]
 801adbc:	1212      	asrs	r2, r2, #8
 801adbe:	fb1c fc03 	smulbb	ip, ip, r3
 801adc2:	f889 2000 	strb.w	r2, [r9]
 801adc6:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801adca:	fb02 c200 	mla	r2, r2, r0, ip
 801adce:	b292      	uxth	r2, r2
 801add0:	f102 0c01 	add.w	ip, r2, #1
 801add4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801add8:	1212      	asrs	r2, r2, #8
 801adda:	f889 2001 	strb.w	r2, [r9, #1]
 801adde:	f899 2002 	ldrb.w	r2, [r9, #2]
 801ade2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801ade6:	fb12 f303 	smulbb	r3, r2, r3
 801adea:	fb01 3300 	mla	r3, r1, r0, r3
 801adee:	b29b      	uxth	r3, r3
 801adf0:	1c5a      	adds	r2, r3, #1
 801adf2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801adf6:	121b      	asrs	r3, r3, #8
 801adf8:	f889 3002 	strb.w	r3, [r9, #2]
 801adfc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801adfe:	441d      	add	r5, r3
 801ae00:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ae02:	441e      	add	r6, r3
 801ae04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae06:	3b01      	subs	r3, #1
 801ae08:	f109 0903 	add.w	r9, r9, #3
 801ae0c:	930d      	str	r3, [sp, #52]	; 0x34
 801ae0e:	e741      	b.n	801ac94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ae10:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ae12:	441d      	add	r5, r3
 801ae14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ae16:	441e      	add	r6, r3
 801ae18:	9b08      	ldr	r3, [sp, #32]
 801ae1a:	3b01      	subs	r3, #1
 801ae1c:	9308      	str	r3, [sp, #32]
 801ae1e:	f108 0803 	add.w	r8, r8, #3
 801ae22:	e6f0      	b.n	801ac06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801ae24:	f47f af00 	bne.w	801ac28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801ae28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	f340 8121 	ble.w	801b072 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801ae30:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ae34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ae38:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ae3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae3e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ae42:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ae46:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ae4a:	eef0 6a48 	vmov.f32	s13, s16
 801ae4e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ae52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ae56:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ae5a:	ee16 5a90 	vmov	r5, s13
 801ae5e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ae62:	eef0 6a68 	vmov.f32	s13, s17
 801ae66:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ae6a:	ee18 2a10 	vmov	r2, s16
 801ae6e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ae72:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae76:	ee18 2a90 	vmov	r2, s17
 801ae7a:	932b      	str	r3, [sp, #172]	; 0xac
 801ae7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae82:	932c      	str	r3, [sp, #176]	; 0xb0
 801ae84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ae88:	3b01      	subs	r3, #1
 801ae8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ae8e:	930c      	str	r3, [sp, #48]	; 0x30
 801ae90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae92:	bf08      	it	eq
 801ae94:	4613      	moveq	r3, r2
 801ae96:	ee16 6a90 	vmov	r6, s13
 801ae9a:	9308      	str	r3, [sp, #32]
 801ae9c:	eef0 8a67 	vmov.f32	s17, s15
 801aea0:	eeb0 8a47 	vmov.f32	s16, s14
 801aea4:	e6a8      	b.n	801abf8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801aea6:	2900      	cmp	r1, #0
 801aea8:	f43f af4f 	beq.w	801ad4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ba>
 801aeac:	4453      	add	r3, sl
 801aeae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801aeb2:	07db      	lsls	r3, r3, #31
 801aeb4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801aeb8:	bf54      	ite	pl
 801aeba:	f00c 030f 	andpl.w	r3, ip, #15
 801aebe:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801aec2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801aec6:	b2db      	uxtb	r3, r3
 801aec8:	930a      	str	r3, [sp, #40]	; 0x28
 801aeca:	e73e      	b.n	801ad4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ba>
 801aecc:	1c44      	adds	r4, r0, #1
 801aece:	d195      	bne.n	801adfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801aed0:	4583      	cmp	fp, r0
 801aed2:	dd93      	ble.n	801adfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801aed4:	1c5c      	adds	r4, r3, #1
 801aed6:	db91      	blt.n	801adfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801aed8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801aeda:	429c      	cmp	r4, r3
 801aedc:	dd8e      	ble.n	801adfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801aede:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801aee2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801aee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aee6:	9002      	str	r0, [sp, #8]
 801aee8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801aeec:	e9cd b300 	strd	fp, r3, [sp]
 801aef0:	463a      	mov	r2, r7
 801aef2:	4653      	mov	r3, sl
 801aef4:	4649      	mov	r1, r9
 801aef6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801aef8:	f7ff fd62 	bl	801a9c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801aefc:	e77e      	b.n	801adfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801aefe:	142a      	asrs	r2, r5, #16
 801af00:	1433      	asrs	r3, r6, #16
 801af02:	fb0a 2303 	mla	r3, sl, r3, r2
 801af06:	085a      	lsrs	r2, r3, #1
 801af08:	07dc      	lsls	r4, r3, #31
 801af0a:	5cba      	ldrb	r2, [r7, r2]
 801af0c:	bf54      	ite	pl
 801af0e:	f002 020f 	andpl.w	r2, r2, #15
 801af12:	1112      	asrmi	r2, r2, #4
 801af14:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801af18:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801af1c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801af20:	b2d2      	uxtb	r2, r2
 801af22:	2900      	cmp	r1, #0
 801af24:	f000 8092 	beq.w	801b04c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4bc>
 801af28:	1c5c      	adds	r4, r3, #1
 801af2a:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 801af2e:	07e4      	lsls	r4, r4, #31
 801af30:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801af34:	bf54      	ite	pl
 801af36:	f00c 0c0f 	andpl.w	ip, ip, #15
 801af3a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801af3e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801af42:	fa5f f48c 	uxtb.w	r4, ip
 801af46:	9412      	str	r4, [sp, #72]	; 0x48
 801af48:	b1f8      	cbz	r0, 801af8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 801af4a:	4453      	add	r3, sl
 801af4c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801af50:	07dc      	lsls	r4, r3, #31
 801af52:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801af56:	bf54      	ite	pl
 801af58:	f00c 0c0f 	andpl.w	ip, ip, #15
 801af5c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801af60:	3301      	adds	r3, #1
 801af62:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801af66:	fa5f f48c 	uxtb.w	r4, ip
 801af6a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801af6e:	940b      	str	r4, [sp, #44]	; 0x2c
 801af70:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801af74:	07dc      	lsls	r4, r3, #31
 801af76:	bf54      	ite	pl
 801af78:	f00c 0c0f 	andpl.w	ip, ip, #15
 801af7c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801af80:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801af84:	fa5f f38c 	uxtb.w	r3, ip
 801af88:	9313      	str	r3, [sp, #76]	; 0x4c
 801af8a:	b289      	uxth	r1, r1
 801af8c:	b280      	uxth	r0, r0
 801af8e:	fb01 f300 	mul.w	r3, r1, r0
 801af92:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801af96:	0109      	lsls	r1, r1, #4
 801af98:	b280      	uxth	r0, r0
 801af9a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801af9e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801afa0:	1ac9      	subs	r1, r1, r3
 801afa2:	ebac 0c00 	sub.w	ip, ip, r0
 801afa6:	b289      	uxth	r1, r1
 801afa8:	4361      	muls	r1, r4
 801afaa:	fa1f fc8c 	uxth.w	ip, ip
 801afae:	fb02 120c 	mla	r2, r2, ip, r1
 801afb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801afb4:	fb00 2001 	mla	r0, r0, r1, r2
 801afb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801afba:	fb03 0302 	mla	r3, r3, r2, r0
 801afbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d039      	beq.n	801b03a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 801afc6:	4a2d      	ldr	r2, [pc, #180]	; (801b07c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 801afc8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801afcc:	6810      	ldr	r0, [r2, #0]
 801afce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801afd0:	4353      	muls	r3, r2
 801afd2:	1c5a      	adds	r2, r3, #1
 801afd4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801afd8:	121b      	asrs	r3, r3, #8
 801afda:	b29a      	uxth	r2, r3
 801afdc:	fa5f fc80 	uxtb.w	ip, r0
 801afe0:	43db      	mvns	r3, r3
 801afe2:	b2db      	uxtb	r3, r3
 801afe4:	fb1c fc02 	smulbb	ip, ip, r2
 801afe8:	fb01 c103 	mla	r1, r1, r3, ip
 801afec:	b289      	uxth	r1, r1
 801afee:	f101 0c01 	add.w	ip, r1, #1
 801aff2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801aff6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801affa:	1209      	asrs	r1, r1, #8
 801affc:	fb1c fc03 	smulbb	ip, ip, r3
 801b000:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b004:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801b008:	fb01 c102 	mla	r1, r1, r2, ip
 801b00c:	b289      	uxth	r1, r1
 801b00e:	f101 0c01 	add.w	ip, r1, #1
 801b012:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b016:	1209      	asrs	r1, r1, #8
 801b018:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b01c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b020:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801b024:	fb11 f303 	smulbb	r3, r1, r3
 801b028:	fb00 3002 	mla	r0, r0, r2, r3
 801b02c:	b280      	uxth	r0, r0
 801b02e:	1c42      	adds	r2, r0, #1
 801b030:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b034:	1200      	asrs	r0, r0, #8
 801b036:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801b03a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b03c:	441d      	add	r5, r3
 801b03e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b040:	f10e 0e03 	add.w	lr, lr, #3
 801b044:	441e      	add	r6, r3
 801b046:	f109 39ff 	add.w	r9, r9, #4294967295
 801b04a:	e606      	b.n	801ac5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801b04c:	2800      	cmp	r0, #0
 801b04e:	d09c      	beq.n	801af8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 801b050:	4453      	add	r3, sl
 801b052:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b056:	07db      	lsls	r3, r3, #31
 801b058:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b05c:	bf54      	ite	pl
 801b05e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b062:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b066:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b06a:	fa5f f38c 	uxtb.w	r3, ip
 801b06e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b070:	e78b      	b.n	801af8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 801b072:	b017      	add	sp, #92	; 0x5c
 801b074:	ecbd 8b08 	vpop	{d8-d11}
 801b078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b07c:	20005f2c 	.word	0x20005f2c

0801b080 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801b080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b084:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801b088:	2800      	cmp	r0, #0
 801b08a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b08e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801b092:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801b096:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801b09a:	fb0c 0e03 	mla	lr, ip, r3, r0
 801b09e:	db6b      	blt.n	801b178 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b0a0:	4580      	cmp	r8, r0
 801b0a2:	dd69      	ble.n	801b178 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b0a4:	f1bc 0f00 	cmp.w	ip, #0
 801b0a8:	db66      	blt.n	801b178 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b0aa:	45e1      	cmp	r9, ip
 801b0ac:	dd64      	ble.n	801b178 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b0ae:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801b0b2:	f01e 0f01 	tst.w	lr, #1
 801b0b6:	5d16      	ldrb	r6, [r2, r4]
 801b0b8:	bf0c      	ite	eq
 801b0ba:	f006 060f 	andeq.w	r6, r6, #15
 801b0be:	1136      	asrne	r6, r6, #4
 801b0c0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b0c4:	b2f6      	uxtb	r6, r6
 801b0c6:	f110 0a01 	adds.w	sl, r0, #1
 801b0ca:	d457      	bmi.n	801b17c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b0cc:	45d0      	cmp	r8, sl
 801b0ce:	dd55      	ble.n	801b17c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b0d0:	f1bc 0f00 	cmp.w	ip, #0
 801b0d4:	db52      	blt.n	801b17c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b0d6:	45e1      	cmp	r9, ip
 801b0d8:	dd50      	ble.n	801b17c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b0da:	2f00      	cmp	r7, #0
 801b0dc:	f000 80a5 	beq.w	801b22a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801b0e0:	f10e 0b01 	add.w	fp, lr, #1
 801b0e4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801b0e8:	f01b 0f01 	tst.w	fp, #1
 801b0ec:	5d14      	ldrb	r4, [r2, r4]
 801b0ee:	bf0c      	ite	eq
 801b0f0:	f004 040f 	andeq.w	r4, r4, #15
 801b0f4:	1124      	asrne	r4, r4, #4
 801b0f6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b0fa:	b2e4      	uxtb	r4, r4
 801b0fc:	2d00      	cmp	r5, #0
 801b0fe:	f000 808f 	beq.w	801b220 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801b102:	2800      	cmp	r0, #0
 801b104:	f10c 0c01 	add.w	ip, ip, #1
 801b108:	db3c      	blt.n	801b184 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b10a:	4580      	cmp	r8, r0
 801b10c:	dd3a      	ble.n	801b184 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b10e:	f1bc 0f00 	cmp.w	ip, #0
 801b112:	db37      	blt.n	801b184 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b114:	45e1      	cmp	r9, ip
 801b116:	dd35      	ble.n	801b184 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b118:	eb03 0b0e 	add.w	fp, r3, lr
 801b11c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801b120:	f01b 0f01 	tst.w	fp, #1
 801b124:	5c10      	ldrb	r0, [r2, r0]
 801b126:	bf0c      	ite	eq
 801b128:	f000 000f 	andeq.w	r0, r0, #15
 801b12c:	1100      	asrne	r0, r0, #4
 801b12e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b132:	b2c0      	uxtb	r0, r0
 801b134:	f1ba 0f00 	cmp.w	sl, #0
 801b138:	db26      	blt.n	801b188 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b13a:	45d0      	cmp	r8, sl
 801b13c:	dd24      	ble.n	801b188 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b13e:	f1bc 0f00 	cmp.w	ip, #0
 801b142:	db21      	blt.n	801b188 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b144:	45e1      	cmp	r9, ip
 801b146:	dd1f      	ble.n	801b188 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b148:	b307      	cbz	r7, 801b18c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801b14a:	3301      	adds	r3, #1
 801b14c:	449e      	add	lr, r3
 801b14e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b152:	f01e 0f01 	tst.w	lr, #1
 801b156:	5cd3      	ldrb	r3, [r2, r3]
 801b158:	bf0c      	ite	eq
 801b15a:	f003 030f 	andeq.w	r3, r3, #15
 801b15e:	111b      	asrne	r3, r3, #4
 801b160:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b164:	b2db      	uxtb	r3, r3
 801b166:	2f0f      	cmp	r7, #15
 801b168:	d911      	bls.n	801b18e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801b16a:	4b32      	ldr	r3, [pc, #200]	; (801b234 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801b16c:	4a32      	ldr	r2, [pc, #200]	; (801b238 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801b16e:	4833      	ldr	r0, [pc, #204]	; (801b23c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801b170:	f240 11a5 	movw	r1, #421	; 0x1a5
 801b174:	f000 fc0e 	bl	801b994 <__assert_func>
 801b178:	2600      	movs	r6, #0
 801b17a:	e7a4      	b.n	801b0c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801b17c:	2400      	movs	r4, #0
 801b17e:	e7bd      	b.n	801b0fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801b180:	463c      	mov	r4, r7
 801b182:	e7be      	b.n	801b102 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801b184:	2000      	movs	r0, #0
 801b186:	e7d5      	b.n	801b134 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801b188:	2300      	movs	r3, #0
 801b18a:	e7ec      	b.n	801b166 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801b18c:	463b      	mov	r3, r7
 801b18e:	2d0f      	cmp	r5, #15
 801b190:	d8eb      	bhi.n	801b16a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801b192:	b2bf      	uxth	r7, r7
 801b194:	b2ad      	uxth	r5, r5
 801b196:	fb07 f205 	mul.w	r2, r7, r5
 801b19a:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801b19e:	013f      	lsls	r7, r7, #4
 801b1a0:	b2ad      	uxth	r5, r5
 801b1a2:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801b1a6:	1abf      	subs	r7, r7, r2
 801b1a8:	ebac 0c05 	sub.w	ip, ip, r5
 801b1ac:	b2bf      	uxth	r7, r7
 801b1ae:	fa1f fc8c 	uxth.w	ip, ip
 801b1b2:	437c      	muls	r4, r7
 801b1b4:	fb06 440c 	mla	r4, r6, ip, r4
 801b1b8:	fb05 4400 	mla	r4, r5, r0, r4
 801b1bc:	fb02 4303 	mla	r3, r2, r3, r4
 801b1c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b1c4:	b353      	cbz	r3, 801b21c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801b1c6:	4a1e      	ldr	r2, [pc, #120]	; (801b240 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801b1c8:	7808      	ldrb	r0, [r1, #0]
 801b1ca:	6814      	ldr	r4, [r2, #0]
 801b1cc:	b29a      	uxth	r2, r3
 801b1ce:	b2e5      	uxtb	r5, r4
 801b1d0:	43db      	mvns	r3, r3
 801b1d2:	b2db      	uxtb	r3, r3
 801b1d4:	fb15 f502 	smulbb	r5, r5, r2
 801b1d8:	fb00 5003 	mla	r0, r0, r3, r5
 801b1dc:	b280      	uxth	r0, r0
 801b1de:	1c45      	adds	r5, r0, #1
 801b1e0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b1e4:	784d      	ldrb	r5, [r1, #1]
 801b1e6:	1200      	asrs	r0, r0, #8
 801b1e8:	fb15 f503 	smulbb	r5, r5, r3
 801b1ec:	7008      	strb	r0, [r1, #0]
 801b1ee:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801b1f2:	fb00 5002 	mla	r0, r0, r2, r5
 801b1f6:	b280      	uxth	r0, r0
 801b1f8:	1c45      	adds	r5, r0, #1
 801b1fa:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b1fe:	1200      	asrs	r0, r0, #8
 801b200:	7048      	strb	r0, [r1, #1]
 801b202:	7888      	ldrb	r0, [r1, #2]
 801b204:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b208:	fb10 f303 	smulbb	r3, r0, r3
 801b20c:	fb04 3202 	mla	r2, r4, r2, r3
 801b210:	b292      	uxth	r2, r2
 801b212:	1c53      	adds	r3, r2, #1
 801b214:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b218:	1212      	asrs	r2, r2, #8
 801b21a:	708a      	strb	r2, [r1, #2]
 801b21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b220:	2f0f      	cmp	r7, #15
 801b222:	d8a2      	bhi.n	801b16a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801b224:	462b      	mov	r3, r5
 801b226:	4628      	mov	r0, r5
 801b228:	e7b3      	b.n	801b192 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801b22a:	2d00      	cmp	r5, #0
 801b22c:	d1a8      	bne.n	801b180 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801b22e:	462c      	mov	r4, r5
 801b230:	e7f8      	b.n	801b224 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801b232:	bf00      	nop
 801b234:	0801f881 	.word	0x0801f881
 801b238:	0801fd76 	.word	0x0801fd76
 801b23c:	0801f94a 	.word	0x0801f94a
 801b240:	20005f2c 	.word	0x20005f2c

0801b244 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b248:	ed2d 8b08 	vpush	{d8-d11}
 801b24c:	b095      	sub	sp, #84	; 0x54
 801b24e:	461c      	mov	r4, r3
 801b250:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 801b254:	9307      	str	r3, [sp, #28]
 801b256:	920e      	str	r2, [sp, #56]	; 0x38
 801b258:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801b25c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b25e:	9109      	str	r1, [sp, #36]	; 0x24
 801b260:	9308      	str	r3, [sp, #32]
 801b262:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801b266:	9013      	str	r0, [sp, #76]	; 0x4c
 801b268:	6850      	ldr	r0, [r2, #4]
 801b26a:	fb00 1803 	mla	r8, r0, r3, r1
 801b26e:	6813      	ldr	r3, [r2, #0]
 801b270:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b274:	4498      	add	r8, r3
 801b276:	9b07      	ldr	r3, [sp, #28]
 801b278:	3301      	adds	r3, #1
 801b27a:	f023 0301 	bic.w	r3, r3, #1
 801b27e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b280:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b282:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801b286:	681f      	ldr	r7, [r3, #0]
 801b288:	eeb0 aa40 	vmov.f32	s20, s0
 801b28c:	eef0 9a60 	vmov.f32	s19, s1
 801b290:	eeb0 9a41 	vmov.f32	s18, s2
 801b294:	eeb0 8a62 	vmov.f32	s16, s5
 801b298:	eef0 8a43 	vmov.f32	s17, s6
 801b29c:	eef0 ba44 	vmov.f32	s23, s8
 801b2a0:	eeb0 ba64 	vmov.f32	s22, s9
 801b2a4:	eef0 aa45 	vmov.f32	s21, s10
 801b2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	dc03      	bgt.n	801b2b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b2ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	f340 8235 	ble.w	801b720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>
 801b2b6:	2c00      	cmp	r4, #0
 801b2b8:	f340 8108 	ble.w	801b4cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 801b2bc:	142a      	asrs	r2, r5, #16
 801b2be:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b2c2:	d42b      	bmi.n	801b31c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b2c4:	9807      	ldr	r0, [sp, #28]
 801b2c6:	1c51      	adds	r1, r2, #1
 801b2c8:	4288      	cmp	r0, r1
 801b2ca:	dd2a      	ble.n	801b322 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	db28      	blt.n	801b322 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801b2d0:	9808      	ldr	r0, [sp, #32]
 801b2d2:	1c59      	adds	r1, r3, #1
 801b2d4:	4288      	cmp	r0, r1
 801b2d6:	dd24      	ble.n	801b322 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801b2d8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b2da:	1e63      	subs	r3, r4, #1
 801b2dc:	fb02 5203 	mla	r2, r2, r3, r5
 801b2e0:	1412      	asrs	r2, r2, #16
 801b2e2:	d429      	bmi.n	801b338 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b2e4:	9907      	ldr	r1, [sp, #28]
 801b2e6:	3201      	adds	r2, #1
 801b2e8:	4291      	cmp	r1, r2
 801b2ea:	dd25      	ble.n	801b338 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b2ec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b2ee:	fb02 6303 	mla	r3, r2, r3, r6
 801b2f2:	141b      	asrs	r3, r3, #16
 801b2f4:	d420      	bmi.n	801b338 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b2f6:	9a08      	ldr	r2, [sp, #32]
 801b2f8:	3301      	adds	r3, #1
 801b2fa:	429a      	cmp	r2, r3
 801b2fc:	dd1c      	ble.n	801b338 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801b2fe:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 801b302:	f108 0e03 	add.w	lr, r8, #3
 801b306:	46a1      	mov	r9, r4
 801b308:	f1b9 0f00 	cmp.w	r9, #0
 801b30c:	f300 8153 	bgt.w	801b5b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801b310:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801b314:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b318:	44a0      	add	r8, r4
 801b31a:	e0d9      	b.n	801b4d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801b31c:	1c50      	adds	r0, r2, #1
 801b31e:	f040 80cd 	bne.w	801b4bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b322:	9907      	ldr	r1, [sp, #28]
 801b324:	4291      	cmp	r1, r2
 801b326:	f340 80c9 	ble.w	801b4bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b32a:	1c59      	adds	r1, r3, #1
 801b32c:	f2c0 80c6 	blt.w	801b4bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b330:	9a08      	ldr	r2, [sp, #32]
 801b332:	4293      	cmp	r3, r2
 801b334:	f280 80c2 	bge.w	801b4bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b338:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 801b33c:	46a3      	mov	fp, r4
 801b33e:	46c1      	mov	r9, r8
 801b340:	f1bb 0f00 	cmp.w	fp, #0
 801b344:	dde4      	ble.n	801b310 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801b346:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801b34a:	1428      	asrs	r0, r5, #16
 801b34c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b350:	920a      	str	r2, [sp, #40]	; 0x28
 801b352:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b356:	f100 8114 	bmi.w	801b582 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 801b35a:	9a07      	ldr	r2, [sp, #28]
 801b35c:	f100 0c01 	add.w	ip, r0, #1
 801b360:	4562      	cmp	r2, ip
 801b362:	f340 8110 	ble.w	801b586 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801b366:	2b00      	cmp	r3, #0
 801b368:	f2c0 810d 	blt.w	801b586 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801b36c:	9a08      	ldr	r2, [sp, #32]
 801b36e:	f103 0c01 	add.w	ip, r3, #1
 801b372:	4562      	cmp	r2, ip
 801b374:	f340 8107 	ble.w	801b586 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801b378:	fb03 030a 	mla	r3, r3, sl, r0
 801b37c:	0858      	lsrs	r0, r3, #1
 801b37e:	07da      	lsls	r2, r3, #31
 801b380:	5c38      	ldrb	r0, [r7, r0]
 801b382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b384:	bf54      	ite	pl
 801b386:	f000 000f 	andpl.w	r0, r0, #15
 801b38a:	1100      	asrmi	r0, r0, #4
 801b38c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b390:	b2c0      	uxtb	r0, r0
 801b392:	2a00      	cmp	r2, #0
 801b394:	f000 80db 	beq.w	801b54e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30a>
 801b398:	f103 0e01 	add.w	lr, r3, #1
 801b39c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801b3a0:	f01e 0f01 	tst.w	lr, #1
 801b3a4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b3a8:	bf0c      	ite	eq
 801b3aa:	f00c 0c0f 	andeq.w	ip, ip, #15
 801b3ae:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801b3b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b3b6:	fa5f fc8c 	uxtb.w	ip, ip
 801b3ba:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801b3be:	b1f9      	cbz	r1, 801b400 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 801b3c0:	4453      	add	r3, sl
 801b3c2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b3c6:	07da      	lsls	r2, r3, #31
 801b3c8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b3cc:	bf54      	ite	pl
 801b3ce:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b3d2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b3d6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b3da:	3301      	adds	r3, #1
 801b3dc:	fa5f fc8c 	uxtb.w	ip, ip
 801b3e0:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 801b3e4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b3e8:	07da      	lsls	r2, r3, #31
 801b3ea:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b3ee:	bf54      	ite	pl
 801b3f0:	f00c 030f 	andpl.w	r3, ip, #15
 801b3f4:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801b3f8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b3fc:	b2db      	uxtb	r3, r3
 801b3fe:	9310      	str	r3, [sp, #64]	; 0x40
 801b400:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801b404:	b289      	uxth	r1, r1
 801b406:	fb02 f301 	mul.w	r3, r2, r1
 801b40a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801b40e:	0112      	lsls	r2, r2, #4
 801b410:	fa1f fe81 	uxth.w	lr, r1
 801b414:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801b418:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b41a:	1ad2      	subs	r2, r2, r3
 801b41c:	ebac 0c0e 	sub.w	ip, ip, lr
 801b420:	b292      	uxth	r2, r2
 801b422:	434a      	muls	r2, r1
 801b424:	fa1f fc8c 	uxth.w	ip, ip
 801b428:	fb00 200c 	mla	r0, r0, ip, r2
 801b42c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b42e:	fb0e 0002 	mla	r0, lr, r2, r0
 801b432:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b434:	fb03 0002 	mla	r0, r3, r2, r0
 801b438:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b43c:	b3a8      	cbz	r0, 801b4aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801b43e:	4bbb      	ldr	r3, [pc, #748]	; (801b72c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>)
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	28ff      	cmp	r0, #255	; 0xff
 801b444:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801b448:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801b44c:	b2db      	uxtb	r3, r3
 801b44e:	f000 8091 	beq.w	801b574 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x330>
 801b452:	b282      	uxth	r2, r0
 801b454:	f899 e000 	ldrb.w	lr, [r9]
 801b458:	43c0      	mvns	r0, r0
 801b45a:	b2c0      	uxtb	r0, r0
 801b45c:	fb13 f302 	smulbb	r3, r3, r2
 801b460:	fb0e 3300 	mla	r3, lr, r0, r3
 801b464:	b29b      	uxth	r3, r3
 801b466:	f103 0e01 	add.w	lr, r3, #1
 801b46a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801b46e:	121b      	asrs	r3, r3, #8
 801b470:	f889 3000 	strb.w	r3, [r9]
 801b474:	f899 3001 	ldrb.w	r3, [r9, #1]
 801b478:	fb11 f102 	smulbb	r1, r1, r2
 801b47c:	fb03 1100 	mla	r1, r3, r0, r1
 801b480:	b289      	uxth	r1, r1
 801b482:	1c4b      	adds	r3, r1, #1
 801b484:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801b488:	f899 3002 	ldrb.w	r3, [r9, #2]
 801b48c:	fb1c f202 	smulbb	r2, ip, r2
 801b490:	fb03 2000 	mla	r0, r3, r0, r2
 801b494:	b280      	uxth	r0, r0
 801b496:	f100 0c01 	add.w	ip, r0, #1
 801b49a:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801b49e:	1209      	asrs	r1, r1, #8
 801b4a0:	1200      	asrs	r0, r0, #8
 801b4a2:	f889 1001 	strb.w	r1, [r9, #1]
 801b4a6:	f889 0002 	strb.w	r0, [r9, #2]
 801b4aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b4ac:	441d      	add	r5, r3
 801b4ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b4b0:	f109 0903 	add.w	r9, r9, #3
 801b4b4:	441e      	add	r6, r3
 801b4b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b4ba:	e741      	b.n	801b340 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801b4bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b4be:	441d      	add	r5, r3
 801b4c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b4c2:	3c01      	subs	r4, #1
 801b4c4:	441e      	add	r6, r3
 801b4c6:	f108 0803 	add.w	r8, r8, #3
 801b4ca:	e6f4      	b.n	801b2b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b4cc:	f47f af04 	bne.w	801b2d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801b4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	f340 8124 	ble.w	801b720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>
 801b4d8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b4dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b4e0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b4e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b4e6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b4ea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b4ee:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b4f2:	eef0 6a48 	vmov.f32	s13, s16
 801b4f6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b4fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b502:	ee16 5a90 	vmov	r5, s13
 801b506:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b50a:	eef0 6a68 	vmov.f32	s13, s17
 801b50e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b512:	ee18 2a10 	vmov	r2, s16
 801b516:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b51a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b51e:	ee18 2a90 	vmov	r2, s17
 801b522:	9329      	str	r3, [sp, #164]	; 0xa4
 801b524:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b526:	fb92 f3f3 	sdiv	r3, r2, r3
 801b52a:	932a      	str	r3, [sp, #168]	; 0xa8
 801b52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b52e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b530:	3b01      	subs	r3, #1
 801b532:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b536:	9309      	str	r3, [sp, #36]	; 0x24
 801b538:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b53a:	ee16 6a90 	vmov	r6, s13
 801b53e:	bf14      	ite	ne
 801b540:	461c      	movne	r4, r3
 801b542:	4614      	moveq	r4, r2
 801b544:	eef0 8a67 	vmov.f32	s17, s15
 801b548:	eeb0 8a47 	vmov.f32	s16, s14
 801b54c:	e6ac      	b.n	801b2a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b54e:	2900      	cmp	r1, #0
 801b550:	f43f af56 	beq.w	801b400 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 801b554:	4453      	add	r3, sl
 801b556:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b55a:	07db      	lsls	r3, r3, #31
 801b55c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b560:	bf54      	ite	pl
 801b562:	f00c 030f 	andpl.w	r3, ip, #15
 801b566:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801b56a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b56e:	b2db      	uxtb	r3, r3
 801b570:	930c      	str	r3, [sp, #48]	; 0x30
 801b572:	e745      	b.n	801b400 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 801b574:	f889 3000 	strb.w	r3, [r9]
 801b578:	f889 1001 	strb.w	r1, [r9, #1]
 801b57c:	f889 c002 	strb.w	ip, [r9, #2]
 801b580:	e793      	b.n	801b4aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801b582:	1c42      	adds	r2, r0, #1
 801b584:	d191      	bne.n	801b4aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801b586:	9a07      	ldr	r2, [sp, #28]
 801b588:	4282      	cmp	r2, r0
 801b58a:	dd8e      	ble.n	801b4aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801b58c:	1c5a      	adds	r2, r3, #1
 801b58e:	db8c      	blt.n	801b4aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801b590:	9a08      	ldr	r2, [sp, #32]
 801b592:	429a      	cmp	r2, r3
 801b594:	dd89      	ble.n	801b4aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801b596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b598:	9105      	str	r1, [sp, #20]
 801b59a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b59e:	9b08      	ldr	r3, [sp, #32]
 801b5a0:	9301      	str	r3, [sp, #4]
 801b5a2:	9b07      	ldr	r3, [sp, #28]
 801b5a4:	9002      	str	r0, [sp, #8]
 801b5a6:	9300      	str	r3, [sp, #0]
 801b5a8:	463a      	mov	r2, r7
 801b5aa:	4653      	mov	r3, sl
 801b5ac:	4649      	mov	r1, r9
 801b5ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b5b0:	f7ff fd66 	bl	801b080 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801b5b4:	e779      	b.n	801b4aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801b5b6:	142a      	asrs	r2, r5, #16
 801b5b8:	1433      	asrs	r3, r6, #16
 801b5ba:	fb0a 2303 	mla	r3, sl, r3, r2
 801b5be:	085a      	lsrs	r2, r3, #1
 801b5c0:	07d9      	lsls	r1, r3, #31
 801b5c2:	5cba      	ldrb	r2, [r7, r2]
 801b5c4:	bf54      	ite	pl
 801b5c6:	f002 020f 	andpl.w	r2, r2, #15
 801b5ca:	1112      	asrmi	r2, r2, #4
 801b5cc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b5d0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b5d4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801b5d8:	b2d2      	uxtb	r2, r2
 801b5da:	2800      	cmp	r0, #0
 801b5dc:	f000 8089 	beq.w	801b6f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801b5e0:	f103 0b01 	add.w	fp, r3, #1
 801b5e4:	ea4f 015b 	mov.w	r1, fp, lsr #1
 801b5e8:	f01b 0f01 	tst.w	fp, #1
 801b5ec:	5c79      	ldrb	r1, [r7, r1]
 801b5ee:	bf0c      	ite	eq
 801b5f0:	f001 010f 	andeq.w	r1, r1, #15
 801b5f4:	1109      	asrne	r1, r1, #4
 801b5f6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b5fa:	b2c9      	uxtb	r1, r1
 801b5fc:	9111      	str	r1, [sp, #68]	; 0x44
 801b5fe:	f1bc 0f00 	cmp.w	ip, #0
 801b602:	d018      	beq.n	801b636 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f2>
 801b604:	4453      	add	r3, sl
 801b606:	0859      	lsrs	r1, r3, #1
 801b608:	f013 0f01 	tst.w	r3, #1
 801b60c:	5c79      	ldrb	r1, [r7, r1]
 801b60e:	bf0c      	ite	eq
 801b610:	f001 010f 	andeq.w	r1, r1, #15
 801b614:	1109      	asrne	r1, r1, #4
 801b616:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b61a:	b2c9      	uxtb	r1, r1
 801b61c:	3301      	adds	r3, #1
 801b61e:	910d      	str	r1, [sp, #52]	; 0x34
 801b620:	0859      	lsrs	r1, r3, #1
 801b622:	07db      	lsls	r3, r3, #31
 801b624:	5c79      	ldrb	r1, [r7, r1]
 801b626:	bf54      	ite	pl
 801b628:	f001 010f 	andpl.w	r1, r1, #15
 801b62c:	1109      	asrmi	r1, r1, #4
 801b62e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b632:	b2c9      	uxtb	r1, r1
 801b634:	9112      	str	r1, [sp, #72]	; 0x48
 801b636:	b280      	uxth	r0, r0
 801b638:	fa1f fc8c 	uxth.w	ip, ip
 801b63c:	fb00 f30c 	mul.w	r3, r0, ip
 801b640:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801b644:	0100      	lsls	r0, r0, #4
 801b646:	fa1f fc8c 	uxth.w	ip, ip
 801b64a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801b64e:	eba1 010c 	sub.w	r1, r1, ip
 801b652:	fa1f fb81 	uxth.w	fp, r1
 801b656:	1ac0      	subs	r0, r0, r3
 801b658:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b65a:	b280      	uxth	r0, r0
 801b65c:	4348      	muls	r0, r1
 801b65e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b660:	fb02 020b 	mla	r2, r2, fp, r0
 801b664:	fb0c 2c01 	mla	ip, ip, r1, r2
 801b668:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b66a:	fb03 c302 	mla	r3, r3, r2, ip
 801b66e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b672:	b3ab      	cbz	r3, 801b6e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49c>
 801b674:	4a2d      	ldr	r2, [pc, #180]	; (801b72c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>)
 801b676:	6811      	ldr	r1, [r2, #0]
 801b678:	2bff      	cmp	r3, #255	; 0xff
 801b67a:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 801b67e:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801b682:	b2c9      	uxtb	r1, r1
 801b684:	d045      	beq.n	801b712 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 801b686:	b298      	uxth	r0, r3
 801b688:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 801b68c:	43db      	mvns	r3, r3
 801b68e:	b2db      	uxtb	r3, r3
 801b690:	fb11 f100 	smulbb	r1, r1, r0
 801b694:	fb02 1103 	mla	r1, r2, r3, r1
 801b698:	b289      	uxth	r1, r1
 801b69a:	1c4a      	adds	r2, r1, #1
 801b69c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b6a0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801b6a4:	fb1c fc00 	smulbb	ip, ip, r0
 801b6a8:	fb02 cc03 	mla	ip, r2, r3, ip
 801b6ac:	fa1f fc8c 	uxth.w	ip, ip
 801b6b0:	f10c 0201 	add.w	r2, ip, #1
 801b6b4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b6b8:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 801b6bc:	fb1b f000 	smulbb	r0, fp, r0
 801b6c0:	fb02 0303 	mla	r3, r2, r3, r0
 801b6c4:	b29b      	uxth	r3, r3
 801b6c6:	1c5a      	adds	r2, r3, #1
 801b6c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b6cc:	1209      	asrs	r1, r1, #8
 801b6ce:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b6d2:	121b      	asrs	r3, r3, #8
 801b6d4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b6d8:	f80e cc02 	strb.w	ip, [lr, #-2]
 801b6dc:	f80e 3c01 	strb.w	r3, [lr, #-1]
 801b6e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b6e2:	441d      	add	r5, r3
 801b6e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b6e6:	f10e 0e03 	add.w	lr, lr, #3
 801b6ea:	441e      	add	r6, r3
 801b6ec:	f109 39ff 	add.w	r9, r9, #4294967295
 801b6f0:	e60a      	b.n	801b308 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801b6f2:	f1bc 0f00 	cmp.w	ip, #0
 801b6f6:	d09e      	beq.n	801b636 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f2>
 801b6f8:	4453      	add	r3, sl
 801b6fa:	0859      	lsrs	r1, r3, #1
 801b6fc:	07db      	lsls	r3, r3, #31
 801b6fe:	5c79      	ldrb	r1, [r7, r1]
 801b700:	bf54      	ite	pl
 801b702:	f001 010f 	andpl.w	r1, r1, #15
 801b706:	1109      	asrmi	r1, r1, #4
 801b708:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b70c:	b2c9      	uxtb	r1, r1
 801b70e:	910d      	str	r1, [sp, #52]	; 0x34
 801b710:	e791      	b.n	801b636 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f2>
 801b712:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b716:	f80e cc02 	strb.w	ip, [lr, #-2]
 801b71a:	f80e bc01 	strb.w	fp, [lr, #-1]
 801b71e:	e7df      	b.n	801b6e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49c>
 801b720:	b015      	add	sp, #84	; 0x54
 801b722:	ecbd 8b08 	vpop	{d8-d11}
 801b726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b72a:	bf00      	nop
 801b72c:	20005f2c 	.word	0x20005f2c

0801b730 <CRC_Lock>:
 801b730:	b530      	push	{r4, r5, lr}
 801b732:	4a1d      	ldr	r2, [pc, #116]	; (801b7a8 <CRC_Lock+0x78>)
 801b734:	6813      	ldr	r3, [r2, #0]
 801b736:	f023 0301 	bic.w	r3, r3, #1
 801b73a:	6013      	str	r3, [r2, #0]
 801b73c:	4b1b      	ldr	r3, [pc, #108]	; (801b7ac <CRC_Lock+0x7c>)
 801b73e:	681a      	ldr	r2, [r3, #0]
 801b740:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801b744:	4022      	ands	r2, r4
 801b746:	f24c 2540 	movw	r5, #49728	; 0xc240
 801b74a:	42aa      	cmp	r2, r5
 801b74c:	d005      	beq.n	801b75a <CRC_Lock+0x2a>
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	f24c 2270 	movw	r2, #49776	; 0xc270
 801b754:	4023      	ands	r3, r4
 801b756:	4293      	cmp	r3, r2
 801b758:	d11d      	bne.n	801b796 <CRC_Lock+0x66>
 801b75a:	4b15      	ldr	r3, [pc, #84]	; (801b7b0 <CRC_Lock+0x80>)
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	b9d3      	cbnz	r3, 801b796 <CRC_Lock+0x66>
 801b760:	4a14      	ldr	r2, [pc, #80]	; (801b7b4 <CRC_Lock+0x84>)
 801b762:	6813      	ldr	r3, [r2, #0]
 801b764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b768:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801b76c:	d006      	beq.n	801b77c <CRC_Lock+0x4c>
 801b76e:	6813      	ldr	r3, [r2, #0]
 801b770:	f240 4283 	movw	r2, #1155	; 0x483
 801b774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b778:	4293      	cmp	r3, r2
 801b77a:	d10c      	bne.n	801b796 <CRC_Lock+0x66>
 801b77c:	4b0e      	ldr	r3, [pc, #56]	; (801b7b8 <CRC_Lock+0x88>)
 801b77e:	2201      	movs	r2, #1
 801b780:	601a      	str	r2, [r3, #0]
 801b782:	681a      	ldr	r2, [r3, #0]
 801b784:	2a00      	cmp	r2, #0
 801b786:	d1fc      	bne.n	801b782 <CRC_Lock+0x52>
 801b788:	4b0c      	ldr	r3, [pc, #48]	; (801b7bc <CRC_Lock+0x8c>)
 801b78a:	6018      	str	r0, [r3, #0]
 801b78c:	6818      	ldr	r0, [r3, #0]
 801b78e:	1a43      	subs	r3, r0, r1
 801b790:	4258      	negs	r0, r3
 801b792:	4158      	adcs	r0, r3
 801b794:	bd30      	pop	{r4, r5, pc}
 801b796:	4b0a      	ldr	r3, [pc, #40]	; (801b7c0 <CRC_Lock+0x90>)
 801b798:	2201      	movs	r2, #1
 801b79a:	601a      	str	r2, [r3, #0]
 801b79c:	681a      	ldr	r2, [r3, #0]
 801b79e:	2a00      	cmp	r2, #0
 801b7a0:	d1fc      	bne.n	801b79c <CRC_Lock+0x6c>
 801b7a2:	4b08      	ldr	r3, [pc, #32]	; (801b7c4 <CRC_Lock+0x94>)
 801b7a4:	e7f1      	b.n	801b78a <CRC_Lock+0x5a>
 801b7a6:	bf00      	nop
 801b7a8:	e0002000 	.word	0xe0002000
 801b7ac:	e000ed00 	.word	0xe000ed00
 801b7b0:	e0042000 	.word	0xe0042000
 801b7b4:	5c001000 	.word	0x5c001000
 801b7b8:	58024c08 	.word	0x58024c08
 801b7bc:	58024c00 	.word	0x58024c00
 801b7c0:	40023008 	.word	0x40023008
 801b7c4:	40023000 	.word	0x40023000

0801b7c8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801b7c8:	6101      	str	r1, [r0, #16]
 801b7ca:	4770      	bx	lr

0801b7cc <_ZN8touchgfx8Gestures4tickEv>:
 801b7cc:	7b83      	ldrb	r3, [r0, #14]
 801b7ce:	b14b      	cbz	r3, 801b7e4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801b7d0:	8903      	ldrh	r3, [r0, #8]
 801b7d2:	3301      	adds	r3, #1
 801b7d4:	b29b      	uxth	r3, r3
 801b7d6:	2b07      	cmp	r3, #7
 801b7d8:	8103      	strh	r3, [r0, #8]
 801b7da:	bf81      	itttt	hi
 801b7dc:	2300      	movhi	r3, #0
 801b7de:	8143      	strhhi	r3, [r0, #10]
 801b7e0:	8183      	strhhi	r3, [r0, #12]
 801b7e2:	7383      	strbhi	r3, [r0, #14]
 801b7e4:	4770      	bx	lr
	...

0801b7e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801b7e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b7ec:	4604      	mov	r4, r0
 801b7ee:	8880      	ldrh	r0, [r0, #4]
 801b7f0:	f8ad 0006 	strh.w	r0, [sp, #6]
 801b7f4:	4698      	mov	r8, r3
 801b7f6:	eba8 0000 	sub.w	r0, r8, r0
 801b7fa:	4b1c      	ldr	r3, [pc, #112]	; (801b86c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801b7fc:	9300      	str	r3, [sp, #0]
 801b7fe:	b280      	uxth	r0, r0
 801b800:	2300      	movs	r3, #0
 801b802:	f88d 3004 	strb.w	r3, [sp, #4]
 801b806:	b203      	sxth	r3, r0
 801b808:	2b00      	cmp	r3, #0
 801b80a:	bfb8      	it	lt
 801b80c:	4240      	neglt	r0, r0
 801b80e:	4617      	mov	r7, r2
 801b810:	8aa2      	ldrh	r2, [r4, #20]
 801b812:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801b816:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b81a:	bfb8      	it	lt
 801b81c:	b203      	sxthlt	r3, r0
 801b81e:	460e      	mov	r6, r1
 801b820:	4293      	cmp	r3, r2
 801b822:	88e1      	ldrh	r1, [r4, #6]
 801b824:	f8ad 1008 	strh.w	r1, [sp, #8]
 801b828:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b82c:	dc08      	bgt.n	801b840 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801b82e:	1a69      	subs	r1, r5, r1
 801b830:	b289      	uxth	r1, r1
 801b832:	b20b      	sxth	r3, r1
 801b834:	2b00      	cmp	r3, #0
 801b836:	bfbc      	itt	lt
 801b838:	4249      	neglt	r1, r1
 801b83a:	b20b      	sxthlt	r3, r1
 801b83c:	429a      	cmp	r2, r3
 801b83e:	da13      	bge.n	801b868 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801b840:	6920      	ldr	r0, [r4, #16]
 801b842:	6803      	ldr	r3, [r0, #0]
 801b844:	4669      	mov	r1, sp
 801b846:	685b      	ldr	r3, [r3, #4]
 801b848:	4798      	blx	r3
 801b84a:	eba8 0606 	sub.w	r6, r8, r6
 801b84e:	2300      	movs	r3, #0
 801b850:	1bef      	subs	r7, r5, r7
 801b852:	2001      	movs	r0, #1
 801b854:	8123      	strh	r3, [r4, #8]
 801b856:	8166      	strh	r6, [r4, #10]
 801b858:	81a7      	strh	r7, [r4, #12]
 801b85a:	f8a4 8004 	strh.w	r8, [r4, #4]
 801b85e:	80e5      	strh	r5, [r4, #6]
 801b860:	73a0      	strb	r0, [r4, #14]
 801b862:	b004      	add	sp, #16
 801b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b868:	2000      	movs	r0, #0
 801b86a:	e7fa      	b.n	801b862 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801b86c:	0801ecdc 	.word	0x0801ecdc

0801b870 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801b870:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b872:	461e      	mov	r6, r3
 801b874:	1e4b      	subs	r3, r1, #1
 801b876:	2b01      	cmp	r3, #1
 801b878:	b085      	sub	sp, #20
 801b87a:	4604      	mov	r4, r0
 801b87c:	460d      	mov	r5, r1
 801b87e:	4617      	mov	r7, r2
 801b880:	d84b      	bhi.n	801b91a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801b882:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b886:	1cd3      	adds	r3, r2, #3
 801b888:	b29b      	uxth	r3, r3
 801b88a:	2b06      	cmp	r3, #6
 801b88c:	d916      	bls.n	801b8bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801b88e:	f8df c098 	ldr.w	ip, [pc, #152]	; 801b928 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801b892:	f8cd c004 	str.w	ip, [sp, #4]
 801b896:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b89a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b89e:	6900      	ldr	r0, [r0, #16]
 801b8a0:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b8a4:	f04f 0c00 	mov.w	ip, #0
 801b8a8:	f88d c008 	strb.w	ip, [sp, #8]
 801b8ac:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b8b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b8b4:	6803      	ldr	r3, [r0, #0]
 801b8b6:	a901      	add	r1, sp, #4
 801b8b8:	689b      	ldr	r3, [r3, #8]
 801b8ba:	4798      	blx	r3
 801b8bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b8c0:	1cd3      	adds	r3, r2, #3
 801b8c2:	b29b      	uxth	r3, r3
 801b8c4:	2b06      	cmp	r3, #6
 801b8c6:	d916      	bls.n	801b8f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b8c8:	f8df c05c 	ldr.w	ip, [pc, #92]	; 801b928 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801b8cc:	f8cd c004 	str.w	ip, [sp, #4]
 801b8d0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b8d4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b8d8:	6920      	ldr	r0, [r4, #16]
 801b8da:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b8de:	f04f 0c01 	mov.w	ip, #1
 801b8e2:	f88d c008 	strb.w	ip, [sp, #8]
 801b8e6:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b8ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b8ee:	6803      	ldr	r3, [r0, #0]
 801b8f0:	a901      	add	r1, sp, #4
 801b8f2:	689b      	ldr	r3, [r3, #8]
 801b8f4:	4798      	blx	r3
 801b8f6:	4b0b      	ldr	r3, [pc, #44]	; (801b924 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 801b8f8:	9301      	str	r3, [sp, #4]
 801b8fa:	6920      	ldr	r0, [r4, #16]
 801b8fc:	f88d 5008 	strb.w	r5, [sp, #8]
 801b900:	2300      	movs	r3, #0
 801b902:	f8ad 700a 	strh.w	r7, [sp, #10]
 801b906:	f8ad 600c 	strh.w	r6, [sp, #12]
 801b90a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b90e:	6803      	ldr	r3, [r0, #0]
 801b910:	a901      	add	r1, sp, #4
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	4798      	blx	r3
 801b916:	b005      	add	sp, #20
 801b918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b91a:	2900      	cmp	r1, #0
 801b91c:	d1eb      	bne.n	801b8f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b91e:	80a2      	strh	r2, [r4, #4]
 801b920:	80c6      	strh	r6, [r0, #6]
 801b922:	e7e8      	b.n	801b8f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b924:	0801ecc8 	.word	0x0801ecc8
 801b928:	0801ecf0 	.word	0x0801ecf0

0801b92c <__aeabi_atexit>:
 801b92c:	460b      	mov	r3, r1
 801b92e:	4601      	mov	r1, r0
 801b930:	4618      	mov	r0, r3
 801b932:	f000 b853 	b.w	801b9dc <__cxa_atexit>

0801b936 <__cxa_pure_virtual>:
 801b936:	b508      	push	{r3, lr}
 801b938:	f000 f820 	bl	801b97c <_ZSt9terminatev>

0801b93c <_ZdlPvj>:
 801b93c:	f000 b80f 	b.w	801b95e <_ZdlPv>

0801b940 <__cxa_guard_acquire>:
 801b940:	6803      	ldr	r3, [r0, #0]
 801b942:	07db      	lsls	r3, r3, #31
 801b944:	d406      	bmi.n	801b954 <__cxa_guard_acquire+0x14>
 801b946:	7843      	ldrb	r3, [r0, #1]
 801b948:	b103      	cbz	r3, 801b94c <__cxa_guard_acquire+0xc>
 801b94a:	deff      	udf	#255	; 0xff
 801b94c:	2301      	movs	r3, #1
 801b94e:	7043      	strb	r3, [r0, #1]
 801b950:	4618      	mov	r0, r3
 801b952:	4770      	bx	lr
 801b954:	2000      	movs	r0, #0
 801b956:	4770      	bx	lr

0801b958 <__cxa_guard_release>:
 801b958:	2301      	movs	r3, #1
 801b95a:	6003      	str	r3, [r0, #0]
 801b95c:	4770      	bx	lr

0801b95e <_ZdlPv>:
 801b95e:	f000 b88f 	b.w	801ba80 <free>

0801b962 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801b962:	b508      	push	{r3, lr}
 801b964:	4780      	blx	r0
 801b966:	f000 f80e 	bl	801b986 <abort>
	...

0801b96c <_ZSt13get_terminatev>:
 801b96c:	4b02      	ldr	r3, [pc, #8]	; (801b978 <_ZSt13get_terminatev+0xc>)
 801b96e:	6818      	ldr	r0, [r3, #0]
 801b970:	f3bf 8f5b 	dmb	ish
 801b974:	4770      	bx	lr
 801b976:	bf00      	nop
 801b978:	200000e8 	.word	0x200000e8

0801b97c <_ZSt9terminatev>:
 801b97c:	b508      	push	{r3, lr}
 801b97e:	f7ff fff5 	bl	801b96c <_ZSt13get_terminatev>
 801b982:	f7ff ffee 	bl	801b962 <_ZN10__cxxabiv111__terminateEPFvvE>

0801b986 <abort>:
 801b986:	b508      	push	{r3, lr}
 801b988:	2006      	movs	r0, #6
 801b98a:	f000 fc3d 	bl	801c208 <raise>
 801b98e:	2001      	movs	r0, #1
 801b990:	f7e5 feee 	bl	8001770 <_exit>

0801b994 <__assert_func>:
 801b994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b996:	461c      	mov	r4, r3
 801b998:	4b09      	ldr	r3, [pc, #36]	; (801b9c0 <__assert_func+0x2c>)
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	4605      	mov	r5, r0
 801b99e:	68d8      	ldr	r0, [r3, #12]
 801b9a0:	b152      	cbz	r2, 801b9b8 <__assert_func+0x24>
 801b9a2:	4b08      	ldr	r3, [pc, #32]	; (801b9c4 <__assert_func+0x30>)
 801b9a4:	9100      	str	r1, [sp, #0]
 801b9a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801b9aa:	4907      	ldr	r1, [pc, #28]	; (801b9c8 <__assert_func+0x34>)
 801b9ac:	462b      	mov	r3, r5
 801b9ae:	4622      	mov	r2, r4
 801b9b0:	f000 f828 	bl	801ba04 <fiprintf>
 801b9b4:	f7ff ffe7 	bl	801b986 <abort>
 801b9b8:	4b04      	ldr	r3, [pc, #16]	; (801b9cc <__assert_func+0x38>)
 801b9ba:	461a      	mov	r2, r3
 801b9bc:	e7f2      	b.n	801b9a4 <__assert_func+0x10>
 801b9be:	bf00      	nop
 801b9c0:	200000ec 	.word	0x200000ec
 801b9c4:	0801ffe6 	.word	0x0801ffe6
 801b9c8:	0801fff3 	.word	0x0801fff3
 801b9cc:	08020021 	.word	0x08020021

0801b9d0 <atexit>:
 801b9d0:	2300      	movs	r3, #0
 801b9d2:	4601      	mov	r1, r0
 801b9d4:	461a      	mov	r2, r3
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f000 bcf2 	b.w	801c3c0 <__register_exitproc>

0801b9dc <__cxa_atexit>:
 801b9dc:	b510      	push	{r4, lr}
 801b9de:	4c05      	ldr	r4, [pc, #20]	; (801b9f4 <__cxa_atexit+0x18>)
 801b9e0:	4613      	mov	r3, r2
 801b9e2:	b12c      	cbz	r4, 801b9f0 <__cxa_atexit+0x14>
 801b9e4:	460a      	mov	r2, r1
 801b9e6:	4601      	mov	r1, r0
 801b9e8:	2002      	movs	r0, #2
 801b9ea:	f000 fce9 	bl	801c3c0 <__register_exitproc>
 801b9ee:	bd10      	pop	{r4, pc}
 801b9f0:	4620      	mov	r0, r4
 801b9f2:	e7fc      	b.n	801b9ee <__cxa_atexit+0x12>
 801b9f4:	0801c3c1 	.word	0x0801c3c1

0801b9f8 <__errno>:
 801b9f8:	4b01      	ldr	r3, [pc, #4]	; (801ba00 <__errno+0x8>)
 801b9fa:	6818      	ldr	r0, [r3, #0]
 801b9fc:	4770      	bx	lr
 801b9fe:	bf00      	nop
 801ba00:	200000ec 	.word	0x200000ec

0801ba04 <fiprintf>:
 801ba04:	b40e      	push	{r1, r2, r3}
 801ba06:	b503      	push	{r0, r1, lr}
 801ba08:	4601      	mov	r1, r0
 801ba0a:	ab03      	add	r3, sp, #12
 801ba0c:	4805      	ldr	r0, [pc, #20]	; (801ba24 <fiprintf+0x20>)
 801ba0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba12:	6800      	ldr	r0, [r0, #0]
 801ba14:	9301      	str	r3, [sp, #4]
 801ba16:	f000 f921 	bl	801bc5c <_vfiprintf_r>
 801ba1a:	b002      	add	sp, #8
 801ba1c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ba20:	b003      	add	sp, #12
 801ba22:	4770      	bx	lr
 801ba24:	200000ec 	.word	0x200000ec

0801ba28 <__libc_init_array>:
 801ba28:	b570      	push	{r4, r5, r6, lr}
 801ba2a:	4e0d      	ldr	r6, [pc, #52]	; (801ba60 <__libc_init_array+0x38>)
 801ba2c:	4c0d      	ldr	r4, [pc, #52]	; (801ba64 <__libc_init_array+0x3c>)
 801ba2e:	1ba4      	subs	r4, r4, r6
 801ba30:	10a4      	asrs	r4, r4, #2
 801ba32:	2500      	movs	r5, #0
 801ba34:	42a5      	cmp	r5, r4
 801ba36:	d109      	bne.n	801ba4c <__libc_init_array+0x24>
 801ba38:	4e0b      	ldr	r6, [pc, #44]	; (801ba68 <__libc_init_array+0x40>)
 801ba3a:	4c0c      	ldr	r4, [pc, #48]	; (801ba6c <__libc_init_array+0x44>)
 801ba3c:	f000 ffb0 	bl	801c9a0 <_init>
 801ba40:	1ba4      	subs	r4, r4, r6
 801ba42:	10a4      	asrs	r4, r4, #2
 801ba44:	2500      	movs	r5, #0
 801ba46:	42a5      	cmp	r5, r4
 801ba48:	d105      	bne.n	801ba56 <__libc_init_array+0x2e>
 801ba4a:	bd70      	pop	{r4, r5, r6, pc}
 801ba4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ba50:	4798      	blx	r3
 801ba52:	3501      	adds	r5, #1
 801ba54:	e7ee      	b.n	801ba34 <__libc_init_array+0xc>
 801ba56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ba5a:	4798      	blx	r3
 801ba5c:	3501      	adds	r5, #1
 801ba5e:	e7f2      	b.n	801ba46 <__libc_init_array+0x1e>
 801ba60:	0803db94 	.word	0x0803db94
 801ba64:	0803db94 	.word	0x0803db94
 801ba68:	0803db94 	.word	0x0803db94
 801ba6c:	0803dba8 	.word	0x0803dba8

0801ba70 <malloc>:
 801ba70:	4b02      	ldr	r3, [pc, #8]	; (801ba7c <malloc+0xc>)
 801ba72:	4601      	mov	r1, r0
 801ba74:	6818      	ldr	r0, [r3, #0]
 801ba76:	f000 b86d 	b.w	801bb54 <_malloc_r>
 801ba7a:	bf00      	nop
 801ba7c:	200000ec 	.word	0x200000ec

0801ba80 <free>:
 801ba80:	4b02      	ldr	r3, [pc, #8]	; (801ba8c <free+0xc>)
 801ba82:	4601      	mov	r1, r0
 801ba84:	6818      	ldr	r0, [r3, #0]
 801ba86:	f000 b817 	b.w	801bab8 <_free_r>
 801ba8a:	bf00      	nop
 801ba8c:	200000ec 	.word	0x200000ec

0801ba90 <memcpy>:
 801ba90:	b510      	push	{r4, lr}
 801ba92:	1e43      	subs	r3, r0, #1
 801ba94:	440a      	add	r2, r1
 801ba96:	4291      	cmp	r1, r2
 801ba98:	d100      	bne.n	801ba9c <memcpy+0xc>
 801ba9a:	bd10      	pop	{r4, pc}
 801ba9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801baa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801baa4:	e7f7      	b.n	801ba96 <memcpy+0x6>

0801baa6 <memset>:
 801baa6:	4402      	add	r2, r0
 801baa8:	4603      	mov	r3, r0
 801baaa:	4293      	cmp	r3, r2
 801baac:	d100      	bne.n	801bab0 <memset+0xa>
 801baae:	4770      	bx	lr
 801bab0:	f803 1b01 	strb.w	r1, [r3], #1
 801bab4:	e7f9      	b.n	801baaa <memset+0x4>
	...

0801bab8 <_free_r>:
 801bab8:	b538      	push	{r3, r4, r5, lr}
 801baba:	4605      	mov	r5, r0
 801babc:	2900      	cmp	r1, #0
 801babe:	d045      	beq.n	801bb4c <_free_r+0x94>
 801bac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bac4:	1f0c      	subs	r4, r1, #4
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	bfb8      	it	lt
 801baca:	18e4      	addlt	r4, r4, r3
 801bacc:	f000 feba 	bl	801c844 <__malloc_lock>
 801bad0:	4a1f      	ldr	r2, [pc, #124]	; (801bb50 <_free_r+0x98>)
 801bad2:	6813      	ldr	r3, [r2, #0]
 801bad4:	4610      	mov	r0, r2
 801bad6:	b933      	cbnz	r3, 801bae6 <_free_r+0x2e>
 801bad8:	6063      	str	r3, [r4, #4]
 801bada:	6014      	str	r4, [r2, #0]
 801badc:	4628      	mov	r0, r5
 801bade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bae2:	f000 beb0 	b.w	801c846 <__malloc_unlock>
 801bae6:	42a3      	cmp	r3, r4
 801bae8:	d90c      	bls.n	801bb04 <_free_r+0x4c>
 801baea:	6821      	ldr	r1, [r4, #0]
 801baec:	1862      	adds	r2, r4, r1
 801baee:	4293      	cmp	r3, r2
 801baf0:	bf04      	itt	eq
 801baf2:	681a      	ldreq	r2, [r3, #0]
 801baf4:	685b      	ldreq	r3, [r3, #4]
 801baf6:	6063      	str	r3, [r4, #4]
 801baf8:	bf04      	itt	eq
 801bafa:	1852      	addeq	r2, r2, r1
 801bafc:	6022      	streq	r2, [r4, #0]
 801bafe:	6004      	str	r4, [r0, #0]
 801bb00:	e7ec      	b.n	801badc <_free_r+0x24>
 801bb02:	4613      	mov	r3, r2
 801bb04:	685a      	ldr	r2, [r3, #4]
 801bb06:	b10a      	cbz	r2, 801bb0c <_free_r+0x54>
 801bb08:	42a2      	cmp	r2, r4
 801bb0a:	d9fa      	bls.n	801bb02 <_free_r+0x4a>
 801bb0c:	6819      	ldr	r1, [r3, #0]
 801bb0e:	1858      	adds	r0, r3, r1
 801bb10:	42a0      	cmp	r0, r4
 801bb12:	d10b      	bne.n	801bb2c <_free_r+0x74>
 801bb14:	6820      	ldr	r0, [r4, #0]
 801bb16:	4401      	add	r1, r0
 801bb18:	1858      	adds	r0, r3, r1
 801bb1a:	4282      	cmp	r2, r0
 801bb1c:	6019      	str	r1, [r3, #0]
 801bb1e:	d1dd      	bne.n	801badc <_free_r+0x24>
 801bb20:	6810      	ldr	r0, [r2, #0]
 801bb22:	6852      	ldr	r2, [r2, #4]
 801bb24:	605a      	str	r2, [r3, #4]
 801bb26:	4401      	add	r1, r0
 801bb28:	6019      	str	r1, [r3, #0]
 801bb2a:	e7d7      	b.n	801badc <_free_r+0x24>
 801bb2c:	d902      	bls.n	801bb34 <_free_r+0x7c>
 801bb2e:	230c      	movs	r3, #12
 801bb30:	602b      	str	r3, [r5, #0]
 801bb32:	e7d3      	b.n	801badc <_free_r+0x24>
 801bb34:	6820      	ldr	r0, [r4, #0]
 801bb36:	1821      	adds	r1, r4, r0
 801bb38:	428a      	cmp	r2, r1
 801bb3a:	bf04      	itt	eq
 801bb3c:	6811      	ldreq	r1, [r2, #0]
 801bb3e:	6852      	ldreq	r2, [r2, #4]
 801bb40:	6062      	str	r2, [r4, #4]
 801bb42:	bf04      	itt	eq
 801bb44:	1809      	addeq	r1, r1, r0
 801bb46:	6021      	streq	r1, [r4, #0]
 801bb48:	605c      	str	r4, [r3, #4]
 801bb4a:	e7c7      	b.n	801badc <_free_r+0x24>
 801bb4c:	bd38      	pop	{r3, r4, r5, pc}
 801bb4e:	bf00      	nop
 801bb50:	20006020 	.word	0x20006020

0801bb54 <_malloc_r>:
 801bb54:	b570      	push	{r4, r5, r6, lr}
 801bb56:	1ccd      	adds	r5, r1, #3
 801bb58:	f025 0503 	bic.w	r5, r5, #3
 801bb5c:	3508      	adds	r5, #8
 801bb5e:	2d0c      	cmp	r5, #12
 801bb60:	bf38      	it	cc
 801bb62:	250c      	movcc	r5, #12
 801bb64:	2d00      	cmp	r5, #0
 801bb66:	4606      	mov	r6, r0
 801bb68:	db01      	blt.n	801bb6e <_malloc_r+0x1a>
 801bb6a:	42a9      	cmp	r1, r5
 801bb6c:	d903      	bls.n	801bb76 <_malloc_r+0x22>
 801bb6e:	230c      	movs	r3, #12
 801bb70:	6033      	str	r3, [r6, #0]
 801bb72:	2000      	movs	r0, #0
 801bb74:	bd70      	pop	{r4, r5, r6, pc}
 801bb76:	f000 fe65 	bl	801c844 <__malloc_lock>
 801bb7a:	4a21      	ldr	r2, [pc, #132]	; (801bc00 <_malloc_r+0xac>)
 801bb7c:	6814      	ldr	r4, [r2, #0]
 801bb7e:	4621      	mov	r1, r4
 801bb80:	b991      	cbnz	r1, 801bba8 <_malloc_r+0x54>
 801bb82:	4c20      	ldr	r4, [pc, #128]	; (801bc04 <_malloc_r+0xb0>)
 801bb84:	6823      	ldr	r3, [r4, #0]
 801bb86:	b91b      	cbnz	r3, 801bb90 <_malloc_r+0x3c>
 801bb88:	4630      	mov	r0, r6
 801bb8a:	f000 fb05 	bl	801c198 <_sbrk_r>
 801bb8e:	6020      	str	r0, [r4, #0]
 801bb90:	4629      	mov	r1, r5
 801bb92:	4630      	mov	r0, r6
 801bb94:	f000 fb00 	bl	801c198 <_sbrk_r>
 801bb98:	1c43      	adds	r3, r0, #1
 801bb9a:	d124      	bne.n	801bbe6 <_malloc_r+0x92>
 801bb9c:	230c      	movs	r3, #12
 801bb9e:	6033      	str	r3, [r6, #0]
 801bba0:	4630      	mov	r0, r6
 801bba2:	f000 fe50 	bl	801c846 <__malloc_unlock>
 801bba6:	e7e4      	b.n	801bb72 <_malloc_r+0x1e>
 801bba8:	680b      	ldr	r3, [r1, #0]
 801bbaa:	1b5b      	subs	r3, r3, r5
 801bbac:	d418      	bmi.n	801bbe0 <_malloc_r+0x8c>
 801bbae:	2b0b      	cmp	r3, #11
 801bbb0:	d90f      	bls.n	801bbd2 <_malloc_r+0x7e>
 801bbb2:	600b      	str	r3, [r1, #0]
 801bbb4:	50cd      	str	r5, [r1, r3]
 801bbb6:	18cc      	adds	r4, r1, r3
 801bbb8:	4630      	mov	r0, r6
 801bbba:	f000 fe44 	bl	801c846 <__malloc_unlock>
 801bbbe:	f104 000b 	add.w	r0, r4, #11
 801bbc2:	1d23      	adds	r3, r4, #4
 801bbc4:	f020 0007 	bic.w	r0, r0, #7
 801bbc8:	1ac3      	subs	r3, r0, r3
 801bbca:	d0d3      	beq.n	801bb74 <_malloc_r+0x20>
 801bbcc:	425a      	negs	r2, r3
 801bbce:	50e2      	str	r2, [r4, r3]
 801bbd0:	e7d0      	b.n	801bb74 <_malloc_r+0x20>
 801bbd2:	428c      	cmp	r4, r1
 801bbd4:	684b      	ldr	r3, [r1, #4]
 801bbd6:	bf16      	itet	ne
 801bbd8:	6063      	strne	r3, [r4, #4]
 801bbda:	6013      	streq	r3, [r2, #0]
 801bbdc:	460c      	movne	r4, r1
 801bbde:	e7eb      	b.n	801bbb8 <_malloc_r+0x64>
 801bbe0:	460c      	mov	r4, r1
 801bbe2:	6849      	ldr	r1, [r1, #4]
 801bbe4:	e7cc      	b.n	801bb80 <_malloc_r+0x2c>
 801bbe6:	1cc4      	adds	r4, r0, #3
 801bbe8:	f024 0403 	bic.w	r4, r4, #3
 801bbec:	42a0      	cmp	r0, r4
 801bbee:	d005      	beq.n	801bbfc <_malloc_r+0xa8>
 801bbf0:	1a21      	subs	r1, r4, r0
 801bbf2:	4630      	mov	r0, r6
 801bbf4:	f000 fad0 	bl	801c198 <_sbrk_r>
 801bbf8:	3001      	adds	r0, #1
 801bbfa:	d0cf      	beq.n	801bb9c <_malloc_r+0x48>
 801bbfc:	6025      	str	r5, [r4, #0]
 801bbfe:	e7db      	b.n	801bbb8 <_malloc_r+0x64>
 801bc00:	20006020 	.word	0x20006020
 801bc04:	20006024 	.word	0x20006024

0801bc08 <__sfputc_r>:
 801bc08:	6893      	ldr	r3, [r2, #8]
 801bc0a:	3b01      	subs	r3, #1
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	b410      	push	{r4}
 801bc10:	6093      	str	r3, [r2, #8]
 801bc12:	da08      	bge.n	801bc26 <__sfputc_r+0x1e>
 801bc14:	6994      	ldr	r4, [r2, #24]
 801bc16:	42a3      	cmp	r3, r4
 801bc18:	db01      	blt.n	801bc1e <__sfputc_r+0x16>
 801bc1a:	290a      	cmp	r1, #10
 801bc1c:	d103      	bne.n	801bc26 <__sfputc_r+0x1e>
 801bc1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc22:	f000 bb0d 	b.w	801c240 <__swbuf_r>
 801bc26:	6813      	ldr	r3, [r2, #0]
 801bc28:	1c58      	adds	r0, r3, #1
 801bc2a:	6010      	str	r0, [r2, #0]
 801bc2c:	7019      	strb	r1, [r3, #0]
 801bc2e:	4608      	mov	r0, r1
 801bc30:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc34:	4770      	bx	lr

0801bc36 <__sfputs_r>:
 801bc36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc38:	4606      	mov	r6, r0
 801bc3a:	460f      	mov	r7, r1
 801bc3c:	4614      	mov	r4, r2
 801bc3e:	18d5      	adds	r5, r2, r3
 801bc40:	42ac      	cmp	r4, r5
 801bc42:	d101      	bne.n	801bc48 <__sfputs_r+0x12>
 801bc44:	2000      	movs	r0, #0
 801bc46:	e007      	b.n	801bc58 <__sfputs_r+0x22>
 801bc48:	463a      	mov	r2, r7
 801bc4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc4e:	4630      	mov	r0, r6
 801bc50:	f7ff ffda 	bl	801bc08 <__sfputc_r>
 801bc54:	1c43      	adds	r3, r0, #1
 801bc56:	d1f3      	bne.n	801bc40 <__sfputs_r+0xa>
 801bc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bc5c <_vfiprintf_r>:
 801bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc60:	460c      	mov	r4, r1
 801bc62:	b09d      	sub	sp, #116	; 0x74
 801bc64:	4617      	mov	r7, r2
 801bc66:	461d      	mov	r5, r3
 801bc68:	4606      	mov	r6, r0
 801bc6a:	b118      	cbz	r0, 801bc74 <_vfiprintf_r+0x18>
 801bc6c:	6983      	ldr	r3, [r0, #24]
 801bc6e:	b90b      	cbnz	r3, 801bc74 <_vfiprintf_r+0x18>
 801bc70:	f000 fcfa 	bl	801c668 <__sinit>
 801bc74:	4b7c      	ldr	r3, [pc, #496]	; (801be68 <_vfiprintf_r+0x20c>)
 801bc76:	429c      	cmp	r4, r3
 801bc78:	d158      	bne.n	801bd2c <_vfiprintf_r+0xd0>
 801bc7a:	6874      	ldr	r4, [r6, #4]
 801bc7c:	89a3      	ldrh	r3, [r4, #12]
 801bc7e:	0718      	lsls	r0, r3, #28
 801bc80:	d55e      	bpl.n	801bd40 <_vfiprintf_r+0xe4>
 801bc82:	6923      	ldr	r3, [r4, #16]
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	d05b      	beq.n	801bd40 <_vfiprintf_r+0xe4>
 801bc88:	2300      	movs	r3, #0
 801bc8a:	9309      	str	r3, [sp, #36]	; 0x24
 801bc8c:	2320      	movs	r3, #32
 801bc8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bc92:	2330      	movs	r3, #48	; 0x30
 801bc94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bc98:	9503      	str	r5, [sp, #12]
 801bc9a:	f04f 0b01 	mov.w	fp, #1
 801bc9e:	46b8      	mov	r8, r7
 801bca0:	4645      	mov	r5, r8
 801bca2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801bca6:	b10b      	cbz	r3, 801bcac <_vfiprintf_r+0x50>
 801bca8:	2b25      	cmp	r3, #37	; 0x25
 801bcaa:	d154      	bne.n	801bd56 <_vfiprintf_r+0xfa>
 801bcac:	ebb8 0a07 	subs.w	sl, r8, r7
 801bcb0:	d00b      	beq.n	801bcca <_vfiprintf_r+0x6e>
 801bcb2:	4653      	mov	r3, sl
 801bcb4:	463a      	mov	r2, r7
 801bcb6:	4621      	mov	r1, r4
 801bcb8:	4630      	mov	r0, r6
 801bcba:	f7ff ffbc 	bl	801bc36 <__sfputs_r>
 801bcbe:	3001      	adds	r0, #1
 801bcc0:	f000 80c2 	beq.w	801be48 <_vfiprintf_r+0x1ec>
 801bcc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcc6:	4453      	add	r3, sl
 801bcc8:	9309      	str	r3, [sp, #36]	; 0x24
 801bcca:	f898 3000 	ldrb.w	r3, [r8]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	f000 80ba 	beq.w	801be48 <_vfiprintf_r+0x1ec>
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	f04f 32ff 	mov.w	r2, #4294967295
 801bcda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bcde:	9304      	str	r3, [sp, #16]
 801bce0:	9307      	str	r3, [sp, #28]
 801bce2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bce6:	931a      	str	r3, [sp, #104]	; 0x68
 801bce8:	46a8      	mov	r8, r5
 801bcea:	2205      	movs	r2, #5
 801bcec:	f818 1b01 	ldrb.w	r1, [r8], #1
 801bcf0:	485e      	ldr	r0, [pc, #376]	; (801be6c <_vfiprintf_r+0x210>)
 801bcf2:	f7e4 fa7d 	bl	80001f0 <memchr>
 801bcf6:	9b04      	ldr	r3, [sp, #16]
 801bcf8:	bb78      	cbnz	r0, 801bd5a <_vfiprintf_r+0xfe>
 801bcfa:	06d9      	lsls	r1, r3, #27
 801bcfc:	bf44      	itt	mi
 801bcfe:	2220      	movmi	r2, #32
 801bd00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801bd04:	071a      	lsls	r2, r3, #28
 801bd06:	bf44      	itt	mi
 801bd08:	222b      	movmi	r2, #43	; 0x2b
 801bd0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801bd0e:	782a      	ldrb	r2, [r5, #0]
 801bd10:	2a2a      	cmp	r2, #42	; 0x2a
 801bd12:	d02a      	beq.n	801bd6a <_vfiprintf_r+0x10e>
 801bd14:	9a07      	ldr	r2, [sp, #28]
 801bd16:	46a8      	mov	r8, r5
 801bd18:	2000      	movs	r0, #0
 801bd1a:	250a      	movs	r5, #10
 801bd1c:	4641      	mov	r1, r8
 801bd1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bd22:	3b30      	subs	r3, #48	; 0x30
 801bd24:	2b09      	cmp	r3, #9
 801bd26:	d969      	bls.n	801bdfc <_vfiprintf_r+0x1a0>
 801bd28:	b360      	cbz	r0, 801bd84 <_vfiprintf_r+0x128>
 801bd2a:	e024      	b.n	801bd76 <_vfiprintf_r+0x11a>
 801bd2c:	4b50      	ldr	r3, [pc, #320]	; (801be70 <_vfiprintf_r+0x214>)
 801bd2e:	429c      	cmp	r4, r3
 801bd30:	d101      	bne.n	801bd36 <_vfiprintf_r+0xda>
 801bd32:	68b4      	ldr	r4, [r6, #8]
 801bd34:	e7a2      	b.n	801bc7c <_vfiprintf_r+0x20>
 801bd36:	4b4f      	ldr	r3, [pc, #316]	; (801be74 <_vfiprintf_r+0x218>)
 801bd38:	429c      	cmp	r4, r3
 801bd3a:	bf08      	it	eq
 801bd3c:	68f4      	ldreq	r4, [r6, #12]
 801bd3e:	e79d      	b.n	801bc7c <_vfiprintf_r+0x20>
 801bd40:	4621      	mov	r1, r4
 801bd42:	4630      	mov	r0, r6
 801bd44:	f000 face 	bl	801c2e4 <__swsetup_r>
 801bd48:	2800      	cmp	r0, #0
 801bd4a:	d09d      	beq.n	801bc88 <_vfiprintf_r+0x2c>
 801bd4c:	f04f 30ff 	mov.w	r0, #4294967295
 801bd50:	b01d      	add	sp, #116	; 0x74
 801bd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd56:	46a8      	mov	r8, r5
 801bd58:	e7a2      	b.n	801bca0 <_vfiprintf_r+0x44>
 801bd5a:	4a44      	ldr	r2, [pc, #272]	; (801be6c <_vfiprintf_r+0x210>)
 801bd5c:	1a80      	subs	r0, r0, r2
 801bd5e:	fa0b f000 	lsl.w	r0, fp, r0
 801bd62:	4318      	orrs	r0, r3
 801bd64:	9004      	str	r0, [sp, #16]
 801bd66:	4645      	mov	r5, r8
 801bd68:	e7be      	b.n	801bce8 <_vfiprintf_r+0x8c>
 801bd6a:	9a03      	ldr	r2, [sp, #12]
 801bd6c:	1d11      	adds	r1, r2, #4
 801bd6e:	6812      	ldr	r2, [r2, #0]
 801bd70:	9103      	str	r1, [sp, #12]
 801bd72:	2a00      	cmp	r2, #0
 801bd74:	db01      	blt.n	801bd7a <_vfiprintf_r+0x11e>
 801bd76:	9207      	str	r2, [sp, #28]
 801bd78:	e004      	b.n	801bd84 <_vfiprintf_r+0x128>
 801bd7a:	4252      	negs	r2, r2
 801bd7c:	f043 0302 	orr.w	r3, r3, #2
 801bd80:	9207      	str	r2, [sp, #28]
 801bd82:	9304      	str	r3, [sp, #16]
 801bd84:	f898 3000 	ldrb.w	r3, [r8]
 801bd88:	2b2e      	cmp	r3, #46	; 0x2e
 801bd8a:	d10e      	bne.n	801bdaa <_vfiprintf_r+0x14e>
 801bd8c:	f898 3001 	ldrb.w	r3, [r8, #1]
 801bd90:	2b2a      	cmp	r3, #42	; 0x2a
 801bd92:	d138      	bne.n	801be06 <_vfiprintf_r+0x1aa>
 801bd94:	9b03      	ldr	r3, [sp, #12]
 801bd96:	1d1a      	adds	r2, r3, #4
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	9203      	str	r2, [sp, #12]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	bfb8      	it	lt
 801bda0:	f04f 33ff 	movlt.w	r3, #4294967295
 801bda4:	f108 0802 	add.w	r8, r8, #2
 801bda8:	9305      	str	r3, [sp, #20]
 801bdaa:	4d33      	ldr	r5, [pc, #204]	; (801be78 <_vfiprintf_r+0x21c>)
 801bdac:	f898 1000 	ldrb.w	r1, [r8]
 801bdb0:	2203      	movs	r2, #3
 801bdb2:	4628      	mov	r0, r5
 801bdb4:	f7e4 fa1c 	bl	80001f0 <memchr>
 801bdb8:	b140      	cbz	r0, 801bdcc <_vfiprintf_r+0x170>
 801bdba:	2340      	movs	r3, #64	; 0x40
 801bdbc:	1b40      	subs	r0, r0, r5
 801bdbe:	fa03 f000 	lsl.w	r0, r3, r0
 801bdc2:	9b04      	ldr	r3, [sp, #16]
 801bdc4:	4303      	orrs	r3, r0
 801bdc6:	f108 0801 	add.w	r8, r8, #1
 801bdca:	9304      	str	r3, [sp, #16]
 801bdcc:	f898 1000 	ldrb.w	r1, [r8]
 801bdd0:	482a      	ldr	r0, [pc, #168]	; (801be7c <_vfiprintf_r+0x220>)
 801bdd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bdd6:	2206      	movs	r2, #6
 801bdd8:	f108 0701 	add.w	r7, r8, #1
 801bddc:	f7e4 fa08 	bl	80001f0 <memchr>
 801bde0:	2800      	cmp	r0, #0
 801bde2:	d037      	beq.n	801be54 <_vfiprintf_r+0x1f8>
 801bde4:	4b26      	ldr	r3, [pc, #152]	; (801be80 <_vfiprintf_r+0x224>)
 801bde6:	bb1b      	cbnz	r3, 801be30 <_vfiprintf_r+0x1d4>
 801bde8:	9b03      	ldr	r3, [sp, #12]
 801bdea:	3307      	adds	r3, #7
 801bdec:	f023 0307 	bic.w	r3, r3, #7
 801bdf0:	3308      	adds	r3, #8
 801bdf2:	9303      	str	r3, [sp, #12]
 801bdf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdf6:	444b      	add	r3, r9
 801bdf8:	9309      	str	r3, [sp, #36]	; 0x24
 801bdfa:	e750      	b.n	801bc9e <_vfiprintf_r+0x42>
 801bdfc:	fb05 3202 	mla	r2, r5, r2, r3
 801be00:	2001      	movs	r0, #1
 801be02:	4688      	mov	r8, r1
 801be04:	e78a      	b.n	801bd1c <_vfiprintf_r+0xc0>
 801be06:	2300      	movs	r3, #0
 801be08:	f108 0801 	add.w	r8, r8, #1
 801be0c:	9305      	str	r3, [sp, #20]
 801be0e:	4619      	mov	r1, r3
 801be10:	250a      	movs	r5, #10
 801be12:	4640      	mov	r0, r8
 801be14:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be18:	3a30      	subs	r2, #48	; 0x30
 801be1a:	2a09      	cmp	r2, #9
 801be1c:	d903      	bls.n	801be26 <_vfiprintf_r+0x1ca>
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d0c3      	beq.n	801bdaa <_vfiprintf_r+0x14e>
 801be22:	9105      	str	r1, [sp, #20]
 801be24:	e7c1      	b.n	801bdaa <_vfiprintf_r+0x14e>
 801be26:	fb05 2101 	mla	r1, r5, r1, r2
 801be2a:	2301      	movs	r3, #1
 801be2c:	4680      	mov	r8, r0
 801be2e:	e7f0      	b.n	801be12 <_vfiprintf_r+0x1b6>
 801be30:	ab03      	add	r3, sp, #12
 801be32:	9300      	str	r3, [sp, #0]
 801be34:	4622      	mov	r2, r4
 801be36:	4b13      	ldr	r3, [pc, #76]	; (801be84 <_vfiprintf_r+0x228>)
 801be38:	a904      	add	r1, sp, #16
 801be3a:	4630      	mov	r0, r6
 801be3c:	f3af 8000 	nop.w
 801be40:	f1b0 3fff 	cmp.w	r0, #4294967295
 801be44:	4681      	mov	r9, r0
 801be46:	d1d5      	bne.n	801bdf4 <_vfiprintf_r+0x198>
 801be48:	89a3      	ldrh	r3, [r4, #12]
 801be4a:	065b      	lsls	r3, r3, #25
 801be4c:	f53f af7e 	bmi.w	801bd4c <_vfiprintf_r+0xf0>
 801be50:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be52:	e77d      	b.n	801bd50 <_vfiprintf_r+0xf4>
 801be54:	ab03      	add	r3, sp, #12
 801be56:	9300      	str	r3, [sp, #0]
 801be58:	4622      	mov	r2, r4
 801be5a:	4b0a      	ldr	r3, [pc, #40]	; (801be84 <_vfiprintf_r+0x228>)
 801be5c:	a904      	add	r1, sp, #16
 801be5e:	4630      	mov	r0, r6
 801be60:	f000 f888 	bl	801bf74 <_printf_i>
 801be64:	e7ec      	b.n	801be40 <_vfiprintf_r+0x1e4>
 801be66:	bf00      	nop
 801be68:	08020080 	.word	0x08020080
 801be6c:	08020028 	.word	0x08020028
 801be70:	080200a0 	.word	0x080200a0
 801be74:	08020060 	.word	0x08020060
 801be78:	0802002e 	.word	0x0802002e
 801be7c:	08020032 	.word	0x08020032
 801be80:	00000000 	.word	0x00000000
 801be84:	0801bc37 	.word	0x0801bc37

0801be88 <_printf_common>:
 801be88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be8c:	4691      	mov	r9, r2
 801be8e:	461f      	mov	r7, r3
 801be90:	688a      	ldr	r2, [r1, #8]
 801be92:	690b      	ldr	r3, [r1, #16]
 801be94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801be98:	4293      	cmp	r3, r2
 801be9a:	bfb8      	it	lt
 801be9c:	4613      	movlt	r3, r2
 801be9e:	f8c9 3000 	str.w	r3, [r9]
 801bea2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bea6:	4606      	mov	r6, r0
 801bea8:	460c      	mov	r4, r1
 801beaa:	b112      	cbz	r2, 801beb2 <_printf_common+0x2a>
 801beac:	3301      	adds	r3, #1
 801beae:	f8c9 3000 	str.w	r3, [r9]
 801beb2:	6823      	ldr	r3, [r4, #0]
 801beb4:	0699      	lsls	r1, r3, #26
 801beb6:	bf42      	ittt	mi
 801beb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 801bebc:	3302      	addmi	r3, #2
 801bebe:	f8c9 3000 	strmi.w	r3, [r9]
 801bec2:	6825      	ldr	r5, [r4, #0]
 801bec4:	f015 0506 	ands.w	r5, r5, #6
 801bec8:	d107      	bne.n	801beda <_printf_common+0x52>
 801beca:	f104 0a19 	add.w	sl, r4, #25
 801bece:	68e3      	ldr	r3, [r4, #12]
 801bed0:	f8d9 2000 	ldr.w	r2, [r9]
 801bed4:	1a9b      	subs	r3, r3, r2
 801bed6:	42ab      	cmp	r3, r5
 801bed8:	dc28      	bgt.n	801bf2c <_printf_common+0xa4>
 801beda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801bede:	6822      	ldr	r2, [r4, #0]
 801bee0:	3300      	adds	r3, #0
 801bee2:	bf18      	it	ne
 801bee4:	2301      	movne	r3, #1
 801bee6:	0692      	lsls	r2, r2, #26
 801bee8:	d42d      	bmi.n	801bf46 <_printf_common+0xbe>
 801beea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801beee:	4639      	mov	r1, r7
 801bef0:	4630      	mov	r0, r6
 801bef2:	47c0      	blx	r8
 801bef4:	3001      	adds	r0, #1
 801bef6:	d020      	beq.n	801bf3a <_printf_common+0xb2>
 801bef8:	6823      	ldr	r3, [r4, #0]
 801befa:	68e5      	ldr	r5, [r4, #12]
 801befc:	f8d9 2000 	ldr.w	r2, [r9]
 801bf00:	f003 0306 	and.w	r3, r3, #6
 801bf04:	2b04      	cmp	r3, #4
 801bf06:	bf08      	it	eq
 801bf08:	1aad      	subeq	r5, r5, r2
 801bf0a:	68a3      	ldr	r3, [r4, #8]
 801bf0c:	6922      	ldr	r2, [r4, #16]
 801bf0e:	bf0c      	ite	eq
 801bf10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bf14:	2500      	movne	r5, #0
 801bf16:	4293      	cmp	r3, r2
 801bf18:	bfc4      	itt	gt
 801bf1a:	1a9b      	subgt	r3, r3, r2
 801bf1c:	18ed      	addgt	r5, r5, r3
 801bf1e:	f04f 0900 	mov.w	r9, #0
 801bf22:	341a      	adds	r4, #26
 801bf24:	454d      	cmp	r5, r9
 801bf26:	d11a      	bne.n	801bf5e <_printf_common+0xd6>
 801bf28:	2000      	movs	r0, #0
 801bf2a:	e008      	b.n	801bf3e <_printf_common+0xb6>
 801bf2c:	2301      	movs	r3, #1
 801bf2e:	4652      	mov	r2, sl
 801bf30:	4639      	mov	r1, r7
 801bf32:	4630      	mov	r0, r6
 801bf34:	47c0      	blx	r8
 801bf36:	3001      	adds	r0, #1
 801bf38:	d103      	bne.n	801bf42 <_printf_common+0xba>
 801bf3a:	f04f 30ff 	mov.w	r0, #4294967295
 801bf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf42:	3501      	adds	r5, #1
 801bf44:	e7c3      	b.n	801bece <_printf_common+0x46>
 801bf46:	18e1      	adds	r1, r4, r3
 801bf48:	1c5a      	adds	r2, r3, #1
 801bf4a:	2030      	movs	r0, #48	; 0x30
 801bf4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bf50:	4422      	add	r2, r4
 801bf52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bf56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bf5a:	3302      	adds	r3, #2
 801bf5c:	e7c5      	b.n	801beea <_printf_common+0x62>
 801bf5e:	2301      	movs	r3, #1
 801bf60:	4622      	mov	r2, r4
 801bf62:	4639      	mov	r1, r7
 801bf64:	4630      	mov	r0, r6
 801bf66:	47c0      	blx	r8
 801bf68:	3001      	adds	r0, #1
 801bf6a:	d0e6      	beq.n	801bf3a <_printf_common+0xb2>
 801bf6c:	f109 0901 	add.w	r9, r9, #1
 801bf70:	e7d8      	b.n	801bf24 <_printf_common+0x9c>
	...

0801bf74 <_printf_i>:
 801bf74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801bf7c:	460c      	mov	r4, r1
 801bf7e:	7e09      	ldrb	r1, [r1, #24]
 801bf80:	b085      	sub	sp, #20
 801bf82:	296e      	cmp	r1, #110	; 0x6e
 801bf84:	4617      	mov	r7, r2
 801bf86:	4606      	mov	r6, r0
 801bf88:	4698      	mov	r8, r3
 801bf8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bf8c:	f000 80b3 	beq.w	801c0f6 <_printf_i+0x182>
 801bf90:	d822      	bhi.n	801bfd8 <_printf_i+0x64>
 801bf92:	2963      	cmp	r1, #99	; 0x63
 801bf94:	d036      	beq.n	801c004 <_printf_i+0x90>
 801bf96:	d80a      	bhi.n	801bfae <_printf_i+0x3a>
 801bf98:	2900      	cmp	r1, #0
 801bf9a:	f000 80b9 	beq.w	801c110 <_printf_i+0x19c>
 801bf9e:	2958      	cmp	r1, #88	; 0x58
 801bfa0:	f000 8083 	beq.w	801c0aa <_printf_i+0x136>
 801bfa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bfa8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801bfac:	e032      	b.n	801c014 <_printf_i+0xa0>
 801bfae:	2964      	cmp	r1, #100	; 0x64
 801bfb0:	d001      	beq.n	801bfb6 <_printf_i+0x42>
 801bfb2:	2969      	cmp	r1, #105	; 0x69
 801bfb4:	d1f6      	bne.n	801bfa4 <_printf_i+0x30>
 801bfb6:	6820      	ldr	r0, [r4, #0]
 801bfb8:	6813      	ldr	r3, [r2, #0]
 801bfba:	0605      	lsls	r5, r0, #24
 801bfbc:	f103 0104 	add.w	r1, r3, #4
 801bfc0:	d52a      	bpl.n	801c018 <_printf_i+0xa4>
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	6011      	str	r1, [r2, #0]
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	da03      	bge.n	801bfd2 <_printf_i+0x5e>
 801bfca:	222d      	movs	r2, #45	; 0x2d
 801bfcc:	425b      	negs	r3, r3
 801bfce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801bfd2:	486f      	ldr	r0, [pc, #444]	; (801c190 <_printf_i+0x21c>)
 801bfd4:	220a      	movs	r2, #10
 801bfd6:	e039      	b.n	801c04c <_printf_i+0xd8>
 801bfd8:	2973      	cmp	r1, #115	; 0x73
 801bfda:	f000 809d 	beq.w	801c118 <_printf_i+0x1a4>
 801bfde:	d808      	bhi.n	801bff2 <_printf_i+0x7e>
 801bfe0:	296f      	cmp	r1, #111	; 0x6f
 801bfe2:	d020      	beq.n	801c026 <_printf_i+0xb2>
 801bfe4:	2970      	cmp	r1, #112	; 0x70
 801bfe6:	d1dd      	bne.n	801bfa4 <_printf_i+0x30>
 801bfe8:	6823      	ldr	r3, [r4, #0]
 801bfea:	f043 0320 	orr.w	r3, r3, #32
 801bfee:	6023      	str	r3, [r4, #0]
 801bff0:	e003      	b.n	801bffa <_printf_i+0x86>
 801bff2:	2975      	cmp	r1, #117	; 0x75
 801bff4:	d017      	beq.n	801c026 <_printf_i+0xb2>
 801bff6:	2978      	cmp	r1, #120	; 0x78
 801bff8:	d1d4      	bne.n	801bfa4 <_printf_i+0x30>
 801bffa:	2378      	movs	r3, #120	; 0x78
 801bffc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c000:	4864      	ldr	r0, [pc, #400]	; (801c194 <_printf_i+0x220>)
 801c002:	e055      	b.n	801c0b0 <_printf_i+0x13c>
 801c004:	6813      	ldr	r3, [r2, #0]
 801c006:	1d19      	adds	r1, r3, #4
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	6011      	str	r1, [r2, #0]
 801c00c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c014:	2301      	movs	r3, #1
 801c016:	e08c      	b.n	801c132 <_printf_i+0x1be>
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	6011      	str	r1, [r2, #0]
 801c01c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c020:	bf18      	it	ne
 801c022:	b21b      	sxthne	r3, r3
 801c024:	e7cf      	b.n	801bfc6 <_printf_i+0x52>
 801c026:	6813      	ldr	r3, [r2, #0]
 801c028:	6825      	ldr	r5, [r4, #0]
 801c02a:	1d18      	adds	r0, r3, #4
 801c02c:	6010      	str	r0, [r2, #0]
 801c02e:	0628      	lsls	r0, r5, #24
 801c030:	d501      	bpl.n	801c036 <_printf_i+0xc2>
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	e002      	b.n	801c03c <_printf_i+0xc8>
 801c036:	0668      	lsls	r0, r5, #25
 801c038:	d5fb      	bpl.n	801c032 <_printf_i+0xbe>
 801c03a:	881b      	ldrh	r3, [r3, #0]
 801c03c:	4854      	ldr	r0, [pc, #336]	; (801c190 <_printf_i+0x21c>)
 801c03e:	296f      	cmp	r1, #111	; 0x6f
 801c040:	bf14      	ite	ne
 801c042:	220a      	movne	r2, #10
 801c044:	2208      	moveq	r2, #8
 801c046:	2100      	movs	r1, #0
 801c048:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c04c:	6865      	ldr	r5, [r4, #4]
 801c04e:	60a5      	str	r5, [r4, #8]
 801c050:	2d00      	cmp	r5, #0
 801c052:	f2c0 8095 	blt.w	801c180 <_printf_i+0x20c>
 801c056:	6821      	ldr	r1, [r4, #0]
 801c058:	f021 0104 	bic.w	r1, r1, #4
 801c05c:	6021      	str	r1, [r4, #0]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d13d      	bne.n	801c0de <_printf_i+0x16a>
 801c062:	2d00      	cmp	r5, #0
 801c064:	f040 808e 	bne.w	801c184 <_printf_i+0x210>
 801c068:	4665      	mov	r5, ip
 801c06a:	2a08      	cmp	r2, #8
 801c06c:	d10b      	bne.n	801c086 <_printf_i+0x112>
 801c06e:	6823      	ldr	r3, [r4, #0]
 801c070:	07db      	lsls	r3, r3, #31
 801c072:	d508      	bpl.n	801c086 <_printf_i+0x112>
 801c074:	6923      	ldr	r3, [r4, #16]
 801c076:	6862      	ldr	r2, [r4, #4]
 801c078:	429a      	cmp	r2, r3
 801c07a:	bfde      	ittt	le
 801c07c:	2330      	movle	r3, #48	; 0x30
 801c07e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c082:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c086:	ebac 0305 	sub.w	r3, ip, r5
 801c08a:	6123      	str	r3, [r4, #16]
 801c08c:	f8cd 8000 	str.w	r8, [sp]
 801c090:	463b      	mov	r3, r7
 801c092:	aa03      	add	r2, sp, #12
 801c094:	4621      	mov	r1, r4
 801c096:	4630      	mov	r0, r6
 801c098:	f7ff fef6 	bl	801be88 <_printf_common>
 801c09c:	3001      	adds	r0, #1
 801c09e:	d14d      	bne.n	801c13c <_printf_i+0x1c8>
 801c0a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c0a4:	b005      	add	sp, #20
 801c0a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0aa:	4839      	ldr	r0, [pc, #228]	; (801c190 <_printf_i+0x21c>)
 801c0ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801c0b0:	6813      	ldr	r3, [r2, #0]
 801c0b2:	6821      	ldr	r1, [r4, #0]
 801c0b4:	1d1d      	adds	r5, r3, #4
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	6015      	str	r5, [r2, #0]
 801c0ba:	060a      	lsls	r2, r1, #24
 801c0bc:	d50b      	bpl.n	801c0d6 <_printf_i+0x162>
 801c0be:	07ca      	lsls	r2, r1, #31
 801c0c0:	bf44      	itt	mi
 801c0c2:	f041 0120 	orrmi.w	r1, r1, #32
 801c0c6:	6021      	strmi	r1, [r4, #0]
 801c0c8:	b91b      	cbnz	r3, 801c0d2 <_printf_i+0x15e>
 801c0ca:	6822      	ldr	r2, [r4, #0]
 801c0cc:	f022 0220 	bic.w	r2, r2, #32
 801c0d0:	6022      	str	r2, [r4, #0]
 801c0d2:	2210      	movs	r2, #16
 801c0d4:	e7b7      	b.n	801c046 <_printf_i+0xd2>
 801c0d6:	064d      	lsls	r5, r1, #25
 801c0d8:	bf48      	it	mi
 801c0da:	b29b      	uxthmi	r3, r3
 801c0dc:	e7ef      	b.n	801c0be <_printf_i+0x14a>
 801c0de:	4665      	mov	r5, ip
 801c0e0:	fbb3 f1f2 	udiv	r1, r3, r2
 801c0e4:	fb02 3311 	mls	r3, r2, r1, r3
 801c0e8:	5cc3      	ldrb	r3, [r0, r3]
 801c0ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801c0ee:	460b      	mov	r3, r1
 801c0f0:	2900      	cmp	r1, #0
 801c0f2:	d1f5      	bne.n	801c0e0 <_printf_i+0x16c>
 801c0f4:	e7b9      	b.n	801c06a <_printf_i+0xf6>
 801c0f6:	6813      	ldr	r3, [r2, #0]
 801c0f8:	6825      	ldr	r5, [r4, #0]
 801c0fa:	6961      	ldr	r1, [r4, #20]
 801c0fc:	1d18      	adds	r0, r3, #4
 801c0fe:	6010      	str	r0, [r2, #0]
 801c100:	0628      	lsls	r0, r5, #24
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	d501      	bpl.n	801c10a <_printf_i+0x196>
 801c106:	6019      	str	r1, [r3, #0]
 801c108:	e002      	b.n	801c110 <_printf_i+0x19c>
 801c10a:	066a      	lsls	r2, r5, #25
 801c10c:	d5fb      	bpl.n	801c106 <_printf_i+0x192>
 801c10e:	8019      	strh	r1, [r3, #0]
 801c110:	2300      	movs	r3, #0
 801c112:	6123      	str	r3, [r4, #16]
 801c114:	4665      	mov	r5, ip
 801c116:	e7b9      	b.n	801c08c <_printf_i+0x118>
 801c118:	6813      	ldr	r3, [r2, #0]
 801c11a:	1d19      	adds	r1, r3, #4
 801c11c:	6011      	str	r1, [r2, #0]
 801c11e:	681d      	ldr	r5, [r3, #0]
 801c120:	6862      	ldr	r2, [r4, #4]
 801c122:	2100      	movs	r1, #0
 801c124:	4628      	mov	r0, r5
 801c126:	f7e4 f863 	bl	80001f0 <memchr>
 801c12a:	b108      	cbz	r0, 801c130 <_printf_i+0x1bc>
 801c12c:	1b40      	subs	r0, r0, r5
 801c12e:	6060      	str	r0, [r4, #4]
 801c130:	6863      	ldr	r3, [r4, #4]
 801c132:	6123      	str	r3, [r4, #16]
 801c134:	2300      	movs	r3, #0
 801c136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c13a:	e7a7      	b.n	801c08c <_printf_i+0x118>
 801c13c:	6923      	ldr	r3, [r4, #16]
 801c13e:	462a      	mov	r2, r5
 801c140:	4639      	mov	r1, r7
 801c142:	4630      	mov	r0, r6
 801c144:	47c0      	blx	r8
 801c146:	3001      	adds	r0, #1
 801c148:	d0aa      	beq.n	801c0a0 <_printf_i+0x12c>
 801c14a:	6823      	ldr	r3, [r4, #0]
 801c14c:	079b      	lsls	r3, r3, #30
 801c14e:	d413      	bmi.n	801c178 <_printf_i+0x204>
 801c150:	68e0      	ldr	r0, [r4, #12]
 801c152:	9b03      	ldr	r3, [sp, #12]
 801c154:	4298      	cmp	r0, r3
 801c156:	bfb8      	it	lt
 801c158:	4618      	movlt	r0, r3
 801c15a:	e7a3      	b.n	801c0a4 <_printf_i+0x130>
 801c15c:	2301      	movs	r3, #1
 801c15e:	464a      	mov	r2, r9
 801c160:	4639      	mov	r1, r7
 801c162:	4630      	mov	r0, r6
 801c164:	47c0      	blx	r8
 801c166:	3001      	adds	r0, #1
 801c168:	d09a      	beq.n	801c0a0 <_printf_i+0x12c>
 801c16a:	3501      	adds	r5, #1
 801c16c:	68e3      	ldr	r3, [r4, #12]
 801c16e:	9a03      	ldr	r2, [sp, #12]
 801c170:	1a9b      	subs	r3, r3, r2
 801c172:	42ab      	cmp	r3, r5
 801c174:	dcf2      	bgt.n	801c15c <_printf_i+0x1e8>
 801c176:	e7eb      	b.n	801c150 <_printf_i+0x1dc>
 801c178:	2500      	movs	r5, #0
 801c17a:	f104 0919 	add.w	r9, r4, #25
 801c17e:	e7f5      	b.n	801c16c <_printf_i+0x1f8>
 801c180:	2b00      	cmp	r3, #0
 801c182:	d1ac      	bne.n	801c0de <_printf_i+0x16a>
 801c184:	7803      	ldrb	r3, [r0, #0]
 801c186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c18a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c18e:	e76c      	b.n	801c06a <_printf_i+0xf6>
 801c190:	08020039 	.word	0x08020039
 801c194:	0802004a 	.word	0x0802004a

0801c198 <_sbrk_r>:
 801c198:	b538      	push	{r3, r4, r5, lr}
 801c19a:	4c06      	ldr	r4, [pc, #24]	; (801c1b4 <_sbrk_r+0x1c>)
 801c19c:	2300      	movs	r3, #0
 801c19e:	4605      	mov	r5, r0
 801c1a0:	4608      	mov	r0, r1
 801c1a2:	6023      	str	r3, [r4, #0]
 801c1a4:	f7e5 fb5c 	bl	8001860 <_sbrk>
 801c1a8:	1c43      	adds	r3, r0, #1
 801c1aa:	d102      	bne.n	801c1b2 <_sbrk_r+0x1a>
 801c1ac:	6823      	ldr	r3, [r4, #0]
 801c1ae:	b103      	cbz	r3, 801c1b2 <_sbrk_r+0x1a>
 801c1b0:	602b      	str	r3, [r5, #0]
 801c1b2:	bd38      	pop	{r3, r4, r5, pc}
 801c1b4:	2000645c 	.word	0x2000645c

0801c1b8 <_raise_r>:
 801c1b8:	291f      	cmp	r1, #31
 801c1ba:	b538      	push	{r3, r4, r5, lr}
 801c1bc:	4604      	mov	r4, r0
 801c1be:	460d      	mov	r5, r1
 801c1c0:	d904      	bls.n	801c1cc <_raise_r+0x14>
 801c1c2:	2316      	movs	r3, #22
 801c1c4:	6003      	str	r3, [r0, #0]
 801c1c6:	f04f 30ff 	mov.w	r0, #4294967295
 801c1ca:	bd38      	pop	{r3, r4, r5, pc}
 801c1cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c1ce:	b112      	cbz	r2, 801c1d6 <_raise_r+0x1e>
 801c1d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c1d4:	b94b      	cbnz	r3, 801c1ea <_raise_r+0x32>
 801c1d6:	4620      	mov	r0, r4
 801c1d8:	f000 f830 	bl	801c23c <_getpid_r>
 801c1dc:	462a      	mov	r2, r5
 801c1de:	4601      	mov	r1, r0
 801c1e0:	4620      	mov	r0, r4
 801c1e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c1e6:	f000 b817 	b.w	801c218 <_kill_r>
 801c1ea:	2b01      	cmp	r3, #1
 801c1ec:	d00a      	beq.n	801c204 <_raise_r+0x4c>
 801c1ee:	1c59      	adds	r1, r3, #1
 801c1f0:	d103      	bne.n	801c1fa <_raise_r+0x42>
 801c1f2:	2316      	movs	r3, #22
 801c1f4:	6003      	str	r3, [r0, #0]
 801c1f6:	2001      	movs	r0, #1
 801c1f8:	e7e7      	b.n	801c1ca <_raise_r+0x12>
 801c1fa:	2400      	movs	r4, #0
 801c1fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c200:	4628      	mov	r0, r5
 801c202:	4798      	blx	r3
 801c204:	2000      	movs	r0, #0
 801c206:	e7e0      	b.n	801c1ca <_raise_r+0x12>

0801c208 <raise>:
 801c208:	4b02      	ldr	r3, [pc, #8]	; (801c214 <raise+0xc>)
 801c20a:	4601      	mov	r1, r0
 801c20c:	6818      	ldr	r0, [r3, #0]
 801c20e:	f7ff bfd3 	b.w	801c1b8 <_raise_r>
 801c212:	bf00      	nop
 801c214:	200000ec 	.word	0x200000ec

0801c218 <_kill_r>:
 801c218:	b538      	push	{r3, r4, r5, lr}
 801c21a:	4c07      	ldr	r4, [pc, #28]	; (801c238 <_kill_r+0x20>)
 801c21c:	2300      	movs	r3, #0
 801c21e:	4605      	mov	r5, r0
 801c220:	4608      	mov	r0, r1
 801c222:	4611      	mov	r1, r2
 801c224:	6023      	str	r3, [r4, #0]
 801c226:	f7e5 fa93 	bl	8001750 <_kill>
 801c22a:	1c43      	adds	r3, r0, #1
 801c22c:	d102      	bne.n	801c234 <_kill_r+0x1c>
 801c22e:	6823      	ldr	r3, [r4, #0]
 801c230:	b103      	cbz	r3, 801c234 <_kill_r+0x1c>
 801c232:	602b      	str	r3, [r5, #0]
 801c234:	bd38      	pop	{r3, r4, r5, pc}
 801c236:	bf00      	nop
 801c238:	2000645c 	.word	0x2000645c

0801c23c <_getpid_r>:
 801c23c:	f7e5 ba80 	b.w	8001740 <_getpid>

0801c240 <__swbuf_r>:
 801c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c242:	460e      	mov	r6, r1
 801c244:	4614      	mov	r4, r2
 801c246:	4605      	mov	r5, r0
 801c248:	b118      	cbz	r0, 801c252 <__swbuf_r+0x12>
 801c24a:	6983      	ldr	r3, [r0, #24]
 801c24c:	b90b      	cbnz	r3, 801c252 <__swbuf_r+0x12>
 801c24e:	f000 fa0b 	bl	801c668 <__sinit>
 801c252:	4b21      	ldr	r3, [pc, #132]	; (801c2d8 <__swbuf_r+0x98>)
 801c254:	429c      	cmp	r4, r3
 801c256:	d12a      	bne.n	801c2ae <__swbuf_r+0x6e>
 801c258:	686c      	ldr	r4, [r5, #4]
 801c25a:	69a3      	ldr	r3, [r4, #24]
 801c25c:	60a3      	str	r3, [r4, #8]
 801c25e:	89a3      	ldrh	r3, [r4, #12]
 801c260:	071a      	lsls	r2, r3, #28
 801c262:	d52e      	bpl.n	801c2c2 <__swbuf_r+0x82>
 801c264:	6923      	ldr	r3, [r4, #16]
 801c266:	b363      	cbz	r3, 801c2c2 <__swbuf_r+0x82>
 801c268:	6923      	ldr	r3, [r4, #16]
 801c26a:	6820      	ldr	r0, [r4, #0]
 801c26c:	1ac0      	subs	r0, r0, r3
 801c26e:	6963      	ldr	r3, [r4, #20]
 801c270:	b2f6      	uxtb	r6, r6
 801c272:	4283      	cmp	r3, r0
 801c274:	4637      	mov	r7, r6
 801c276:	dc04      	bgt.n	801c282 <__swbuf_r+0x42>
 801c278:	4621      	mov	r1, r4
 801c27a:	4628      	mov	r0, r5
 801c27c:	f000 f98a 	bl	801c594 <_fflush_r>
 801c280:	bb28      	cbnz	r0, 801c2ce <__swbuf_r+0x8e>
 801c282:	68a3      	ldr	r3, [r4, #8]
 801c284:	3b01      	subs	r3, #1
 801c286:	60a3      	str	r3, [r4, #8]
 801c288:	6823      	ldr	r3, [r4, #0]
 801c28a:	1c5a      	adds	r2, r3, #1
 801c28c:	6022      	str	r2, [r4, #0]
 801c28e:	701e      	strb	r6, [r3, #0]
 801c290:	6963      	ldr	r3, [r4, #20]
 801c292:	3001      	adds	r0, #1
 801c294:	4283      	cmp	r3, r0
 801c296:	d004      	beq.n	801c2a2 <__swbuf_r+0x62>
 801c298:	89a3      	ldrh	r3, [r4, #12]
 801c29a:	07db      	lsls	r3, r3, #31
 801c29c:	d519      	bpl.n	801c2d2 <__swbuf_r+0x92>
 801c29e:	2e0a      	cmp	r6, #10
 801c2a0:	d117      	bne.n	801c2d2 <__swbuf_r+0x92>
 801c2a2:	4621      	mov	r1, r4
 801c2a4:	4628      	mov	r0, r5
 801c2a6:	f000 f975 	bl	801c594 <_fflush_r>
 801c2aa:	b190      	cbz	r0, 801c2d2 <__swbuf_r+0x92>
 801c2ac:	e00f      	b.n	801c2ce <__swbuf_r+0x8e>
 801c2ae:	4b0b      	ldr	r3, [pc, #44]	; (801c2dc <__swbuf_r+0x9c>)
 801c2b0:	429c      	cmp	r4, r3
 801c2b2:	d101      	bne.n	801c2b8 <__swbuf_r+0x78>
 801c2b4:	68ac      	ldr	r4, [r5, #8]
 801c2b6:	e7d0      	b.n	801c25a <__swbuf_r+0x1a>
 801c2b8:	4b09      	ldr	r3, [pc, #36]	; (801c2e0 <__swbuf_r+0xa0>)
 801c2ba:	429c      	cmp	r4, r3
 801c2bc:	bf08      	it	eq
 801c2be:	68ec      	ldreq	r4, [r5, #12]
 801c2c0:	e7cb      	b.n	801c25a <__swbuf_r+0x1a>
 801c2c2:	4621      	mov	r1, r4
 801c2c4:	4628      	mov	r0, r5
 801c2c6:	f000 f80d 	bl	801c2e4 <__swsetup_r>
 801c2ca:	2800      	cmp	r0, #0
 801c2cc:	d0cc      	beq.n	801c268 <__swbuf_r+0x28>
 801c2ce:	f04f 37ff 	mov.w	r7, #4294967295
 801c2d2:	4638      	mov	r0, r7
 801c2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2d6:	bf00      	nop
 801c2d8:	08020080 	.word	0x08020080
 801c2dc:	080200a0 	.word	0x080200a0
 801c2e0:	08020060 	.word	0x08020060

0801c2e4 <__swsetup_r>:
 801c2e4:	4b32      	ldr	r3, [pc, #200]	; (801c3b0 <__swsetup_r+0xcc>)
 801c2e6:	b570      	push	{r4, r5, r6, lr}
 801c2e8:	681d      	ldr	r5, [r3, #0]
 801c2ea:	4606      	mov	r6, r0
 801c2ec:	460c      	mov	r4, r1
 801c2ee:	b125      	cbz	r5, 801c2fa <__swsetup_r+0x16>
 801c2f0:	69ab      	ldr	r3, [r5, #24]
 801c2f2:	b913      	cbnz	r3, 801c2fa <__swsetup_r+0x16>
 801c2f4:	4628      	mov	r0, r5
 801c2f6:	f000 f9b7 	bl	801c668 <__sinit>
 801c2fa:	4b2e      	ldr	r3, [pc, #184]	; (801c3b4 <__swsetup_r+0xd0>)
 801c2fc:	429c      	cmp	r4, r3
 801c2fe:	d10f      	bne.n	801c320 <__swsetup_r+0x3c>
 801c300:	686c      	ldr	r4, [r5, #4]
 801c302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c306:	b29a      	uxth	r2, r3
 801c308:	0715      	lsls	r5, r2, #28
 801c30a:	d42c      	bmi.n	801c366 <__swsetup_r+0x82>
 801c30c:	06d0      	lsls	r0, r2, #27
 801c30e:	d411      	bmi.n	801c334 <__swsetup_r+0x50>
 801c310:	2209      	movs	r2, #9
 801c312:	6032      	str	r2, [r6, #0]
 801c314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c318:	81a3      	strh	r3, [r4, #12]
 801c31a:	f04f 30ff 	mov.w	r0, #4294967295
 801c31e:	e03e      	b.n	801c39e <__swsetup_r+0xba>
 801c320:	4b25      	ldr	r3, [pc, #148]	; (801c3b8 <__swsetup_r+0xd4>)
 801c322:	429c      	cmp	r4, r3
 801c324:	d101      	bne.n	801c32a <__swsetup_r+0x46>
 801c326:	68ac      	ldr	r4, [r5, #8]
 801c328:	e7eb      	b.n	801c302 <__swsetup_r+0x1e>
 801c32a:	4b24      	ldr	r3, [pc, #144]	; (801c3bc <__swsetup_r+0xd8>)
 801c32c:	429c      	cmp	r4, r3
 801c32e:	bf08      	it	eq
 801c330:	68ec      	ldreq	r4, [r5, #12]
 801c332:	e7e6      	b.n	801c302 <__swsetup_r+0x1e>
 801c334:	0751      	lsls	r1, r2, #29
 801c336:	d512      	bpl.n	801c35e <__swsetup_r+0x7a>
 801c338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c33a:	b141      	cbz	r1, 801c34e <__swsetup_r+0x6a>
 801c33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c340:	4299      	cmp	r1, r3
 801c342:	d002      	beq.n	801c34a <__swsetup_r+0x66>
 801c344:	4630      	mov	r0, r6
 801c346:	f7ff fbb7 	bl	801bab8 <_free_r>
 801c34a:	2300      	movs	r3, #0
 801c34c:	6363      	str	r3, [r4, #52]	; 0x34
 801c34e:	89a3      	ldrh	r3, [r4, #12]
 801c350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c354:	81a3      	strh	r3, [r4, #12]
 801c356:	2300      	movs	r3, #0
 801c358:	6063      	str	r3, [r4, #4]
 801c35a:	6923      	ldr	r3, [r4, #16]
 801c35c:	6023      	str	r3, [r4, #0]
 801c35e:	89a3      	ldrh	r3, [r4, #12]
 801c360:	f043 0308 	orr.w	r3, r3, #8
 801c364:	81a3      	strh	r3, [r4, #12]
 801c366:	6923      	ldr	r3, [r4, #16]
 801c368:	b94b      	cbnz	r3, 801c37e <__swsetup_r+0x9a>
 801c36a:	89a3      	ldrh	r3, [r4, #12]
 801c36c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c374:	d003      	beq.n	801c37e <__swsetup_r+0x9a>
 801c376:	4621      	mov	r1, r4
 801c378:	4630      	mov	r0, r6
 801c37a:	f000 fa23 	bl	801c7c4 <__smakebuf_r>
 801c37e:	89a2      	ldrh	r2, [r4, #12]
 801c380:	f012 0301 	ands.w	r3, r2, #1
 801c384:	d00c      	beq.n	801c3a0 <__swsetup_r+0xbc>
 801c386:	2300      	movs	r3, #0
 801c388:	60a3      	str	r3, [r4, #8]
 801c38a:	6963      	ldr	r3, [r4, #20]
 801c38c:	425b      	negs	r3, r3
 801c38e:	61a3      	str	r3, [r4, #24]
 801c390:	6923      	ldr	r3, [r4, #16]
 801c392:	b953      	cbnz	r3, 801c3aa <__swsetup_r+0xc6>
 801c394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c398:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801c39c:	d1ba      	bne.n	801c314 <__swsetup_r+0x30>
 801c39e:	bd70      	pop	{r4, r5, r6, pc}
 801c3a0:	0792      	lsls	r2, r2, #30
 801c3a2:	bf58      	it	pl
 801c3a4:	6963      	ldrpl	r3, [r4, #20]
 801c3a6:	60a3      	str	r3, [r4, #8]
 801c3a8:	e7f2      	b.n	801c390 <__swsetup_r+0xac>
 801c3aa:	2000      	movs	r0, #0
 801c3ac:	e7f7      	b.n	801c39e <__swsetup_r+0xba>
 801c3ae:	bf00      	nop
 801c3b0:	200000ec 	.word	0x200000ec
 801c3b4:	08020080 	.word	0x08020080
 801c3b8:	080200a0 	.word	0x080200a0
 801c3bc:	08020060 	.word	0x08020060

0801c3c0 <__register_exitproc>:
 801c3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c3c4:	4d2c      	ldr	r5, [pc, #176]	; (801c478 <__register_exitproc+0xb8>)
 801c3c6:	682c      	ldr	r4, [r5, #0]
 801c3c8:	4607      	mov	r7, r0
 801c3ca:	460e      	mov	r6, r1
 801c3cc:	4691      	mov	r9, r2
 801c3ce:	4698      	mov	r8, r3
 801c3d0:	b934      	cbnz	r4, 801c3e0 <__register_exitproc+0x20>
 801c3d2:	4b2a      	ldr	r3, [pc, #168]	; (801c47c <__register_exitproc+0xbc>)
 801c3d4:	4c2a      	ldr	r4, [pc, #168]	; (801c480 <__register_exitproc+0xc0>)
 801c3d6:	602c      	str	r4, [r5, #0]
 801c3d8:	b113      	cbz	r3, 801c3e0 <__register_exitproc+0x20>
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801c3e0:	6863      	ldr	r3, [r4, #4]
 801c3e2:	2b1f      	cmp	r3, #31
 801c3e4:	dd3d      	ble.n	801c462 <__register_exitproc+0xa2>
 801c3e6:	4b27      	ldr	r3, [pc, #156]	; (801c484 <__register_exitproc+0xc4>)
 801c3e8:	b91b      	cbnz	r3, 801c3f2 <__register_exitproc+0x32>
 801c3ea:	f04f 30ff 	mov.w	r0, #4294967295
 801c3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3f2:	208c      	movs	r0, #140	; 0x8c
 801c3f4:	f7ff fb3c 	bl	801ba70 <malloc>
 801c3f8:	4604      	mov	r4, r0
 801c3fa:	2800      	cmp	r0, #0
 801c3fc:	d0f5      	beq.n	801c3ea <__register_exitproc+0x2a>
 801c3fe:	2300      	movs	r3, #0
 801c400:	682a      	ldr	r2, [r5, #0]
 801c402:	6002      	str	r2, [r0, #0]
 801c404:	6043      	str	r3, [r0, #4]
 801c406:	6028      	str	r0, [r5, #0]
 801c408:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801c40c:	b30f      	cbz	r7, 801c452 <__register_exitproc+0x92>
 801c40e:	f44f 7084 	mov.w	r0, #264	; 0x108
 801c412:	f7ff fb2d 	bl	801ba70 <malloc>
 801c416:	2800      	cmp	r0, #0
 801c418:	d0e7      	beq.n	801c3ea <__register_exitproc+0x2a>
 801c41a:	2300      	movs	r3, #0
 801c41c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801c420:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801c424:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801c428:	6862      	ldr	r2, [r4, #4]
 801c42a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801c42e:	2301      	movs	r3, #1
 801c430:	4093      	lsls	r3, r2
 801c432:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801c436:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801c43a:	431a      	orrs	r2, r3
 801c43c:	2f02      	cmp	r7, #2
 801c43e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801c442:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801c446:	bf02      	ittt	eq
 801c448:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801c44c:	4313      	orreq	r3, r2
 801c44e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801c452:	6863      	ldr	r3, [r4, #4]
 801c454:	1c5a      	adds	r2, r3, #1
 801c456:	3302      	adds	r3, #2
 801c458:	6062      	str	r2, [r4, #4]
 801c45a:	2000      	movs	r0, #0
 801c45c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801c460:	e7c5      	b.n	801c3ee <__register_exitproc+0x2e>
 801c462:	2f00      	cmp	r7, #0
 801c464:	d0f5      	beq.n	801c452 <__register_exitproc+0x92>
 801c466:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801c46a:	2800      	cmp	r0, #0
 801c46c:	d1dc      	bne.n	801c428 <__register_exitproc+0x68>
 801c46e:	4b05      	ldr	r3, [pc, #20]	; (801c484 <__register_exitproc+0xc4>)
 801c470:	2b00      	cmp	r3, #0
 801c472:	d0ba      	beq.n	801c3ea <__register_exitproc+0x2a>
 801c474:	e7cb      	b.n	801c40e <__register_exitproc+0x4e>
 801c476:	bf00      	nop
 801c478:	200061bc 	.word	0x200061bc
 801c47c:	0802005c 	.word	0x0802005c
 801c480:	20006130 	.word	0x20006130
 801c484:	0801ba71 	.word	0x0801ba71

0801c488 <__sflush_r>:
 801c488:	898a      	ldrh	r2, [r1, #12]
 801c48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c48e:	4605      	mov	r5, r0
 801c490:	0710      	lsls	r0, r2, #28
 801c492:	460c      	mov	r4, r1
 801c494:	d458      	bmi.n	801c548 <__sflush_r+0xc0>
 801c496:	684b      	ldr	r3, [r1, #4]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	dc05      	bgt.n	801c4a8 <__sflush_r+0x20>
 801c49c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	dc02      	bgt.n	801c4a8 <__sflush_r+0x20>
 801c4a2:	2000      	movs	r0, #0
 801c4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c4aa:	2e00      	cmp	r6, #0
 801c4ac:	d0f9      	beq.n	801c4a2 <__sflush_r+0x1a>
 801c4ae:	2300      	movs	r3, #0
 801c4b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c4b4:	682f      	ldr	r7, [r5, #0]
 801c4b6:	6a21      	ldr	r1, [r4, #32]
 801c4b8:	602b      	str	r3, [r5, #0]
 801c4ba:	d032      	beq.n	801c522 <__sflush_r+0x9a>
 801c4bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c4be:	89a3      	ldrh	r3, [r4, #12]
 801c4c0:	075a      	lsls	r2, r3, #29
 801c4c2:	d505      	bpl.n	801c4d0 <__sflush_r+0x48>
 801c4c4:	6863      	ldr	r3, [r4, #4]
 801c4c6:	1ac0      	subs	r0, r0, r3
 801c4c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c4ca:	b10b      	cbz	r3, 801c4d0 <__sflush_r+0x48>
 801c4cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c4ce:	1ac0      	subs	r0, r0, r3
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	4602      	mov	r2, r0
 801c4d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c4d6:	6a21      	ldr	r1, [r4, #32]
 801c4d8:	4628      	mov	r0, r5
 801c4da:	47b0      	blx	r6
 801c4dc:	1c43      	adds	r3, r0, #1
 801c4de:	89a3      	ldrh	r3, [r4, #12]
 801c4e0:	d106      	bne.n	801c4f0 <__sflush_r+0x68>
 801c4e2:	6829      	ldr	r1, [r5, #0]
 801c4e4:	291d      	cmp	r1, #29
 801c4e6:	d848      	bhi.n	801c57a <__sflush_r+0xf2>
 801c4e8:	4a29      	ldr	r2, [pc, #164]	; (801c590 <__sflush_r+0x108>)
 801c4ea:	40ca      	lsrs	r2, r1
 801c4ec:	07d6      	lsls	r6, r2, #31
 801c4ee:	d544      	bpl.n	801c57a <__sflush_r+0xf2>
 801c4f0:	2200      	movs	r2, #0
 801c4f2:	6062      	str	r2, [r4, #4]
 801c4f4:	04d9      	lsls	r1, r3, #19
 801c4f6:	6922      	ldr	r2, [r4, #16]
 801c4f8:	6022      	str	r2, [r4, #0]
 801c4fa:	d504      	bpl.n	801c506 <__sflush_r+0x7e>
 801c4fc:	1c42      	adds	r2, r0, #1
 801c4fe:	d101      	bne.n	801c504 <__sflush_r+0x7c>
 801c500:	682b      	ldr	r3, [r5, #0]
 801c502:	b903      	cbnz	r3, 801c506 <__sflush_r+0x7e>
 801c504:	6560      	str	r0, [r4, #84]	; 0x54
 801c506:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c508:	602f      	str	r7, [r5, #0]
 801c50a:	2900      	cmp	r1, #0
 801c50c:	d0c9      	beq.n	801c4a2 <__sflush_r+0x1a>
 801c50e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c512:	4299      	cmp	r1, r3
 801c514:	d002      	beq.n	801c51c <__sflush_r+0x94>
 801c516:	4628      	mov	r0, r5
 801c518:	f7ff face 	bl	801bab8 <_free_r>
 801c51c:	2000      	movs	r0, #0
 801c51e:	6360      	str	r0, [r4, #52]	; 0x34
 801c520:	e7c0      	b.n	801c4a4 <__sflush_r+0x1c>
 801c522:	2301      	movs	r3, #1
 801c524:	4628      	mov	r0, r5
 801c526:	47b0      	blx	r6
 801c528:	1c41      	adds	r1, r0, #1
 801c52a:	d1c8      	bne.n	801c4be <__sflush_r+0x36>
 801c52c:	682b      	ldr	r3, [r5, #0]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d0c5      	beq.n	801c4be <__sflush_r+0x36>
 801c532:	2b1d      	cmp	r3, #29
 801c534:	d001      	beq.n	801c53a <__sflush_r+0xb2>
 801c536:	2b16      	cmp	r3, #22
 801c538:	d101      	bne.n	801c53e <__sflush_r+0xb6>
 801c53a:	602f      	str	r7, [r5, #0]
 801c53c:	e7b1      	b.n	801c4a2 <__sflush_r+0x1a>
 801c53e:	89a3      	ldrh	r3, [r4, #12]
 801c540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c544:	81a3      	strh	r3, [r4, #12]
 801c546:	e7ad      	b.n	801c4a4 <__sflush_r+0x1c>
 801c548:	690f      	ldr	r7, [r1, #16]
 801c54a:	2f00      	cmp	r7, #0
 801c54c:	d0a9      	beq.n	801c4a2 <__sflush_r+0x1a>
 801c54e:	0793      	lsls	r3, r2, #30
 801c550:	680e      	ldr	r6, [r1, #0]
 801c552:	bf08      	it	eq
 801c554:	694b      	ldreq	r3, [r1, #20]
 801c556:	600f      	str	r7, [r1, #0]
 801c558:	bf18      	it	ne
 801c55a:	2300      	movne	r3, #0
 801c55c:	eba6 0807 	sub.w	r8, r6, r7
 801c560:	608b      	str	r3, [r1, #8]
 801c562:	f1b8 0f00 	cmp.w	r8, #0
 801c566:	dd9c      	ble.n	801c4a2 <__sflush_r+0x1a>
 801c568:	4643      	mov	r3, r8
 801c56a:	463a      	mov	r2, r7
 801c56c:	6a21      	ldr	r1, [r4, #32]
 801c56e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c570:	4628      	mov	r0, r5
 801c572:	47b0      	blx	r6
 801c574:	2800      	cmp	r0, #0
 801c576:	dc06      	bgt.n	801c586 <__sflush_r+0xfe>
 801c578:	89a3      	ldrh	r3, [r4, #12]
 801c57a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c57e:	81a3      	strh	r3, [r4, #12]
 801c580:	f04f 30ff 	mov.w	r0, #4294967295
 801c584:	e78e      	b.n	801c4a4 <__sflush_r+0x1c>
 801c586:	4407      	add	r7, r0
 801c588:	eba8 0800 	sub.w	r8, r8, r0
 801c58c:	e7e9      	b.n	801c562 <__sflush_r+0xda>
 801c58e:	bf00      	nop
 801c590:	20400001 	.word	0x20400001

0801c594 <_fflush_r>:
 801c594:	b538      	push	{r3, r4, r5, lr}
 801c596:	690b      	ldr	r3, [r1, #16]
 801c598:	4605      	mov	r5, r0
 801c59a:	460c      	mov	r4, r1
 801c59c:	b1db      	cbz	r3, 801c5d6 <_fflush_r+0x42>
 801c59e:	b118      	cbz	r0, 801c5a8 <_fflush_r+0x14>
 801c5a0:	6983      	ldr	r3, [r0, #24]
 801c5a2:	b90b      	cbnz	r3, 801c5a8 <_fflush_r+0x14>
 801c5a4:	f000 f860 	bl	801c668 <__sinit>
 801c5a8:	4b0c      	ldr	r3, [pc, #48]	; (801c5dc <_fflush_r+0x48>)
 801c5aa:	429c      	cmp	r4, r3
 801c5ac:	d109      	bne.n	801c5c2 <_fflush_r+0x2e>
 801c5ae:	686c      	ldr	r4, [r5, #4]
 801c5b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c5b4:	b17b      	cbz	r3, 801c5d6 <_fflush_r+0x42>
 801c5b6:	4621      	mov	r1, r4
 801c5b8:	4628      	mov	r0, r5
 801c5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c5be:	f7ff bf63 	b.w	801c488 <__sflush_r>
 801c5c2:	4b07      	ldr	r3, [pc, #28]	; (801c5e0 <_fflush_r+0x4c>)
 801c5c4:	429c      	cmp	r4, r3
 801c5c6:	d101      	bne.n	801c5cc <_fflush_r+0x38>
 801c5c8:	68ac      	ldr	r4, [r5, #8]
 801c5ca:	e7f1      	b.n	801c5b0 <_fflush_r+0x1c>
 801c5cc:	4b05      	ldr	r3, [pc, #20]	; (801c5e4 <_fflush_r+0x50>)
 801c5ce:	429c      	cmp	r4, r3
 801c5d0:	bf08      	it	eq
 801c5d2:	68ec      	ldreq	r4, [r5, #12]
 801c5d4:	e7ec      	b.n	801c5b0 <_fflush_r+0x1c>
 801c5d6:	2000      	movs	r0, #0
 801c5d8:	bd38      	pop	{r3, r4, r5, pc}
 801c5da:	bf00      	nop
 801c5dc:	08020080 	.word	0x08020080
 801c5e0:	080200a0 	.word	0x080200a0
 801c5e4:	08020060 	.word	0x08020060

0801c5e8 <std>:
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	b510      	push	{r4, lr}
 801c5ec:	4604      	mov	r4, r0
 801c5ee:	e9c0 3300 	strd	r3, r3, [r0]
 801c5f2:	6083      	str	r3, [r0, #8]
 801c5f4:	8181      	strh	r1, [r0, #12]
 801c5f6:	6643      	str	r3, [r0, #100]	; 0x64
 801c5f8:	81c2      	strh	r2, [r0, #14]
 801c5fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c5fe:	6183      	str	r3, [r0, #24]
 801c600:	4619      	mov	r1, r3
 801c602:	2208      	movs	r2, #8
 801c604:	305c      	adds	r0, #92	; 0x5c
 801c606:	f7ff fa4e 	bl	801baa6 <memset>
 801c60a:	4b05      	ldr	r3, [pc, #20]	; (801c620 <std+0x38>)
 801c60c:	6263      	str	r3, [r4, #36]	; 0x24
 801c60e:	4b05      	ldr	r3, [pc, #20]	; (801c624 <std+0x3c>)
 801c610:	62a3      	str	r3, [r4, #40]	; 0x28
 801c612:	4b05      	ldr	r3, [pc, #20]	; (801c628 <std+0x40>)
 801c614:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c616:	4b05      	ldr	r3, [pc, #20]	; (801c62c <std+0x44>)
 801c618:	6224      	str	r4, [r4, #32]
 801c61a:	6323      	str	r3, [r4, #48]	; 0x30
 801c61c:	bd10      	pop	{r4, pc}
 801c61e:	bf00      	nop
 801c620:	0801c849 	.word	0x0801c849
 801c624:	0801c86b 	.word	0x0801c86b
 801c628:	0801c8a3 	.word	0x0801c8a3
 801c62c:	0801c8c7 	.word	0x0801c8c7

0801c630 <_cleanup_r>:
 801c630:	4901      	ldr	r1, [pc, #4]	; (801c638 <_cleanup_r+0x8>)
 801c632:	f000 b885 	b.w	801c740 <_fwalk_reent>
 801c636:	bf00      	nop
 801c638:	0801c595 	.word	0x0801c595

0801c63c <__sfmoreglue>:
 801c63c:	b570      	push	{r4, r5, r6, lr}
 801c63e:	1e4a      	subs	r2, r1, #1
 801c640:	2568      	movs	r5, #104	; 0x68
 801c642:	4355      	muls	r5, r2
 801c644:	460e      	mov	r6, r1
 801c646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c64a:	f7ff fa83 	bl	801bb54 <_malloc_r>
 801c64e:	4604      	mov	r4, r0
 801c650:	b140      	cbz	r0, 801c664 <__sfmoreglue+0x28>
 801c652:	2100      	movs	r1, #0
 801c654:	e9c0 1600 	strd	r1, r6, [r0]
 801c658:	300c      	adds	r0, #12
 801c65a:	60a0      	str	r0, [r4, #8]
 801c65c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c660:	f7ff fa21 	bl	801baa6 <memset>
 801c664:	4620      	mov	r0, r4
 801c666:	bd70      	pop	{r4, r5, r6, pc}

0801c668 <__sinit>:
 801c668:	6983      	ldr	r3, [r0, #24]
 801c66a:	b510      	push	{r4, lr}
 801c66c:	4604      	mov	r4, r0
 801c66e:	bb33      	cbnz	r3, 801c6be <__sinit+0x56>
 801c670:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801c674:	6503      	str	r3, [r0, #80]	; 0x50
 801c676:	4b12      	ldr	r3, [pc, #72]	; (801c6c0 <__sinit+0x58>)
 801c678:	4a12      	ldr	r2, [pc, #72]	; (801c6c4 <__sinit+0x5c>)
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	6282      	str	r2, [r0, #40]	; 0x28
 801c67e:	4298      	cmp	r0, r3
 801c680:	bf04      	itt	eq
 801c682:	2301      	moveq	r3, #1
 801c684:	6183      	streq	r3, [r0, #24]
 801c686:	f000 f81f 	bl	801c6c8 <__sfp>
 801c68a:	6060      	str	r0, [r4, #4]
 801c68c:	4620      	mov	r0, r4
 801c68e:	f000 f81b 	bl	801c6c8 <__sfp>
 801c692:	60a0      	str	r0, [r4, #8]
 801c694:	4620      	mov	r0, r4
 801c696:	f000 f817 	bl	801c6c8 <__sfp>
 801c69a:	2200      	movs	r2, #0
 801c69c:	60e0      	str	r0, [r4, #12]
 801c69e:	2104      	movs	r1, #4
 801c6a0:	6860      	ldr	r0, [r4, #4]
 801c6a2:	f7ff ffa1 	bl	801c5e8 <std>
 801c6a6:	2201      	movs	r2, #1
 801c6a8:	2109      	movs	r1, #9
 801c6aa:	68a0      	ldr	r0, [r4, #8]
 801c6ac:	f7ff ff9c 	bl	801c5e8 <std>
 801c6b0:	2202      	movs	r2, #2
 801c6b2:	2112      	movs	r1, #18
 801c6b4:	68e0      	ldr	r0, [r4, #12]
 801c6b6:	f7ff ff97 	bl	801c5e8 <std>
 801c6ba:	2301      	movs	r3, #1
 801c6bc:	61a3      	str	r3, [r4, #24]
 801c6be:	bd10      	pop	{r4, pc}
 801c6c0:	08020024 	.word	0x08020024
 801c6c4:	0801c631 	.word	0x0801c631

0801c6c8 <__sfp>:
 801c6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6ca:	4b1b      	ldr	r3, [pc, #108]	; (801c738 <__sfp+0x70>)
 801c6cc:	681e      	ldr	r6, [r3, #0]
 801c6ce:	69b3      	ldr	r3, [r6, #24]
 801c6d0:	4607      	mov	r7, r0
 801c6d2:	b913      	cbnz	r3, 801c6da <__sfp+0x12>
 801c6d4:	4630      	mov	r0, r6
 801c6d6:	f7ff ffc7 	bl	801c668 <__sinit>
 801c6da:	3648      	adds	r6, #72	; 0x48
 801c6dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c6e0:	3b01      	subs	r3, #1
 801c6e2:	d503      	bpl.n	801c6ec <__sfp+0x24>
 801c6e4:	6833      	ldr	r3, [r6, #0]
 801c6e6:	b133      	cbz	r3, 801c6f6 <__sfp+0x2e>
 801c6e8:	6836      	ldr	r6, [r6, #0]
 801c6ea:	e7f7      	b.n	801c6dc <__sfp+0x14>
 801c6ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c6f0:	b16d      	cbz	r5, 801c70e <__sfp+0x46>
 801c6f2:	3468      	adds	r4, #104	; 0x68
 801c6f4:	e7f4      	b.n	801c6e0 <__sfp+0x18>
 801c6f6:	2104      	movs	r1, #4
 801c6f8:	4638      	mov	r0, r7
 801c6fa:	f7ff ff9f 	bl	801c63c <__sfmoreglue>
 801c6fe:	6030      	str	r0, [r6, #0]
 801c700:	2800      	cmp	r0, #0
 801c702:	d1f1      	bne.n	801c6e8 <__sfp+0x20>
 801c704:	230c      	movs	r3, #12
 801c706:	603b      	str	r3, [r7, #0]
 801c708:	4604      	mov	r4, r0
 801c70a:	4620      	mov	r0, r4
 801c70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c70e:	4b0b      	ldr	r3, [pc, #44]	; (801c73c <__sfp+0x74>)
 801c710:	6665      	str	r5, [r4, #100]	; 0x64
 801c712:	e9c4 5500 	strd	r5, r5, [r4]
 801c716:	60a5      	str	r5, [r4, #8]
 801c718:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801c71c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c720:	2208      	movs	r2, #8
 801c722:	4629      	mov	r1, r5
 801c724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c728:	f7ff f9bd 	bl	801baa6 <memset>
 801c72c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c734:	e7e9      	b.n	801c70a <__sfp+0x42>
 801c736:	bf00      	nop
 801c738:	08020024 	.word	0x08020024
 801c73c:	ffff0001 	.word	0xffff0001

0801c740 <_fwalk_reent>:
 801c740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c744:	4680      	mov	r8, r0
 801c746:	4689      	mov	r9, r1
 801c748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c74c:	2600      	movs	r6, #0
 801c74e:	b914      	cbnz	r4, 801c756 <_fwalk_reent+0x16>
 801c750:	4630      	mov	r0, r6
 801c752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c756:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801c75a:	3f01      	subs	r7, #1
 801c75c:	d501      	bpl.n	801c762 <_fwalk_reent+0x22>
 801c75e:	6824      	ldr	r4, [r4, #0]
 801c760:	e7f5      	b.n	801c74e <_fwalk_reent+0xe>
 801c762:	89ab      	ldrh	r3, [r5, #12]
 801c764:	2b01      	cmp	r3, #1
 801c766:	d907      	bls.n	801c778 <_fwalk_reent+0x38>
 801c768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c76c:	3301      	adds	r3, #1
 801c76e:	d003      	beq.n	801c778 <_fwalk_reent+0x38>
 801c770:	4629      	mov	r1, r5
 801c772:	4640      	mov	r0, r8
 801c774:	47c8      	blx	r9
 801c776:	4306      	orrs	r6, r0
 801c778:	3568      	adds	r5, #104	; 0x68
 801c77a:	e7ee      	b.n	801c75a <_fwalk_reent+0x1a>

0801c77c <__swhatbuf_r>:
 801c77c:	b570      	push	{r4, r5, r6, lr}
 801c77e:	460e      	mov	r6, r1
 801c780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c784:	2900      	cmp	r1, #0
 801c786:	b096      	sub	sp, #88	; 0x58
 801c788:	4614      	mov	r4, r2
 801c78a:	461d      	mov	r5, r3
 801c78c:	da07      	bge.n	801c79e <__swhatbuf_r+0x22>
 801c78e:	2300      	movs	r3, #0
 801c790:	602b      	str	r3, [r5, #0]
 801c792:	89b3      	ldrh	r3, [r6, #12]
 801c794:	061a      	lsls	r2, r3, #24
 801c796:	d410      	bmi.n	801c7ba <__swhatbuf_r+0x3e>
 801c798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c79c:	e00e      	b.n	801c7bc <__swhatbuf_r+0x40>
 801c79e:	466a      	mov	r2, sp
 801c7a0:	f000 f8b8 	bl	801c914 <_fstat_r>
 801c7a4:	2800      	cmp	r0, #0
 801c7a6:	dbf2      	blt.n	801c78e <__swhatbuf_r+0x12>
 801c7a8:	9a01      	ldr	r2, [sp, #4]
 801c7aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c7ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c7b2:	425a      	negs	r2, r3
 801c7b4:	415a      	adcs	r2, r3
 801c7b6:	602a      	str	r2, [r5, #0]
 801c7b8:	e7ee      	b.n	801c798 <__swhatbuf_r+0x1c>
 801c7ba:	2340      	movs	r3, #64	; 0x40
 801c7bc:	2000      	movs	r0, #0
 801c7be:	6023      	str	r3, [r4, #0]
 801c7c0:	b016      	add	sp, #88	; 0x58
 801c7c2:	bd70      	pop	{r4, r5, r6, pc}

0801c7c4 <__smakebuf_r>:
 801c7c4:	898b      	ldrh	r3, [r1, #12]
 801c7c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c7c8:	079d      	lsls	r5, r3, #30
 801c7ca:	4606      	mov	r6, r0
 801c7cc:	460c      	mov	r4, r1
 801c7ce:	d507      	bpl.n	801c7e0 <__smakebuf_r+0x1c>
 801c7d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c7d4:	6023      	str	r3, [r4, #0]
 801c7d6:	6123      	str	r3, [r4, #16]
 801c7d8:	2301      	movs	r3, #1
 801c7da:	6163      	str	r3, [r4, #20]
 801c7dc:	b002      	add	sp, #8
 801c7de:	bd70      	pop	{r4, r5, r6, pc}
 801c7e0:	ab01      	add	r3, sp, #4
 801c7e2:	466a      	mov	r2, sp
 801c7e4:	f7ff ffca 	bl	801c77c <__swhatbuf_r>
 801c7e8:	9900      	ldr	r1, [sp, #0]
 801c7ea:	4605      	mov	r5, r0
 801c7ec:	4630      	mov	r0, r6
 801c7ee:	f7ff f9b1 	bl	801bb54 <_malloc_r>
 801c7f2:	b948      	cbnz	r0, 801c808 <__smakebuf_r+0x44>
 801c7f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7f8:	059a      	lsls	r2, r3, #22
 801c7fa:	d4ef      	bmi.n	801c7dc <__smakebuf_r+0x18>
 801c7fc:	f023 0303 	bic.w	r3, r3, #3
 801c800:	f043 0302 	orr.w	r3, r3, #2
 801c804:	81a3      	strh	r3, [r4, #12]
 801c806:	e7e3      	b.n	801c7d0 <__smakebuf_r+0xc>
 801c808:	4b0d      	ldr	r3, [pc, #52]	; (801c840 <__smakebuf_r+0x7c>)
 801c80a:	62b3      	str	r3, [r6, #40]	; 0x28
 801c80c:	89a3      	ldrh	r3, [r4, #12]
 801c80e:	6020      	str	r0, [r4, #0]
 801c810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c814:	81a3      	strh	r3, [r4, #12]
 801c816:	9b00      	ldr	r3, [sp, #0]
 801c818:	6163      	str	r3, [r4, #20]
 801c81a:	9b01      	ldr	r3, [sp, #4]
 801c81c:	6120      	str	r0, [r4, #16]
 801c81e:	b15b      	cbz	r3, 801c838 <__smakebuf_r+0x74>
 801c820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c824:	4630      	mov	r0, r6
 801c826:	f000 f887 	bl	801c938 <_isatty_r>
 801c82a:	b128      	cbz	r0, 801c838 <__smakebuf_r+0x74>
 801c82c:	89a3      	ldrh	r3, [r4, #12]
 801c82e:	f023 0303 	bic.w	r3, r3, #3
 801c832:	f043 0301 	orr.w	r3, r3, #1
 801c836:	81a3      	strh	r3, [r4, #12]
 801c838:	89a3      	ldrh	r3, [r4, #12]
 801c83a:	431d      	orrs	r5, r3
 801c83c:	81a5      	strh	r5, [r4, #12]
 801c83e:	e7cd      	b.n	801c7dc <__smakebuf_r+0x18>
 801c840:	0801c631 	.word	0x0801c631

0801c844 <__malloc_lock>:
 801c844:	4770      	bx	lr

0801c846 <__malloc_unlock>:
 801c846:	4770      	bx	lr

0801c848 <__sread>:
 801c848:	b510      	push	{r4, lr}
 801c84a:	460c      	mov	r4, r1
 801c84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c850:	f000 f894 	bl	801c97c <_read_r>
 801c854:	2800      	cmp	r0, #0
 801c856:	bfab      	itete	ge
 801c858:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c85a:	89a3      	ldrhlt	r3, [r4, #12]
 801c85c:	181b      	addge	r3, r3, r0
 801c85e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c862:	bfac      	ite	ge
 801c864:	6563      	strge	r3, [r4, #84]	; 0x54
 801c866:	81a3      	strhlt	r3, [r4, #12]
 801c868:	bd10      	pop	{r4, pc}

0801c86a <__swrite>:
 801c86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c86e:	461f      	mov	r7, r3
 801c870:	898b      	ldrh	r3, [r1, #12]
 801c872:	05db      	lsls	r3, r3, #23
 801c874:	4605      	mov	r5, r0
 801c876:	460c      	mov	r4, r1
 801c878:	4616      	mov	r6, r2
 801c87a:	d505      	bpl.n	801c888 <__swrite+0x1e>
 801c87c:	2302      	movs	r3, #2
 801c87e:	2200      	movs	r2, #0
 801c880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c884:	f000 f868 	bl	801c958 <_lseek_r>
 801c888:	89a3      	ldrh	r3, [r4, #12]
 801c88a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c88e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c892:	81a3      	strh	r3, [r4, #12]
 801c894:	4632      	mov	r2, r6
 801c896:	463b      	mov	r3, r7
 801c898:	4628      	mov	r0, r5
 801c89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c89e:	f000 b817 	b.w	801c8d0 <_write_r>

0801c8a2 <__sseek>:
 801c8a2:	b510      	push	{r4, lr}
 801c8a4:	460c      	mov	r4, r1
 801c8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8aa:	f000 f855 	bl	801c958 <_lseek_r>
 801c8ae:	1c43      	adds	r3, r0, #1
 801c8b0:	89a3      	ldrh	r3, [r4, #12]
 801c8b2:	bf15      	itete	ne
 801c8b4:	6560      	strne	r0, [r4, #84]	; 0x54
 801c8b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c8ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c8be:	81a3      	strheq	r3, [r4, #12]
 801c8c0:	bf18      	it	ne
 801c8c2:	81a3      	strhne	r3, [r4, #12]
 801c8c4:	bd10      	pop	{r4, pc}

0801c8c6 <__sclose>:
 801c8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8ca:	f000 b813 	b.w	801c8f4 <_close_r>
	...

0801c8d0 <_write_r>:
 801c8d0:	b538      	push	{r3, r4, r5, lr}
 801c8d2:	4c07      	ldr	r4, [pc, #28]	; (801c8f0 <_write_r+0x20>)
 801c8d4:	4605      	mov	r5, r0
 801c8d6:	4608      	mov	r0, r1
 801c8d8:	4611      	mov	r1, r2
 801c8da:	2200      	movs	r2, #0
 801c8dc:	6022      	str	r2, [r4, #0]
 801c8de:	461a      	mov	r2, r3
 801c8e0:	f7e4 ff6d 	bl	80017be <_write>
 801c8e4:	1c43      	adds	r3, r0, #1
 801c8e6:	d102      	bne.n	801c8ee <_write_r+0x1e>
 801c8e8:	6823      	ldr	r3, [r4, #0]
 801c8ea:	b103      	cbz	r3, 801c8ee <_write_r+0x1e>
 801c8ec:	602b      	str	r3, [r5, #0]
 801c8ee:	bd38      	pop	{r3, r4, r5, pc}
 801c8f0:	2000645c 	.word	0x2000645c

0801c8f4 <_close_r>:
 801c8f4:	b538      	push	{r3, r4, r5, lr}
 801c8f6:	4c06      	ldr	r4, [pc, #24]	; (801c910 <_close_r+0x1c>)
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	4605      	mov	r5, r0
 801c8fc:	4608      	mov	r0, r1
 801c8fe:	6023      	str	r3, [r4, #0]
 801c900:	f7e4 ff79 	bl	80017f6 <_close>
 801c904:	1c43      	adds	r3, r0, #1
 801c906:	d102      	bne.n	801c90e <_close_r+0x1a>
 801c908:	6823      	ldr	r3, [r4, #0]
 801c90a:	b103      	cbz	r3, 801c90e <_close_r+0x1a>
 801c90c:	602b      	str	r3, [r5, #0]
 801c90e:	bd38      	pop	{r3, r4, r5, pc}
 801c910:	2000645c 	.word	0x2000645c

0801c914 <_fstat_r>:
 801c914:	b538      	push	{r3, r4, r5, lr}
 801c916:	4c07      	ldr	r4, [pc, #28]	; (801c934 <_fstat_r+0x20>)
 801c918:	2300      	movs	r3, #0
 801c91a:	4605      	mov	r5, r0
 801c91c:	4608      	mov	r0, r1
 801c91e:	4611      	mov	r1, r2
 801c920:	6023      	str	r3, [r4, #0]
 801c922:	f7e4 ff74 	bl	800180e <_fstat>
 801c926:	1c43      	adds	r3, r0, #1
 801c928:	d102      	bne.n	801c930 <_fstat_r+0x1c>
 801c92a:	6823      	ldr	r3, [r4, #0]
 801c92c:	b103      	cbz	r3, 801c930 <_fstat_r+0x1c>
 801c92e:	602b      	str	r3, [r5, #0]
 801c930:	bd38      	pop	{r3, r4, r5, pc}
 801c932:	bf00      	nop
 801c934:	2000645c 	.word	0x2000645c

0801c938 <_isatty_r>:
 801c938:	b538      	push	{r3, r4, r5, lr}
 801c93a:	4c06      	ldr	r4, [pc, #24]	; (801c954 <_isatty_r+0x1c>)
 801c93c:	2300      	movs	r3, #0
 801c93e:	4605      	mov	r5, r0
 801c940:	4608      	mov	r0, r1
 801c942:	6023      	str	r3, [r4, #0]
 801c944:	f7e4 ff73 	bl	800182e <_isatty>
 801c948:	1c43      	adds	r3, r0, #1
 801c94a:	d102      	bne.n	801c952 <_isatty_r+0x1a>
 801c94c:	6823      	ldr	r3, [r4, #0]
 801c94e:	b103      	cbz	r3, 801c952 <_isatty_r+0x1a>
 801c950:	602b      	str	r3, [r5, #0]
 801c952:	bd38      	pop	{r3, r4, r5, pc}
 801c954:	2000645c 	.word	0x2000645c

0801c958 <_lseek_r>:
 801c958:	b538      	push	{r3, r4, r5, lr}
 801c95a:	4c07      	ldr	r4, [pc, #28]	; (801c978 <_lseek_r+0x20>)
 801c95c:	4605      	mov	r5, r0
 801c95e:	4608      	mov	r0, r1
 801c960:	4611      	mov	r1, r2
 801c962:	2200      	movs	r2, #0
 801c964:	6022      	str	r2, [r4, #0]
 801c966:	461a      	mov	r2, r3
 801c968:	f7e4 ff6c 	bl	8001844 <_lseek>
 801c96c:	1c43      	adds	r3, r0, #1
 801c96e:	d102      	bne.n	801c976 <_lseek_r+0x1e>
 801c970:	6823      	ldr	r3, [r4, #0]
 801c972:	b103      	cbz	r3, 801c976 <_lseek_r+0x1e>
 801c974:	602b      	str	r3, [r5, #0]
 801c976:	bd38      	pop	{r3, r4, r5, pc}
 801c978:	2000645c 	.word	0x2000645c

0801c97c <_read_r>:
 801c97c:	b538      	push	{r3, r4, r5, lr}
 801c97e:	4c07      	ldr	r4, [pc, #28]	; (801c99c <_read_r+0x20>)
 801c980:	4605      	mov	r5, r0
 801c982:	4608      	mov	r0, r1
 801c984:	4611      	mov	r1, r2
 801c986:	2200      	movs	r2, #0
 801c988:	6022      	str	r2, [r4, #0]
 801c98a:	461a      	mov	r2, r3
 801c98c:	f7e4 fefa 	bl	8001784 <_read>
 801c990:	1c43      	adds	r3, r0, #1
 801c992:	d102      	bne.n	801c99a <_read_r+0x1e>
 801c994:	6823      	ldr	r3, [r4, #0]
 801c996:	b103      	cbz	r3, 801c99a <_read_r+0x1e>
 801c998:	602b      	str	r3, [r5, #0]
 801c99a:	bd38      	pop	{r3, r4, r5, pc}
 801c99c:	2000645c 	.word	0x2000645c

0801c9a0 <_init>:
 801c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9a2:	bf00      	nop
 801c9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c9a6:	bc08      	pop	{r3}
 801c9a8:	469e      	mov	lr, r3
 801c9aa:	4770      	bx	lr

0801c9ac <_fini>:
 801c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9ae:	bf00      	nop
 801c9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c9b2:	bc08      	pop	{r3}
 801c9b4:	469e      	mov	lr, r3
 801c9b6:	4770      	bx	lr
